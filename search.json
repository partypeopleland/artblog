[{"title":"VB6取得系統日期格式錯誤","url":"/artblog//vb6-get-system-date-format-error/","content":"<p>最近碰上一個狀況，原本系統採用 VB6 做成 COM+元件來處理業務邏輯<br>當中無可避免的會需要使用到系統日期，最終輸出的格式應該要是【yyyy-MM-dd】的形式。</p>\n<span id=\"more\"></span>\n\n<p>問題就在於轉換函式不清楚為何，無法正確轉換。<br>無法正確轉換的語法，是直接透過系統日期傳遞給 Format 處理</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"code\"><pre><span class=\"line\">Format(<span class=\"type\">date</span>$,<span class=\"string\">&quot;YYYY/MM/DD&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>這樣的語法在客戶端轉出來居然會是【2016-05-19】；而不是預想中的【2016&#x2F;05&#x2F;19】</p>\n<p>藉由同是拚了命的通靈問 GOOGLE 大神，最終查到一篇文章可能有關係<br>(傳送門：<a href=\"http://www.cnblogs.com/Ricky81317/archive/2011/05/26/2058185.html\">VB6 的 ActiveX 组件中一个诡异的日期格式化显示的问题</a>)</p>\n<p>實務上去變更了系統環境的設定，結果最終也是無效的<br>本來已經放棄治療了，沒想到公司同仁有著絕大的恆心與毅力(心臟)<br>再次通靈成功，查到要去修改註冊機碼，將日期分隔符號從原本的值，變更為我們要的斜線<br>然後就搞定了</p>\n<p>這邊我沒有跟他拿到他查到的資料來源，只知道解法是改機碼<br>但自己查了一下，似乎就是這一篇文章(傳送門：<a href=\"https://support.microsoft.com/zh-tw/kb/241671\">如何在 Windows 和 Windows NT 中設定的簡短日期格式</a>)內的東西<br>還有一篇參考資料(傳送門：<a href=\"https://social.technet.microsoft.com/Forums/windows/en-US/6a21b20a-4d04-460a-b672-968de78c6646/command-line-tools-to-completely-change-regioninput-language-for-default-user-and-welcome-screen?forum=winservergen\">Command line tools to completely change region&#x2F;input language for default user and welcome screen</a>)</p>\n<p>補充同事說明：除了 DEFAULT 要改之外，他也將系統其他人的身份註冊機碼也一起改了<br>至於那一招才對症，已經不想再用正式機來測試所以不清楚。但關鍵點就是那個 sDate 的機碼</p>\n<p><img src=\"/artblog/vb6-get-system-date-format-error/1463636397_90474.png\"></p>\n","categories":["vb6"]},{"title":"Synology NAS架設Git","url":"/artblog//synology-nas-git/","content":"<p>需要先弄個 Synology 的 NAS，透過 NAS 本身的介面可以很順利地安裝 Git Server，只是，通常事情沒有憨人想的那麼簡單，裝好了 Git Server 之後，會發現它內建的說明文件簡單的可憐，當然有可能是撰寫文件的人認為這些都是非常基本的事情，不用多做描述，只是從來沒有碰過 Linux 的我，一開始在 SSH 遠端登入到自己的 NAS 主機上就卡關卡很久了，後續又發現無法正確 push，還好有找到文章參考，順利使用。這邊記錄一下。</p>\n<span id=\"more\"></span>\n\n<p>這邊的測試專案叫做：BMISample，Git 目錄就照著命名為：git_repos，NAS 硬碟因為有兩棵，將位置放在第二顆所以是 volume2。</p>\n<blockquote>\n<p>所以最終的 repo 位址應該是 ssh:&#x2F;&#x2F;[使用者]@[主機位址]:[Port]&#x2F;volume2&#x2F;git_repos&#x2F;BMISample</p>\n</blockquote>\n<h2 id=\"建立-Git-的-Repos-目錄\"><a href=\"#建立-Git-的-Repos-目錄\" class=\"headerlink\" title=\"建立 Git 的 Repos 目錄\"></a>建立 Git 的 Repos 目錄</h2><p>透過 Putty 使用 admin 或 root 權限登入 NAS 主機後，建立一個目錄用來存放 repo</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir git_repos</span><br><span class=\"line\">cd git_repos</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"建立專案儲存庫\"><a href=\"#建立專案儲存庫\" class=\"headerlink\" title=\"建立專案儲存庫\"></a>建立專案儲存庫</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir BMISample</span><br><span class=\"line\">cd BMISample</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"初始化一個-Git\"><a href=\"#初始化一個-Git\" class=\"headerlink\" title=\"初始化一個 Git\"></a>初始化一個 Git</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git init --bare</span><br></pre></td></tr></table></figure>\n\n<p>加了 bare 的就是把檔案都放在當前目錄下，比較適合在沒有修改、開發的機器上，例如 Git Server，這樣做的好處是不需要將專案資料再複製一份最新的出來，會省一些些空間<br>此時 repo 已被建立，可透過下列指令將 repo 複製回來</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone ssh://[使用者]@[主機位址]:[Port]/volume2/git_repos/BMISample</span><br></pre></td></tr></table></figure>\n\n<p>但是會發現 push 過去的時候會發生錯誤<br><img src=\"/artblog/synology-nas-git/1455358864_09569.png\"></p>\n<p>透過指令變更權限，將整個 repo 權限指定給自己…這個是偷懶的作法，實際上應該要將每個目錄根據使用者逐一給權限，因為我自己用而已，就給他 chown -R 下去了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">chown -R art:users git_repos</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/synology-nas-git/1455358922_72569.png\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmod -R 775 git_repos</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/synology-nas-git/1455358928_14514.png\"></p>\n<p>搞定，透過 git push origin master 可成功提交 commit</p>\n<p><img src=\"/artblog/synology-nas-git/1455359027_77965.png\"></p>\n<p>這樣做比較麻煩的是，如果有新專案要做，就要重頭來一次</p>\n<ol>\n<li>登入 SSH，建立專案目錄</li>\n<li>執行 git init –bare</li>\n<li>修改權限 chown -R [使用者名稱]:users [專案目錄名稱]</li>\n<li>本機儲存庫執行 git clone ssh:&#x2F;&#x2F;[使用者名稱]@[主機位址]&#x2F;volume2&#x2F;git_repos&#x2F;[專案名稱]</li>\n<li>將檔案複製到本機 repo</li>\n<li>再將本機 repo git push origin master 去</li>\n</ol>\n<p>不過 VS2015 不支援 ssh 這樣開頭的位址，所以還是有點麻煩，如果要自己用自己的 NAS 來當作 Git 就變得很麻煩，還需要透過指令或 GUI 介面的 Git 去處理版控，不知道有沒有更方便的方法阿….</p>\n<p>不然之後就是要考慮學用 Linux 配上阿帕契來架，這樣就可以有 http 了…</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ol>\n<li><a href=\"http://www.cnblogs.com/softman11/p/3443229.html\">Synology DS213J 群晖 NAS git server 架设方法！</a></li>\n<li><a href=\"http://blog.xuite.net/yctseng/notes/35377315-git-init\">http://blog.xuite.net/yctseng/notes/35377315-git-init</a></li>\n</ol>\n","categories":["git"],"tags":["NAS"]},{"title":"Visual Studio無法開啟","url":"/artblog//visual-studio-cannot-open/","content":"<p>要開發的時候，最鬱悶的我想應該就是熱血已經起來，準備打開IDE好好的大展身手一下<br>結果IDE給你停在啟動畫面，怎麼樣他就是不給你進去… …</p>\n<span id=\"more\"></span>\n\n<p>其實事情是這樣的，使用了enterprice的試用評估，時間到了之後改回personal版本，後來幾天用的都挺好<br>某天突然想練一下window form，於是開啟專案之後，出現一個錯誤，接著vs當掉自動關閉</p>\n<p>他就再也開不起來了，其實以前碰過n次這種事情，每次都用重灌解決，耗時耗力又折磨人<br>一直努力下關鍵字，都不夠精準，無奈之下隨手打個【visual studio 無法啟動】<br>發現了一篇文章有提到用命令列下參數開啟visual studio<br>(傳送門：<a href=\"http://james670818.pixnet.net/blog/post/58349631\">[Visual Studio] Microsoft Visual Studio 2013 已停止工作　解決方案</a>)</p>\n<p>發現指令當然就是試一下，反正都開不起來了情況也不會更糟<br>令人訝異的是，打第一個指令，進入安全模式就很快速的開起來了<br>讓我多了信心，確定問題應該就是使用者的一些設定之類的吧~</p>\n<p>又找到了Bruce的一篇文章，發現了一個關鍵指令，看起來就是【清除使用者設定】<br>(傳送門：<a href=\"http://blog.kkbruce.net/2012/11/study-use-devenv-exe-help-debug-visual-studio.html#.V0UOw-J96Uk\">學習使用DEVENV.EXE幫VISUAL STUDIO偵錯</a>)</p>\n<p>直接執行後，VS2015順利開啟，比重灌好很多了</p>\n","categories":["工具"]},{"title":"前端工具安裝","url":"/artblog//frontend-tools-install/","content":"<p>因為真的很不常用，所以我肯定會忘記，整理前端工具的安裝方式，純粹記錄用來備查。免得曾經記得學過這些東西然後到最後都是忘光光。透過套件管理工具 Chocolatey 安裝 Git、NodeJs、Python，再透過 NPM 安裝 bower、gulp、yeoman、webpack 等前端自動化工具。至於使用方法嘛….科科….</p>\n<span id=\"more\"></span>\n\n<p>套件管理工具 Chocolatey</p>\n<p>透過套件管理工具來安裝前端開發會用到的東西，可以省掉你找檔案的麻煩，我是覺得還不錯啦。官方網站傳送門：<a href=\"https://chocolatey.org/\">Chocolatey</a></p>\n<p>我找了好久都找不到頁面上的 Download 按鈕，最後才發現網站上很貼心的直接提供了安裝的指令，應該就是英文不好大腦直接會略過的下意識反應吧</p>\n<p>使用系統管理者身分開啟命令提示字元視窗，輸入下列指令就可以自動安裝了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">@powershell -NoProfile -ExecutionPolicy Bypass -Command &quot;iex ((new-object net.webclient).DownloadString(&#x27;https://chocolatey.org/install.ps1&#x27;))&quot; &amp;&amp; SET PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin</span><br></pre></td></tr></table></figure>\n\n<p>安裝完成之後可以輸入 choco&#x2F;?看看 help 文件，直接輸入 choco 也可以查看版本</p>\n<h2 id=\"安裝-Git\"><a href=\"#安裝-Git\" class=\"headerlink\" title=\"安裝 Git\"></a>安裝 Git</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">choco install git</span><br></pre></td></tr></table></figure>\n\n<p>安裝過程會問你是否同意執行 script 等等的，如果不同意就不會安裝，當然也可以給參數-y 略過詢問，安裝完成之後也會在畫面上提示你安裝的 LOG 檔案放置在哪裡。</p>\n<p>安裝完畢 Git 後其實就可以安裝 cmder mini 版這個替代命令提示字元的小工具，詳情可以參考保哥的文章，我也不可能說得更詳細了，傳送門：<a href=\"http://blog.miniasp.com/post/2015/09/27/Useful-tool-Cmder.aspx\">介紹好用工具：Cmder ( 具有 Linux 溫度的 Windows 命令提示字元工具 )</a></p>\n<h2 id=\"安裝-NodeJs\"><a href=\"#安裝-NodeJs\" class=\"headerlink\" title=\"安裝 NodeJs\"></a>安裝 NodeJs</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">choco install nodejs</span><br></pre></td></tr></table></figure>\n\n<p>安裝時的提問習慣性將將程序中斷，想要輸入-y 略過詢問試試，結果 Ctrl+C 中斷之後再次安裝告訴我已經安裝過了，choco 很貼心地告訴我可以試一下強制安裝–force，再次安裝就成功了。</p>\n<h2 id=\"安裝-Python2\"><a href=\"#安裝-Python2\" class=\"headerlink\" title=\"安裝 Python2\"></a>安裝 Python2</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">choco install python2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"沒意外，很順利地安裝完成。\"><a href=\"#沒意外，很順利地安裝完成。\" class=\"headerlink\" title=\"沒意外，很順利地安裝完成。\"></a>沒意外，很順利地安裝完成。</h2><p>套件管理器：npm、bower</p>\n<p>網站骨架產生：yeoman</p>\n<p>前端工作流程自動化工具：gulp</p>\n<p>前端模組與相依性自動解析工具：webpack</p>\n<p>瀏覽器同步瀏覽工具：browsersync</p>\n<p>安裝上面一堆東西直接透過 nodejs 的套件管理工具 npm 來做</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g bower gulp yo webpack browser-sync</span><br></pre></td></tr></table></figure>\n\n<p>參數-g 代表安裝在全域模組，後面的就是套件的英文了，用空格隔開可以一次安裝很多個</p>\n<p>要看有安裝那些 npm 的全域模組可以透過指令來查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm list -g --dept=0</span><br></pre></td></tr></table></figure>\n","categories":["工具"]},{"title":"Git+Jenkins作自動化佈署","url":"/artblog//git-jenkins-auto-deploy/","content":"<p>一直以來很想嘗試一下自動化佈署這件事情，剛好今天有點時間，就開始菜鳥練習吧，透過發佈程式碼，經由Jenkins做到自動發佈，至於單元測試、分支那些東西，菜鳥還不太會，沒關係，那就先略過吧~~</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Step01：設定好IIS\"><a href=\"#Step01：設定好IIS\" class=\"headerlink\" title=\"Step01：設定好IIS\"></a>Step01：設定好IIS</h2><p>這部分應該沒什麼好說的，就是把伺服器上面，新開一個站台，然後對應到實體目錄上</p>\n<h2 id=\"Step02：Git-Server\"><a href=\"#Step02：Git-Server\" class=\"headerlink\" title=\"Step02：Git Server\"></a>Step02：Git Server</h2><p>改程式碼當然需要有版控囉，先前透過Nas來搞Git我覺得真的是在搞我自己，所以基本上就沒在用了，偶然間從<a href=\"https://dotblogs.com.tw/wuanunet/1\">Cheng-Ju Wu</a>那邊獲得資訊，雖然他部落格文章寫得是Gogs，不過現在似乎沒有甚麼人在維護，他也推薦使用<a href=\"https://docs.gitea.io/zh-tw/\">Gitea</a>。因為是從原本的Gogs分出來寫的，所以大致上都跟文章介紹得差不多。</p>\n<p>有興趣了解的人可以參考一下該系列文章</p>\n<ol>\n<li>Using Gogs Git Service - <a href=\"https://dotblogs.com.tw/wuanunet/2016/04/22/using-gogs-git-service-part1-install-on-windows\">Part.1 - Install on Windows</a></li>\n<li>Using Gogs Git Service - <a href=\"https://dotblogs.com.tw/wuanunet/2016/05/01/using-gogs-git-service-part2-authentication-smtp\">Part.2 - Authentication - SMTP</a></li>\n<li>Using Gogs Git Service - <a href=\"https://dotblogs.com.tw/wuanunet/2016/05/02/using-gogs-git-service-part3-diff-data-not-available\">Part.3 - Diff Data Not Available 的解決方式</a></li>\n</ol>\n<h2 id=\"Step03：上傳程式後觸發Jenkins\"><a href=\"#Step03：上傳程式後觸發Jenkins\" class=\"headerlink\" title=\"Step03：上傳程式後觸發Jenkins\"></a>Step03：上傳程式後觸發Jenkins</h2><p>這邊實作的方式應該也很多種，但是我就仍然是用最簡單的一種，設定好token然後git push的時候就讓他發出這個request給jenkins</p>\n<p><img src=\"/artblog/git-jenkins-auto-deploy/1492770590_08717.png\"></p>\n<h2 id=\"Step04：上傳怎麼可以沒有LFTP\"><a href=\"#Step04：上傳怎麼可以沒有LFTP\" class=\"headerlink\" title=\"Step04：上傳怎麼可以沒有LFTP\"></a>Step04：上傳怎麼可以沒有LFTP</h2><p>因為windows內建的ftp指令實在是不堪使用，沒有辦法達到同步這件事情，但是LFTP這東西可以做到，很幸運的找到了好心人士的文章，照著實作也的確成功了。</p>\n<p>細節就請移步前往該文章：<a href=\"http://coding.bang.tw/Article/43\">使用lftp指令工具差異備份檔案至FTP</a>吧，當CopyCat也不是很好。</p>\n<h2 id=\"Step05：把Jenkins搞起來\"><a href=\"#Step05：把Jenkins搞起來\" class=\"headerlink\" title=\"Step05：把Jenkins搞起來\"></a>Step05：把Jenkins搞起來</h2><p>基本上Jenkins沒有大家想的那麼神奇，最主要就是取得最新的程式碼，並且佈署到我希望他佈署的機器上面。</p>\n<p>因為剛才要從Git觸發Jenkins，所以這邊Jenkins就也要做一下設定<br><img src=\"/artblog/git-jenkins-auto-deploy/1492770713_84888.png\"></p>\n<p>以前曾經上過保哥的課，有了解了一些，這次把它給實作出來(最基本的而已….)課程中最大的收穫就是，Jenkins其實所有的動作背後都只是幫你轉換成command line指令，透過console去偵錯為何設定不能用是最重要的。也就是因為這樣，其實我對於Git還不熟悉，只會用git clone跟git pull之類的指令，所以我很偷吃步的先在jenkins內的工作目錄當中，直接把他給git clone，之後在Jenkins之內的指令，就只是很單純的把最新的檔案抓下來，然後還原他 (老實說我真的不熟GIT，看了實際上的git的指令，應該是還要去判斷分支，還有一大堆的，不過那就留到以後一步一步學習吧，現在只是為了要能夠抓到最新版本的程式碼而已)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git pull</span><br><span class=\"line\">git reset --hard</span><br></pre></td></tr></table></figure>\n\n<p>在Jenkins取得程式碼之後，接下來就是要準備佈署到正式機上了，一般來說要做CI、CD，肯定還要補上一堆的單元測試，然後如果Build不過，那還要通知、也不可以佈署，不過我這邊只是要實作一個很簡單的Html網站的佈署(主要是練習自動化佈署的流程)，所以這些東西就被我省略了，不過如果真的有要做自動化佈署，當然是要配合測試，才能夠品質有保障阿。</p>\n<p>佈署的部分就交給LFTP來做這件事，我也把相關的指令照著LFTP介紹的做出來了，所以在Jenkins裡面就輸入相關指令即可。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd E:\\lftp</span><br><span class=\"line\">lftp -f 23WebSiteRuleMirror.lftp</span><br></pre></td></tr></table></figure>\n\n<p>之後修改程式，將程式git push出去，jenkins就會依照我們先前設定好的步驟，將檔案抓回來更新，然後透過FTP上傳到正式機囉</p>\n<p>這邊當然還有很多缺點沒有做好，像是Git取得檔案的部分，應該要透過認證，不管是ssh還是其他方式。 (其實也有研究過，但是一直失敗)</p>\n<p>就等未來學習到了再來加強囉。</p>\n<h2 id=\"參考文章\"><a href=\"#參考文章\" class=\"headerlink\" title=\"參考文章\"></a>參考文章</h2><ol>\n<li><a href=\"http://coding.bang.tw/Article/43\">使用lftp指令工具差異備份檔案至FTP</a></li>\n<li><a href=\"http://www.jianshu.com/p/442a0e01dd95\">Windows Git仓库遇到的坑及使用public key authentication进行认证</a></li>\n<li><a href=\"https://www.codeproject.com/articles/296398/step-by-step-setup-git-server-on-windows-with-cops\">Step by Step Setup Git Server on Windows with CopSSH + msysGit and Integrate Git with Visual Studio</a></li>\n</ol>\n","categories":["devOps"],"tags":["git","jenkins"]},{"title":"twMVC 22 研討會心得","url":"/artblog//twmvc-22/","content":"<p>自從去年參加過 twMVC 辦的研討會之後，一直想要將參加後的收穫記錄下來，但是一直沒有實際的寫文章出來，Anyway，趁現在有空，就寫吧。</p>\n<span id=\"more\"></span>\n\n<p>老實說，Ioc 跟 DI 這兩個名詞感覺很高大上，即使以前曾經上過 Bill 叔的課程，也不敢說就真的明白了。<br>我覺得我的吸收速度很慢，一個觀念要說好幾次，才會慢慢內化成自己的東西。</p>\n<p>twMVC#22 上半場：甚麼鬼的 IOC&amp;DI</p>\n<p>今天短短的一個小時多，透過說書人精心設計過的例子，幽默風趣的一步步 Live Demo，感覺好像真的明白了些甚麼。<br>尤其是 91 哥前兩天 Post 了一段精闢的話，配上說書人的例子，活生生的就是順便 Demo 了部分老闆眼中的好 PG 是怎麼寫程式的(怎麼欠下技術債的)</p>\n<p>故事從 Class A 說起，Class A 是一個很普通的類別，裡面有個方法叫做 DoSomething()，在這方法裡面很直覺的直接 New 了一個 Class B 用來處理某件事情。<br>一般人都是這樣寫的，我也不諱言，我也是這樣幹的，(後來才慢慢學到一些觀念，有拉，我有在改善 XD)<br>這樣做的優點是甚麼呢？就是【快】、【直覺】、【老闆很開心有進度】、【業務能收錢了】…etc<br>但是我想這樣的程式大家都會有經驗，改 A 壞 B 常發生，需求變更整個想死，簡單來說就是很難維護</p>\n<p>假設今天需求變更，要將 Class B 替換為 Class C，程式就開始爆掉了<br>Bill 叔的【倚賴抽象】言猶在耳，Live Demo 的第二個步驟，就是抽象，將 Class B 與 Class C，抽象介面出來</p>\n<p>之後更透過反射、Design Pattern、完成這個程式的優化調整，最終版本雖然我不是很能理解(可能真的對我有點硬，我承認我昏昏欲睡了)，但是說書人透過例子實際上解說 IoC 及 DI，的確讓我對於這件事情有更多領悟，而透過例子也順便學會了反射的應用，覺得很厲害呢，在工廠模式內這樣用就可以把 switch 丟掉了，好個降程式複雜度的方法。(筆記)</p>\n<p>可惜的是 Sample 沒有 release，殘念。上課吸收不完的，回家只能看投影片慢慢追憶了。<br>上課的 Sample Code 在<a href=\"https://github.com/jamisliao/IOC-DI\">這邊</a>~感謝講師 Jamis Liao 提供!!<br>(慘了，工作沒有用 C#，果然沒有內化的東西都會消失掉….要找時間補回來了)</p>\n<p>twMVC#22 下半場：一個微信專案 從 0 到.000 的效能調教之路</p>\n<p>傳說中的 KKBruce 上台講課，一出場就是有個氣場在，整個場子都被 Hold 住的感覺，讓我精神為之一振。尤其這場又是說的效能調教，這課題可是非常的大，而 Bruce 開宗明義就破題了，效能調教的事情，不外乎人、事、物。</p>\n<p>忘了從哪聽到的，軟體開發中，能用錢解決的、跟技術有關的問題，通通都比較好解決，最難解決的問題通常是來自於人的問題。這次分享實際上是親身經歷，Bruce 也從專案一開始的一些規劃說起，告訴我們狀況是如何演進的，以及原因、考量是什麼，完完全全就是一個活生生的例子，感覺類似的事情、無奈，好像也常常發生在你我周遭，可能因為客戶關係，有再新再好的技術也不能用；也可能因為成本考量，專案架構要做出調整。專案的執行過程中，常常會碰到這些事情，而團隊間溝通、還有釐清責任則是第一個考驗。</p>\n<p>透過 Log 機制，配上 Slack 的 Channel，在程式設計階段不僅只在後端紀錄、也在前端透過 JsNLog 套件來記錄。讓後端的歸後端、前端的 BUG 歸前端，出事情了也很明確，該誰的就誰的，避免掉一個 BUG 大家在踢皮球，踢來踢去踢到團隊互相仇視。這邊要著重說一下，Slack 的優勢有很大一部分在於他們的搜尋做的很棒、很精準，而且還有 APP 版本，而 slack 本身又支援很多第三方工具，有機會的話應該要找時間好好地摸一下。</p>\n<p>ORM 部分則稍微介紹了一下 Dapper 這個工具，其實以前就聽過這東西，但是一直沒有研究過，透過這次分享也算了解了一點，剛好公司內有人自己寫了一個擴充方法是可以將 select 出來的資料轉 Instance。不過有一些限制在，看了 Dapper 的 live Demo 才知道這東西原來外面已經有人做了，當下就決定回去將自己的 CODE 改用 Dapper 來玩一下。學習成本低，那就更應該好好學學了。</p>\n<p>DB 的部分講到了資料庫專案，這讓我想起以前上保哥的課也提過這東西，資料庫版控等等，不過其實 DB 也沒怎麼再碰，我想應該會用到的部分也就是專案 toDB、DBto 專案這樣的模式吧，也許未來研究 Deploy.exe 來自動化佈署 DB？好吧，感覺有點遠了。</p>\n<p>後面又提了 Logger 的加強版本，我覺得聽到這個就真的超級威的，原來前端可以透過 JsNlog 紀錄就算了，還可以很方便地透過 CallerMemberName、CallerFilePath、CallerLineNumber 這三個屬性來很輕鬆地記錄錯誤 LOG 資訊，完全沒想過有這麼方便的東西啊。不過可惜的還是因為自己今天沒帶 NB，也不曉得 Brace 上課前的隨身碟內有沒有這個 Code Sample 釋出，所以趕緊把屬性名稱抄下筆記，只能留待之後研究用法了。程式上的效能調教，主要有執行緒、非同步以及平行程式處理三個課題，Bruce 很貼心的準備了一個很棒的 Sample Code 來解釋 Life Cycle。後來還說到 Cache、Redis for Windows；Jil 序列化、反序列化等等。</p>\n<p>研討會的時間並不長，大概是一個下午的時間就能夠吸收到這麼多觀念跟經驗，雖然我也無法完全吸收，但是聽到很多概念，學習到人家是怎麼做事情的，真的很值得!</p>\n","categories":["心得"],"tags":["twmvc"]},{"title":"twMVC 25 研討會心得","url":"/artblog//twmvc-25/","content":"<p>視覺化之後的表格，應該怎麼去解讀，這個應該是未來所有人必備的常識了<br>就像是英文、法文一樣，人家看得懂，會寫，就是會比你有更多的資訊，對於溝通能力也會有幫助<br>透過今天研討會的主題分享，講師在課堂上、投影片中不斷給予的觀念與技巧<br>相信對於網站開發者而言，要了解使用者的行為、依據這些資訊做出決策，將不再是遙不可及的事</p>\n<span id=\"more\"></span>\n\n<p>前陣子因為時間上剛好都衝到沒辦法參加，所以這一次 twMVC#25 一出來<br>確定當天行程是有空的，立刻就報名了</p>\n<p>這一次的主題，可能是因為平常對這些東西就比較沒概念，聽到就比較沒有感覺<br>因為不明白這些東西是做甚麼的，其實今天是抱著增廣見聞的心態去參加研討會</p>\n<h2 id=\"工程師的第一堂資料課之毫無美感也可以玩視覺化\"><a href=\"#工程師的第一堂資料課之毫無美感也可以玩視覺化\" class=\"headerlink\" title=\"工程師的第一堂資料課之毫無美感也可以玩視覺化\"></a>工程師的第一堂資料課之毫無美感也可以玩視覺化</h2><p>這是一位新的講師 Mia，講師的背景似乎是從學校就是學資料探勘、分析的專業，授課的內容也是跟這有關<br>一開始講師提到的很重要的是：如何問問題(畫甚麼)，接著在後續又提到【角色】這件事情。<br>這不就是跟需求訪談一樣，你一定要先知道客戶要解決什麼問題、達成甚麼目標，你才能開始分析規劃怎麼做<br>而要將資料視覺化呈現，不就也要先弄清楚這一件事情，所表達出來的圖像，想要告訴使用者甚麼資訊？</p>\n<p>這邊講師分享了他的經驗，我覺得這個很重要，雖然不知道有沒有曲解了講師的意思，但我是這樣理解的<br>資料視覺化最終呈現的有兩個類型：Dashboard 跟 Report。</p>\n<ol>\n<li>Dashboard：需要在即時、當下針對數據來做出決策，(講師用了開車的儀表板當例子，很貼切)</li>\n<li>Report：講師舉例，也許你今天有 100 個人跑去 QA，最終只有 4 個人下訂，這代表什麼呢？</li>\n</ol>\n<p>是不是你的商品不夠清楚，QA 完畢之後才發現商品不是顧客所要的。所以就喪失掉這部分的轉換率<br>當你以不同的角色去解讀同一份 Dataset，要解決的問題都不同，所以要看的圖表也不一樣。<br>透過講師整理出來的資料視覺化步驟，分析、掌握這些資料相信不會再是難事，當然也有提到實作方式及步驟<br>不過這個部分還是看 slide 會比較清楚 (傳送門：<a href=\"https://doc.co/NzLcKM\">twMVC#25 工程師的第一堂資料課之毫無美感也可以玩視覺化</a>)</p>\n<p>課程最後有附上一位資料視覺化的先驅，在資料視覺化還沒這麼盛行的時候，他就已經在 TED 上面分享的影片<br>(傳送門：<a href=\"https://www.youtube.com/watch?v=jbkSRLYSojo\">Hans Rosling’s 200 Countries, 200 Years, 4 Minutes - The Joy of Stats - BBC Four</a>)</p>\n<p>其實這些東西沒人講之前都是模模糊糊的存在腦子裏面，經過有系統的說明之後，我覺得更能夠掌握這些東西<br>再加上今天介紹的工具，不管是講師提到的 Microsoft Sanddance 或是 Demo 補充的 POWER BI<br>這些對於我都是全新的東西，很期待未來有機會可以在工作上應用，或者是說，有機會自己拿來玩一下</p>\n<h2 id=\"ASP-NET-MVC-A-B-Testing-的眉眉角角\"><a href=\"#ASP-NET-MVC-A-B-Testing-的眉眉角角\" class=\"headerlink\" title=\"ASP.NET MVC A&#x2F;B Testing 的眉眉角角\"></a>ASP.NET MVC A&#x2F;B Testing 的眉眉角角</h2><p>老實說，AB Testing 這名詞我不知道，但是這件事情我知道<br>但是怎麼做，為什麼要做這件事情，我都是不清楚的</p>\n<p>Dino 的 Slide 開宗明義就說明了，著重在 ASP.NET MVC 的開發方法，不過讓我覺得很重要的<br>其實是 Dino 也有順帶提到要做 AB Testing 之前，應該要有那些事情是必須先搞清楚的<br>要將測試對象(分群)，這個很重要<br>當然，怎麼做到這件事情，每個人的網站都不同，要決策的事情也不一樣，這個只能自己來<br>不管是透過 Cookie、IP、還是使用者的資料來做群組，後續都是為了要收集這些群組使用者如何使用網站的<br>再經過一段時間透過工具或自行收集數據，接著來分析處理，最終再依據這些數據來決策</p>\n<p>結合上半場 Mia 的內容，難怪 Demo 會說如果你有自己的網站，那麼今天不來是很可惜的</p>\n<p>如果網站是透過 ASP.NET MVC 來開發的，就能夠透過本次 Dino 所分享的方法<br>很容易地做到 AB Testing 這件事情，也就是 ASP.NET MVC 的 Display Modes<br>沒有記錯的話，以前去上過 Demo 的課其實當下也有提到這件事情，我居然遺忘了，可見上課之外，還是需要複習，並常常利用，才不會忘記</p>\n<p>如果只是很單純的，只有一個維度，那麼應該就 OK 了，不過有經驗的開發者跟我這種初心者想的就是不一樣<br>立馬反駁掉啊!!啊如果是兩個、三個維度怎麼辦，對阿，怎麼辦。</p>\n<p>Dino 哥佛心出品 DisplayModeMatrix</p>\n<p>至於實作<a href=\"https://github.com/dinowang/twmvc25samples\">程式碼範例</a>及工具<a href=\"https://github.com/dinowang/DisplayModeMatrix\">DisplayModeMatrix</a>、Dino 也都有提供，課堂上並沒有針對細節著墨太多<br>這也對，畢竟又不是在上實作課，今天來主要應該都是來分享 KnowHow 的才是<br>配合 slide (<a href=\"https://doc.co/2vMW1F\">twMVC#25 ASP.NET MVC A&#x2F;B Testing 的眉眉角角</a>)的解說，挑一個時間安安靜靜的自己練習一下<br>一定可以順利掌握 AB Testing 的基本實作方式及概念，這個肯定有機會也要拿來在公司用一下的…</p>\n<hr>\n<p>總結來說，今天充實了不少應該具備的【常識】，對於講師所分享的主題，算是有了一個基本的概念了<br>學到為甚麼要做、如何做這件事情<br>學到如何在 ASP.NET MVC 中，更有效率的做到 AB Testing 這件事情<br>學到如何解讀這些資料並利用現成的工具適當的視覺化所要呈現的資料以供決策</p>\n","categories":["心得"],"tags":["twmvc"]},{"title":"twMVC 27 研討會心得","url":"/artblog//twmvc-27/","content":"<p>其實我在 OzCode 2.0 的時候就已經有買這個套件了，但是其實我一直很少去研究這個套件應該怎麼用，藉著這次的機會，重新認識一下這個工具，是不錯的機會。當然#27 報名資訊一出來，報名就對了。不用想太多。</p>\n<span id=\"more\"></span>\n\n<p>twMVC#27 Visual Studio 上堪稱魔術師等級的偵錯工具 - OzCode<br>講師：<a href=\"https://www.oz-code.com/\">OzCode</a> - Omer Raviv</p>\n<p>其實知道 OzCode 這個套件還是因為 twMVC 及 SkillTree 的簡報，最後面都會有贊助商，才知道原來有這麼一個偵錯套件。</p>\n<p>傳說中.Net 開發者必備的武器，其實官方網站已經有很詳細的介紹影片放在 Youtube 上面，而且還提供了官方的 Sample 專案，讓你可以很輕易地感受到 OzCode 的威力展示。</p>\n<p>因為英文不是很好的關係，想說應該也就是看看人家的現場 Demo 而已，簡報我應該是聽不懂，結果，我錯了。</p>\n<p>OzCode 這次主講者是 Omer，好像是 OzCode 產品的主要開發者，Title 是 CTO。一開口講英文，我不曉得是否他連簡報都有設計過，使用到的英文詞彙其實都不難懂，再加上豐富簡單的肢體語言，口語的部分也有留些時間，不會像別的外國影片一樣一直講一直講，再搭配上現場的範例展示，的確是能夠吸收到不少東西，而且 Bill 叔也全程翻譯，讓不熟悉英文的人也能夠了解 Omer 想要表達的意思。</p>\n<p>從附近的人對話閒聊中得知，原來 Bill 叔已經翻譯了七場之多，難怪 Omer 都在說中文場子都可以交給 Bill 叔了。這次因為時間的關係，分享的資訊感覺有點少，相信在前幾天的 OzCode 團隊行程當中也有跑一些公司，他們應該會收穫更多，別人我不曉得拉，明明就是一樣的東西，看官網我就是吸收不起來，或是會忘記，但是現場分享的關係，我倒是覺得都有吸收到，而且再加上 Omer 及 Bill 叔的現場解說及一些小技巧，這些官網上是沒有的喔。</p>\n<p>而且這一次 OzCode 還特別提供了半年的授權給 twMVC 的社群成員，不過時間只到 4&#x2F;30 截止，有機會看到的都可以趕緊去<a href=\"http://landing.oz-code.com/ozcodefree-ch\">申請</a>喔。</p>\n<p>twMVC#27 Visual Studio 2017 新功能介紹<br>講師：Demo (Blog：<a href=\"http://demo.tc/\">DemoShop</a>)<br>簡報：<a href=\"https://docs.com/is-twMVC/3508/twmvc-27visual-studio-2017\">Slide</a><br>老實說這一次 VS2017 新功能，我最關心的就是 Live UnitTesting 這個功能，因為我從 VS2015 透過 91 的課程接觸到了 Alive 這個套件之後就很開心地立馬買了，結果到了 VS2017，好像聽說是被微軟買了還是怎麼的，反正 VS2017 就是沒有 Alive 可以用了，然後又聽說，原來已經有個功能叫做 Live UnitTesting 的，已經是內建在 VS2017 之內，而且功能還更強大。</p>\n<p>其實是放在企業版裡面，社群、個人版是不能用的。但是，Demo 有提供一個 Idea，我覺得這是整場一定要知道的資訊，有來聽到我覺得就值了。在 Blog 上面講這個應該不會有事情吧？好吧，反正都在社群活動公開講了，應該也沒什麼，其實就是 A+B 組合套餐的感覺。</p>\n<p>社群版是免費使用的，功能等同於個人專業版，一些更詳細的商業授權規範微軟都寫得很清楚了。我就不再贅述。重點在其實還有一個版本叫做 Preview 版本，他提供的功能都是完整的，但是這個版本其實就是明明白白的告訴你，我功能都開給你用，但是也有 BUG，而且這個版本只能做為開發測試使用，不允許用在生產環境上。</p>\n<p>而且，VS2017 的各個版本之間是獨立的，所以你一台電腦可以灌兩套不一樣的版本。嗯，很清楚了對吧？其實 Demo 講得很在理，你要嘛就是付 18 萬，要嘛就是當當人家的白老鼠，這邊再送上今天聽到的一句話：在微軟的世界裡，沒有重開解決不了的事情；如果有，那就重灌。</p>\n<hr>\n<p>twMVC#27 C#7.0 介紹<br>講師：Bill (Blog：<a href=\"https://dotblogs.com.tw/billchung/\">海角點部落</a>)<br>簡報：<a href=\"https://docs.com/is-twMVC/9772/twmvc-27csharp-7-0-new-features\">Slide</a>、<a href=\"https://github.com/billchungiii/CS7NewFeatures\">Sample</a><br>請原諒我沒有確實的把課程名稱記下來，但是其實 Bill 叔的這場，我覺得真的是讓自己換個角度去思考。</p>\n<p>一直以來聽人在說新技術、教學，其實很少人會去談論到這一塊(當然也可能是我生活圈太狹隘)。這次的投影片 Bill 叔將 C#7.0 的改變，劃分為兩個區塊。一邊是 Web 開發比較相關的，一邊是影像、遊戲比較相關的。</p>\n<p>為甚麼要這樣分呢？Bill 叔從頭開始講到尾，幾乎比較重要的部分，都跟結構有關。最後再從結構，延伸到 Garbage Collection 機制，然後再大膽的預測為什麼會有這些改變，配合上大環境的現況，可以很清楚的知道微軟已經在重視這一塊。</p>\n<p>這一些都是我不會去思考的部分，以往知道，頂多就是：喔，7.0 加了一些語法糖，喔，加了什麼功能之類的。但是，Bill 叔是從全局下去看，人家為什麼要做這些改變，這些改變對我們有什麼影響。</p>\n<p>層次不一樣唄。</p>\n<hr>\n<p>這次閃電秀是微軟 MVP 計畫的介紹，講的時間比較久一些，因為原本 Bill 叔要上場了，卻發現電腦在 Window update，哈哈。我也是昨天才發現 windows update 可以自訂時間了~</p>\n<p>今天就技術上來說，我了解了一些 C#7.0 的新語法，還有實務上 Debug 的方式，(再次強調 Demo 的話：把 F5 忘記，改用附加至處理序)，如何使用好的工具來幫助自己開發。就思想上來說，我覺得如果我不能看清楚事情的本質，那麼別人看得清楚，我能接收到這些資訊也是很棒的一件事情。今天 OzCode 團隊也有發送 OzCode 貼紙唷~幸運的拿到了一個，開心。</p>\n<p>順帶一提，下一場聚會在 5&#x2F;13 或是 5&#x2F;20，主講人是 Bill 叔跟 91。</p>\n<p>看到這兩個主講人就是絕對要開啟搶票模式的。主題不用管了。沒搶到票絕對會聽到 Demo 說：限量是殘酷的。</p>\n","categories":["心得"],"tags":["twmvc"]},{"title":"twMVC 26 研討會心得","url":"/artblog//twmvc-26/","content":"<p>老實說看到這一次研討會主題，我猶豫了一下是否要報名，因為我沒有聽過 Redis 是什麼，然後很害怕主講人說的太深入；於是思考了那麼幾秒鐘之後還是立刻報名了。一方面是依據經驗，每次參加 twMVC 的研討會總是抱著忐忑的心情前往，然後帶著滿滿的收穫回家，即使是工作上真的沒機會用，但是就像曹祖聖老師曾經說過的，要增加自己的知識廣度。這其實就是一個積累的過程，未來也許在思考解決方案上，能有更多的選擇。</p>\n<p>另外一方面也是因為常常聽人家說實作 Cache 機制，然後 BLA<del>BLA</del>BLA~的。目前工作上還在使用 ASP 的我來說，Cache 這件事情是只知其然不知其所以然。都知道 Cache 是個好東西，但是怎麼做？我也只能科科兩聲。一看到這次主題是 Cache 又是淺談。不趁這次搞懂還要等甚麼時候？</p>\n<span id=\"more\"></span>\n\n<p>twMVC#26 上半場 Redis 資料型別與場景連結<br>講師：Jamis (Blog：<a href=\"https://dotblogs.com.tw/jamis\">天橋下的說書人</a>)<br>連結：<a href=\"https://doc.co/SBtm7m\">Slide</a>、<a href=\"https://github.com/twMVC/twMVC-26\">Sample Code For LinqPad</a><br>這位主講者最近才成為 twMVC 的核心成員，也就是上次#22 的講師，台風穩健，專業度也是一級棒的，主題解說與投影片更是相得益彰。我自己的習慣是參加研討會的時候會記筆記，這場的筆記是我有史以來紀錄最多頁的。因為資訊量真的太大了，也或許是因為我根本不懂 Redis 是甚麼，所以很多東西需要筆記。</p>\n<p>沒錯，這次 Jamis 的介紹就是真的能夠讓我這個完全不懂 Redis 是甚麼的人，結束後都可以來跟公司內部同事做一次簡單的分享了。一開始介紹 Redis 的本質就是透過 Key-Value 的 In Memory 的 Storage，也因為它是利用 Memory，所以速度很快，然後也秀了一下官方的數據，(當然後面也有 Live Demo，可以看到它實際的 16 次請求，總共花了多少時間，真的霹靂快的)，說明了快這件事情，再開始從架構說明，最後再細到最基礎的 Master-Slave，這樣子先讓我完整的知道 Redis 這個東西是幹嘛的，然後他能夠做什麼，又應該怎麼去使用這個東西，最後，再透過一些 Live Demo，架起來實際的 Redis，並且搭配 C#的範例程式碼，並且模擬了各種情境，然後在這些情境之下，可以透過怎樣的方式去利用 Redis 完成快取這件事情。</p>\n<p>Redis 幹嘛的，知道了；Redis 的架構應該怎麼弄比較好，豪華版跟基本款的架構都說明了；實際上怎麼架，也知道了；架起來之後，我的 Client 端怎麼使用，也介紹了免錢的套件；這些套件怎麼設定，也說明了；套件有許多資料型別，如何在最洽當的情境之下使用正確的型別來使用 Redis 的服務，也很貼心的準備了 Sample。先從 Knowhow 著手，再細到實務，加上詳細的投影片、還提供 Sample Code。這一切的一切都在兩個小時之內告訴你，還給你打包帶回家。我的老天爺，這真是過年的一份大禮包。由此可知講師的課前準備的用心與專業程度。</p>\n<p>這種感覺就像是 TDD 完成了數個循環的爽度啊。總算又覺得自己有學習到一些東西，這個年假沒有荒廢掉。哈哈</p>\n<p>twMVC#26 下半場 淺談 ASP.NET Caching 技術與實踐<br>講師：Cheng-Ju Wu (Blog：<a href=\"https://dotblogs.com.tw/wuanunet\">阿砮的學習手寫板</a>)<br>連結：<a href=\"https://doc.co/FuSK99\">Slide</a>、<a href=\"https://github.com/twMVC/twMVC-26-2-1\">Sample1</a>、<a href=\"https://github.com/twMVC/twMVC-26-2-2\">Sample2</a><br>這一位講師如果有參加過研討會、或是參加過 skilltree 的課程，應該會常常看到他。不過就像是 Demo 的介紹，似乎真的是比較內向，到了今天才知道：啊<del>原來之前我看到過的那個 MVC 的 Route 測試的文章，學習手寫板的版主就是他呀</del>(還是我真的太孤陋寡聞了？)</p>\n<p>果然能夠站上台分享的都是狠腳色，雖然比不過別的講師風趣幽默的氣場，但是咱今天的初衷就是為了要好好的學習一下 ASP.Net 的 Cache 要怎麼搞，別的都是虛的，振奮了一下精神開始注意聽。</p>\n<p>講師的簡報風格也很實在，從資料庫的查詢成本開始說起，透過講師的說明，我幾乎可以同時在腦中畫出了一次資料庫查詢的流程圖，以及如果是利用快取，又是怎樣的流程。而快取的機制又是如何改善應用程式的效能，相比於資料庫查詢，省略了那些環節的查詢成本，講師也從情境開始下手，再搭配上課程後續的一些說明，可以很明顯的感受到講師想要表達的事情，就我的理解來看：快取就像是藥，不是仙丹，吃藥要對症，快取也是。網站速度緩慢有很多原因，如果不管病發原因，碰到問題我就是給你快取下去，看起來似乎能對症，網站速度也快了，但是實際上只是將問題延後爆發而已，如果是因為 DB 查詢語法造成 table scan，類似這樣的語法，那就真的是無言以對了。萬事加快取，再怎麼加也比不過初心工程師拼命給你寫奇怪的 SQL 語法啊 (這個是個人經驗，很多問題我也犯過，在這邊感謝一下我們公司的佛心 DBA 還願意內部教學)</p>\n<p>回到快取這件事情，後面的部分主要在說明一些實務上的 Code，在 MVC 上面要怎麼去實作 Cache、一些技巧、在加上一些實務上的情境，以及這些情境要怎麼去處理、克服問題，這邊當然就是只能先聽講師的說明、因為手邊沒有 Code 能看，所以其實我又開始昏昏欲睡了，沒辦法，就是沒有 Cache 實務經驗，所以很多地方沒有共鳴，只能等 Sample Code 釋出之後再找時間研究，尤其是 autofac 這個東西，真心不懂。不過後來講到要測試 cache code 的部分，自己下去思考好像也會想翻桌，難道就要為了測一行程式碼，將其他 10 行手動註解掉嗎？</p>\n<p>江湖一點訣，這也就是講師開頭埋的梗，為什麼要弄一個 NullCacheProvider 出來，原因在於我的 production code 只要把邏輯設好，如果我抓不到快取資料，就去撈 DB。那麼我在抓快取資料的時候，都回應【抓不到快取】，那不就可以測到我們真正要測試的部分，而且也不用去改 Production Code 嗎？物件導向萬歲。(回頭看了我的 ASP，嘆了一口氣)</p>\n<p>除了 MVC 實作，講師也介紹了.Net Core 上面 Cache 要怎麼做，並且也實際透過範例來 demo，Review 一下整個課程，從一開始的最簡單的 cache 的實作，到後面其他各式各樣的實作，可以發現就真的是越來越貼近實務面。最後也順便將使用快取的觀念在重申一次，快取真的不是萬靈丹。最後順帶一提，如果想要知道快取用了 Server 多少記憶體，可以透過 windows 本身工作管理員的效能來監控。</p>\n<hr>\n<p>這一次的研討會也是第一次有了閃電秀這個概念出現，並且有兩位分享者出來分享了一些 tips，</p>\n<p>第一位講的東西比較偏向 JavaScript，NodeJs 的茶包，但因為我就沒有在碰 node.js，所以也不是很懂茶包的點在哪裡，大概知道就是可以透過設定甚麼東西的 config 檔案，把 path 補上去，然後就可以吃到正確的檔案了~….好吧。我真的不明瞭。<br>第二位講的東西就是跟 Dapper 的一個不為人知的命令有關，沒錯，因為名字有點長，我又是剛好前幾天才看著分享者的 Blog 開始學習 Dapper 怎麼用，所以到現在那個方法還是不為我知。anyway，大概也就是在特定的應用情境之下，可以透過那個神奇的方法，然後好像可以做到某些神奇的事情。當下大家應該都是內行在看門道，不過每一個環節我都在聽天書，所以我也只能看熱鬧了。</p>\n<p>從過年前報名完畢之後就一直很期待著這次的研討會，果然結束之後，再次驗證參加 twMVC 的研討會是絕對值得的，收穫真的滿滿的啊。而這幾次我所參加的研討會經驗，可以發現 Demo 一次又一次的再想辦法推 mvc 社群，期望有更多人參加進來，不論是分享、討論，很謝謝 demo 持續的付出，讓很多對於程式設計有興趣的人，有這一個管道可以吸收新知，在這邊也謝謝各位網路上的佛心大神，一次又一次地將自己的經驗與知識分享出來，如果是在老闆的壓力之下剛好看到有文章能夠得到解決方案，我這種心情會更加強烈。</p>\n","categories":["心得"],"tags":["twmvc"]},{"title":"twMVC 31 研討會心得","url":"/artblog//twmvc-31/","content":"<p>前幾次研討會沒能參加，今年最後一次twMVC31研討會的主題很吸引我，恰好也忙到一個段落了，一如既往地很期待這次研討會，能夠得到怎樣的驚喜。</p>\n<span id=\"more\"></span>\n\n<p>twMVC#31 網站上線了，然後呢？<br>講師：小風 (<a href=\"https://dotblogs.com.tw/kirkchen/3\">Blog</a>)<br>簡報：<a href=\"https://www.slideshare.net/twMVC/tw-mvc31\">Slide</a></p>\n<p>小風老師這次給的資訊量太大了，這次的slide看看頁數就知道了，如果不是有時間因素，我想小風老師可以再講個一小時不成問題。</p>\n<p>說是網站上線之後的事情，其實從一開始連軟體產業的近況都談了，這邊有好幾個例子我印象超級深刻的，【適應改變】這一張slide就能夠很容易的表達出來現在軟體要生存的話，必須要能夠做到提早確認，並取得客戶回饋，及時修正方向，這應該跟敏捷開發有點關係；數年前從學校內學到的專案管理課程的waterfall還歷歷在目，但我想如果業界真的還在用這一套，肯定會很沒有競爭力。</p>\n<p>為了要能夠在競爭激烈的軟體市場殺出一條血路，開發的速度就很重要，而不要變成曇花一現的產品，那麼持續交付的議題就避不掉。正是在這樣的背景下，小風老師的這次課程，內容涵蓋了許多領域的專業知識。透過這些領域的專業，給予客戶一個持續交付的、可靠的產品。</p>\n<p>內容真的太多、也太棒，光是其中一塊領域，就值得(必須)花上許多時間好好研究，背後的知識有的也許沒有提及，但就像是技能點一樣，知道要做自動化，版控當然會是必備技能，這中間的串接如何實作就不是課程的重點了，小風老師用一個比較宏觀的角度來闡釋整個開發、建置、測試、發布的流程，並為當中每個流程做一個較簡單的講解，整個課程圍繞的核心，始終都是為了要給客戶一個好的產品，這些比較架構性的東西如果沒有真的痛過，應該是很難有深刻的體驗。</p>\n<p>很有趣的是後面slack robot的部分，還沒有想過可以做到這些事情，網站上線後可能會有許許多多的資訊，透過slack robot整合，已經可以做到了讓robot自動回應指令所要求的資訊。甚至是圖表，或是讓robot幫你做事情，例如，當監控到線上的圖表已經到了警戒線之後，robot可能會透過slack通知詢問，是否要加開機器，這些指令只要先寫好，直接在slack回復，就可以自動做好。這樣的概念再延伸下去，不就像是電影裡面演的全能管家嗎？ XD</p>\n<hr>\n<p>twMVC#31 沒有 HDD 的網站重構 WebForm to MVC<br>講師：kevin (<a href=\"https://dotblogs.com.tw/mrkt\">Blog</a>)<br>簡報：<a href=\"https://www.slideshare.net/twMVC/tw-mvc31-hdd-webform-to-mvc\">Slide</a></p>\n<p>這個課程算是經驗分享，kevin在課程中從這個案子的一開始，緣由、過程、都一步步地分享出來，當中的每個點都有戳到我心裡面啊。因為，我也幹過類似的事情….</p>\n<p>目前維護的是ASP程式。多少隻程式已經不想去算了，隨便一隻抓出來都是數千行以上的legacy code，UI顯示、資料存取、商業邏輯交雜的程式碼每一隻都是，所以聽到這邊超有感觸的阿。</p>\n<p>而公司內部網站一開始是website專案，再將她轉為webform專案之後，就已經耗盡我所有精力了，不由得感慨，大神之所以是大神，有時候就是一個堅持。</p>\n<p>最主要的觀念是，重構要有測試保護；在這一部分kevin更是進階一步地利用localDB及docker來撰寫測試。更是提到當測試多到一個地步的時候，應該要開始幫測試分類，在自動化的時候分別處理，判斷哪些要跑，那些不用。細節實戰的部份就請關注kevin的課程：實務專案的測試，報名只到下星期二唷~</p>\n","categories":["心得"],"tags":["twmvc"]},{"title":"利用VSCode開發JavaScript","url":"/artblog//vscode-javascript/","content":"<p>通常在開發 web 程式的時候都會利用 JavaScript 來實作功能，以往都是直接撰寫 Html 再加上&lt;Script&gt;標籤，並且透過瀏覽器來執行，驗證功能。<br>這樣的開發方式雖然容易，但後續的優化改良都會需要再先進行重構才能進行。<br>若是能夠直接在編輯器中看到程式的執行結果，隨時進行修正，則勢必能夠提高生產力及無謂的時間浪費，本次將透過 Visual Studio Code 實際操作來達成即時回饋。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><ol>\n<li><a href=\"https://code.visualstudio.com/\">Visual Studio Code</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner\">Code Runner</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=chenxsan.vscode-standardjs\">JavaScript Standard Style</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=capaj.vscode-standardjs-snippets\">JavaScript standardjs styled snippets</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=kisstkondoros.vscode-codemetrics\">CodeMetrics</a></li>\n</ol>\n<h2 id=\"Lab-01-基本操作\"><a href=\"#Lab-01-基本操作\" class=\"headerlink\" title=\"Lab 01 基本操作\"></a>Lab 01 基本操作</h2><ol>\n<li>開啟 VSCode</li>\n<li>新增一個檔案，副檔名命名為 js，或是 Ctrl+N 開啟新檔案，並於右下方指定語言類別為 JavaScript</li>\n<li>實際撰寫一個加法 add 函式，該函式需要兩個輸入參數 num1 及 num2</li>\n<li>使用 add 函式計算，並透過 Console.log 顯示結果</li>\n<li>將需要執行的程式碼反白標記</li>\n<li>Ctrl+Alt+N 執行</li>\n<li>VSCode 的輸出視窗將會顯示結果及執行秒數<br><img src=\"/artblog/vscode-javascript/1496304796_94879.png\"></li>\n</ol>\n<h2 id=\"Lab-02-JavaScript-標準語法格式規範\"><a href=\"#Lab-02-JavaScript-標準語法格式規範\" class=\"headerlink\" title=\"Lab 02 JavaScript 標準語法格式規範\"></a>Lab 02 JavaScript 標準語法格式規範</h2><ol>\n<li>將 Lab01 的 function 改成多行格式<br><img src=\"/artblog/vscode-javascript/1496304874_98106.png\"></li>\n<li>Ctrl+Alt+P 開啟快速指令視窗</li>\n<li>輸入 fix 透過自動完成選擇 JavaScript Standard Style: Fix all auto-fixable Problems<br><img src=\"/artblog/vscode-javascript/1496304941_60283.png\"></li>\n</ol>\n<h2 id=\"Lab-03-自訂快捷鍵對應\"><a href=\"#Lab-03-自訂快捷鍵對應\" class=\"headerlink\" title=\"Lab 03 自訂快捷鍵對應\"></a>Lab 03 自訂快捷鍵對應</h2><ol>\n<li>Ctrl+K,Ctrl+S 叫出鍵盤快速鍵設定</li>\n<li>點選 keybindings.json 進行進階設定<br><img src=\"/artblog/vscode-javascript/1496305068_63576.png\"></li>\n<li>點選右下方定義按鍵繫結關係<br><img src=\"/artblog/vscode-javascript/1496305096_37998.png\"></li>\n<li>輸入自己要定義的快捷鍵，例如 alt+F</li>\n<li>修改設定的指令 standard.executeAutofix<br><img src=\"/artblog/vscode-javascript/1496305168_3195.png\"></li>\n</ol>\n<h2 id=\"Lab-04-程式複雜度\"><a href=\"#Lab-04-程式複雜度\" class=\"headerlink\" title=\"Lab 04 程式複雜度\"></a>Lab 04 程式複雜度</h2><ol>\n<li>將加法 function 加入防呆判斷</li>\n<li>若輸入非數字則回應 0，輸入數字才開始計算<br><img src=\"/artblog/vscode-javascript/1496305212_22082.png\"></li>\n</ol>\n<h2 id=\"Lab-05-逐步偵錯\"><a href=\"#Lab-05-逐步偵錯\" class=\"headerlink\" title=\"Lab 05 逐步偵錯\"></a>Lab 05 逐步偵錯</h2><ol>\n<li>點選 VSCode 內建的 Debug 按鈕</li>\n<li>點擊組態設定的齒輪圖示，並選擇 Nodejs</li>\n<li>VSCode 會建立.vsCode&#x2F;launch.json 的預設設定範本</li>\n<li>修改 program 項目，指定我們要偵錯的 js 檔案名稱，例如要偵錯放在 js 目錄下的 test.js，就設定如下<br><img src=\"/artblog/vscode-javascript/1496305259_81135.png\"></li>\n<li>下中斷點後，點選綠色 Play 的偵錯按鈕或按下 F5 開始偵錯<br><img src=\"/artblog/vscode-javascript/1496305340_99786.png\"></li>\n</ol>\n","categories":["工具"],"tags":["vscode"]},{"title":"Facade Pattern","url":"/artblog//Facade-Pattern/","content":"<p>外觀模式 (Facade)，這個應該是最容易理解的一個Pattern了，今天就單純地來聊聊這個Pattern吧。</p>\n<span id=\"more\"></span>\n\n<p>當然這邊所說的Facade只涉及概念，實作的部分在C#、JavaScript、其他各種語言可能略有不同。</p>\n<p>回過頭來，在Wiki上面定義的Facade我想還是文言了一點，其實以我的理解，Facade它可以幫助我做兩件事情。</p>\n<blockquote>\n<p>簡化你的系統對外接口</p>\n</blockquote>\n<p>也就是將你所設計、維護的程式碼，重新設計一個容易呼叫、容易理解的對外接口，便於其他人使用，而不需要再去呼叫原先其他較為複雜的方法。也許在系統內，要完成某一個功能，需要呼叫Function A、Function B、Function C；而且每一個方法所需要傳入的參數可能又很複雜。</p>\n<p>又或者是類似的方法名稱有很多個，卻又有著細微的差異，容易造成錯誤的呼叫，諸如此類的所有原因，為了簡化你的系統，你很有可能會自己先實作一個方法，而原先的步驟，都放到這個方法內，其實這個就是Facade Pattern。</p>\n<p>具體一點的例子，套用Bill叔的OOP課程範例說明，以Json的序列化而言，他的呼叫方法可能不常用的人都記不起來，打幾個關鍵字後Intellinse給出來的幾個又都很像，每次都要思考一下，還可能會用錯。所以為了序列化、反序列化方便使用，自己建立一個單純的Class，裡面就兩個方法，一個序列化，一個反序列化。容易使用又好記，還不會記錯；這邊的目標就是為了避免誤用。</p>\n<blockquote>\n<p>重構Legacy Code，建立防火線</p>\n</blockquote>\n<p>另外一個用法，則是深受Legacy Code困擾下的解法。如何針對遺留代碼做重構、做測試保護、Facade就是一個非常有用的技巧，他將遺留代碼視為一團泥沼，在沒有測試保護的情況下，我想沒有人願意再踏入其中維護，或是修改任何東西吧？</p>\n<p>此時就可以將這些遺留代碼先透過Facade Pattern，建立一個對外的介面，讓其他應用程式改呼叫這個新的介面，反覆這樣的行為，這樣一來，就可以逐步消除系統呼叫遺留代碼的部分，中間隔了一層，然後針對這些新介面，撰寫測試保護；接著，再去重構那團混亂不堪的遺留代碼。因為此時已經有了Facade的新類別，也有測試保護，重構他不再是遙不可及的事情。</p>\n<p>如果因為實際的情境下，無法讓你重構，最起碼也可以透過Facade Pattern將Legacy Code與其他新寫的Code隔離開來，讓系統至少不要變得更爛。</p>\n<p>參考資料：<a href=\"http://www.netobjectives.com/PatternRepository/index.php?title=TheFacadePattern\">The Facade Pattern</a></p>\n","categories":["pattern"],"tags":["facade"]},{"title":"ASP單元測試","url":"/artblog//asp-unit-test/","content":"<p>希望能透過這一篇文章，至少Demo出來怎麼樣透過ASP來做單元測試。謹以此篇獻給還在與ASP奮鬥的朋友們。</p>\n<span id=\"more\"></span>\n\n<p>我們直接進入正題吧。</p>\n<p>假設前端網站現在有一個購物車，使用者購買了好幾樣商品，每一樣商品都有它的價格；為了簡化範例，基本的屬性不會太多，但是真實世界的需求肯定是複雜許多，在這邊我們為了簡化範例，只挑重點的部分，也就是商品的名稱、價格及數量。前端的部分今天不談，我們專注在後端的部分。也就是今天的主題：ASP</p>\n<p>小明是個苦逼的碼農，對未來沒有什麼期待，每天的樂趣除了跟客服拉低賽以外，剩下的就是在每個月的發薪日，拿薪水犒勞自己的汗水跟淚水。今天在購物網站看到了好幾樣商品，情不自禁的就給他刷卡買下去了，我們來看一下小明買了甚麼東西。</p>\n<ol>\n<li>任天堂 Nintendo Switch 藍紅手把組，單價9780 x 1</li>\n<li>OSIM按摩椅，單價12800 x 1</li>\n<li>柔韌潔淨抽取衛生紙100抽(8包x8串&#x2F;箱)，單價820 x 1<br>嗯，看來小明壓力很大，我們也不要糾結商品了，想小明要買甚麼東西還花了我10分鐘。總之就是這樣了。</li>\n</ol>\n<p>所以這三樣東西小明應該要付的錢是多少呢？9780 + 12800 + 820 &#x3D; 23400<br>OKAY，那就開始我們的第一個測試程式吧….</p>\n<p>好像忘了先說，我們在ASP可以透過ASPUNIT來做單元測試，我也是找了很久才找到這一套還可以用的，然後，抱歉我真的忘了出處在哪裡，畢竟是好多年前找到的東西。之前找到的時候有順便調整了一下，把訊息改成我比較喜歡的，然後改來改去，我發現原始版本忘了放哪邊了，好了，閒話到這邊，最終這篇文章的程式會放在GitHub，有興趣請自取。</p>\n<blockquote>\n<p>aspunit單元測試框架必須要先架在IIS上面讓他先跑起來，這次的練習中，瀏覽器網址填入的路徑就指向&#x2F;test&#x2F;go.asp。</p>\n</blockquote>\n<h2 id=\"新增測試程式\"><a href=\"#新增測試程式\" class=\"headerlink\" title=\"新增測試程式\"></a>新增測試程式</h2><p>因為打算要做的是購物車的價格計算，預期的Service類別應該就叫做Cart，這個類別將負責計算商品價格總價，所以我們就分別在Services目錄下建立一個Cart.asp，然後再Test目錄下建立一個CartTest.asp吧。</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&#x27; /Test/CartTest.asp</span></span><br><span class=\"line\">&lt;!-- #include virtual=<span class=\"string\">&quot;/Services/Cart.asp&quot;</span> --&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\"><span class=\"keyword\">Class</span> CartTest <span class=\"comment\">&#x27; Extends TestCase</span></span><br><span class=\"line\">    <span class=\"keyword\">Private</span> target</span><br><span class=\"line\">    <span class=\"keyword\">Public</span> <span class=\"keyword\">Function</span> TestCaseNames()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">End</span> <span class=\"keyword\">Function</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">Public</span> <span class=\"keyword\">Sub</span> SetUp()</span><br><span class=\"line\">    <span class=\"keyword\">set</span> target = <span class=\"built_in\">new</span> Cart</span><br><span class=\"line\">    <span class=\"keyword\">End</span> <span class=\"keyword\">Sub</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">Public</span> <span class=\"keyword\">Sub</span> TearDown()</span><br><span class=\"line\">    <span class=\"keyword\">Set</span> target = <span class=\"literal\">Nothing</span></span><br><span class=\"line\">    <span class=\"keyword\">End</span> <span class=\"keyword\">Sub</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">Public</span> <span class=\"keyword\">Sub</span> AddNumberTest(oTestResult)</span><br><span class=\"line\">    <span class=\"comment\">&#x27;oTestResult.AssertEquals expected, actual</span></span><br><span class=\"line\">    <span class=\"keyword\">End</span> <span class=\"keyword\">Sub</span></span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Class</span></span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&#x27;/Services/Cart.asp</span></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\"><span class=\"keyword\">Class</span> Cart </span><br><span class=\"line\">    <span class=\"keyword\">Private</span> <span class=\"keyword\">Sub</span> Class_Initialize()</span><br><span class=\"line\">    <span class=\"keyword\">End</span> <span class=\"keyword\">Sub</span> </span><br><span class=\"line\">    <span class=\"keyword\">Private</span> <span class=\"keyword\">Sub</span> Class_Terminate()</span><br><span class=\"line\">    <span class=\"keyword\">End</span> <span class=\"keyword\">Sub</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">Public</span> <span class=\"keyword\">Default</span> <span class=\"keyword\">function</span> Init()</span><br><span class=\"line\">        <span class=\"keyword\">Set</span> Init = <span class=\"keyword\">Me</span></span><br><span class=\"line\">    <span class=\"keyword\">End</span> <span class=\"keyword\">function</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Class</span></span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"調整測試程式，使其可以運作\"><a href=\"#調整測試程式，使其可以運作\" class=\"headerlink\" title=\"調整測試程式，使其可以運作\"></a>調整測試程式，使其可以運作</h2><p>習慣上我會將asp的class基本語法以及常用的東西放在snippet裡面，因為asp沒有intellisense可以用，還是不要考驗自己的記憶力吧。而為了測試框架是否真的可以用，我會先讓他可以正常運作，之後才會開始開發。</p>\n<p>而為了在asp環境偵錯，我也會先把框架的On Error Resume Next語法給註解掉，這樣在撰寫過程中真的有錯誤的話，可以直接透過IIS設定，將錯誤顯示在瀏覽器上，從而找到是哪一段出錯。</p>\n<p><img src=\"/artblog/asp-unit-test/1531980223_83966.png\"></p>\n<h2 id=\"開始認真撰寫第一個測試程式\"><a href=\"#開始認真撰寫第一個測試程式\" class=\"headerlink\" title=\"開始認真撰寫第一個測試程式\"></a>開始認真撰寫第一個測試程式</h2><p>藉由TDD的概念，首先我們要先想好，我們期望未來Client端應該怎麼使用我們的程式。當然一定是越簡單越好，一看就知道怎麼用，然後很清楚明白這樣。</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Public</span> <span class=\"keyword\">Sub</span> ProductsShouldPay_23400(oTestResult)</span><br><span class=\"line\">    <span class=\"keyword\">dim</span> productA : <span class=\"keyword\">set</span> productA = (<span class=\"built_in\">new</span> Product)(<span class=\"string\">&quot;任天堂 Nintendo Switch 藍紅手把組&quot;</span>, <span class=\"number\">9780</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">dim</span> productB : <span class=\"keyword\">set</span> productB = (<span class=\"built_in\">new</span> Product)(<span class=\"string\">&quot;OSIM按摩椅&quot;</span>, <span class=\"number\">12800</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">dim</span> productC : <span class=\"keyword\">set</span> productC = (<span class=\"built_in\">new</span> Product)(<span class=\"string\">&quot;柔韌潔淨抽取衛生紙100抽(8包x8串/箱)&quot;</span>, <span class=\"number\">820</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">dim</span> products : products = Array(productA, productB, productC)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">dim</span> actual : actual = <span class=\"number\">23400</span></span><br><span class=\"line\">    <span class=\"keyword\">dim</span> expected : expected = target.ShouldPay(products)</span><br><span class=\"line\">    oTestResult.AssertEquals expected, actual</span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Sub</span></span><br></pre></td></tr></table></figure>\n<p>我們用到了一個商品類別(Product)，透過建構式注入了商品的名稱、單價及數量，接著將牠放到陣列裡面全部塞給購物車，最後購物車應該要付23400塊錢。</p>\n<p>因為用到了一個還不存在的商品類別，所以我們需要設計一下這個資料傳輸物件類別，讓測試程式能正常運行，順便將Service的ShouldPay()直接回傳0，讓他出現第一個紅燈。</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Class</span> Product </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Name     <span class=\"comment\">&#x27;名稱</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Price    <span class=\"comment\">&#x27;單價</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Qty      <span class=\"comment\">&#x27;數量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">Private</span> <span class=\"keyword\">Sub</span> Class_Initialize()</span><br><span class=\"line\">    <span class=\"keyword\">End</span> <span class=\"keyword\">Sub</span> </span><br><span class=\"line\">    <span class=\"keyword\">Private</span> <span class=\"keyword\">Sub</span> Class_Terminate()</span><br><span class=\"line\">    <span class=\"keyword\">End</span> <span class=\"keyword\">Sub</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">Public</span> <span class=\"keyword\">Default</span> <span class=\"keyword\">function</span> Init(productName, productPrice, productQty)</span><br><span class=\"line\">        Name = productName</span><br><span class=\"line\">        Price = productPrice</span><br><span class=\"line\">        Qty = productQty</span><br><span class=\"line\">        <span class=\"keyword\">Set</span> Init = <span class=\"keyword\">Me</span></span><br><span class=\"line\">    <span class=\"keyword\">End</span> <span class=\"keyword\">function</span></span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Class</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/artblog/asp-unit-test/1531981358_6975.png\"></p>\n<h2 id=\"點亮第一個綠燈\"><a href=\"#點亮第一個綠燈\" class=\"headerlink\" title=\"點亮第一個綠燈\"></a>點亮第一個綠燈</h2><figure class=\"highlight vb\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">function</span> ShouldPay(products)</span><br><span class=\"line\">    <span class=\"keyword\">dim</span> result : result = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">dim</span> prod : <span class=\"keyword\">for</span> <span class=\"keyword\">each</span> prod <span class=\"keyword\">in</span> products</span><br><span class=\"line\">        result = result + ( prod.Price * prod.Qty )</span><br><span class=\"line\">    <span class=\"keyword\">next</span></span><br><span class=\"line\">    ShouldPay = result</span><br><span class=\"line\"><span class=\"keyword\">end</span> <span class=\"keyword\">function</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/artblog/asp-unit-test/1531981493_93424.png\"></p>\n<blockquote>\n<p>TDD的概念雖然有一個BabyStep的部分，照理說我不應該在這一個測試就直接寫成單價乘數量加總，因為測試案例中並沒有體現這一點。不過當你如果很熟悉的話，自然這個步伐可以稍微的跨大一點。所以，在TDD開發中，測試案例的撰寫是一個非常重要的學問，因為每個測試案例都應該是一個關鍵的情境，關於這個有一本書很推薦 驗收測試驅動開發 ATDD實例詳解。</p>\n</blockquote>\n<h2 id=\"重構\"><a href=\"#重構\" class=\"headerlink\" title=\"重構\"></a>重構</h2><p>剛剛測試程式那邊在產生假資料的時候還在用productABC，最後還要用一個Array把它串再一起。如果東西很多我不就看的很累？所以我決定把它抽象出來，主要的程式就保留意圖就好。</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Public</span> <span class=\"keyword\">Sub</span> ProductsShouldPay_23400(oTestResult)</span><br><span class=\"line\">    <span class=\"keyword\">dim</span> products : products = GetWantedProducts()</span><br><span class=\"line\">    <span class=\"keyword\">dim</span> actual : actual = <span class=\"number\">23400</span></span><br><span class=\"line\">    <span class=\"keyword\">dim</span> expected : expected = target.ShouldPay(products)</span><br><span class=\"line\">    oTestResult.AssertEquals expected, actual</span><br><span class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Sub</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">function</span> GetWantedProducts()</span><br><span class=\"line\">    <span class=\"keyword\">dim</span> result() : <span class=\"keyword\">redim</span> result(-<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">ReDim</span> <span class=\"keyword\">Preserve</span> result(UBound(result) + <span class=\"number\">1</span>) : <span class=\"keyword\">set</span> result(UBound(result)) = (<span class=\"built_in\">new</span> Product)(<span class=\"string\">&quot;任天堂 Nintendo Switch 藍紅手把組&quot;</span>, <span class=\"number\">9780</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">ReDim</span> <span class=\"keyword\">Preserve</span> result(UBound(result) + <span class=\"number\">1</span>) : <span class=\"keyword\">set</span> result(UBound(result)) = (<span class=\"built_in\">new</span> Product)(<span class=\"string\">&quot;OSIM按摩椅&quot;</span>, <span class=\"number\">12800</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">ReDim</span> <span class=\"keyword\">Preserve</span> result(UBound(result) + <span class=\"number\">1</span>) : <span class=\"keyword\">set</span> result(UBound(result)) = (<span class=\"built_in\">new</span> Product)(<span class=\"string\">&quot;柔韌潔淨抽取衛生紙100抽(8包x8串/箱)&quot;</span>, <span class=\"number\">820</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    GetWantedProducts = result</span><br><span class=\"line\"><span class=\"keyword\">end</span> <span class=\"keyword\">function</span></span><br></pre></td></tr></table></figure>\n\n<p>重構完畢，測試看看有沒有問題。這個步驟很重要喔，改壞了馬上就知道。</p>\n<h2 id=\"加入會員打折的規則\"><a href=\"#加入會員打折的規則\" class=\"headerlink\" title=\"加入會員打折的規則\"></a>加入會員打折的規則</h2><p>我們接下來來模擬一個需求，如果客戶是VIP會員的話，那就打八折吧。</p>\n<p>我希望在計算的時候從外面傳入參數，直接告訴我會員的身份。而不用建構式注入的方式給購物車，這樣子購物車就不會跟會員身份綁在一起。萬一哪一天要做兩種價格的呈現讓使用者一次看到，喔，原來我如果是VIP會員的話，我比一般會員節省了多少錢這樣。。。。這樣子的話我只要呼叫兩次方法，而不用建立兩個Cart的instance</p>\n<p>這邊因為沒有C#的Enum可以用，我們還是用傳統的字串來表明身份吧。同時因為我們以前的情境也不可以壞掉，所以我會再補上一個測試案例給VIP，而一般會員與VIP的測試案例，在呼叫Cart.ShouldPay的時候，因為簽章方法需要額外的會員身份，所以也要跟著改。很重要的一點是，既然加入了一些新的變因，原先的測試案例名稱好像也顯得不合時宜，需要一併調整。</p>\n<p><img src=\"/artblog/asp-unit-test/1531983217_57269.png\"><br><img src=\"/artblog/asp-unit-test/1531983320_196.png\"></p>\n<p>第二個紅燈出現，讓我們來消滅它吧。</p>\n<p><img src=\"/artblog/asp-unit-test/1531983488_40284.png\"></p>\n<p><img src=\"/artblog/asp-unit-test/1531983501_81272.png\"></p>\n<p>到這邊為止，大概就是Demo一下如何在ASP裡面也可以透過單元測試來保護你的程式。</p>\n<p>當然這個範例還可以繼續玩下去，玩得很誇張，把一些設計模式加入進來，例如用策略模式來替換掉ShouldPay裡面的演算法。但是我現在這篇文章已經打了三小時，肚子很餓了。</p>\n<p>以後有衝動再寫吧。</p>\n","categories":["測試"],"tags":["asp","unittest"]},{"title":"JavaScript Decorator Pattern","url":"/artblog//JavaScript-Decorator-Pattern/","content":"<p>在原有的事物上，一點一滴地加上一些裝飾，這樣的概念套用在程式設計上，其實就是裝飾模式。</p>\n<p>以計算金額來看，最終的計算結果是一個價格。但是這個價格也許還要再經過一些加工，例如markup、稅額等等，最終呈現的金額可能會因為各種條件而有所不同，這就可以利用裝飾模式來處理</p>\n<span id=\"more\"></span>\n\n<p>一樣是從書中範例開始模仿學習，書中的範例提供了兩種方式，都能夠達到目的，這邊練習選擇比較簡單易懂的方式。</p>\n<blockquote>\n<p>範例取自JavaScript設計模式</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// /src/Sale.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> decorators = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./Decorators&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Sale</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">price</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">price</span> = price &gt; <span class=\"number\">0</span> ? price : <span class=\"number\">100</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">decorators_list</span> = []</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">decorators</span> = decorators</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">decorate</span>(<span class=\"params\">decorator</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">decorators_list</span>.<span class=\"title function_\">push</span>(decorator)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">GetPrice</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> price = <span class=\"variable language_\">this</span>.<span class=\"property\">price</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> max = <span class=\"variable language_\">this</span>.<span class=\"property\">decorators_list</span>.<span class=\"property\">length</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> name</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; max; i++) &#123;</span><br><span class=\"line\">            name = <span class=\"variable language_\">this</span>.<span class=\"property\">decorators_list</span>[i]</span><br><span class=\"line\">            price = <span class=\"variable language_\">this</span>.<span class=\"property\">decorators</span>[name].<span class=\"title class_\">GetPrice</span>(price)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> price</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">Sale</span></span><br></pre></td></tr></table></figure>\n\n<p>這邊的重點在於定義流程，介面。並不實作細節。也就是說，Sale這個類別(姑且讓我這樣稱呼吧)，他本身提供了兩個方法，一個方法是用來記錄有多少個decorator要使用。將他放在陣列裡面等候GetPrice()呼叫使用；而GetPrice()就更簡單了，將每一個decorator抓出來，然後把一開始的price經過剛才所設定的每一個decorator處理，最終再return這個結果。再更簡單的說，GetPrice()她只是將我們剛才設定要用的decorator，拿出來用而已。(實際的decorator部分，則是透過ctor的時候，從另外一隻檔案把資料抓過來，然後等著GetPrice()用this.decorators[name]這個方式去呼叫。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// /src/Decorators.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> decorators = &#123;&#125;</span><br><span class=\"line\">decorators.<span class=\"property\">fedtax</span> = &#123;</span><br><span class=\"line\">    <span class=\"title class_\">GetPrice</span>: <span class=\"keyword\">function</span> (<span class=\"params\">price</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> price + price * <span class=\"number\">5</span> / <span class=\"number\">100</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">decorators.<span class=\"property\">quebec</span> = &#123;</span><br><span class=\"line\">    <span class=\"title class_\">GetPrice</span>: <span class=\"keyword\">function</span> (<span class=\"params\">price</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> price + price * <span class=\"number\">7.5</span> / <span class=\"number\">100</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">decorators.<span class=\"property\">money</span> = &#123;</span><br><span class=\"line\">    <span class=\"title class_\">GetPrice</span>: <span class=\"keyword\">function</span> (<span class=\"params\">price</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> price.<span class=\"title function_\">toFixed</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = decorators</span><br></pre></td></tr></table></figure>\n\n<p>裝飾模式的各種實作細節，都被放在這個物件裡面，如果是較為複雜的實作細節，那就可以再考慮針對這個部分來進行重構設計，不過目前為止，維持這樣就可以了。</p>\n<p>這裡的重點在於將各種裝飾方法的名稱與實作方法這對key-value，放在這個decorators的物件內，方便我們定義的Sale物件來呼叫。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// /test/Sale.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mocha = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mocha&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> chai = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;chai&#x27;</span>)</span><br><span class=\"line\">chai.<span class=\"title function_\">should</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">SaleObj</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../src/Sale&#x27;</span>)</span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;Sale&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">it</span>(<span class=\"string\">&#x27;#GetPrice()&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> expected = <span class=\"string\">&#x27;112.88&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> sale = <span class=\"keyword\">new</span> <span class=\"title class_\">SaleObj</span>(<span class=\"number\">100</span>)</span><br><span class=\"line\">        sale.<span class=\"title function_\">decorate</span>(<span class=\"string\">&#x27;fedtax&#x27;</span>)</span><br><span class=\"line\">        sale.<span class=\"title function_\">decorate</span>(<span class=\"string\">&#x27;quebec&#x27;</span>)</span><br><span class=\"line\">        sale.<span class=\"title function_\">decorate</span>(<span class=\"string\">&#x27;money&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> actual = sale.<span class=\"title class_\">GetPrice</span>()</span><br><span class=\"line\">        actual.<span class=\"property\">should</span>.<span class=\"property\">be</span>.<span class=\"title function_\">equal</span>(expected)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>最終的程式碼與書上的並沒有太多改變，從測試程式中可以看到，模擬Client端呼叫使用的時候是透過一行一行的sale.decorate()呼叫，選擇不一樣的裝飾方法。這樣的方式在未來調整程式碼時，抽換演算法或是讓其他人瀏覽這份程式碼，都可以盡快的理解程式碼的意圖。</p>\n<p>Code在文章都貼出來了….不過還是一樣照慣例附上<a href=\"https://github.com/partypeopleland/js-decorator-pattern\">程式碼</a>….</p>\n","categories":["pattern"],"tags":["decorator"]},{"title":"JavaScript Factory Pattern","url":"/artblog//JavaScript-Factory-Pattern/","content":"<p>前陣子因為工作需要接觸了react、也因此需要了解更多的JavaScript語言特性，在JavaScript的世界裡，當然也有設計模式的存在；但因為語言特性不同，在各種程式語言中的實作都不太相同，這邊僅記錄從書中擷取的範例程式碼，作為日後參考使用</p>\n<span id=\"more\"></span>\n\n<p>在以往legacy code的撰寫從頭寫到尾，其他人閱讀這份程式碼的時候往往難以理解，如果能夠透過重構技巧，將程式邏輯加以語意化，並將具體實作封裝在獨立職責的類別中，在Client端程式碼應該就可以透過良好的設計，在閱讀程式碼的時候就能夠更快的理解程式碼的意圖，而不會被具體實作的細節混淆了你的大腦。</p>\n<p>Factory Pattern是一種初學者也可以很快上手，且實務上很有效的設計模式。</p>\n<blockquote>\n<p>範例取自JavaScript設計模式<br><img src=\"/artblog/JavaScript-Factory-Pattern/1528425696_40281.png\"></p>\n</blockquote>\n<p>從上面的程式碼，可以看到Factory被設計成一個靜態方法，直接呼叫CarMaker.factory()，而這個方法，會根據你給他的參數，決定應該返回哪一個實體給你用。而每一個實體的實作細節是不一樣的，這些東西通通都被封裝在各自的方法內，在Client端呼叫使用，只需要取得實體之後，依據實體再去執行drive()方法。</p>\n<p>所以將這個思路，轉換成最常見的加減乘除的計算機，再做一個範例來看看，這邊透過wallabyjs練習使用TDD開發，細節就參考Git Log了，這邊就大概貼一下圖<br><img src=\"/artblog/JavaScript-Factory-Pattern/1528427729_24355.png\"></p>\n<p>第一個測試完成，加入第二個測試，完成之後再重構</p>\n<p><img src=\"/artblog/JavaScript-Factory-Pattern/1528428411_20903.png\"></p>\n<p><img src=\"/artblog/JavaScript-Factory-Pattern/1528428443_2349.png\"></p>\n<blockquote>\n<p>這邊要注意的事情是，有沒有發現透過這樣的方式撰寫程式碼，後面增加的需求，你已經不需要再去變更先前的程式碼了，只需要新增這一次的需求即可。</p>\n</blockquote>\n<p><img src=\"/artblog/JavaScript-Factory-Pattern/1528428512_94203.png\"></p>\n<p>測試結果也是一目了然，這邊順便提一下，如果沒有使用套件wallabyjs，你一樣可以透過mocha -w持續監控的方式來達到相同的效果</p>\n<p>後面的乘法、除法，也是一樣的步驟，紅燈-&gt;綠燈-&gt;重構 的循環。</p>\n<p>這邊的加減乘除只是一個範例的需求，真實世界的用法肯定要複雜許多，這邊就是OOP(物件導向程式設計)的概念了，將具體的演算法封裝在各個類別中，由工廠模式負責提供實體，所以能做到用相同的程式邏輯，執行不一樣的具體實作。在剛才的範例中，我們定義的邏輯是</p>\n<ol>\n<li>透過工廠方法，讓他幫我們取得一個實體，而條件就是我們給予他的類型 (add , sub , mul or div)</li>\n<li>我們讓這個實體進行運算，同時給他必要的參數 (要被具體運算的參數， a and b )</li>\n<li>取得這個運算的結果<br>所以，這邊定義的是邏輯、流程，都是一個比較概念抽象性的東西；而具體的實作內容，怎麼加減乘除，都是放在各個方法內去做，在Client端並不太需要了解具體的細節。</li>\n</ol>\n<p>附上本次範例<a href=\"https://github.com/partypeopleland/js-factory-pattern\">Code</a></p>\n","categories":["pattern"],"tags":["factory"]},{"title":"JavaScript Strategy Pattern","url":"/artblog//JavaScript-Strategy-Pattern/","content":"<p>策略模式作爲一種軟體設計模式，指對象有某個行爲，但是在不同的場景中，該行爲有不同的實現算法。比如每個人都要「交個人所得稅」，但是「在美國交個人所得稅」和「在中國交個人所得稅」就有不同的算稅方法。  – By <a href=\"https://zh.wikipedia.org/wiki/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F\">WIKI</a></p>\n<span id=\"more\"></span>\n\n<p>其實WIKI上面說得很清楚了，用我自己理解的話來說的話，就比如每天上班的路線，也許周一到周五都有不同的路線，但是一樣都能到達目的地。這些不同的路線就是【可被替換的演算法】，而決定採用哪一種演算法的條件，就是【今天星期幾】。</p>\n<p>照慣例還是先從書本上的範例開始學習，一樣是從書中取得的原始範例後再加以調整重構。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// /src/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Validator</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./Validator.js&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> strategies = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./ValidatorStrategy.js&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">&quot;Super&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"string\">&quot;Man&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"string\">&quot;unknown&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">userName</span>: <span class=\"string\">&quot;o_O&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> validator = <span class=\"keyword\">new</span> <span class=\"title class_\">Validator</span>(strategies)</span><br><span class=\"line\">validator.<span class=\"property\">config</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">&quot;isNonEmpty&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"string\">&quot;isNumber&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">userName</span>: <span class=\"string\">&quot;isAlphaNum&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">validator.<span class=\"title function_\">validate</span>(data)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (validator.<span class=\"title function_\">hasErrors</span>()) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(validator.<span class=\"property\">messages</span>.<span class=\"title function_\">join</span>(<span class=\"string\">&quot;\\n&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>範例是模擬表單驗證的前端Code，假設表單的資料收集起來之後是data物件，則預先設定我們的表單驗證規則物件strategies，並且將資料傳遞給validator，透過validator來幫我們做表單驗證的動作。當然此處我們會先設定我們的表單驗證規則，firstName的部分我們採用的規則叫做【isNonEmpty】；age的規則叫做【isNumber】；userName的規則則是使用【isAlphaNum】。</p>\n<blockquote>\n<p>以isNumber這個規則名稱為範例來說明，當然也可以替換為更適合的演算法名稱，只是因為範例中的驗證部分演算法的確內容就是判斷是否為數字，所以才命名為isNumber</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// /src/Validator.js</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Validator</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">types</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">types</span> = types</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">messages</span> = []</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">config</span> = &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">validate</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">messages</span> = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> data) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data.<span class=\"title function_\">hasOwnProperty</span>(i)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> type = <span class=\"variable language_\">this</span>.<span class=\"property\">config</span>[i]</span><br><span class=\"line\">                <span class=\"keyword\">let</span> checker = <span class=\"variable language_\">this</span>.<span class=\"property\">types</span>[type]</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!type) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!checker) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> &#123;</span><br><span class=\"line\">                        <span class=\"attr\">name</span>: <span class=\"string\">&quot;ValidationError&quot;</span>, <span class=\"attr\">message</span>: <span class=\"string\">&quot;No handler to validate type:&quot;</span> + type</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> result = checker.<span class=\"title function_\">validate</span>(data[i])</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!result) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> msg = <span class=\"string\">&quot;Invalid value for *&quot;</span> + i + <span class=\"string\">&quot;*, &quot;</span> + checker.<span class=\"property\">instructions</span></span><br><span class=\"line\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">messages</span>.<span class=\"title function_\">push</span>(msg)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">hasErrors</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">hasErrors</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">messages</span>.<span class=\"property\">length</span> !== <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">Validator</span></span><br></pre></td></tr></table></figure>\n\n<p>作為Validator最主要的功能，就是依據傳入的設定與資料，判斷該使用何種演算法進行驗證。透過for…in的語法與hasOwnProperty()的技巧，取得物件的屬性名稱(也就是程式中的i)，再透過屬性名稱去找傳入的設定，如果沒有該項設定，則略過該屬性的驗證；如果有找到，那在去找演算法是否存在，不存在就拋例外，存在就呼叫演算法內所定義的validate方法，並且將表單的該項資料拿去做驗證。若驗證有誤，再將錯誤訊息紀錄於陣列messages中。而最終判斷是否有通過表單驗證，就判斷陣列長度是否等於0就可以了。</p>\n<p>說起來一長串，其實看程式碼會比較容易理解，這邊需要注意的部分就是，一樣是在validate()這個方法內，實作的細節都是由策略物件提供的(也就是this.types)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// /src/ValidatorStrategy.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = strategy = &#123;</span><br><span class=\"line\">    <span class=\"attr\">isNonEmpty</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">validate</span>: <span class=\"keyword\">function</span> (<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value !== <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">instructions</span>: <span class=\"string\">&quot;the value cannot be empty&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">isNumber</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">validate</span>: <span class=\"keyword\">function</span> (<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> !<span class=\"built_in\">isNaN</span>(value)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">instructions</span>: <span class=\"string\">&quot;the value can only be a valid number, e.g. 1, 3.14 or 201&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">isAlphaNum</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">validate</span>: <span class=\"keyword\">function</span> (<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> !<span class=\"regexp\">/[^a-z0-9]/i</span>.<span class=\"title function_\">test</span>(value)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">instructions</span>: <span class=\"string\">&quot;the value can only contain characters and numbers, no spe&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>這一支程式就很單純的就是把各種演算法都放在這個物件之內。為了要讓它們可以被替換，每一種演算法都提供了相同的呼叫方法及屬性(就像是C#的Interface有先定義好介面，讓子類別繼承；而javascript沒有這種東西，但是只要都設定好一樣的方法，當然也是可以直接拿來替換使用)</p>\n<p>照慣例一樣附上練習的<a href=\"https://github.com/partypeopleland/js-strategy-pattern\">程式碼</a></p>\n","categories":["pattern"],"tags":["strategy"]},{"title":"JavaScript模擬C#的Enum","url":"/artblog//JavaScript-CSharp-Enum/","content":"<p>在前端JavaScript並沒有C# Enum可以用，所以在處理一些列舉的東西，就很希望有Intellisense可以用</p>\n<span id=\"more\"></span>\n<p>模擬的情境是在瀏覽器環境下，在前端js中要去使用類似C#的Enum功能，並且只存在一份程式碼，能夠被其他js檔案重複使用及呼叫。<br>最終的目錄結構長這樣，過程就不細談，應該也沒人想看我說，這個時候加一個檔案到哪個目錄…etc的吧，所以說重點就好囉~</p>\n<p><img src=\"/artblog/JavaScript-CSharp-Enum/1527048178_98424.png\"></p>\n<p>首先要能夠滿足Intellisense。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ClothSize</span> = &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Small</span>: &#123; <span class=\"title class_\">Code</span>: <span class=\"string\">&quot;S&quot;</span>, <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;小&quot;</span>, <span class=\"title class_\">Breast</span>: <span class=\"number\">96</span> &#125;,</span><br><span class=\"line\">        <span class=\"title class_\">Normal</span>: &#123; <span class=\"title class_\">Code</span>: <span class=\"string\">&quot;M&quot;</span>, <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;一般&quot;</span>, <span class=\"title class_\">Breast</span>: <span class=\"number\">102</span> &#125;,</span><br><span class=\"line\">        <span class=\"title class_\">Large</span>: &#123; <span class=\"title class_\">Code</span>: <span class=\"string\">&quot;L&quot;</span>, <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;大&quot;</span>, <span class=\"title class_\">Breast</span>: <span class=\"number\">108</span> &#125;,</span><br><span class=\"line\">        <span class=\"title class_\">ExtraLarge</span>: &#123; <span class=\"title class_\">Code</span>: <span class=\"string\">&quot;XL&quot;</span>, <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;加大&quot;</span>, <span class=\"title class_\">Breast</span>: <span class=\"number\">114</span> &#125;,</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/artblog/JavaScript-CSharp-Enum/1527048015_35215.png\"></p>\n<p>接著將這隻檔案抽出來一個獨立檔案，前面加個export，讓import可以使用</p>\n<p><img src=\"/artblog/JavaScript-CSharp-Enum/1527048074_7795.png\"></p>\n<h2 id=\"import的語法\"><a href=\"#import的語法\" class=\"headerlink\" title=\"import的語法\"></a>import的語法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ClothSize</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./src/Enum/Enum.js&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>接著，有的時候在下拉選單會希望能夠呈現所有Enum的名稱，這時候就需要將我們的JavaScript Object把它處理一下，變成一個物件的集合，方便前端程式碼操作。</p>\n<p>這邊用到的技巧就是<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\">JavaScript For In</a>，一樣也是寫一個方法將他抽象出來</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">GetEnumCollection</span> = jsonObjEnum =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> p <span class=\"keyword\">in</span> jsonObjEnum) result.<span class=\"title function_\">push</span>(jsonObjEnum[p])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用的時候就是向下面這樣寫</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"title class_\">GetEnumCollection</span>(<span class=\"title class_\">ClothSize</span>)</span><br></pre></td></tr></table></figure>\n\n<p>但這只是直接將資料轉為陣列，若還要再針對陣列結果做篩選，自己就要另外在寫程式，所以再針對篩選的部分做一下調整</p>\n<p>這邊貼一下演進的過程<br><img src=\"/artblog/JavaScript-CSharp-Enum/1527048921_12125.png\"></p>\n<p><img src=\"/artblog/JavaScript-CSharp-Enum/1527049010_9203.png\"><br><img src=\"/artblog/JavaScript-CSharp-Enum/1527049046_96176.png\"></p>\n<p>最終程式碼就不貼了，直接弄個<a href=\"https://github.com/partypeopleland/Js_Enum\">Github</a>看Code</p>\n<p>這邊的Enum還是會有被修改的問題，那就要參考用<a href=\"https://stackoverflow.com/questions/287903/what-is-the-preferred-syntax-for-defining-enums-in-javascript\">Freeze</a>的方式建立。就不再細談了。</p>\n","categories":["javascript"],"tags":["eunm"]},{"title":"ObServer Mode 觀察者模式","url":"/artblog//observer-mode/","content":"<p>用自己的方式理解觀察者模式，並嘗試撰寫 C# 範例程式碼說明</p>\n<span id=\"more\"></span>\n\n<p>物件導向程式設計中通常都會遵循單一職責等設計原則，所以通常會有一個一個的物件負責處理某一件事情，而在撰寫開發的時候，通常就會在程式內去直接 new 物件實體出來，這就導致了程式相依於該物件實體，因為寫死在裡面了，動不了。</p>\n<p>舉例來說：在主程式內我們希望有一個 People，並且讓這個人去移動，程式碼如下</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Main</span></span><br><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> people = <span class=\"keyword\">new</span> People(<span class=\"string\">&quot;art&quot;</span>);</span><br><span class=\"line\">        people.Move();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lib</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">People</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">People</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Move</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> myCar = <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\">        myCar.Drive(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Car</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Drive</span>(<span class=\"params\">People people</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$&quot;<span class=\"subst\">&#123;people.Name&#125;</span> Moving by car&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/artblog/observer-mode/1538719773_19433.png\"></p>\n<p>這當然違反了開放封閉原則，未來如果你想要更換別的物件實體，就必須要重新去修改那一段寫死的程式，<strong>而且是要修改 Lib</strong> ，也因此，通常都會利用一些技巧，讓程式內不要出現 new 這件事情，而其中一種方法，就是透過注入的方式去處理</p>\n<p>將原本程式依賴某些物件的這個部分，把這個控制權從程式內部改為從外部傳進來，也就是<strong>程式依賴的物件實體改由注入取得</strong>。只要能夠達到這個目標，手段怎麼做那就是看情況、需求來調整，有透過建構式注入的，也有直接透過屬性注入的，當然也有透過方法來注入的。</p>\n<p>以上面的例子來說，我們在主程式內先將交通工具準備好，再把交通工具交給人，接著讓人去移動。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Main</span></span><br><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> car = <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> people = <span class=\"keyword\">new</span> People(<span class=\"string\">&quot;art&quot;</span>);</span><br><span class=\"line\">        people.Drive(car);</span><br><span class=\"line\">        people.Move();</span><br><span class=\"line\"></span><br><span class=\"line\">        Console.ReadKey();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lib</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">People</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Car _myCar;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">People</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Move</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _myCar.Drive(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Drive</span>(<span class=\"params\">Car car</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _myCar = car;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Car</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Drive</span>(<span class=\"params\">People people</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$&quot;<span class=\"subst\">&#123;people.Name&#125;</span> Moving by car&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二個版本已經將交通工具，改由主程式建立，然後傳遞給人，所以也新增加了一個 Drive() 方法，讓交通工具先保存在 People 內，而等到 Move() 的時候，就直接調用剛才注入的交通工具來執行，所以產生依賴物件的控制權不再由 Move() 方法內直接實作，而是相依於外部注入的實體，這樣的行為我們就稱呼它叫做依賴注入</p>\n<p>當然還可以有更多的版本繼續走下去，還有很多要改善的地方，但是這個 part 我們只要先搞懂依賴注入是怎麼一回事就夠了</p>\n<hr>\n<p>接著我們換到另外一個情境，看看透過剛才學到的技巧，應該怎麼實作</p>\n<p>嗯，就繼續剛才的交通工具好了，現在的情況是這樣的，有一群小夥子在飆車，每一個飆車族手上都有個無線電，一開始飆車的時候，每個人都必須要先調整到同一個無線電的頻道，而飆車地點從無線電公布，這樣大家才聽得到。聽到了就會一窩蜂的往那邊飆過去，所以大概會有幾個類別：</p>\n<p>無線電：需要廣播飆車的地點 ( Notice )<br>飆車族：就是飆車的人，要能夠飆車 ( CrazyMove )，一開始需要先調整無線電的頻道<br>程式碼大概像是這樣</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Main</span></span><br><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> radio = <span class=\"keyword\">new</span> Radio();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> man1 = <span class=\"keyword\">new</span> FastMan(<span class=\"string\">&quot;張三&quot;</span>, radio);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> man2 = <span class=\"keyword\">new</span> FastMan(<span class=\"string\">&quot;李四&quot;</span>, radio);</span><br><span class=\"line\"></span><br><span class=\"line\">        radio.Notice(<span class=\"string\">&quot;陽明山&quot;</span>);</span><br><span class=\"line\">        Console.ReadKey();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lib</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FastMan</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span> _name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> Radio _radio;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FastMan</span>(<span class=\"params\"><span class=\"built_in\">string</span> name, Radio radio</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._radio = radio;</span><br><span class=\"line\">        _radio.SetRoger(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CrazyMove</span>(<span class=\"params\"><span class=\"built_in\">string</span> place</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$&quot;<span class=\"subst\">&#123;_name&#125;</span> 接獲指示，飆車前往<span class=\"subst\">&#123;place&#125;</span>...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Radio</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> List&lt;FastMan&gt; _list = <span class=\"keyword\">new</span> List&lt;FastMan&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Notice</span>(<span class=\"params\"><span class=\"built_in\">string</span> place</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$&quot;無線電傳來聲音：讓我們奮力奔向 <span class=\"subst\">&#123;place&#125;</span> 吧!!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> man <span class=\"keyword\">in</span> _list)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            man.CrazyMove(place);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SetRoger</span>(<span class=\"params\">FastMan fastMan</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _list.Add(fastMan);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/artblog/observer-mode/1538732249_75848.png\"></p>\n<p>這邊用到的技巧就是幾個物件導向的原則，合起來就達到了這個效果，在程式碼中只要先透過 Radio 宣布飆車地點，所有人就會接收到資訊，並做出相應的行為。</p>\n<p>把這個概念完善一點，調整頻道的動作，其實就是加入一個清單，離開頻道，就是從清單中移除；廣播通知的對象則依循清單中的名單處理；通知對象其實就是透過依賴注入的方式，將物件注入給 Radio；聽到的人具體要做甚麼行為，則是由聽到的自行決定；也因為不是所有人都喜歡飆車，說不定也有的人聽到之後的反應是繼續做自己的事情，所以程式碼為了要有彈性，應該要做一個介面，其他的人就實作這個介面，來實現具體的行為。</p>\n<p>調整一下程式碼</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Main</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> radio = <span class=\"keyword\">new</span> Radio();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> man1 = <span class=\"keyword\">new</span> FastMan(<span class=\"string\">&quot;張三&quot;</span>, radio);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> man2 = <span class=\"keyword\">new</span> IdleMan(<span class=\"string\">&quot;李四&quot;</span>, radio);</span><br><span class=\"line\"></span><br><span class=\"line\">    radio.Notice(<span class=\"string\">&quot;陽明山&quot;</span>);</span><br><span class=\"line\">    Console.ReadKey();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lib </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IRadioKeeper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">CrazyMove</span>(<span class=\"params\"><span class=\"built_in\">string</span> place</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">IdleMan</span> : <span class=\"title\">IRadioKeeper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span> _name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> Radio _radio;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IdleMan</span>(<span class=\"params\"><span class=\"built_in\">string</span> name, Radio radio</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._radio = radio;</span><br><span class=\"line\">        _radio.SetRoger(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CrazyMove</span>(<span class=\"params\"><span class=\"built_in\">string</span> place</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$&quot;<span class=\"subst\">&#123;_name&#125;</span> 接獲指示，站在原地發呆看著其他人飆車前往<span class=\"subst\">&#123;place&#125;</span>...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Radio</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> List&lt;IRadioKeeper&gt; _list = <span class=\"keyword\">new</span> List&lt;IRadioKeeper&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Notice</span>(<span class=\"params\"><span class=\"built_in\">string</span> place</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$&quot;無線電傳來聲音：讓我們奮力奔向 <span class=\"subst\">&#123;place&#125;</span> 吧!!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> man <span class=\"keyword\">in</span> _list)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            man.CrazyMove(place);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SetRoger</span>(<span class=\"params\">IRadioKeeper fastMan</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _list.Add(fastMan);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/artblog/observer-mode/1538732267_11974.png\"></p>\n<p>那接著又如果張三想回家睡覺，不想要飆車了怎麼辦？所以我們要幫它做一個離開無線電頻道的方法，而因為這個方法不只張三用，李四可能也會用，所以我們應該將它放在介面，讓繼承的類別實作，實作細節就是呼叫 radio 的一個方法，讓廣播的對象清單移除掉。而 radio 類別，為了相依介面，我們也應該將它抽象成為介面、或是抽象類別</p>\n<p>最終程式碼在整理一下，大概會是這樣子，因為先前例子沒有寫得很好，順便把一些名稱重新命名了</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Main</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> radio = <span class=\"keyword\">new</span> Radio();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> man1 = <span class=\"keyword\">new</span> FastMan(<span class=\"string\">&quot;張三&quot;</span>, radio);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> man2 = <span class=\"keyword\">new</span> IdleMan(<span class=\"string\">&quot;李四&quot;</span>, radio);</span><br><span class=\"line\"></span><br><span class=\"line\">    radio.NoticeEverybody(<span class=\"string\">&quot;陽明山&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    man1.LeaveRadio();</span><br><span class=\"line\"></span><br><span class=\"line\">    radio.NoticeEverybody(<span class=\"string\">&quot;北海岸&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Console.ReadKey();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Lib</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IRadioKeeper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">UpdatePlace</span>(<span class=\"params\"><span class=\"built_in\">string</span> place</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">JoinRadio</span>()</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">LeaveRadio</span>()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">IdleMan</span> : <span class=\"title\">IRadioKeeper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span> _name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> BaseRadio _baseRadio;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IdleMan</span>(<span class=\"params\"><span class=\"built_in\">string</span> name, BaseRadio baseRadio</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._baseRadio = baseRadio;</span><br><span class=\"line\">        JoinRadio();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">UpdatePlace</span>(<span class=\"params\"><span class=\"built_in\">string</span> place</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$&quot;<span class=\"subst\">&#123;_name&#125;</span> 接獲指示，站在原地發呆看著其他人飆車前往<span class=\"subst\">&#123;place&#125;</span>...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">JoinRadio</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _baseRadio.JoinChannel(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">LeaveRadio</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _baseRadio.LeaveChannel(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FastMan</span> : <span class=\"title\">IRadioKeeper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span> _name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> BaseRadio _baseRadio;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FastMan</span>(<span class=\"params\"><span class=\"built_in\">string</span> name, BaseRadio baseRadio</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._baseRadio = baseRadio;</span><br><span class=\"line\">        JoinRadio();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">UpdatePlace</span>(<span class=\"params\"><span class=\"built_in\">string</span> place</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$&quot;<span class=\"subst\">&#123;_name&#125;</span> 接獲指示，飆車前往<span class=\"subst\">&#123;place&#125;</span>...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">JoinRadio</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _baseRadio.JoinChannel(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">LeaveRadio</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _baseRadio.LeaveChannel(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Radio</span> : <span class=\"title\">BaseRadio</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ChangePlace</span>(<span class=\"params\"><span class=\"built_in\">string</span> place</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$&quot;無線電傳來聲音：讓我們奮力奔向 <span class=\"subst\">&#123;place&#125;</span> 吧!!&quot;</span>);</span><br><span class=\"line\">        NoticeEverybody(place);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">BaseRadio</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> List&lt;IRadioKeeper&gt; _list = <span class=\"keyword\">new</span> List&lt;IRadioKeeper&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">NoticeEverybody</span>(<span class=\"params\"><span class=\"built_in\">string</span> place</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> man <span class=\"keyword\">in</span> _list)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            man.UpdatePlace(place);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">JoinChannel</span>(<span class=\"params\">IRadioKeeper man</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _list.Add(man);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">LeaveChannel</span>(<span class=\"params\">IRadioKeeper man</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _list.Remove(man);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/observer-mode/1538732192_57713.png\"></p>\n<p>好囉，我們剛才已經把觀察者模式實作完畢了，讓我們來看一下<a href=\"https://zh.wikipedia.org/wiki/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F\">觀察者模式</a>的定義：<strong>一個目標物件管理所有相依於它的觀察者物件，並且在它本身的狀態改變時主動發出通知</strong></p>\n<p>所以我們除了<code>radio.NoticeEverbody(&quot;somewhere&quot;);</code> 的實作，沒有與 wiki 上的定義相符合，而是每一次都通知，但是實作模式切記不能生搬硬套，主要還是要看情境，你說不說的出來，為甚麼你要這樣寫，而不是怎樣怎樣。</p>\n<p>我當然可以說因為我的情境是飆車族、通知的方法是無線電，就像聊天室一樣我說甚麼就通知甚麼，不管我這次說的話跟上次說的話一不一樣都要通知。</p>\n<p>但如果我的情境不是這個，而是在一些伺服器的狀態更新之類的，那麼當然是我的狀態有更新，才需要發出 Request 給觀察者，所以就像 Bill 每次都會提到的獨孤九劍，沒有一定的形式，招要活學活使。</p>\n<p>透過上面的步驟，大概也能夠理解到設計模式其實都是用物件導向原則組合出來的，怎麼組合的或許每個人的作法都有一些不同，但重要的是目的與情境有沒有滿足。希望大家學習設計模式的時候不要看著圖生搬硬套，應該從目的著手，</p>\n<blockquote>\n<p>設計模式其實都是基於物件導向原則的一個實作出來的方式，只要達到目的，怎麼完成的方式其實並不重要</p>\n</blockquote>\n","categories":["pattern"]},{"title":"Replace Constructors with Creation Methods","url":"/artblog//Replace-Constructors-with-Creation-Methods/","content":"<p>重構-向範式前進(Refactoring to Patterns) - Replace Constructors with Creation Methods </p>\n<p>覺得這個很重要，所以紀錄一下。</p>\n<span id=\"more\"></span>\n<p>在物件導向軟體開發中，應該有很多時候需要建立某些物件，而這些物件又需要一些必要的參數透過建構式傳遞進去，各種不同的建構式在使用時容易讓人混淆，透過容易理解的方法名稱，取代複雜的建構式。</p>\n<h2 id=\"重構步驟\"><a href=\"#重構步驟\" class=\"headerlink\" title=\"重構步驟\"></a>重構步驟</h2><ol>\n<li>找出呼叫建構式的地方，先透過Extract Method，將原本呼叫的程式碼提取出來，做一個public static方法</li>\n<li>將該方法透過Move Method，搬移到原本的目標類別內</li>\n<li>Client端就直接呼叫該類別的靜態方法產生所需物件</li>\n<li>重複上述步驟將建構式方法都替換為creation method</li>\n<li>將原本的建構式改為private，讓client端需要使用到物件的話，就都透過creation method取得instance</li>\n</ol>\n<h2 id=\"備註\"><a href=\"#備註\" class=\"headerlink\" title=\"備註\"></a>備註</h2><ol>\n<li>如果creation method所需要的參數過多，可以考慮使用introduce Parameter Object。就是將參數包裝成一個物件，透過這個物件傳遞給creation method即可</li>\n<li>如果有很多很多個建構式是比較常呼叫的，可以考慮只將常用的建構式替換為creation Method，而保留public的建構式。</li>\n<li>如果有非常非常多的建構式，為了避免該類別因為這些creation method太多，而不再能夠強烈的表達出該類別的職責，可以考慮將creation method都拉出來做一個factory類別。這邊的factory指的是不歸屬任何繼承體系，就只是單純的用來產生一個instance回傳的工廠而已。</li>\n</ol>\n<h2 id=\"說人話版本\"><a href=\"#說人話版本\" class=\"headerlink\" title=\"說人話版本\"></a>說人話版本</h2><p>如果有個類別，他的建構式有很多的參數，而且返回一個instance(不一定是同一個)，這個時候在client端去呼叫使用的時候，常常會有理解上的困難；將這些方法重新取個好理解的名字，接著把這些抽象出來的Creation Method塞回去原來的類別裡面，這樣子使用的時候，就可以直接去呼叫原本類別所提供的各種Creation Method。</p>\n<p>可是如果因為這樣做了，那個類別裡面充斥著許許多多我們新作出來的Creation Method，造成原本類別的定義或是用法，沒有那麼清晰了，反而更容易讓我們混淆，那麼就是時候將這些Creation Method抓出來，弄一個獨立、單純的類別，來放這些Creation Method。</p>\n","categories":["refactor"]},{"title":"[SignalR] 01 - WebSite And WinForm","url":"/artblog//signalr-01-website-and-winform/","content":"<p>透過 SignalR 製作一個可以即時通知給 Web 的練習專案，並且讓 Winform 也可以用</p>\n<span id=\"more\"></span>\n\n<p>透過網頁聊天室的範例練習 SignalR，<a href=\"https://github.com/partypeopleland/SignalRDemo\">GitHub Sample</a></p>\n<p><img src=\"/artblog/signalr-01-website-and-winform/1540887249_10832.png\"></p>\n<h2 id=\"nuget-安裝-SignalR-套件\"><a href=\"#nuget-安裝-SignalR-套件\" class=\"headerlink\" title=\"nuget 安裝 SignalR 套件\"></a>nuget 安裝 SignalR 套件</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">install-package Microsoft.AspNet.SignalR</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"設定-OWIN，建立-OWIN-啟動類別\"><a href=\"#設定-OWIN，建立-OWIN-啟動類別\" class=\"headerlink\" title=\"設定 OWIN，建立 OWIN 啟動類別\"></a>設定 OWIN，建立 OWIN 啟動類別</h2><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">assembly: OwinStartup(typeof(SingalRDemo.Startup))</span>]</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SingalRDemo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configuration</span>(<span class=\"params\">IAppBuilder app</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            app.MapSignalR();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"建立-server-端的-Hub\"><a href=\"#建立-server-端的-Hub\" class=\"headerlink\" title=\"建立 server 端的 Hub\"></a>建立 server 端的 Hub</h2><p>繼承 <code>Microsoft.AspNet.SignalR.Hub</code>，並建立自訂的方法，例如當 Client 端發送資料給 Server 端，Server 端應如何處理</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ChatHub</span> : <span class=\"title\">Microsoft.AspNet.SignalR.Hub</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 傳遞訊息給所有client</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;msg&quot;&gt;</span>聊天訊息<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SendMessage</span>(<span class=\"params\"><span class=\"built_in\">string</span> msg</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Clients.All.addMessage(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Client-端頁面-javascript-程式\"><a href=\"#Client-端頁面-javascript-程式\" class=\"headerlink\" title=\"Client 端頁面 javascript 程式\"></a>Client 端頁面 javascript 程式</h2><p>範例採用聊天室，送出訊息給 Hub 再由 Hub 傳遞給每一個 Client，而其他的 Client 接到資料後要可以將訊息呈現出來</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;msg&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;send&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Send&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Chat Message<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;room&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--需要先載入jQuery--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdnjs.cloudflare.com/ajax/libs/signalr.js/2.3.0/jquery.signalR.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/signalr/hubs&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--指向根目錄的/signalr/hubs--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;chat.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// chat.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> chat = $.connection.<span class=\"property\">chatHub</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> $sendBtn = $(<span class=\"string\">&#x27;#send&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> $msgDom = $(<span class=\"string\">&#x27;#msg&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> $room = \\$(<span class=\"string\">&#x27;#room&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提供給 Hub 呼叫，將傳來的文字顯示在畫面上</span></span><br><span class=\"line\">chat.<span class=\"property\">client</span>.<span class=\"property\">addMessage</span> = <span class=\"function\"><span class=\"params\">msg</span> =&gt;</span> \\$room.<span class=\"title function_\">append</span>(<span class=\"string\">`&lt;li&gt;<span class=\"subst\">$&#123;msg&#125;</span>&lt;/li&gt;`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定義 Client 端送出訊息事件，呼叫 Hub 的 sendMessage 方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">sendMsgHandler</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">chat.<span class=\"property\">server</span>.<span class=\"title function_\">sendMessage</span>($msgDom.<span class=\"title function_\">val</span>())</span><br><span class=\"line\">  $msgDom.<span class=\"title function_\">val</span>(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 與 Hub 的連線完成之後，才綁定送出按鈕的事件</span></span><br><span class=\"line\">$.connection.<span class=\"property\">hub</span>.<span class=\"title function_\">start</span>().<span class=\"title function_\">done</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  $sendBtn.<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;click&#x27;</span>, sendMsgHandler)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"WinForm-也加入聊天室\"><a href=\"#WinForm-也加入聊天室\" class=\"headerlink\" title=\"WinForm 也加入聊天室\"></a>WinForm 也加入聊天室</h2><p>需要指定 Winform 要跟哪個 Hub 互動，這個部分就在 form 一開始的時候先指定，所以先宣告兩個 private 變數存放 <code>HubConnection</code> 以及 <code>IHubProxy</code>，連線開始需要指定 SignalR 的網址，另外我們也會希望再連線收到資料的時候進行處理，因此在 HubConnection 的 Received 加入委派來處理</p>\n<p>先將收到的字串轉為 dynamic 物件，範例如下，在依據呼叫的 Hub 名稱、方法名稱或內容來做其他處理</p>\n<h2 id=\"Hub-傳遞的-Json-格式\"><a href=\"#Hub-傳遞的-Json-格式\" class=\"headerlink\" title=\"Hub 傳遞的 Json 格式\"></a>Hub 傳遞的 Json 格式</h2><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;H&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ChatHub&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;M&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;addMessage&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;A&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;小叮噹加入了聊天室&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ol>\n<li><a href=\"http://weisnote.blogspot.com/2012/08/signalr-webform-winform.html\">http://weisnote.blogspot.com/2012/08/signalr-webform-winform.html</a></li>\n<li><a href=\"https://docs.microsoft.com/zh-tw/aspnet/signalr/overview/getting-started/tutorial-getting-started-with-signalr\">https://docs.microsoft.com/zh-tw/aspnet/signalr/overview/getting-started/tutorial-getting-started-with-signalr</a></li>\n<li><a href=\"https://code.msdn.microsoft.com/SignalR-Getting-Started-b9d18aa9\">https://code.msdn.microsoft.com/SignalR-Getting-Started-b9d18aa9</a></li>\n<li><a href=\"https://dotblogs.com.tw/hatelove/archive/2012/07/01/signalr-introduction-about-realtime-website.aspx\">https://dotblogs.com.tw/hatelove/archive/2012/07/01/signalr-introduction-about-realtime-website.aspx</a></li>\n</ol>\n","tags":["signalR"]},{"title":"[SignalR] 02 - Multi Hubs","url":"/artblog//signalr-02-multi-hubs/","content":"<p>接續上一次的練習，這次改用多個 Hub 來處理</p>\n<span id=\"more\"></span>\n\n<p>在前一篇文章中大概簡單的介紹了一下 web 與 winform 同時使用 singnalR 技術完成即時溝通，但是如果我們的需求比較複雜一點，那可能就沒辦法透過先前的方式完成</p>\n<h2 id=\"模擬團隊使用情境\"><a href=\"#模擬團隊使用情境\" class=\"headerlink\" title=\"模擬團隊使用情境\"></a>模擬團隊使用情境</h2><p>假設目前有數個團隊，相互之間的溝通僅需要在團隊內即可。各團隊有自己的頻道，不能互相影響。另外團隊管理者也需要有一個管理團隊的頻道便於聯繫，跨部門溝通；最終，還需要有一個公告通知，不管在哪一個團隊，哪一個頻道的成員都會接收到即時通知。</p>\n<p>這邊採用的方式是多個 Hub 的解決方案，原本用 Groups 做，做到後面要弄 WinForm 的時候抓瞎了，而且感覺很麻煩，改用了多個 Hub 的解決方案，整體來說後端程式碼變得很簡潔，前端的部分也少了很多 Group 的處理</p>\n<p>所有成員依據自己身分，決定是否要加入 Leader、Team 等等頻道，模擬的情境如下<br><img src=\"/artblog/1540971372_8272.png\"></p>\n<h2 id=\"後端-Hub\"><a href=\"#後端-Hub\" class=\"headerlink\" title=\"後端 Hub\"></a>後端 Hub</h2><p>假設有 Team1、Team2 兩個團隊，再加上 Leader 及公告，所以要有四個 Hub。並且大家都只有一個方法，那就是 Send 訊息給各個在 Hub 註冊的 Client 端</p>\n<h2 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h2><p>理論上應該只有一個頁面，每個人登入該頁面都可以從後端吃到這個人的權限，能不能發布訊息、參加哪個頻道等等</p>\n<p>前端需要做的事情就是連線到 Hub 發訊息，並且接收 Hub 傳來的訊息呈現，但因為我們有多個 Hub，而且又有不一樣的權限，大概就是把一樣的部分共用，不同的部分放在 data，細節就不再處理了，重點只是擺在我們要完成的功能</p>\n<h2 id=\"Html\"><a href=\"#Html\" class=\"headerlink\" title=\"Html\"></a>Html</h2><p>網頁的部分我用了四個頁面來代表四個人的情境，但實際上所有程式碼都差不多，只有頻道的下拉選單，載入的 data 不一樣，這邊為了 Demo 方便，實際上可以用一個頁面來處理，這些差異的部分由後端產生</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>Name:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">readonly</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;channelId&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;0&quot;</span>&gt;</span>Team1<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span>Leader<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;3&quot;</span>&gt;</span>Notice<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;msg&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;send&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Send&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;channel&quot;</span>&gt;</span>Channel<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;room&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--需要先載入jQuery--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdnjs.cloudflare.com/ajax/libs/signalr.js/2.3.0/jquery.signalR.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/signalr/hubs&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--指向根目錄的/signalr/hubs--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;data1.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;app.js&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// data1.js (sample)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;張三&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">channel</span>: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;team1&quot;</span>, <span class=\"attr\">id</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;leader&quot;</span>, <span class=\"attr\">id</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;notice&quot;</span>, <span class=\"attr\">id</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 其實就是一個類似 factory 的東西，主要在給予前端 hub 的 proxy 物件去操作</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">getProxy</span> = (<span class=\"params\">channelId</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> id = <span class=\"built_in\">parseInt</span>(channelId, <span class=\"number\">10</span>);</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (id) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> $.connection.<span class=\"property\">team1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> $.connection.<span class=\"property\">team2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> $.connection.<span class=\"property\">leader</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> $.connection.<span class=\"property\">notice</span>;</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> $.connection.<span class=\"property\">team1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.js</span></span><br><span class=\"line\"><span class=\"comment\">// 這一段比較長，不過大致上重點就是中間那一段，從 data 找到這個人有哪些頻道，</span></span><br><span class=\"line\"><span class=\"comment\">// 然後就去註冊這些頻道的事件給後端 Hub 呼叫</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> tool <span class=\"keyword\">from</span> <span class=\"string\">&quot;./common.js&quot;</span>;</span><br><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> $sendBtn = $(<span class=\"string\">&quot;#send&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> $msgDom = $(<span class=\"string\">&quot;#msg&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> $room = $(<span class=\"string\">&quot;#room&quot;</span>);</span><br><span class=\"line\">  <span class=\"comment\">// Data Binding to UI</span></span><br><span class=\"line\">  $(<span class=\"string\">&quot;#name&quot;</span>).<span class=\"title function_\">val</span>(data.<span class=\"property\">name</span>);</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#channel&quot;</span>).<span class=\"title function_\">text</span>(data.<span class=\"property\">channel</span>.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x.<span class=\"property\">name</span>).<span class=\"title function_\">join</span>(<span class=\"string\">&quot;、&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; data.<span class=\"property\">channel</span>.<span class=\"property\">length</span>; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> currectChannelId = data.<span class=\"property\">channel</span>[index].<span class=\"property\">id</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> currectProxy = tool.<span class=\"title function_\">getProxy</span>(currectChannelId);</span><br><span class=\"line\">    currectProxy.<span class=\"property\">client</span>.<span class=\"property\">received</span> = <span class=\"function\">(<span class=\"params\">msg</span>) =&gt;</span> $room.<span class=\"title function_\">append</span>(<span class=\"string\">`&lt;li&gt;<span class=\"subst\">$&#123;msg&#125;</span>&lt;/li&gt;`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  $.connection.<span class=\"property\">hub</span>.<span class=\"title function_\">start</span>().<span class=\"title function_\">done</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    $sendBtn.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> currectProxy = tool.<span class=\"title function_\">getProxy</span>($(<span class=\"string\">&quot;#channelId&quot;</span>).<span class=\"title function_\">val</span>());</span><br><span class=\"line\">      <span class=\"keyword\">let</span> channelName = data.<span class=\"property\">channel</span>.<span class=\"title function_\">find</span>(</span><br><span class=\"line\">        <span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> x.<span class=\"property\">id</span> === <span class=\"built_in\">parseInt</span>($(<span class=\"string\">&quot;#channelId&quot;</span>).<span class=\"title function_\">val</span>(), <span class=\"number\">10</span>)</span><br><span class=\"line\">      ).<span class=\"property\">name</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      currectProxy.<span class=\"property\">server</span>.<span class=\"title function_\">send</span>(</span><br><span class=\"line\">        <span class=\"string\">`[<span class=\"subst\">$&#123;channelName&#125;</span>]<span class=\"subst\">$&#123;data.name&#125;</span>：<span class=\"subst\">$&#123;$msgDom.val()&#125;</span>`</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">      $msgDom.<span class=\"title function_\">val</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/1540971623_98614.png\"></p>\n<p>程式：<a href=\"https://github.com/partypeopleland/SignalRDemo/tree/develop\">Github</a> (branch:develop)</p>\n<p>這次的解決方案還是有一些問題，等之後再補充</p>\n","tags":["signalR"]},{"title":"[SignalR] 03 - Single-User-Group","url":"/artblog//signalr-03-single-user-group/","content":"<p>接續先前的練習，持續調整為 single-user-group 及多個 Hub</p>\n<span id=\"more\"></span>\n\n<p>在 website 的環境下，同一個使用者可以開啟多個網頁，那如何針對同一個使用者的瀏覽器發送訊息呢？<a href=\"https://docs.microsoft.com/en-us/aspnet/signalr/overview/guide-to-the-api/mapping-users-to-connections\">官方</a>有給出幾種方法及範例，優缺點也有列出，這邊採用的是單一用戶組的方式</p>\n<h2 id=\"Single-User-Groups\"><a href=\"#Single-User-Groups\" class=\"headerlink\" title=\"Single-User Groups\"></a>Single-User Groups</h2><p>在官方的範例是透過群組做到這一點，但是如果網站並沒有實作 Identity，透過<code>Context.User.Identity.Name</code>抓到的應該會是空字串，所以問題又變成了如何辨識使用者連線，既然是網頁，那只要從前端傳遞該使用者的 PKey 就可以了</p>\n<h2 id=\"如何辨識使用者連線？\"><a href=\"#如何辨識使用者連線？\" class=\"headerlink\" title=\"如何辨識使用者連線？\"></a>如何辨識使用者連線？</h2><p><img src=\"/artblog/signalr-03-single-user-group/1541063263_44939.png\"><br><img src=\"/artblog/signalr-03-single-user-group/1541063270_65364.png\"></p>\n<p>如此一來就可以透過 MVC 後端讀取使用者資訊，並在 Web 頁面與 SignalR 連線之前，將資料透過下列的方式塞入 QueryString，並可由後端取得資訊，應可利用 QueryString 來區分使用者的組別，然後在送出訊息的時候判斷組別，並在該組別發言</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">HubName(<span class=\"string\">&quot;oneuser&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OneUserHub</span> : <span class=\"title\">Microsoft.AspNet.SignalR.Hub</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> Task <span class=\"title\">OnConnected</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> id = Context.QueryString[<span class=\"string\">&quot;id&quot;</span>];</span><br><span class=\"line\">        Groups.Add(Context.ConnectionId, id);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">base</span>.OnConnected();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SendPrivateMsg</span>(<span class=\"params\"><span class=\"built_in\">string</span> userId, <span class=\"built_in\">string</span> msg</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Clients.Group(userId).Received(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Send</span>(<span class=\"params\"><span class=\"built_in\">string</span> msg</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Clients.All.Received(<span class=\"string\">$&quot;<span class=\"subst\">&#123;msg&#125;</span> at <span class=\"subst\">&#123;DateTime.Now:f&#125;</span>&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/signalr-03-single-user-group/1541063348_29307.png\"></p>\n<h2 id=\"將-SignalR-服務從網站拆出來\"><a href=\"#將-SignalR-服務從網站拆出來\" class=\"headerlink\" title=\"將 SignalR 服務從網站拆出來\"></a>將 SignalR 服務從網站拆出來</h2><p>之前練習的時候是透過網站直接安裝套件並建立服務，為了更好的模擬實務情境，網站應該是與 SignalR 切開來的會比較洽當，參考<a href=\"https://hk.saowen.com/a/3657a00b2fff7dbf8482f9230f9995a13f0065b2f5a83b303d78522647ef9981\">這篇</a>實作，以及<a href=\"https://cmatskas.com/signalr-cross-domain-with-cors/\">這篇</a>解決 CORS 問題</p>\n<blockquote>\n<p>備註：之後實際上線發現，實務上還是直接掛在網站上使用，並沒有另外拆出來，這邊就存查看看就好了</p>\n</blockquote>\n<p>新增一個 WinForm 專案，並安裝 nuget 套件<code>Microsoft.Owin.SelfHost</code>、<code>Microsoft.AspNet.SignalR.SelfHost</code>，並加入 OWin Startup 類別，服務建立在另外一個 port，所以也要針對 Owin Startup 來做一些修改，避過前端 CORS 的問題，所以也要安裝<code>Microsoft.Owin.Cors</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNet.SignalR;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Owin;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Owin.Cors;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Owin;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"meta\">assembly: OwinStartup(typeof(SignalRService.Startup))</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SignalRService</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configuration</span>(<span class=\"params\">IAppBuilder app</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            app.Map(<span class=\"string\">&quot;/signalr&quot;</span>, map =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                map.UseCors(CorsOptions.AllowAll);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> hubConfiguration = <span class=\"keyword\">new</span> HubConfiguration &#123; &#125;;</span><br><span class=\"line\">                map.RunSignalR(hubConfiguration);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外在 Client 端透過 javascript 連線的時候，必須要先指定連線路徑</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$.connection.<span class=\"property\">hub</span>.<span class=\"property\">url</span> = <span class=\"string\">&quot;http://localhost:22641/signalr&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>同時在 HTML 內原先載入的 signalr&#x2F;hub 也要改成服務的路徑</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://localhost:22641/signalr/hubs&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重新改寫-winform\"><a href=\"#重新改寫-winform\" class=\"headerlink\" title=\"重新改寫 winform\"></a>重新改寫 winform</h2><p>先前 winform 的實作方式並不是像 javascript client 那樣建立事件給 server 端的 hub 呼叫，而是在 winform client 端有接收到資料，就笨笨的去判斷資料是甚麼，然後再去處理，這個方式對於維護是很不便的，所以我們現在要重新改寫一下，將 winform 的部分也像 js client 一樣，寫好事件等 server 呼叫</p>\n<p>原先的<code>_conn.Received</code>還有<code>_conn.Closed</code>事件的委派就通通刪掉，取而代之的是一開始就把事件註冊下去給 proxyHub，因為要模擬上次所實作的概念，我也假設 winform 端是有登入的，然後取得使用者資料，再依據使用者的頻道去動態的 create，在一開始就先處理這件事情</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> CurrectUser <span class=\"title\">GetUser</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span>這邊應該要從資料庫中取得使用者的資料</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CurrectUser</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Name = <span class=\"string\">&quot;張三&quot;</span>,</span><br><span class=\"line\">        Channel = <span class=\"keyword\">new</span> List&lt;ChannelInfo&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> ChannelInfo &#123;Name = <span class=\"string\">&quot;team1&quot;</span>, Id = <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> ChannelInfo &#123;Name = <span class=\"string\">&quot;leader&quot;</span>, Id = <span class=\"number\">2</span>&#125;,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> ChannelInfo &#123;Name = <span class=\"string\">&quot;notice&quot;</span>, Id = <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Dictionary&lt;<span class=\"built_in\">string</span>, IHubProxy&gt; <span class=\"title\">GetUserHubs</span>(<span class=\"params\">IEnumerable&lt;ChannelInfo&gt; channels</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">string</span>, IHubProxy&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> info <span class=\"keyword\">in</span> channels)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        result.Add(info.Name,_conn.CreateHubProxy(info.Name));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 這邊是為了 V1 的測試</span></span><br><span class=\"line\">    result.Add(<span class=\"string\">&quot;chathub&quot;</span>, _conn.CreateHubProxy(<span class=\"string\">&quot;chathub&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">ChannelInfo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>當我們取得了使用者的頻道之後，接著要為這些 hub 註冊事件給 server 呼叫</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">_hubs = GetUserHubs(_currectUser.Channel);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> currectHub <span class=\"keyword\">in</span> _hubs)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    currectHub.Value.On&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">&quot;received&quot;</span>, (msg) =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        DoUiCallBack(() =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            GenerateNewLabel(msg);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">GenerateNewLabel</span>(<span class=\"params\"><span class=\"built_in\">string</span> msg</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> lb = <span class=\"keyword\">new</span> Label</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Location = <span class=\"keyword\">new</span> Point(<span class=\"number\">15</span>, y += <span class=\"number\">25</span>),</span><br><span class=\"line\">        Text = msg,</span><br><span class=\"line\">        ForeColor = Color.Blue,</span><br><span class=\"line\">        Width = <span class=\"number\">200</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.Controls.Add(lb);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">DoUiCallBack</span>(<span class=\"params\">UiCallBack cb</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.InvokeRequired)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Invoke(<span class=\"keyword\">new</span> UiCallBack(</span><br><span class=\"line\">            cb.Invoke</span><br><span class=\"line\">        ));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">UiCallBack</span>()</span>;</span><br></pre></td></tr></table></figure>\n\n<p>同時，畫面也做一些調整，不過這個練習主要只是做一個簡單的 POC，所以很多地方就沒有再去精細處理了，例如訊息會一直往下長….<br><img src=\"/artblog/signalr-03-single-user-group/1541063608_25007.png\"></p>\n<h2 id=\"WinForm-單一用戶組-Multi-Hubs\"><a href=\"#WinForm-單一用戶組-Multi-Hubs\" class=\"headerlink\" title=\"WinForm 單一用戶組 &amp; Multi Hubs\"></a>WinForm 單一用戶組 &amp; Multi Hubs</h2><p>連線時取得使用者的唯一識別碼，再將該連線加入至 Group (由登入機制提供給 client，再由 Client 透過 QueryString 傳遞給 SignalR)</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Hub</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> Task <span class=\"title\">OnConnected</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> id = Context.QueryString[<span class=\"string\">&quot;id&quot;</span>];</span><br><span class=\"line\">    Groups.Add(Context.ConnectionId, id);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">base</span>.OnConnected();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 傳遞訊息給單一用戶組</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;userId&quot;&gt;</span>要傳遞的對象<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;msg&quot;&gt;</span>訊息內容<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SendPrivateMsg</span>(<span class=\"params\"><span class=\"built_in\">string</span> userId, <span class=\"built_in\">string</span> msg</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Clients.Group(userId).Received(msg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js client</span></span><br><span class=\"line\"><span class=\"comment\">// PM msg btn event</span></span><br><span class=\"line\">$sendPrivateBtn.<span class=\"title function_\">on</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// userId is a pk for user</span></span><br><span class=\"line\">  $.connection.<span class=\"property\">notice</span>.<span class=\"property\">server</span>.<span class=\"title function_\">sendPrivateMsg</span>(</span><br><span class=\"line\">    userId,</span><br><span class=\"line\">    <span class=\"string\">`[PM]<span class=\"subst\">$&#123;data.name&#125;</span>：<span class=\"subst\">$&#123;$msgDom.val()&#125;</span>`</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  $msgDom.<span class=\"title function_\">val</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Winform Client</span></span><br><span class=\"line\"><span class=\"comment\">// .net client 傳遞querystring的方式，模擬從DB抓到的使用者PKey</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> querystringData = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; &#123;&#123;<span class=\"string\">&quot;id&quot;</span>, <span class=\"string\">&quot;10001&quot;</span>&#125;&#125;;</span><br><span class=\"line\">_conn = <span class=\"keyword\">new</span> HubConnection(SignalRurl, querystringData);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">btnPM_Click</span>(<span class=\"params\"><span class=\"built_in\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用notice是因為每一個人都會登入，所以單一用戶組相互溝通，在這邊才找的到人</span></span><br><span class=\"line\">    _hubs[<span class=\"string\">&quot;notice&quot;</span>].Invoke(<span class=\"string\">&quot;sendPrivateMsg&quot;</span>, <span class=\"string\">&quot;10002&quot;</span>, <span class=\"string\">$&quot;[PM-winform]<span class=\"subst\">&#123;_currectUser.Name&#125;</span>：<span class=\"subst\">&#123;textBox1.Text&#125;</span> at <span class=\"subst\">&#123;DateTime.Now:f&#125;</span>&quot;</span>);</span><br><span class=\"line\">    textBox1.Text = <span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>比較重要的事情是，因為單一用戶群組是在某個 Hub 底下所建立的，如果在 Invoke 的時候密語的對象不在同一個 Hub，訊息是沒辦法傳給對方的，解決辦法其實就是讓所有人都會加入同一個 Hub，也就是 Notice，當使用密語功能的時候，就一律透過 NoticeHub 來傳遞即可。</p>\n<p>Sample Code：<a href=\"https://github.com/partypeopleland/SignalRDemo\">Github</a></p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ol>\n<li><a href=\"https://docs.microsoft.com/zh-tw/aspnet/signalr/overview/guide-to-the-api/hubs-api-guide-net-client\">https://docs.microsoft.com/zh-tw/aspnet/signalr/overview/guide-to-the-api/hubs-api-guide-net-client</a></li>\n<li><a href=\"https://docs.microsoft.com/zh-tw/aspnet/signalr/overview/guide-to-the-api/hubs-api-guide-server\">https://docs.microsoft.com/zh-tw/aspnet/signalr/overview/guide-to-the-api/hubs-api-guide-server</a></li>\n</ol>\n","tags":["signalR"]},{"title":"[SignalR] 04 - IUserIdProvider","url":"/artblog//signalr-04-iuseridprovider/","content":"<p>這次利用官網介紹的<code>IUserId Provider</code>來替換掉單一使用者群組</p>\n<span id=\"more\"></span>\n\n<p>當初為了向某位多開視窗的使用者也可以正確發送、接收訊息，採用了單一使用者群組的方式實作，但是這樣子會發現程式碼需要在 OnConnected 的時候做一些事情，而且是每一個 Hub 都要這樣做，所以今天改用 IUserIdProvider 的方式處理</p>\n<p>Ref：<a href=\"https://docs.microsoft.com/zh-tw/aspnet/signalr/overview/guide-to-the-api/mapping-users-to-connections\">將 SignalR 使用者對應至連線</a></p>\n<hr>\n<p>原先 Hub 推訊息的部分<code>Clients.Group(userId).Received($&quot;&#123;msg&#125; at &#123;DateTime.Now:f&#125;&quot;);</code>，是依據我們給的 UserId 去找到該 Group，然後傳送給這個 Group 裡面所有的 Client；現在我們改用<code>Clients.User(userId).Received(msg);</code>，直接將訊息送給使用者，但是要用<code>Clients.Usre(userId)</code>之前，我們還必須要先告訴 SignalR，怎麼樣取得使用者 ID</p>\n<h2 id=\"自訂-UserIdProvider\"><a href=\"#自訂-UserIdProvider\" class=\"headerlink\" title=\"自訂 UserIdProvider\"></a>自訂 UserIdProvider</h2><p>依照<a href=\"https://docs.microsoft.com/zh-tw/aspnet/core/signalr/groups?view=aspnetcore-2.1\">文件</a>，繼承<code>IUserIdProvider</code>，實作介面方法，裡面撰寫如何取得使用者 ID 的邏輯，此處依照先前作法，仍舊是從 QueryString 取得 client 傳來的使用者唯一識別碼</p>\n<blockquote>\n<p>需要注意的是使用者識別碼有區分大小寫</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CustomUserIdProvider</span> : <span class=\"title\">IUserIdProvider</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">GetUserId</span>(<span class=\"params\">IRequest request</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 從QueryString中取得ID作為使用者的識別名稱</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> id = request.QueryString[<span class=\"string\">&quot;id&quot;</span>];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">string</span>.IsNullOrWhiteSpace(id) ? <span class=\"built_in\">string</span>.Empty : id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"註冊自訂的-Provider\"><a href=\"#註冊自訂的-Provider\" class=\"headerlink\" title=\"註冊自訂的 Provider\"></a>註冊自訂的 Provider</h2><p>直接在<code>startup.cs</code>裡面註冊即可</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configuration</span>(<span class=\"params\">IAppBuilder app</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 註冊自訂的使用者ID Provider規則</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> idProvider = <span class=\"keyword\">new</span> CustomUserIdProvider();</span><br><span class=\"line\">        GlobalHost.DependencyResolver.Register(<span class=\"keyword\">typeof</span>(IUserIdProvider), () =&gt; idProvider);</span><br><span class=\"line\"></span><br><span class=\"line\">        app.Map(<span class=\"string\">&quot;/signalr&quot;</span>, map =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            map.UseCors(CorsOptions.AllowAll);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> hubConfiguration = <span class=\"keyword\">new</span> HubConfiguration &#123; &#125;;</span><br><span class=\"line\">            map.RunSignalR(hubConfiguration);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>順便列出 Hub 的程式碼</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">BaseHub</span> : <span class=\"title\">Hub</span>&lt;<span class=\"title\">IClient</span>&gt;</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 傳遞訊息給某人</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;userId&quot;&gt;</span>要傳遞的對象<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;msg&quot;&gt;</span>訊息內容<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SendPrivateMsg</span>(<span class=\"params\"><span class=\"built_in\">string</span> userId, <span class=\"built_in\">string</span> msg</span>)</span></span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           <span class=\"comment\">//透過使用者ID來針對該使用者相關聯的連接發送訊息</span></span><br><span class=\"line\">           <span class=\"comment\">//此處Clients.User()必須要先註冊自訂的IUserIdProvider，讓SignalR知道怎麼取得使用者Id</span></span><br><span class=\"line\">           Clients.User(userId).Received(<span class=\"string\">$&quot;<span class=\"subst\">&#123;msg&#125;</span> at <span class=\"subst\">&#123;DateTime.Now:f&#125;</span> By User&quot;</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> 傳送訊息給Hub的所有人</span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">       <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;msg&quot;&gt;</span>The MSG.<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Send</span>(<span class=\"params\"><span class=\"built_in\">string</span> msg</span>)</span></span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           Clients.All.Received(<span class=\"string\">$&quot;<span class=\"subst\">&#123;msg&#125;</span> at <span class=\"subst\">&#123;DateTime.Now:f&#125;</span> By All&quot;</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   [<span class=\"meta\">HubName(<span class=\"string\">&quot;v4hub&quot;</span>)</span>]</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">V4Hub</span> : <span class=\"title\">BaseHub</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>嗯，沒錯，v4 測試版本的 Hub 程式碼直接就是繼承就好了，東西都在父類別，而且也不用再去 override，如果有多個 Hub，就直接繼承。因為我上一個版本也沒有重構…現在也懶得回頭重構了</p>\n<p>細節有需要的請直接參考 <a href=\"https://github.com/partypeopleland/SignalRDemo\">GitHub</a></p>\n","tags":["signalR"]},{"title":"[SignalR] 05 - In-Memory","url":"/artblog//signalr-05-in-memory/","content":"<p>繼續練習，這次想要取得線上使用者人數</p>\n<span id=\"more\"></span>\n\n<p>先前的方式並沒有辦法取得線上使用者人數，所以如果有這個需求，勢必只能選擇用記憶體或是外部儲存的方式來記錄使用者的連線資訊了<br><img src=\"/artblog/signalr-05-in-memory/1542876428_50479.png\"></p>\n<p>ref：<a href=\"https://docs.microsoft.com/zh-tw/aspnet/signalr/overview/guide-to-the-api/mapping-users-to-connections\">將 SignalR 使用者對應至連線</a></p>\n<p>記憶體的方式其實也就是透過 Client 端連線、斷線、重新連線至 SignalR 的時候將資訊記錄下來，並做出相應的處理，而發送訊息的部分則依據發送對象的 ID，查詢目前連線，然後逐一發送給該對象底下的各個連線</p>\n<h2 id=\"Hub-連線事件處理\"><a href=\"#Hub-連線事件處理\" class=\"headerlink\" title=\"Hub 連線事件處理\"></a>Hub 連線事件處理</h2><p>連線的時候，要記錄目前使用者，以及連線 ID</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> Task <span class=\"title\">OnConnected</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> userId = Context.QueryString[<span class=\"string\">&quot;id&quot;</span>];</span><br><span class=\"line\">    Connections.Add(userId, Context.ConnectionId);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">base</span>.OnConnected();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>斷線的時候，要將該使用者的連線 ID 刪除</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> Task <span class=\"title\">OnDisconnected</span>(<span class=\"params\"><span class=\"built_in\">bool</span> stopCalled</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> userId = Context.QueryString[<span class=\"string\">&quot;id&quot;</span>];</span><br><span class=\"line\">    Connections.Remove(userId, Context.ConnectionId);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">base</span>.OnDisconnected(stopCalled);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重新連線的時候，如果該使用者的連線 ID 不存在，就紀錄連線 ID</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> Task <span class=\"title\">OnReconnected</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> userId = Context.QueryString[<span class=\"string\">&quot;id&quot;</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 如果該使用者的ClientId不在清單內，就加入</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!Connections.GetConnections(userId).Contains(Context.ConnectionId))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Connections.Add(userId, Context.ConnectionId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">base</span>.OnReconnected();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>發送給單一使用者訊息的時候，透過我們所記錄的連線資訊逐一發送</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 傳遞訊息給某人</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;userId&quot;&gt;</span>要傳遞的對象<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;msg&quot;&gt;</span>訊息內容<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SendPrivateMsg</span>(<span class=\"params\"><span class=\"built_in\">string</span> userId, <span class=\"built_in\">string</span> msg</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> connectionId <span class=\"keyword\">in</span> Connections.GetConnections(userId))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Clients.Client(connectionId).Received(<span class=\"string\">$&quot;<span class=\"subst\">&#123;msg&#125;</span> at <span class=\"subst\">&#123;DateTime.Now:f&#125;</span> By Connections&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>傳送訊息給所有人就直接調用原有的 Client.All 就好了</p>\n</blockquote>\n<h2 id=\"管理使用者連線\"><a href=\"#管理使用者連線\" class=\"headerlink\" title=\"管理使用者連線\"></a>管理使用者連線</h2><p>新建一個類別，並於類別內宣告一個 Dictionary&lt;T,HashSet<string>&gt;來記錄連線資訊，用 HashSet 是避免記錄到重複資料</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ConnectionMapping</span>&lt;<span class=\"title\">T</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> Dictionary&lt;T, HashSet&lt;<span class=\"built_in\">string</span>&gt;&gt; _connections =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Dictionary&lt;T, HashSet&lt;<span class=\"built_in\">string</span>&gt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// ...略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>記錄使用者連線</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Add</span>(<span class=\"params\">T key, <span class=\"built_in\">string</span> connectionId</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">lock</span> (_connections)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!_connections.TryGetValue(key, <span class=\"keyword\">out</span> <span class=\"keyword\">var</span> connections))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            connections = <span class=\"keyword\">new</span> HashSet&lt;<span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\">            _connections.Add(key, connections);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">lock</span> (connections)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            connections.Add(connectionId);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>移除使用者連線</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Remove</span>(<span class=\"params\">T key, <span class=\"built_in\">string</span> connectionId</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">lock</span> (_connections)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!_connections.TryGetValue(key, <span class=\"keyword\">out</span> <span class=\"keyword\">var</span> connections))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">lock</span> (connections)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            connections.Remove(connectionId);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (connections.Count == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                _connections.Remove(key);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>取得某使用者的所有連線 ID</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">IEnumerable</span>&lt;<span class=\"title\">string</span>&gt; <span class=\"title\">GetConnections</span>(<span class=\"params\">T key</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _connections.TryGetValue(key, <span class=\"keyword\">out</span> <span class=\"keyword\">var</span> connections)</span><br><span class=\"line\">        ? connections</span><br><span class=\"line\">        : Enumerable.Empty&lt;<span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>綜合以上的方式，已經可以在 Hub 的資料傳遞當下，輸出目前的線上人數，但是如果是想要透過 API 取得目前線上使用者人數，還是應該要用外部儲存的方式去做</p>\n<p>練習程式碼：<a href=\"https://github.com/partypeopleland/SignalRDemo\">Github</a></p>\n<p>前端因為先前忽略的關係，密語對象的 value 應該要在 onclick 的時候才去抓，所以 app.js 應調整如下</p>\n<p><img src=\"/artblog/signalr-05-in-memory/1542953923_86715.png\"></p>\n<p>這個方案當然還是有問題的，所以接下來的篇章將會再另外討論…</p>\n","tags":["signalR"]},{"title":"[SignalR] 06 - Scale Out with Redis","url":"/artblog//signalr-06-scale-out-with-redis/","content":"<p>為了要嘗試多台主機的情況，改採用 Redis 來做</p>\n<span id=\"more\"></span>\n\n<p>先前的練習專案也有許多小地方錯誤，不過反正是練習，也就沒打算修正；這次重新開一個練習專案，比較乾淨</p>\n<h2 id=\"signalr-service-project\"><a href=\"#signalr-service-project\" class=\"headerlink\" title=\"signalr service project\"></a>signalr service project</h2><p>首先用 nuget 安裝 <code>Microsoft.AspNet.SignalR.Redis</code>，並在 startup.cs 加入下列指令</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configuration</span>(<span class=\"params\">IAppBuilder app</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用redis scale out</span></span><br><span class=\"line\">        GlobalHost.DependencyResolver.UseRedis(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">6380</span>, <span class=\"literal\">null</span>, <span class=\"string\">&quot;signalr-chat&quot;</span>);</span><br><span class=\"line\">        app.MapSignalR();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"建立-docker-redis\"><a href=\"#建立-docker-redis\" class=\"headerlink\" title=\"建立 docker redis\"></a>建立 docker redis</h3><p>雖然有 windows 版本，不過嘗試了一下好像無法執行<code>redis-cli</code>，所以還是用 docker 來練習</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">get docker image</span></span><br><span class=\"line\">docker pull redis</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">run redis image</span></span><br><span class=\"line\">docker run -p 6380:6379 --name signalr-redis -d redis</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">connect to redis via redis-cli</span></span><br><span class=\"line\">docker exec -it signalr-redis redis-cli</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查詢目前有哪些頻道可訂閱</span></span><br><span class=\"line\">pubsub channels</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查詢有幾個 Web 站台訂閱了 Redis 的頻道</span></span><br><span class=\"line\">pubsub numsub chat</span><br></pre></td></tr></table></figure>\n\n<p>這次的練習大致上困難點只是在架設 redis，搞定都過了一下午了，原本想利用<code>pubsub numsub chat</code>去抓出有多少個人訂閱了該頻道，後來才想到這邊的數字應該指的是誰跟 redis 訂閱，那當然就是 web 站台了…不信的人自己可以 deploy 到 local IIS 玩一下，站台啟動跟站台停止，查看一下 pubsub numsub chat 的回應</p>\n<p>怎麼取得線上人數這件事情，似乎真的要自己在連線的那堆事件裡硬幹了…</p>\n<p>調整幅度有點大，細節不說了，重點節錄：</p>\n<ol>\n<li>僅使用最基礎的字串 key-value pair，透過序列化、反序列化運用</li>\n<li>連線、斷線、重連事件內先處理各項資料的 DTO 再丟去更新 cache</li>\n<li>Console 專案連線位置須注意是跟著 Web 走，需要可自行調整 ( Ref：<a href=\"dotblogs.com.tw/calm/2014/11/24/147414\">文章</a> )</li>\n<li>個人資料用來記錄使用者 ID 與該使用者的 ConnectionId，主要是為了密語功能</li>\n<li>在線人數用來顯示總人數、及哪一個人有幾個 ConnectionId</li>\n<li>原先用 HTML 改為 MVC，沒什麼特殊意義，隨手改的</li>\n<li>Redis 各項指令須注意時間複雜度</li>\n<li>SignalR 服務端掛掉、重新佈署，會導致無法觸發到 OnDisconnected()事件，後果就是 Cache 數據會不正確，解決方案聽說有 LoadBanlance、官網介紹是說用 Job 處理掉無效資料</li>\n</ol>\n<p><img src=\"/artblog/signalr-06-scale-out-with-redis/1543222567_43328.png\"><br>附上<a href=\"https://github.com/partypeopleland/SignalrAndRedis\">練習程式碼</a></p>\n","tags":["signalR"]},{"title":"VSCode設定同步及程式碼片段","url":"/artblog//vscode-settings-sync-and-snippet/","content":"<p>開發一陣子之後應該每個人或多或少都會習慣使用一些外掛套件，或者是程式碼片段，如果在多台電腦中逐一設定，那應該是很累人的事情。</p>\n<span id=\"more\"></span>\n\n<p>來~介紹你好藥東西，燈燈燈燈~~</p>\n<p>VSCode有個套件叫做<code>Settings Sync</code>，就是能夠幫忙處理掉這些煩人瑣碎的事情，讓你的時間專注於開發。<br><img src=\"/artblog/vscode-settings-sync-and-snippet/1524247933_44985.png\"></p>\n<p>他原理就是把你的設定值存到你GitHub帳號的Gist裡面，使用方法很簡單，在一邊的介紹頁面其實也有寫得很詳細。<br>使用步驟：</p>\n<p>使用同步服務之前，先準備好你的GitHub帳號，</p>\n<p>在Gist的頁面選擇產生一個新的Token (如果不知道頁面在哪裡，安裝好套件之後並且按下上傳快捷鍵Shift +Alt+U，他也會幫你開啟<a href=\"https://github.com/settings/tokens\">產生Token的頁面</a></p>\n<p>依照說明你至少要把Gist打勾，同時給他一個容易記得的名稱，點選產生Token之後會在畫面上給你一組Token，而且<strong>只會出現一次</strong>。請把它記下來。<br><img src=\"/artblog/vscode-settings-sync-and-snippet/1524248877_73578.png\"></p>\n<p>接著回到VSCode，剛才按下上傳快捷鍵之後，它其實會跳出一個輸入框，讓你輸入Token<br><img src=\"/artblog/vscode-settings-sync-and-snippet/1524248910_15046.png\"></p>\n<p>輸入完畢之後，它其實就會直接幫你把你目前VSCode的設定及程式碼片段上傳到你的Gist去，同時也會在VSCode輸出視窗提示，而這一個資訊就是Token跟Gist最重要啦。記住Token及Gist，在下載設定時會用到。<br><img src=\"/artblog/vscode-settings-sync-and-snippet/1524249020_70761.png\"></p>\n<p>因為要測試下載設定，所以我們先把設定值清空，重新來一下，模擬第二台電腦去下載相同的設定。按下Ctrl+ Shift + P，叫出搜尋欄之後，輸入Sync關鍵字可以看到套件提供了五個指令，請執行Reset那一個，它就會將你的設定給清除掉了。<br><img src=\"/artblog/vscode-settings-sync-and-snippet/1524248251_54429.png\"></p>\n<p>清除之後來下載設定：</p>\n<ol>\n<li>直接點選Alt+ Shift + D下載設定。它一樣會幫你開啟Gist網址</li>\n<li>畫面上會詢問你Token及Gist，我們依序填入即可</li>\n</ol>\n<p><img src=\"/artblog/vscode-settings-sync-and-snippet/1524249402_91233.png\"></p>\n<p>這個套件最棒的地方我覺得就是方便、簡單，再加上程式碼片段同步，這個實在是太讚了，順便分享一個線上工具：<a href=\"https://snippet-generator.app/\">Snippet Generator</a>。它提供了VSCode、Atom、Sublime三種Editor所適用的Snippet格式，讓你一魚三吃啊。不管你習慣的是哪一種，總有一款適合你用。</p>\n","categories":["工具"],"tags":["vscode"]},{"title":"VSCode預設載入的檔案編碼設定","url":"/artblog//vscode-default-file-encoding/","content":"<p>打算使用VSCode做為主力Editor，時常會因為檔案編碼的問題困擾，研究了一下VSCode的設定</p>\n<span id=\"more\"></span>\n<p>有的時候在改程式，常常會有編碼上的問題，往往舊程式是用BIG5編碼寫的，但是新專案的其他程式又都是用UTF8寫的，久而久之調整編碼就會是一項煩人的工作。</p>\n<p><img src=\"/artblog/vscode-default-file-encoding/1524045432_09821.png\"></p>\n<p>VSCode其實有提供設定，可以讓程式載入預設的檔案，但是，這個好像對上述情境沒有什麼用，因為預設都用UTF8開啟，那普通的ANSI檔案怎麼辦？<br>下面還有一個設定是自動推測檔案編碼，這個應該是可用的，不過，看著設定的說明：可以根據每個語言加以設定，我開始對於針對附檔名設定預設編碼有點好奇。</p>\n<p><img src=\"/artblog/vscode-default-file-encoding/1524045324_30759.png\"></p>\n<p>廢話不多說，直接貼設定，值得一提的是，asp的設定選項在VSCode好像不能用，但是VSCode-Insiders是可以用的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;[javascript]&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;files.encoding&quot;</span>: <span class=\"string\">&quot;cp950&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;[html]&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;files.encoding&quot;</span>: <span class=\"string\">&quot;utf8&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;[asp]&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;files.encoding&quot;</span>: <span class=\"string\">&quot;cp950&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;files.autoGuessEncoding&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;files.associations&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;*.inc&quot;</span>: <span class=\"string\">&quot;asp&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>對了，如果是用開啟資料夾的方式，在設定還會多一個工作區設定喔</p>\n<p><img src=\"/artblog/vscode-default-file-encoding/1524046021_75643.png\"></p>\n","categories":["工具"],"tags":["vscode"]},{"title":"es6 + webpack 練習","url":"/artblog//es6-webpack-practice/","content":"<p>傳統的網頁開發，不外乎就是 HTML + CSS，以這兩者為主體，添加其他功能。乍看之下很簡單，但是需求往往很複雜，需要透過 javascript 完成的事情太多了，有跟 UI 相關的操作、有邏輯的部份，如果再加上引用其他的框架、功能等等，光是前後載入的順序就能搞死一堆人。趁這次休息有點時間，開始動手練習最近接觸到的一些前端工具… …</p>\n<span id=\"more\"></span>\n\n<p>真男人就是要看 Code：<a href=\"https://github.com/art-Blog/es6_webpack\">ES6 + Webpack</a></p>\n<p>好像很多前端專案都是區分為 src 目錄與 dist 目錄，所以我也就這樣幹了~~ (大誤)，不是啦，其實是有深意的。source 目錄做為開發使用、編輯、調整都在這邊操作；而 dist 目錄則是產出的結果，中間則是經過自動化的一系列操作(當然要我們自己去設定…)，前端通常會用到的一些處理，大概就是壓縮、打包、混淆之類的吧，現在又因為 ECMAScript 走起來了，有好多好多人性化的功能跟寫法，為了要享受這一切，於是有了轉譯 javascript 這一件事情</p>\n<h2 id=\"babel\"><a href=\"#babel\" class=\"headerlink\" title=\"babel\"></a>babel</h2><p>瀏覽器可以支援的 javascript 不夠新，不能夠支援 ECMAScript 新的標準，在這個過渡期間，開發網頁如果要享受到新語法的好處，勢必要先將新語法轉換成瀏覽器看得懂的語法。前端 javascript 採用 ES6 的語法，將功能模組化，並於頁面的 script 程式中透過 import 載入，感覺好像 C#的 using 喔，然後再把類別給 new 出來，這樣的開發方式好習慣。(大心)</p>\n<p><img src=\"/artblog/es6-webpack-practice/1523105893_95284.png\"></p>\n<p>之後要透過 webpack 的套件<code>HtmlWebpackPlugin</code>，將 Html 檔案從 src 目錄複製到 dist 目錄，所以要先準備好 source 的 HTML 檔案</p>\n<h2 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h2><p>可以將多個檔案打包在一起，HTML 只需要載入一個檔案，跟相依性造成的 Bug 說 886。</p>\n<p>在開發環境的時候，需要 Source-Map 功能方便 Debug，而且修改了程式碼之後，要能夠立即自動化 babel 轉譯語法，方便前端開啟網頁測試。(好像還有個 Hot Reload 之類的東西，但是我自己應用的環境是 C#處理後端，所以這一塊比較沒需求，因為我都會先在 VS2017 把網站開起來測試)；生產環境就不需要 debug 相關的東西了，但是需要將程式碼壓縮、節省網路傳輸量，參考 webpack 官方文件的設定，將設定檔區分為共用的、開發的、生產的三份檔案，在配置上感覺較有條理，配合 npm 的 script 區塊，將指令都寫在 package.json 那邊。</p>\n<h2 id=\"wallaby-js-quokka-js\"><a href=\"#wallaby-js-quokka-js\" class=\"headerlink\" title=\"wallaby.js &amp; quokka.js\"></a>wallaby.js &amp; quokka.js</h2><p>氪金套件，但是買了絕對不會後悔，wallaby.js 支援 TDD 的開發方式，但是目前並不支援 cucumber；wallaby.js 的設定較為繁瑣，可能是因為功能也很強大，支援了很多很多的東西，這部分有興趣的人請自行前往官網了解喔。(因為我看不懂唷~~)，wallaby.js 的好處除了即時回饋之外 (小綠點) ，啟用之後開啟 localhost:51245 也可以看到測試涵蓋率等等資訊。</p>\n<p><img src=\"/artblog/es6-webpack-practice/1523107034_33681.png\"></p>\n<p>而 quokka.js 有提供社群版本，花錢買的版本能夠讓你 import 自己寫的 js，而 wallaby 及 quokka 氪金版本都能夠透過 <code>//?.</code> 看到執行時間，對於效能調教應該很有幫助。</p>\n<h2 id=\"mocha\"><a href=\"#mocha\" class=\"headerlink\" title=\"mocha\"></a>mocha</h2><p>單元測試套件，我覺得前端已經很複雜了，如果沒有測試保護，很容易自己開發到後面會越來越沒底氣，寫寫測試起碼能知道三個月前的自己原來還寫了個 lib 可以用在新的需求上….反正好處很多啦。如果想嘗試 TDD，但是不想氪金購買 wallaby.js，其實直接用 mocha 也很夠用了。</p>\n<p><img src=\"/artblog/es6-webpack-practice/1523106928_77832.png\"></p>\n<p>最終結果</p>\n<p><img src=\"/artblog/es6-webpack-practice/1523107461_84849.png\"></p>\n","categories":["javascript"],"tags":["webpack"]},{"title":"使用 nvm 管理 node.js 版本","url":"/artblog//use-nvm-to-manage-node-js-versions/","content":"<p>為甚麼會需要使用到工具來替我們管理 Node 版本呢？不外乎就是因為基於 Node 所開發的軟體也有很多，但是有一些軟體在新版本的 Node 底下卻無法正常執行，這時候就可以透過 nvm 來切換到其他版本。</p>\n<span id=\"more\"></span>\n\n<p>Node Version Manager 是一套用來管理 Node 版本的工具，在使用上其實相當的簡單，在 Windows 環境下，也可以使用，首先下載安裝<a href=\"https://github.com/coreybutler/nvm-windows\">nvm for windows</a>，在他的 release 頁面有提供 setup 版本的 nvm-setup.zip，下載回來之後依照一般 windows 安裝的經驗(狂點下一步)，執行安裝吧。</p>\n<p>看到網站上的這段話</p>\n<blockquote>\n<p>To upgrade, run the new installer. It will safely overwrite the files it needs to update without touching your node.js installations. Make sure you use the same installation and symlink folder. If you originally installed to the default locations, you just need to click “next” on each window until it finishes.</p>\n</blockquote>\n<p>大致上就是說，未來如果要更新，也是重新下載執行檔直接安裝即可。</p>\n<blockquote>\n<p>如果系統已經有安裝 node 的情況下，再去安裝 nvm，建議還是先移除掉原本的 node.js 之後，再安裝 nvm 來管理 node</p>\n</blockquote>\n<p>透過 nvm 管理版本，當然是要先看看有那些版本可以使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvm list available</span><br></pre></td></tr></table></figure>\n\n<p>畫面上會列出一堆可用的版本，這邊的 LTS 版本代表的是  <a href=\"https://github.com/nodejs/Release#release-schedule\">Long Term Support</a> 。翻譯成中文就是長期支持，其實也就是穩定版本。除非想要搶先體驗新功能，否則沒有意外的話大家應該都會是安裝這種的。</p>\n<p>以 ​ 安裝目前最新版本為例，指令為</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvm install v8.11.3</span><br></pre></td></tr></table></figure>\n\n<p>接著安裝完畢之後，畫面會提醒你如果你想要使用你剛才安裝的這個版本，還需要輸入</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvm use 8.11.3</span><br></pre></td></tr></table></figure>\n\n<p>到這邊就順利完成了，未來若有其他需要，也可以再次利用 nvm 上述的指令來做切換使用。</p>\n","categories":["node.js"],"tags":["nvm"]},{"title":"什麼是單元測試","url":"/artblog//what-is-unit-test/","content":"<p>大概說明一下甚麼是單元測試</p>\n<span id=\"more\"></span>\n\n\n<h2 id=\"為甚麼我們需要寫單元測試？\"><a href=\"#為甚麼我們需要寫單元測試？\" class=\"headerlink\" title=\"為甚麼我們需要寫單元測試？\"></a>為甚麼我們需要寫單元測試？</h2><p>相信有很多人一開始接觸程式的時候都會去驗證自己寫的功能是否能如預期般執行，其實這個行為就是測試你自己的程式，從人工測試去驗證你所撰寫的程式，變成讓程式自己去驗證，不僅可以省去人工作業可能犯下的錯誤、遺漏，更可以節省你自己的時間成本，將時間花在更有意義的事情上面，不管是開發新功能，喝杯咖啡，早點下班陪家人，都比反覆的手動測試你自己的程式要來的好</p>\n<h2 id=\"甚麼是單元測試？\"><a href=\"#甚麼是單元測試？\" class=\"headerlink\" title=\"甚麼是單元測試？\"></a>甚麼是單元測試？</h2><p>所謂的單元測試其實有幾個特點，像是常常聽到的<strong>一次只測一件事情</strong>，<strong>隔離外部相依性</strong>，這些原則都只是為了要確保單元測試是<strong>最小的測試單元</strong>。為什麼呢？因為只有這樣子才足夠單純，單純到一出問題，就會明白到底是哪裡出錯了，進而快速的找到問題點儘速修復，當明白了單元測試的一些撰寫原則之後，就可以動手開始撰寫測試程式，讓測試程式來驗證你所撰寫的 Production Code 是否如你預期般的運作</p>\n<p>有一個笑話應該很多人都聽過：<strong>My Code Doesn’t Work and I Don’t Know Why and Now Its Working and I Don’t Know Why</strong></p>\n<p><img src=\"/artblog/what-is-unit-test/a6pswtfcuai7n-5.jpg\"><br>圖片來源：<a href=\"https://teacherlearnstocode.com/2014/11/05/embracing-my-beginners-mindset-avoiding-overthinking/\">https://teacherlearnstocode.com/2014/11/05/embracing-my-beginners-mindset-avoiding-overthinking/</a></p>\n<blockquote>\n<p>因為程式是照你寫的跑，不是照你想的跑 – 91</p>\n</blockquote>\n<blockquote>\n<p>你相信誰寫的程式碼？你應該相信的是測試過的程式碼。 - Ruddy Lee</p>\n</blockquote>\n<blockquote>\n<p>不寫測試的代碼就是耍流氓 – 對岸某大牛</p>\n</blockquote>\n<blockquote>\n<p>單元測試還有一個很重要的功能。對 Develop 來說應該是最主要的功能：讓你對於自己所撰寫的程式碼有信心。</p>\n</blockquote>\n<h2 id=\"如何開始撰寫單元測試？\"><a href=\"#如何開始撰寫單元測試？\" class=\"headerlink\" title=\"如何開始撰寫單元測試？\"></a>如何開始撰寫單元測試？</h2><p>撰寫單元測試大致上都會遵循著 <strong>3A 原則</strong></p>\n<ol>\n<li>Arrange：測試程式內初始化的部分都放在這裡，包含了預期執行的結果，建立待測試目標類別，準備簽章方法的各項輸入參數等等</li>\n<li>Act：實際呼叫被測試方法的部分</li>\n<li>Assert：呼叫方法之後的驗證部分<br>單元測試必須具備<strong>自我驗證</strong>的功能，也就是 Assertion 這件事情，透過各式各樣的驗證語句或套件，讓程式能夠顯示測試結果是成功或失敗</li>\n</ol>\n<p>驗證分為三個類型</p>\n<ol>\n<li>驗證回傳值：呼叫待測試類別的某個方法，驗證該方法的回傳結果，最常見的範例就是計算機類別，輸入兩個數字進行運算，驗證回傳的值</li>\n<li>驗證狀態：當呼叫待測試類別的某個方法後，驗證該類別的某個屬性</li>\n<li>驗證互動行為：當呼叫待測試類別的某個方法後，該方法內部會與其他物件互動。</li>\n</ol>\n<p>例如系統有一個存檔功能，而存檔需要寫系統LOG、也要寫使用者歷程記錄。所以內部實作呼叫了Log 類別，也呼叫了 UserHistroy 類別，而我們需要驗證他與其他物件的互動行為是否如我們預期，撰寫測試時需要注意<strong>一個測試程式只測試一件事情</strong>。因此這一個例子，請拆成兩個測試案例來做。</p>\n<blockquote>\n<p>習慣上會將待測試目標類別變數設為 <code>target</code>，或者是 sut–—<code>System Under Test</code>，如果團隊有共識，用甚麼變數名稱其實都無所謂。</p>\n</blockquote>\n<p>單元測試具備的特性</p>\n<ol>\n<li>Fast：因為開發過程中你會非常頻繁的執行測試</li>\n<li>Indepentent：隔離外部，所以會有幾個好處：執行速度快、關注點分離、單一職責</li>\n<li>Repeatable：在測試、正式環境底下都是一樣結果；不同日期、隨機函數也不會影響</li>\n<li>Self-checking：記得寫 assert，不需要再去檢查DB、UI看結果</li>\n<li>Timely：盡早交付測試程式</li>\n</ol>\n<blockquote>\n<p>導入 TDD ，在團隊不熟悉的狀況下，最起碼 commit 的時候同時交付測試程式及 Production Code</p>\n</blockquote>\n<p>如果想系統的了解一下相關知識，可以參考一下 91 的 <a href=\"https://dotblogs.com.tw/hatelove/2013/01/11/learning-tdd-in-30-days-catalog-and-reference\">[30天快速上手TDD]目錄與附錄</a>。</p>\n","categories":["心得"],"tags":["unittest"]},{"title":"在 Windows 系統透過 Docker 容器使用 Gitea 服務","url":"/artblog//use-gitea-service-via-docker-on-windows/","content":"<p>紀錄一下透過Docker練習建立Gitea服務，其實寫這篇文章只是為了記錄windows下怎麼設定volumn而已…</p>\n<span id=\"more\"></span>\n\n<p>Gitea的網站有提供說明，介紹了各種安裝方法，這一次嘗試一下透過Docker來使用Git服務，原則上也是按照<a href=\"https://docs.gitea.io/zh-cn/install-with-docker/\">官網</a>的說明Step By Step，所以不會有甚麼難度</p>\n<p>首先安裝一下<a href=\"https://store.docker.com/editions/community/docker-ce-desktop-windows\">Docker CE for Windows</a>，順利啟動Docker之後，開啟指令列操作</p>\n<h2 id=\"下載Gitea的Docker-Image\"><a href=\"#下載Gitea的Docker-Image\" class=\"headerlink\" title=\"下載Gitea的Docker Image\"></a>下載Gitea的Docker Image</h2><p><img src=\"/artblog/use-gitea-service-via-docker-on-windows/1527607805_29369.png\"></p>\n<h2 id=\"準備容器資料存放的目錄對應\"><a href=\"#準備容器資料存放的目錄對應\" class=\"headerlink\" title=\"準備容器資料存放的目錄對應\"></a>準備容器資料存放的目錄對應</h2><p>Git當然會有許多的資料要存，而容器又是一個用完就丟掉的概念，如果容器一被刪除了，資料當然也就不見了；所以為了要讓資料可以保留下來，需要在容器之外給他一個空間來存放這些資料，在Gitea介紹文檔內也有範例指令，只不過要用在Windows上面的話，需要再調整一下。</p>\n<p>這邊在設定目錄對應的時候沒能成功，通靈了一下發現<a href=\"https://blog.yowko.com/2017/09/windows-dockerfile-volume.html\">這篇文章</a>，順利設定完成，各位可以的話最好順便詳細閱讀一下。</p>\n<blockquote>\n<p>Windows好像只能將Volumn設定在C槽，放在其他槽都沒能成功，不太清楚是不是Windows的限制。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --name=gitea -p 10022:22 -p 10080:3000 -v C:/DockerVolumn/Gitea:/data gitea/gitea:latest</span><br></pre></td></tr></table></figure>\n\n<p>-v的參數後面接的那一串東西，白話文就是：我要掛載一個目錄給這個容器使用，這個目錄C:&#x2F;DockerVolumn&#x2F;Gitea就相當於容器裡面的&#x2F;data目錄唷~ </p>\n<p>輸入指令之後，沒意外的話系統會詢問你是否要共用這個磁碟讓Docker使用，我想大家應該都是點確定吧</p>\n<p>接著透過docker ps確認容器已經走起來了~<br><img src=\"/artblog/use-gitea-service-via-docker-on-windows/1527608159_75482.png\"></p>\n<h2 id=\"Gitea安裝設定\"><a href=\"#Gitea安裝設定\" class=\"headerlink\" title=\"Gitea安裝設定\"></a>Gitea安裝設定</h2><p>透過瀏覽器訪問localhost:10080就會看到畫面了，選擇註冊，因為是第一次使用，系統會跳到初始設定頁面</p>\n<p>這個頁面不外乎就是選擇一些資料庫類型阿，檔案放哪阿，還有這台電腦的domain阿，要用的port之類的設定，因為Gitea我自己也只是初學，沒有辦法介紹的很詳細，只能說請各位自行嘗試囉。這邊可以設定一下admin帳號。</p>\n<p><img src=\"/artblog/use-gitea-service-via-docker-on-windows/1527608427_50546.png\"><br>點選立即安裝之後，就會幫你安裝好Gitea，直接就可以順利使用了。有沒有很讚!</p>\n<p><img src=\"/artblog/use-gitea-service-via-docker-on-windows/1527608501_78478.png\"><br>剛才提到的volumn，這個時候可以去看一下，以後Gitea的東西就都放在這邊囉，所以要備份，就直接備這個目錄吧</p>\n<p><img src=\"/artblog/use-gitea-service-via-docker-on-windows/1527608561_05456.png\"><br>剛才在安裝設定的選項，其實會被存在這裡，所以之後可能可以自己來改 XD (改壞不要說我說的)<br><img src=\"/artblog/use-gitea-service-via-docker-on-windows/1527608731_0438.png\"></p>\n","categories":["docker"],"tags":["gitea"]},{"title":"如何備份還原 Docker Volume","url":"/artblog//backup-restore-docker-volume/","content":"<p>記載一下備份、還原 Docker Volume 的相關操作</p>\n<span id=\"more\"></span>\n\n<p>對於 Docker 我也不是很熟，所以就跳過理論性的東西，直接紀錄步驟吧，針對 Docker 服務所使用到的 Volume 備份及還原方式，使用的環境是 Docker For Windows CE，採用的是 Linux Container 模式。</p>\n<h2 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h2><p>首先先建立 SQL 的 DockerVolume</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker volume create linux_mssql</span><br></pre></td></tr></table></figure>\n\n<p>建立一個 MSSQL Linux Container，命名為 linuxMSSQL，從指令列中可看到 sa 的預設密碼是 Passw0rd!，等等就用這個測試</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --name linuxMSSQL -e &quot;ACCEPT_EULA=Y&quot; -e &quot;MSSQL_SA_PASSWORD=Passw0rd!&quot; -p 1433:1433 -v linux_mssql:/var/opt/mssql -d mcr.microsoft.com/mssql/server:2017-latest</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>記得自己要弄的話，SA 預設密碼最好改一下</p>\n</blockquote>\n<p>建立完成之後可以連進去塞一些假資料用來測試，這邊就不貼圖了</p>\n<h2 id=\"備份-Volume\"><a href=\"#備份-Volume\" class=\"headerlink\" title=\"備份 Volume\"></a>備份 Volume</h2><p>透過 alpine 這個 Image，掛載與 SQL 服務相同的 Volume，連線進去 alpine Container 之後，對 Volume 操作，最後再透過 <code>docker commit</code>、<code>docker save</code> 指令讓 container 做成一個新的 Image，再把 Image 輸出成實體檔案之後，就可以針對實體檔案進行備份了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">讓 Image 掛載相同的 Volume</span></span><br><span class=\"line\">docker run -d --name mssqlBackup -v linux_mssql:/volume alpine ping 127.0.0.1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">將 Volume 的內容透過壓縮指令打包成一個壓縮檔，還原的時候會用到</span></span><br><span class=\"line\">docker exec -it mssqlBackup tar -cjf /sqldata.tar.bz2 -C /volume ./</span><br></pre></td></tr></table></figure>\n\n<p>在這個環節其實可以先透過指令<code>docker exec -it mssqlBackup sh</code>連線進去查看 Volume 的實體檔案有哪些，甚至也可以直接把 mdf 檔案抓出來備份之類的，但是採用 Volume 方式備份的好處就是不用管甚麼服務，都是一樣將 Volume 備份、還原，而且可以再考慮架設自己的 Docker Registry，會更便捷</p>\n<p>接下來將剛才處理好的 alpine image 弄成實體檔案來備份</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">將mssqlBackup打包成一個新的images：linux-mssql-volume</span></span><br><span class=\"line\">docker commit -p 9a1179cb9f6b linux-mssql-volume</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">將images導出為實體檔案</span></span><br><span class=\"line\">docker save -o linux-mssql-volume.tar linux-mssql-volume</span><br></pre></td></tr></table></figure>\n\n<p>到這邊就完成了備份的動作，為了測試需要，可以只保留實體檔案，先將相關的 images、用到的 volume 都砍掉，來模擬新主機還原的作業，如果有第二台電腦可以試，那就直接將實體檔案 copy 過去就好了。</p>\n<h2 id=\"還原-Volume\"><a href=\"#還原-Volume\" class=\"headerlink\" title=\"還原 Volume\"></a>還原 Volume</h2><p>首先一樣先建立一個 Docker Volume，等等還原會用到，建議用相同名稱就好了，接著將實體檔案透過指令載入成 Image，最後掛載成 Container 之後將檔案複製到我們建立的 Docker Volume 即可。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">建立 Docker Volume</span></span><br><span class=\"line\">docker volume create linux_mssql</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">還原檔案為 Image</span></span><br><span class=\"line\">docker load -i linux-mssql-volume.tar</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 alpine 掛載 Docker Volume之後，透過指令將原先 Image 內的壓縮檔解壓縮到 Docker Volume，完成之後自動刪掉 Alpine 的 Container</span></span><br><span class=\"line\">docker run  --rm  -v linux_mssql:/volume linux-mssql-volume sh -c &quot;rm -rf /volume/* /volume/..?* /volume/.[!.]* ; tar -C /volume/ -xjf  /sqldata.tar.bz2 ;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>到這邊就完成了 Docker Volume 的還原，接下來只要重新執行前置作業中的建立 MSSQL Container 就可以接著使用了。</p>\n<p>如何將 Windows 環境底下的 Docker Volume 備份一直很困擾我，看了<a href=\"https://blog.zhouzhipeng.com/tips-for-docker-volume-backup.html\">這篇文章</a>之後才發現原來解法這麼簡單，直接掛載一個 Linux 可以操作指令的 Container，將 Volume 共用，就可以針對檔案操作了，那篇文章內是用 <strong>Docker Register</strong> 作範例，有興趣的人可以參考一下</p>\n","categories":["docker"],"tags":["docker"]},{"title":"如何備份還原 GitLab 服務","url":"/artblog//backup-restore-gitlab-service/","content":"<p>在 Windows 環境使用 GitLab Docker 安裝的備份、還原過程記錄</p>\n<span id=\"more\"></span>\n\n<p>上次的 docker volume 備份、還原，其實就是為了要將 local 建立起來的 GitLab 服務做備份，我採用的 GitLab Images 是<a href=\"http://blog.chengweichen.com/2016/04/docker-gitlab-cigitlab-runner.html\">這篇文章</a>中介紹的 <a href=\"https://github.com/sameersbn/docker-gitlab\">sameersbn</a> 所製作的 docker image，實際用了之後，真的非常的簡易就能夠建好自己的 GitLab，而且真的更新很快，文件也詳細，推薦給還不熟悉的人參考參考，那就直接進入主題吧</p>\n<p>先送上文章內用到的 docker-compose.yml。傳送門：<a href=\"https://github.com/partypeopleland/docker-gitlab\">GitHub</a></p>\n<h2 id=\"建立備份所需的-Docker-Volume\"><a href=\"#建立備份所需的-Docker-Volume\" class=\"headerlink\" title=\"建立備份所需的 Docker Volume\"></a>建立備份所需的 Docker Volume</h2><p>首先，我參考文件另外建立了一個 Docker Volume 用來將未來產生的備份檔案儲存起來，並且透過文件中提到的指定備份路徑設定 Docker Volume</p>\n<p><img src=\"/artblog/backup-restore-gitlab-service/1538623309_28718.png\"><br><img src=\"/artblog/backup-restore-gitlab-service/1538623349_82977.png\"><br><img src=\"/artblog/backup-restore-gitlab-service/1538623421_9695.png\"><br>接著直接透過指令將 GitLab 架起來</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">建立 Volume</span></span><br><span class=\"line\">docker volume create gitlab_data</span><br><span class=\"line\">docker volume create gitlab_backup</span><br><span class=\"line\">docker volume create postgres_data</span><br><span class=\"line\">docker volume create redis_data</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">建立 Gitlab 服務</span></span><br><span class=\"line\">docker-compose up</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"備份-GitLab\"><a href=\"#備份-GitLab\" class=\"headerlink\" title=\"備份 GitLab\"></a>備份 GitLab</h2><p>文件中有提到備份的部分，需要先將 Gitlab 的 Container 給 stop、rm 掉，接著執行 GitLab 提供的備份指令，但是在我的電腦備份時每次連線到 Repository 的時候都會出現 Connect Error 導致備份失敗，測試結果是只要有 Repository 就會失敗，如果我使用 GitLab 服務先註冊使用者在來備份就沒事情，真奇怪，後來有在<a href=\"https://github.com/sameersbn/docker-gitlab/issues/1576\">這邊</a>找到解決方案，直接貼指令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">失敗的備份指令</span></span><br><span class=\"line\">docker-compose run --rm gitlab app:rake gitlab:backup:create</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">-----------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Create Backup</span></span><br><span class=\"line\">docker-compose exec gitlab su -c &quot;bundle exec rake gitlab:backup:create&quot; git</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">Restore Backup</span></span><br><span class=\"line\">docker-compose exec gitlab supervisorctl stop unicorn</span><br><span class=\"line\">docker-compose exec gitlab supervisorctl stop sidekiq</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">列出有哪些備份可還原</span></span><br><span class=\"line\">docker-compose exec gitlab su -c &quot;bundle exec rake gitlab:backup:restore&quot; git</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">指定 TimeStamp 還原</span></span><br><span class=\"line\">docker-compose exec gitlab su -c &quot;bundle exec rake gitlab:backup:restore BACKUP=1538620541_2018_10_04_11.3.0&quot; git</span><br><span class=\"line\"></span><br><span class=\"line\">docker-compose exec gitlab supervisorctl start sidekiq</span><br><span class=\"line\">docker-compose exec gitlab supervisorctl start unicorn</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>因為我的環境是 windows，所以用雙引號將指令包住</p>\n</blockquote>\n<p>喔，有一點要特別提醒一下，用哪一版本做的備份檔案，就只能還原在該版本的 Container 底下</p>\n<h2 id=\"備份為實體檔案\"><a href=\"#備份為實體檔案\" class=\"headerlink\" title=\"備份為實體檔案\"></a>備份為實體檔案</h2><p>配合上一篇的如何備份還原 Docker Volume，終於可以將備份檔案收去別的地方放了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">建立 container 用來取得 gitlab_backup volume 的備份檔案</span></span><br><span class=\"line\">docker run -d --name mybackup -v gitlab_backup:/volume alpine ping 127.0.0.1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 tar 壓縮整個 volume 目錄</span></span><br><span class=\"line\">docker exec -it mybackup tar -cjf /data.tar.bz2 -C /volume ./</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">用 docker inspect或者是 docker ps 查詢目前 container 的 Id</span></span><br><span class=\"line\">docker inspect --format=&quot;&#123;&#123;.Id&#125;&#125;&quot; mybackup</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">透過 container Id 將 container 打包成一個新的images：my-volume-backup</span></span><br><span class=\"line\">docker commit -p e0a4366ae143 my-volume-backup</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">將images導出為實體檔案</span></span><br><span class=\"line\">docker save -o my-volume-backup.tar my-volume-backup</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/backup-restore-gitlab-service/1538625250_65939.png\"></p>\n<h2 id=\"測試還原-GitLab-服務\"><a href=\"#測試還原-GitLab-服務\" class=\"headerlink\" title=\"測試還原 GitLab 服務\"></a>測試還原 GitLab 服務</h2><p>為了測試需要，所以我把 GitLab Container 、Volume 砍掉，全部重來再重新建立一次服務</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">建立 Volume</span></span><br><span class=\"line\">docker volume create gitlab_data</span><br><span class=\"line\">docker volume create gitlab_backup</span><br><span class=\"line\">docker volume create postgres_data</span><br><span class=\"line\">docker volume create redis_data</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">將 Gitlab 服務架起來</span></span><br><span class=\"line\">docker-compose up</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">將實體檔案還原為 Image</span></span><br><span class=\"line\">docker load -i my-volume-backup.tar</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">將 Image 裡面的檔案解壓縮到 Docker Volume</span></span><br><span class=\"line\">docker run  --rm  -v gitlab_backup:/volume my-volume-backup sh -c &quot;rm -rf /volume/* /volume/..?* /volume/.[!.]* ; tar -C /volume/ -xjf  /data.tar.bz2 ;&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"還原-GitLab-服務\"><a href=\"#還原-GitLab-服務\" class=\"headerlink\" title=\"還原 GitLab 服務\"></a>還原 GitLab 服務</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">把腳本建立的 GitLab 名稱改名為 gitlab (這一步省略的話接下來要自己替換掉 container name)</span></span><br><span class=\"line\">docker rename docker-gitlab_gitlab_1 gitlab</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">記得這個時候要確認 GitLab 是 start 的，否則會出現錯誤訊息說找不到 container</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">先確認有哪些備份檔可還原</span></span><br><span class=\"line\">docker-compose exec gitlab su -c &quot;bundle exec rake gitlab:backup:restore&quot; git</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">指定 TimeStamp 還原</span></span><br><span class=\"line\">docker-compose exec gitlab supervisorctl stop unicorn</span><br><span class=\"line\">docker-compose exec gitlab supervisorctl stop sidekiq</span><br><span class=\"line\">docker-compose exec gitlab su -c &quot;bundle exec rake gitlab:backup:restore BACKUP=1538620541_2018_10_04_11.3.0&quot; git</span><br><span class=\"line\">docker-compose exec gitlab supervisorctl start sidekiq</span><br><span class=\"line\">docker-compose exec gitlab supervisorctl start unicorn</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/backup-restore-gitlab-service/1538627037_69723.png\"></p>\n<p>還原過程會再要你確認是不是真的要還原<br><img src=\"/artblog/backup-restore-gitlab-service/1538627061_37794.png\"></p>\n<p>這邊如果選擇 no，那就不會幫你清掉 authorized_keys file，選擇 yes 就清掉而已，後面就是清除一些暫存檔案、目錄而已</p>\n<blockquote>\n<p>還原完畢記得要把 unicorn、sidekiq 重新 start</p>\n</blockquote>\n<p><img src=\"/artblog/backup-restore-gitlab-service/1538627344_89651.png\"></p>\n<p>我的 GitLab 又回來囉~~</p>\n<h2 id=\"加碼-GitLab-Runner\"><a href=\"#加碼-GitLab-Runner\" class=\"headerlink\" title=\"加碼 GitLab Runner\"></a>加碼 GitLab Runner</h2><p>都裝了 GitLab 不接著裝 Runner 始終是覺得少了一塊拼圖，那就寫一下重點吧。</p>\n<h3 id=\"閱讀官方文件-Install-GitLab-Runner-on-Windows\"><a href=\"#閱讀官方文件-Install-GitLab-Runner-on-Windows\" class=\"headerlink\" title=\"閱讀官方文件 Install GitLab Runner on Windows\"></a>閱讀官方文件 <a href=\"https://docs.gitlab.com/runner/install/windows.html\">Install GitLab Runner on Windows</a></h3><ol>\n<li>建立一個目錄用來存放 Runner 的檔案，如<code>C:\\GitLab-Runner</code></li>\n<li>依據作業系統環境下載 <a href=\"https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-windows-386.exe\">x86</a> 或<a href=\"https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-windows-amd64.exe\">amd64</a> 版本的 Runner 檔案，放置於剛才的目錄中，並重新命名為<code>gitlab-runner.exe</code></li>\n<li>使用管理員權限執行 command line，並輸入指令<code>gitlab-runner.exe register</code>註冊 Runner</li>\n<li>依照畫面指示，順序輸入自己架設的 GitLab 網址及後台取得的 Token，註冊部分的細節請參考<a href=\"https://docs.gitlab.com/runner/register/index.html\">官方文件</a></li>\n<li>安裝服務並啟動<code>gitlab-runner install</code>、<code>gitlab-runner start</code></li>\n</ol>\n<h3 id=\"設定-GitLab-Runner\"><a href=\"#設定-GitLab-Runner\" class=\"headerlink\" title=\"設定 GitLab Runner\"></a>設定 GitLab Runner</h3><ol>\n<li>進入 GitLab 後台管理 Runner，若成功建立 Runner，用管理員帳號登入後可以在後台看到適才註冊的 Runner 已經出現在這邊，記得將 Runner 的狀態設置好<br><img src=\"/artblog/backup-restore-gitlab-service/1538641158_57214.png\"></li>\n<li>專案設置加入 Gitlab CI 設定檔，於專案根目錄下新增<code>.gitlab-ci.yml</code>檔案，內容請參考下列範例自行修改調整，第二行請<strong>自行調整專案名稱</strong></li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">variables:</span></span><br><span class=\"line\">    <span class=\"attr\">PROJECT_NAME:</span> <span class=\"string\">&quot;TaskProject&quot;</span></span><br><span class=\"line\"><span class=\"attr\">before_script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;starting build for %PROJECT_NAME%&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;Restoring NuGet Packages...&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">nuget</span> <span class=\"string\">restore</span> <span class=\"string\">&quot;%PROJECT_NAME%.sln&quot;</span></span><br><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">build</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">stage:</span> <span class=\"string\">build</span></span><br><span class=\"line\">    <span class=\"attr\">script:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;Release build...&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">msbuild</span> <span class=\"string\">/consoleloggerparameters:ErrorsOnly</span> <span class=\"string\">/maxcpucount</span> <span class=\"string\">/nologo</span> <span class=\"string\">/property:Configuration=Release</span> <span class=\"string\">/verbosity:quiet</span> <span class=\"string\">%PROJECT_NAME%.sln</span></span><br><span class=\"line\">    <span class=\"attr\">artifacts:</span></span><br><span class=\"line\">        <span class=\"attr\">untracked:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">test:</span></span><br><span class=\"line\">    <span class=\"attr\">stage:</span> <span class=\"string\">test</span></span><br><span class=\"line\">    <span class=\"attr\">script:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;starting tests&quot;</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">cd</span> <span class=\"string\">%PROJECT_NAME%Tests/bin/Release</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">vstest.console</span> <span class=\"string\">%PROJECT_NAME%Tests.dll</span></span><br><span class=\"line\">    <span class=\"attr\">dependencies:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">build</span></span><br></pre></td></tr></table></figure>\n\n<p>這邊示範的只是最簡單基礎的 Runner 設定，所以關於 Runner 服務的執行權限設定、自動化腳本內使用到的 MSBuild、VSTest.Console、Nuget 都要先自行安裝，此處就不細談。</p>\n<p>關於 GitLab 與 Runner 之間的關係其實就跟一般的 Git 服務配上 Jenkins 概念一樣，所以要配置 Runner 當然也有很多方法，因為要滿足不同的專案建置需求，跑 CSharp、Java、Andriod、iOS 等等，都有可能有不同的建置環境跟需求需要配置、甚至是專門用來半夜跑整合測試的也許要用比較好的機器……之類的，這部分就等用到的時後再研究囉</p>\n","categories":["docker"],"tags":["gitLab"]},{"title":"如何建立自己的 nuget server 及套件","url":"/artblog//nuget-server-and-package/","content":"<p>前陣子同事詢問怎麼樣製作自己的 nuget 套件，剛好有時間的情況下就搜尋了一下，沒想到出乎意料的簡單<br>秉持著好記性不如爛筆頭的原則，將實作過程紀錄一下，順便紀錄一下心得</p>\n<span id=\"more\"></span>\n\n<p>首先需要將專案建立 spec file</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nuget spec</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/nuget-server-and-package/1536988007_51911.png\"></p>\n<p>指令產生的檔案是為了記錄專案的資訊，程式會建立範本，再依據自己需求進行調整，最後搜尋套件的時候可以看到這些資訊</p>\n<p><img src=\"/artblog/nuget-server-and-package/1536988156_9733.png\"></p>\n<p>接下來就是將專案打包起來上傳到 nuget server​，所以需要先將專案建置一下再下指令打包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nuget pack ArtJsonParser.csproj</span><br></pre></td></tr></table></figure>\n<p><img src=\"/artblog/nuget-server-and-package/1536988321_36253.png\"></p>\n<h2 id=\"架設自己的-nuget-server\"><a href=\"#架設自己的-nuget-server\" class=\"headerlink\" title=\"架設自己的 nuget server\"></a>架設自己的 nuget server</h2><p>首先開啟一個新的 .net 專案，並安裝 nuget.server 套件，安裝完成之後直接修改 web.config 裡面的上傳 api 金鑰<br><img src=\"/artblog/nuget-server-and-package/1536988994_0427.png\"></p>\n<p>另外一個路徑的設定是上傳之後套件存放的地方，視情況修改，到這邊就完成了<br>直接將專案發行到硬碟，並且至 IIS 中將網站掛起來即可<br>也可以修改 windows hosts 檔案讓 local nuget server 吃自己喜歡的域名</p>\n<p>掛載完成之後，就可以透過指令上傳套件了<br>如果忘記上傳指令格式的話，直接開 nuget server 網站也可以看到<br><img src=\"/artblog/nuget-server-and-package/1536989230_37226.png\"></p>\n<p>第一個就是告訴你在 Visual Studio IDE 裡面，新增 nuget server 的時候所需要輸入的路徑<br>第二個就是指令的格式，照著輸入即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nuget.exe push JsonParserArtUtil.1.0.0.nupkg key -Source http://nuget.art/nuget</span><br></pre></td></tr></table></figure>\n<p><img src=\"/artblog/nuget-server-and-package/1536989562_90634.png\"></p>\n<p>到這邊為止，就已經完成了自己的套件建立及 nuget server<br>過程很簡單，只有幾行指令而已，因為所有事情 MS 都做掉了。</p>\n<p>我覺得架設 nuget server 對我最大的好處，就是會讓我開始用團隊的角度思考程式碼 Re-Use 這件事</p>\n<p>以往開發程式跟專案，若是碰到有需要共用的部分，通常都是將專案的產出 dll 檔案複製到另外一個專案去做引用參考，這樣有很多的缺點，最大的缺點就是一切都是要人工介入，而人工又是最難以保證的事情。</p>\n<p>未來要做持續佈署，直接下一個 nuget restore 就可以做掉這件事情了。人工介入的環節越少越好，這樣才不容易出錯，如果知道這個技巧，就可以逐漸將公司內的共用工具有系統的整合起來，在這些工具專案的說明，也有提供超連結的部分，這時候只需要在另外建立一個簡單的說明網站或是直接超連結到公司內部的某一份文件，就可以避免掉很多不必要的重工。</p>\n<p>這些事情在以前是沒有機會接觸到的，自然也就沒有想過，沒有那個環境，是不會有體悟的，只有當你身處在那個環境之內，才會思考到這些事情，雖然很微小，但是卻是一點一滴的在改變自己的視野。</p>\n<p>本來是不打算寫這一篇的，因為沒甚麼料，參考資料寫得比我更清楚詳細，而且微軟的文件關於這部分寫的超級詳細的，不過轉念一想，部落格本來就是寫給自己看的，這一件事情對我有啟發，我想記錄下來，於是我就這麼幹了，若是剛好能幫助到恰巧也不懂的人，那就更好了</p>\n<h2 id=\"參考連結\"><a href=\"#參考連結\" class=\"headerlink\" title=\"參考連結\"></a>參考連結</h2><ol>\n<li><a href=\"https://docs.microsoft.com/zh-tw/nuget/quickstart/create-and-publish-a-package-using-visual-studio-net-framework\">快速入門：使用 Visual Studio 建立及發行套件 (.NET Framework，Windows)</a></li>\n<li><a href=\"https://blog.txstudio.tw/2017/10/deploy-private-nuget-server.html\">架設私有 Nuget Server </a></li>\n</ol>\n","categories":["工具"],"tags":["nuget"]},{"title":"從 Unittest、TDD、ATDD 到 BDD","url":"/artblog//unittest-tdd-atdd-bdd/","content":"<p>補很久很久以前上過的課程心得….</p>\n<span id=\"more\"></span>\n\n<p>很久以前就上過 91 的 TDD 課程，至今仍舊念念不忘，恰逢公司內部分享，就選了這個主題來做做上完課後的總結好了</p>\n<p>文中圖片及資訊大部分來自 91 部落格，對這領域有興趣的可以 follow 一下 <a href=\"https://dotblogs.com.tw/hatelove\">In 91</a></p>\n<p>內容若有錯誤….請鞭小力一點</p>\n<p>Slide：<a href=\"http://www.authorstream.com/Presentation/partypeopleland-3633284-unittest-tdd-atdd-bdd-final/\">從 UnitTest、TDD、ATDD 到 BDD</a></p>\n<p>GitHub：</p>\n<ol>\n<li><a href=\"http://github.com/partypeopleland/BDD_FizzBuzz_Lib\">透過 BDD 練習解題 FizzBuzz</a></li>\n<li><a href=\"http://github.com/partypeopleland/LeetCode_171_TDD\">透過 TDD 練習解題 Leetcode 171</a></li>\n</ol>\n","categories":["心得"],"tags":["TDD"]},{"title":"瀏覽器實作ES模組練習","url":"/artblog//es6-support-in-browser/","content":"<p>不知道是什麼時候看到的，說是瀏覽器已經有支援ES6的模組了，蝦咪。那我是不是趕緊投入ES6的懷抱，然後推坑同事呢？趕緊來練習一下</p>\n<span id=\"more\"></span>\n\n<p>既然只是個練習，那就是動手做做看囉，題目當然就是萬年不變的兩數相加計算。在頁面上拉兩個Input擺放文字輸入框，放一個按鈕觸發事件。事件內容就是從頁面上抓值，然後把它加起來之後顯示在畫面上。</p>\n<p>設計一個Calculator，裡面包含了加法跟減法兩個module，接著index.js去呼叫Calculator進行運算。</p>\n<p>練習的部分因為僅針對module做練習，其他地方就沒有太多著墨。稍微查詢了一下原來這個在Chrome版本61就開始支援了，現在版本都已經到66了。既然Chrome、FireFox跟Safari，連IE Edge都已經跟上了，如果還不熟悉這東西的話可能網頁工程師這個title會掛的有點心虛啊。</p>\n<p>練習的過程中，這篇<a href=\"https://jakearchibald.com/2017/es-modules-in-browsers/\">ECMAScript modules in browsers</a>還蠻有幫助的，也順便推薦一下囉。</p>\n<p>照慣例，小練習要附上<a href=\"https://github.com/partypeopleland/es6SupportInBrowser\">程式碼</a>。</p>\n<p>整個目錄結構是這樣子的<br><img src=\"/artblog/es6-support-in-browser/1526314719_91327.png\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// add.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b</span>) &#123; <span class=\"keyword\">return</span> a + b; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sub.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">sub</span>(<span class=\"params\">a, b</span>) &#123; <span class=\"keyword\">return</span> a - b; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// calculator.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> add <span class=\"keyword\">from</span> <span class=\"string\">&quot;./calculator/add.js&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> sub <span class=\"keyword\">from</span> <span class=\"string\">&quot;./calculator/sub.js&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; add, sub &#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--index.html--&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;num1&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;num1&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">1</span>&gt;</span> +</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;num2&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;num2&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">2</span>&gt;</span> =</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;ans&quot;</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btnAdd&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Add&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./index.js&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;module&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> calculator <span class=\"keyword\">from</span> <span class=\"string\">&quot;./module/calculator.js&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> ans = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#ans&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#btnAdd&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">handleBtnAdd</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> num1 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#num1&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> num2 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#num2&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> val1 = <span class=\"built_in\">parseInt</span>(num1.<span class=\"property\">value</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> val2 = <span class=\"built_in\">parseInt</span>(num2.<span class=\"property\">value</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = calculator.<span class=\"title function_\">add</span>(val1, val2)</span><br><span class=\"line\">        ans.<span class=\"property\">innerHTML</span> = result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, handleBtnAdd)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n","categories":["javascript"]},{"title":"甚麼是 TDD、ATDD","url":"/artblog//about-tdd-atdd/","content":"<p>大概說明一下甚麼是 TDD、ATDD</p>\n<span id=\"more\"></span>\n\n<h2 id=\"甚麼是-TDD-ATDD？\"><a href=\"#甚麼是-TDD-ATDD？\" class=\"headerlink\" title=\"甚麼是 TDD &#x2F; ATDD？\"></a>甚麼是 TDD &#x2F; ATDD？</h2><ol>\n<li>TDD：Test Driven Development 測試驅動開發</li>\n<li>ATDD：Acceptance Test Driven Development 驗收測試驅動開發</li>\n</ol>\n<p>比較正式的定義可以在 <a href=\"https://zh.wikipedia.org/wiki/%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91\">WIKI</a> 找到，<a href=\"https://baike.baidu.com/item/TDD/9064369\">百度</a>的解釋當中有一段我覺得很精闢</p>\n<blockquote>\n<p>TDD &#x3D; TFD + Refactoring (TFD – Test First Development)</p>\n</blockquote>\n<p>TDD 是一種開發軟體的方式，具體一點說明就是開發 Production Code 之前，先寫測試，並加入重構的環節。<br>整個開發流程的順序就是 紅燈-&gt; 綠燈-&gt; 重構的循環</p>\n<ol>\n<li>紅燈：寫一個失敗的測試</li>\n<li>綠燈：撰寫 Production Code 通過測試</li>\n<li>重構：重構程式碼</li>\n</ol>\n<p><img src=\"/artblog/about-tdd-atdd/1537725178_17204.gif\"></p>\n<p>在一般的開發情境當中，往往工程師接獲到需求之後，就直接針對 Production Code 做開發，很容易陷入一團混沌的情況當中，往往需求完成了，但程式碼也包含了許多不必要的 Code。這很有可能演變成為<a href=\"https://zh.wikipedia.org/wiki/%E4%BB%A3%E7%A0%81%E5%BC%82%E5%91%B3\">壞味道</a>的一種，難以理解，目標不明確的 Code。也會浪費額外的時間。</p>\n<p>透過 TDD 方式開發，利用紅燈、綠燈、重構的循環，當一個一個的測試案例被滿足之後，再<a href=\"https://zh.wikipedia.org/wiki/%E8%BF%AD%E4%BB%A3\">迭代</a>下一個循環下去，直到所有測試案例被滿足，也就代表 Feature 被完成了。</p>\n<p>整個軟體開發的流程會是非常明確的，撰寫的每一行程式碼都是為了要達成某個測試案例所撰寫，每一行都是有其存在的意義。但是 TDD 只是一個開發的方式，如何跟使用者需求結合，確保開發出來的軟體的確是能夠滿足使用者呢？</p>\n<p>透過將使用者需求，拆分成一個一個的小目標，然後利用 TDD 的方式去完成它，最後將 Production Code 就會是滿足使用者需求的代碼，將 TDD 加上使用者需求拆解，成為各個驗收測試的這個環節，就是 ATDD</p>\n<p>TDD 只是一種開發方式，其實也不用奉為聖經，事事遵從；軟體開發方式在每一個時代出現都有其時空背景、需要解決的問題；像是現在前端框架有很多選擇，但是選擇框架的時候有經驗的人都會先搞清楚，你選擇這個東西，打算要解決什麼問題？</p>\n<p>TDD 的好處有很多，但是也有其不適用的情境，個人技術不達標，物件導向、重構、測試的基本如果都還不熟悉，基本上是無緣，建議先充實本身的技術能力；另外公司環境基礎建設不支持，可測試性極差的 Legacy Code，這些都不太適合開始 TDD</p>\n<p>在這邊順便推一下 <a href=\"https://leetcode.com/problemset/all/\">LeetCode</a>，網站上的題目都很適合拿來練習 TDD</p>\n","categories":["心得"],"tags":["TDD"]},{"title":"讀書心得-無暇的程式碼-整潔的軟體設計與架構篇","url":"/artblog//clean-code-architect/","content":"<p>純粹記錄個人的讀書心得，很有可能有謬誤的部分，還請不吝指正</p>\n<span id=\"more\"></span>\n\n<h2 id=\"CH1-甚麼是設計與結構\"><a href=\"#CH1-甚麼是設計與結構\" class=\"headerlink\" title=\"CH1 甚麼是設計與結構\"></a>CH1 甚麼是設計與結構</h2><p>一開始提到的是軟體的架構其實也像是蓋房子一樣，類似的論調其實在許多設計模式都出現了不只一次，一開始的確是有點難以理解，但其實從建築的角度看，要蓋好房子是需要先有規劃，畫設計圖，算比例，會這些東西只是基本，你還需要依據需求來蓋房子，蓋住宅與商業大樓的格局，基礎設施，配線、管路、配電盤、變壓機房、空調都會有不同。所有的事情都是為了支持最終的目的，把房子蓋好，讓客戶滿意。</p>\n<p>這其實就像是軟體開發的客戶需求一樣，我們需要針對各式各樣的需求，去開發軟體以滿足客戶所需。從這個角度看是類似的。</p>\n<p>而軟體架構，書中給出的解釋是最小化建置、維護系統所需要的人力；轉念來想，其實建築內也有許多東西需要保養維護、蓄水池、空調箱濾網、線路老舊抽換，其實都很像，我就親身經歷過配電盤的入口居然在半空中的建築，用來對比難以維護的軟體系統是格外有感。</p>\n<p>這邊有一段很寫實，大意是進入市場，網站上線之後就表示後面已經有一堆競爭對手，因此必須要盡可能保持領先的優勢，在這個情況下開發人員往往都是一個功能一個功能接續開發，回頭清理技術債的可能性少之又少。<br>也因此，TDD 開發方法中有一個環節是重構，不斷的循環迭代中，持續地將你目前的程式碼做局部性的優化重構而非全盤打掉重來，公司應該也很難接受你提出一個重構計畫，然後重構之前跟重構之後的功能都一樣，外部使用者是感覺不到的。(這邊的說的重構並非針對效能的優化重構)</p>\n<h2 id=\"CH2-兩種價值觀的故事\"><a href=\"#CH2-兩種價值觀的故事\" class=\"headerlink\" title=\"CH2 兩種價值觀的故事\"></a>CH2 兩種價值觀的故事</h2><p>用行為與架構來解釋軟體開發工程師的工作內容。大部分人都會先 focus 在第一個東西上，因為這東西 End User 是有感的，當行為不對時，我們會需要 Debug。但是有經驗一點的工程師，會注意到後者，因為軟體開發總是會需求變更、追加功能，若架構難以維護，這些程式碼的價值就只是這樣，無法再增加了</p>\n<p>如果市場變動更快，程式碼的價值很可能瞬間就會跌落谷底。但是有的時候其實不是難以維護，而是一些老舊系統採用的語言，已經沒有人願意學習，或者是作業系統不再支援了。例如 vb6、powerBuilder、asp。在這個情況下，軟體工程師的價值有可能因為只有你會這些東西，而變得奇貨可居，但我想大多數的時候是，公司會決定將這些老舊系統重新改寫。</p>\n<p>我覺得這一段用意在於喚醒程式設計師的良知。因為你的專業，所以就必須要有所堅持，不懂程式設計的人不明白架構這件事情的重要性。但不重視他，終將自食苦果。HitCon Allen Own 在 webconf 2013 的議程中，有一個梗蠻寫實的，講的是網站資安管理者的事情</p>\n<ol>\n<li>無知：需要學習</li>\n<li>無能：需要修練</li>\n<li>無恥：需要悔改</li>\n</ol>\n<p>但是我覺得套用在這邊也很適用，不懂架構這件事情所以寫出難以維護的程式碼，需要學習；懂了卻又生搬硬套，需要多多練習從中獲得經驗；明明知道有地雷卻又繼續埋下去，這種人就真的需要悔改了</p>\n<p>最後總結一下這一章內容：軟體架構需要你去捍衛，這是公司請你來的原因，也是你的價值所在，別自己放棄</p>\n<h2 id=\"CH3-範式概述\"><a href=\"#CH3-範式概述\" class=\"headerlink\" title=\"CH3 範式概述\"></a>CH3 範式概述</h2><p>簡略的說明了一下結構化程式設計、物件導向程式設計與函數式程式設計，並嘗試總結。</p>\n<p>因為傳統的程式撰寫是透過行號，依照順序執行，又因為 GOTO 語句的存在，如果程式大一點，是非常難以維護的。也因此針對這件事情加以限制，透過我們熟悉的 if&#x2F;else 等等判斷語法來建構程式，取代掉原先的 GOTO</p>\n<p>也就是他的總結：結構化程式設計在直接的控制移轉上加上規範</p>\n<p>後面兩種就難以理解，稍微看過一次他的總結有點印象就好<br>物件導向程式設計是在間接地控制移轉上加上規範；函數式程式設計則是在賦值上加上規範</p>\n<p>這一章大概是為了後面章節準備的一個概述，所以也不會太深入，或許看完之後的章節再回來會有其他的心得</p>\n<h2 id=\"CH4-結構化程式設計\"><a href=\"#CH4-結構化程式設計\" class=\"headerlink\" title=\"CH4 結構化程式設計\"></a>CH4 結構化程式設計</h2><p>如概述中所提到的，這個章節先介紹了某位很厲害的人，證明了所有的程式都可以用三種結構來建構，分別是循序、選擇、迭代。所以結構化程式設計就這樣誕生了。對於這種考究我沒甚麼興趣，但是在測試這個標題之下的內容，有一段話很重要：一個程式可以用測試來證明他是不正確的……再經過充分的測試後，這些測試可以讓我們認為程式對我們來說式足夠正確的</p>\n<p>有沒有馬上聯想到 TDD 與使用案例？當程式上線之後爆掉，線上爆掉的那個情境就是你最新的測試案例，當這些測試案例足夠多，你的程式就相對地足夠健壯</p>\n<p>當 Bug 修得夠快，那就不叫作 Bug，叫作迭代，這當然是開玩笑的，但也有幾分真實。<br>或許這一章的內容，是我們實作單元測試的支撐原因之一？要不然為甚麼我們寫完很多單元測試，我們就會相信程式的功能是 OK 的呢？</p>\n<h2 id=\"CH5-物件導向程式設計\"><a href=\"#CH5-物件導向程式設計\" class=\"headerlink\" title=\"CH5 物件導向程式設計\"></a>CH5 物件導向程式設計</h2><p>總算講到物件導向，應該會比較容易理解了，這裡開始探討定義，但定義這件事情真的沒那麼容易闡述，因為我覺得他是一個比較概念性的東西，就像有人問你甚麼是愛一樣，可以給出很抽象的定義，我們也很難去明白、反駁；所以這邊嘗試用了具體一點的東西來解釋物件導向這件事情，也就是封裝、多型、繼承</p>\n<p>但是再一個又一個的解釋當中，透過眾多物件導向語言，來論述封裝、繼承、多型這三件事情，最終發現只有多型威力強大</p>\n<p>書中給的範例是倚賴介面這件事情，而非倚賴實體。這也是物件導向程式設計中很重要的概念之一，這個概念來自於硬體界，所有的廠商都針對相同的介面做硬體的規格設計，也因此只要符合介面規範，是可以被隨意替換的。這個概念被軟體開發藉鑑使用，就能夠做到針對介面設計、細節則透過各類別去實做</p>\n<p>關於書中提到的解釋因為不是寫 java 的不是很懂他的解釋，但關於依賴反向 (DI) 這件事情，或許可以參考一下</p>\n<p>然後我把他的總結當中提到的允許架構師建立一個 plugin 架構，…… 獨立於包含高層及策略的模組來進行佈署與開發，這一段換成 client code 與 lib dll 之間的關係，我覺得似乎就是這個意思。</p>\n<h2 id=\"CH6-函數式程式設計\"><a href=\"#CH6-函數式程式設計\" class=\"headerlink\" title=\"CH6 函數式程式設計\"></a>CH6 函數式程式設計</h2><p>一開始透過兩種語言的對比，帶出一個結論：函數式語言中的變數不會改變</p>\n<p>為什麼這個很重要，因為有一些麻煩的問題，原因就在於變數改變。給的解釋也很有趣：你沒有可以變動的 lock，你就不會遇到 deadlock。</p>\n<p>你沒有女朋友就不會遇到兵變，相同概念。</p>\n<p>光看到平行處理與多執行緒、多處理器，然後再加一個 deadlock，應該會很想哭</p>\n<p>後面的一些論述老實說有些懂也有些不懂，甚至我覺得這個應該是某些公司內以有限的資源要去做某項功能，而受限於硬體資源，不得不在半夜跑排程，然後需要資料的時候就從 Temp Table 與當日 Table 來計算資料，提到的概念的確是有點誇張。我覺得不太可能實現。因為不需要變數就意味著你要花大量的資源來計算，以網站開發後端的部分來說應該是不可能實現的。或許這也是前端會有函數式編程的關係，不過因為我不是很明白，大概也是看結論就好</p>\n<p>他的結論很妙，我們在這三種程式設計範式中，學到的事情是了解到那些是不該做的。<br>我能夠理解在結構化程式設計中，我們捨棄了無限制的 GOTO 對我們帶來的影響。讓我們難以理解程式的運作流程，甚至是難以維護、擴充新功能</p>\n<p>我能夠理解在函數式程式設計中，捨棄掉對於變數賦值這件事情，或許在某些情況下可以讓程式更加穩定；在做出如書中範例的折衷，也能夠為網站開發帶來些好處。</p>\n<p>不過我還是沒懂在物件導向中，那些關於間接控制移轉加上規範的部分，有哪些是不該做的。</p>\n<p>先前所探討的範疇都還是屬於整體性的東西，現在將範圍縮小一點點，蓋房子總有基礎的材料像是磚塊等等，接下來要講的設計原則，就大概是隸屬於這個範疇的，否則就算外部架構在怎麼好，結果一看材料居然是海砂屋，那就可以 GG 了。</p>\n<p>這裡的設計原則一共有五項，分別是</p>\n<p>SRP：單一職責<br>OCP：開閉原則<br>LSP：里式替換原則<br>ISP：介面隔離原則<br>DIP：依賴反向原則<br>這些本來就已經是縮寫的東西，其實一開始我有點記不太起來，也沒怎麼特別記，只是日復一日的聽，久而久之莫名其妙的腦海中就會浮現 SOLID，然後就可以一條一條列出來。至於 SOLID 是什麼意思？我剛剛查了一下 google，說是實心的意思，管他呢。</p>\n<h2 id=\"CH7-Single-Responsibility-Principle-單一職責原則\"><a href=\"#CH7-Single-Responsibility-Principle-單一職責原則\" class=\"headerlink\" title=\"CH7 Single Responsibility Principle 單一職責原則\"></a>CH7 Single Responsibility Principle 單一職責原則</h2><p>一開始我的認識也是很膚淺，以往聽人說好的物件導向設計要遵循單一職責，甚麼是單一職責呢？因為我們已經用抽象的概念將現實的事物轉變為一個個的類別，這些類別通常我們都會用名詞去命名，類別內的方法用動詞去命名，這樣就會很好理解物件的概念。對於以前初學的我這樣的方式的確是比較好理解的，然後我就誤以為單一職責就是一次只做一件事情。這句話是沒有錯的。錯的是我沒有搞清楚他的但書：一個模組應該只對唯一的一個角色負責</p>\n<p>這一段我覺得很棒，用一個實際的簡單例子清楚的解釋 SRP，很淺顯易懂。解決方案也是很直覺的，將資料與邏輯分離，數個不同的角色的邏輯則被放置於各自的類別。其實這件事情寫程式寫久了你就會這樣做，但很有可能你說不出來原因，只說得出來：因為不這樣做，某幾個類別一改，就會連帶影響到其他類別出錯誤。</p>\n<p>我覺得看完這一段就會把經驗跟理論實際融合在一起，然後就會：啊哈，原來這個就是 SRP。</p>\n<h2 id=\"CH8-Open-Closed-Principle-開放-封閉原則\"><a href=\"#CH8-Open-Closed-Principle-開放-封閉原則\" class=\"headerlink\" title=\"CH8 Open-Closed Principle 開放-封閉原則\"></a>CH8 Open-Closed Principle 開放-封閉原則</h2><p>對修改封閉、對擴充開放，書中給的是比較偏向整體架構的例子，先分析一下然後有了初步的職責，這邊也用了 SRP 的概念，將網頁呈現報告與報表列印分成了兩個類別來處理，而範例裡面當然也用了其他的設計原則，所以我覺得其實要比較好理解這個例子，<strong>最好是把它放在最後一個看</strong></p>\n<p>幾個重點紀錄一下</p>\n<p>一開始先分析解決方案，決定有哪些類別、劃分到那些元件，並檢視彼此的依賴關係 (SRP)<br>將資料與邏輯分離，邏輯依賴介面 (ISP)<br>元件與元件之間相互溝通都是倚賴介面 (DIP)</p>\n<h2 id=\"CH9-Liskov-Substitution-Principle-里式替換原則\"><a href=\"#CH9-Liskov-Substitution-Principle-里式替換原則\" class=\"headerlink\" title=\"CH9 Liskov Substitution Principle 里式替換原則\"></a>CH9 Liskov Substitution Principle 里式替換原則</h2><p>這應該是最容易上手的一個原則了，以前聽過的解釋是說：古時候爸爸被官府叫去當兵，爸爸可以叫兒子去。通常的解釋應該是：在程式碼用到父類別的地方，都可以把父類別改為子類別。</p>\n<p>例如：小狗繼承了動物，所以我們會說小狗是動物，但不會說動物都是小狗</p>\n<p>書裡面還是不厭其煩、很認真地介紹了這個章節，然後我也很認真地看完了但是沒有甚麼其他特殊的心得，因為大概就是這樣了</p>\n<h2 id=\"CH10-Interface-Segregation-Principle-介面隔離原則\"><a href=\"#CH10-Interface-Segregation-Principle-介面隔離原則\" class=\"headerlink\" title=\"CH10 Interface Segregation Principle 介面隔離原則\"></a>CH10 Interface Segregation Principle 介面隔離原則</h2><p>一開始先用視野比較小的類別當範例，如果違反了介面隔離原則會怎樣，以及如何解決這個問題。接著視野放大一點到系統架構層級。如果系統A依賴系統B，系統 B 又依賴系統 C，那麼當系統 C 有異動，需要重新佈署，那麼連帶的也會影響到 A</p>\n<p>如果跟一開始的類別範例一起看，有可能就會發生：我的系統依賴 Framework，而 Framework 又依賴某個 Lib 的 A 功能，但是因為沒有用介面隔離，所以當 Lib 的 B 功能有更新，我卻需要為了我沒有去用到的 B 功能，將我的 Framework 更新，更慘的是，因為我的系統倚賴 Framework，所以也要一起更新</p>\n<p>應該只有WTF可以說了</p>\n<h2 id=\"CH11-Dependency-Inversion-Principle-依賴反向原則\"><a href=\"#CH11-Dependency-Inversion-Principle-依賴反向原則\" class=\"headerlink\" title=\"CH11 Dependency Inversion Principle 依賴反向原則\"></a>CH11 Dependency Inversion Principle 依賴反向原則</h2><p>簡單的說這個原則就是將原本建立實體類別的地方，改成相依於介面，這樣子程式依賴的就不是某一個特定的類別，而是依賴於介面</p>\n<p>類別是容易異動的，所以不是很穩定，如果程式倚賴實體類別，可以想見的是也會時常異動，而介面因為不牽涉具體實作，他是比較抽象的，相比於實體類別而言，除非是需求異動，要不然他是較不容易改變的，相對地程式就會比較穩定。所以我們撰寫程式應該相依於介面</p>\n<p>但是最終還是有實例需要被建立，書中順便介紹了一下抽象工廠設計模式，讓應用程式需要使用到實體類別的地方，都透過工廠來建立，但是這個工廠也不是一個實體類別，而是一個介面，這樣就可以透過依賴注入的方式，讓程式依賴外部傳進來的工廠實體，而不是自己本身應用程式內的某個實體類別了</p>\n","categories":["心得"]},{"title":"軟體開發這件事","url":"/artblog//about-software-development/","content":"<p>本來是打算寫一下物件導向，寫著寫著就覺得應該先寫一下軟體開發，可是我又不是理論派，所以只好分享一下自己的經驗了。</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>底下所有內容皆屬於個人看法，如果有錯誤，請砲小力一點~謝謝</p>\n</blockquote>\n<h2 id=\"物件導向這一件事情\"><a href=\"#物件導向這一件事情\" class=\"headerlink\" title=\"物件導向這一件事情\"></a>物件導向這一件事情</h2><p>物件導向是一種抽象性的概念，將真實世界的需求，轉變成一個一個的物件，而這些物件又有自己的屬性及方法。透過這樣的方式彼此互動，達到模擬真實世界的需求。</p>\n<p>當然這樣的模擬不可能會是無窮無盡的，不然你程式就寫不完了。所以我們在透過程式語言都是為了要解決某一個問題，要達成這個目標所使用的工具、方法。比如，要讓客戶的產品能夠直接在網路上賣出去，因此替客戶架設一個電子商務網站就是一個達成目標的方式之一。</p>\n<blockquote>\n<p>客戶是為了要讓它們的產品能夠透過網路觸及到更多潛在的消費者，網站是一個解決方案；但這個目標不會只有一個解決方案，在本文僅以網站作為範例說明。</p>\n</blockquote>\n<p>而這個電子商務網站並不一定只能用特定的技術來實作，可以用 php、asp.net、node.js 當然也包括了很久、很久、很久以前的技術：asp。</p>\n<p>一般來說，在傳統的方式及學校裡面學到的知識，都會提到一個專有名詞：<a href=\"http://wiki.mbalib.com/zh-tw/%E7%80%91%E5%B8%83%E6%A8%A1%E5%9E%8B\">瀑布開發模式</a>，記得是在學校的專案管理這門課裡面學到的。大致上的意思我們也不是專攻理論派的，就直接口語化的解釋一下：在軟體開發的過程當中會有許多腳色，分別處理不同的事情，其中最重要的是【確認客戶需求】，這件事情，我們交給一個叫做 PM 的人去負責</p>\n<p>PM 可以是專案經理 ( Project Manager )，或是產品經理 ( Product Manager )，依據開發團隊的性質來決定，例如這一家公司是專門接案子進來做，我會認為他的這個腳色是專案經理；如果是自己公司有自身產品，那麼我會認為應該是產品經理。這兩者做的事情有很多都一樣，但是卻又有很多不同。學問很大，細節很多，我們就略過不表</p>\n<p>而當需求已經被確定了，那麼就會交由系統分析師 ( System Analysis )，將需求分析出來，這個腳色我覺得最重要的事情是：確認什麼事情要做；而那些東西又是不用去做的。最終產出一份規格書，爾後，所有程式開發的部分都將以這份規格書當作依據。</p>\n<blockquote>\n<p>好吧，上面那一段是理論上的，實務上我從來沒有看過能夠跟規格書對的上的程式碼，所以你們也就參考就好。</p>\n</blockquote>\n<p>而在這個環節，還有一個部分叫做系統設計 ( System Design )，因為 SA 的部分做的事情是比較抽象一點的，而落在實務設計上，會經由 SD 這個腳色，將理論與實務合而為一，從而開出一份真正能夠實作出來的文件，在這個階段， SD 主要的工作項目就會是比較偏程式語言出身的人能看懂的東西，也就是建構出一個又一個的類別，寫一下這個類別有甚麼屬性阿、方法阿，之類的。請原諒我這一段沒有辦法給出太多經驗，因為在我的職涯中，沒看過 SD 這號人物。</p>\n<blockquote>\n<p>這也是很多小公司的通病， SD 這個職務常常是不存在的</p>\n</blockquote>\n<p>直接是由 SA 開規格給程式設計師，所以常常很多 SD 的工作，都落在了所謂資深程式設計師身上；或者是由 SA 順便做掉了這一部份的工作；或者是在認知不足的情況下；這部分工作就直接被忽略掉了。</p>\n<p>甚麼？你說不可能忽略？怎麼不可能。你以為動輒數千行的 Legacy Code 一開始是怎麼來的呢？把一份規格書交給一個新人 PG 就出來了。在沒有資深工程師的帶領之下，新手 PG 一個人開副本打怪的結果就是只會用最原始的方式，一刀一槍的打拼，你說他不認真嗎？不一定。但是那份程式碼可能會有許多維護上的困難，而這些，是開發團隊成員的其他腳色感受不到、也不會理解的。出錢的那一位也不一定會理解，老闆都是看結果的，程式能不能跑？能跑。程式對不對？是對的。那就行了。誰還管 SD 這件事情？</p>\n<blockquote>\n<p>這邊定義的新手PG屬於程式設計新人，沒有物件導向概念及程式開發背景</p>\n</blockquote>\n<p>好吧，終於輪到 Programmer 了，說到這個腳色需要會的東西真的很多，但是，都不會好像也沒有關係，因為老闆不會知道。只有技術人懂技術人啊。</p>\n<p>所以老板不會清楚軟體開發流程中，一個資深的程式設計師能夠起到的作用，絕大多數都是在看不見的地方。一樣是接收到規格書，資淺的程式設計師當然就是按照規格書一步一腳印的實作出來。而資深的程式設計師，還會考量很多事情，我們講最簡單的：以後好不好維護就是一個例子。</p>\n<p>PG 其實就是將需求，用程式碼一行一行的處理掉，如果是不懂物件導向概念的人，很有可能會寫出難以維護的程式碼，而有概念的人，會將這些完成需求的程式碼，思考如何抽象出來共用。以後再添加新需求，或者是需求異動的時候，維護成本就看的出來了。</p>\n<p>我就曾經看過好幾個例子，一樣是加一個需求，某位程式設計師的手法是複製貼上，然後前面加個判斷，原程式從三千行直接翻倍成長變成六千行。而另外一個的手法是先重構，然後抽象出來，接著才去改程式碼。前者工時花費一小時，眾人好評不斷；後者工時花費一天，承受抨擊無數。</p>\n<p>去除掉政治因素的考量，我們純粹以程式設計師的角度來看這一件事情。你願意日常維護哪一份程式碼呢？</p>\n<blockquote>\n<p>在這邊還是要呼籲一下，拜託不要別人的孩子死不完，你搞的不是公司，是接手你工作的其他同事。這個世界很小，遇得到的。<br>在軟體功能開發完成之後，通常會有人來複測這份程式碼功能對不對，這個腳色通常我會用 QC ( Quality Control ) 來稱呼。在其他公司可能會有其他的稱呼，對於這一點我有看到一篇文章寫得還蠻不錯的，提供給各位參考一下：<a href=\"https://www.ithome.com.tw/voice/85554\">QA、QC、傻傻分不清楚</a>。</p>\n</blockquote>\n<p>測試如果通過了，通常會交由另外一個腳色開始做產品發布的動作。這一段因為我涉獵不多就略過了。但是軟體從無到有，大概就是經過了這樣的流程來開發、產生出來的。</p>\n<p>以上說得通通是屬於古早年代的作法。</p>\n<p>以上說得通通是屬於古早年代的作法。</p>\n<p>以上說得通通是屬於古早年代的作法。</p>\n<p>是的。很悲哀的是，軟體產業在今天，還是有許多公司、企業，仍然奉行這一套軟體開發模式。在變動較少的產業、需求中，如果還在使用瀑布開發模式，那沒有問題。</p>\n<p>但是在資訊變遷非常快速的現代社會中，這一套軟體開發方式無疑是被擊中了弱點。因為這一套走下來，往往耗時費工，當你發現了一個能夠賺錢的商業模式希望要趕快上線的時候，卻發現打完這一套組合拳，人家葉師傅已經打十個了。</p>\n<blockquote>\n<p>怎麼那麼帥 怎麼那麼屌 怎麼那麼有腦袋<br>怎麼那麼罩 這麼多的才華 這麼少時間 怎麼做的到 - 熊仔 【凶宅】</p>\n</blockquote>\n<p>我不禁想到背景音樂的這首歌，對阿，這麼少的時間，別的競爭對手怎麼做的到？？</p>\n<p>其實就是另外一套模式：<a href=\"https://zh.wikipedia.org/wiki/%E6%95%8F%E6%8D%B7%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91\">敏捷軟體開發</a></p>\n<p>敏捷開發打破了先前瀑布模式的許多觀念，核心就是一個快速反應、持續交付的概念。而要達到這個目標，從骨子裡都與傳統的瀑布開發有著本質上的不同。</p>\n<p>最淺顯易見的就是常常聽到的，敏捷樂於擁抱變化；而傳統的規格書你動他一個需求試試看，跟你說啦，會議就開不完了。</p>\n<p>要Run敏捷也有很多限制，最大的一個限制當然就是老闆要支持。而 PG 成員可能自己本身的底子也要夠，因為要做到持續交付，單元測試是少不了的，這裡頭太多學問，等以後我有了解再分享給各位。</p>\n","categories":["心得"]},{"title":"APM-Server RUM","url":"/artblog//APM-Server-RUM/","content":"<p>網站效能的監控，類似微軟的 application insights，但是微軟的要錢，自己架的不用，而且需要看甚麼就自己寫，換個方向想其實也比較方便</p>\n<span id=\"more\"></span>\n\n<p>APM 的全名是 application performance management，而 RUM 則是 real user monitoring，RUM 直接從用戶端的瀏覽器崁入一些 js 指令收集數據，我自己的理解是 RUM 是類似 Chrome 開發者工具那樣，只是將數據保存在某個地方，便於之後查看，而 APM 則是將使用者的操作，後端的處理經過哪些指令，呼叫了那些第三方服務，這些等等的數據也記錄下來，然後可以透過一些視覺化的方式事後去監控網站前端與後端的效能。</p>\n<p>對網站維運及除錯是蠻有幫助的…….只是 Log 的點要埋的對就是了，下面的步驟都只是初學的一些步驟及心得，不一定是正確的，參考請注意。</p>\n<h2 id=\"架構\"><a href=\"#架構\" class=\"headerlink\" title=\"架構\"></a>架構</h2><p><img src=\"/artblog/APM-Server-RUM/apm06.png\"></p>\n<p>架構如上，網頁加入<code>apm-agent-rum-js</code> ，傳遞給<code>apm-server</code>，再發送給<code>elasticSearch</code>，最後透過<code>kibana</code>觀看數據</p>\n<h2 id=\"環境建立\"><a href=\"#環境建立\" class=\"headerlink\" title=\"環境建立\"></a>環境建立</h2><p>基本上就是透過 docker 建立所需要的東西，這部分請參考我自己練習的<a href=\"https://github.com/art-Blog/my-docker-elk\">docker-compose</a>，當然我也是改自<a href=\"https://github.com/deviantony/docker-elk\">deviantony&#x2F;docker-elk</a>的<code>Elastic stack (ELK) on Docker</code>，有興趣的人可以了解一下</p>\n<h3 id=\"apm-server\"><a href=\"#apm-server\" class=\"headerlink\" title=\"apm-server\"></a>apm-server</h3><h4 id=\"啟用-APM-server-RUM-功能\"><a href=\"#啟用-APM-server-RUM-功能\" class=\"headerlink\" title=\"啟用 APM-server RUM 功能\"></a>啟用 APM-server RUM 功能</h4><p>APM-server 依賴<code>elasticSearch</code>，此處須設定 ES 的主機位置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apm-server.host:</span> <span class=\"string\">&quot;localhost:8200&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">output.elasticsearch.hosts:</span> [<span class=\"string\">&quot;http://elasticsearch:9200&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">apm-server.rum.enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">apm-server.rum.event_rate.limit:</span> <span class=\"number\">300</span></span><br><span class=\"line\"><span class=\"attr\">apm-server.rum.event_rate.lru_size:</span> <span class=\"number\">1000</span></span><br><span class=\"line\"><span class=\"attr\">apm-server.rum.allow_origins:</span> [<span class=\"string\">&quot;*&quot;</span>]</span><br><span class=\"line\"><span class=\"attr\">apm-server.rum.library_pattern:</span> <span class=\"string\">&quot;node_modules|bower_components|~&quot;</span></span><br><span class=\"line\"><span class=\"attr\">apm-server.rum.exclude_from_grouping:</span> <span class=\"string\">&quot;^/webpack&quot;</span></span><br><span class=\"line\"><span class=\"attr\">apm-server.rum.source_mapping.cache.expiration:</span> <span class=\"string\">5m</span></span><br><span class=\"line\"><span class=\"attr\">apm-server.rum.source_mapping.index_pattern:</span> <span class=\"string\">&quot;apm-*-sourcemap*&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"設置-CORS\"><a href=\"#設置-CORS\" class=\"headerlink\" title=\"設置 CORS\"></a>設置 CORS</h4><p>解決 CORS 及 APM 追蹤的問題，須加上 header，此處為了測試僅在<code>web.config</code>進行設置全部開放，實務上應針對個別的 API 進行設定</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">system.webServer</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">httpProtocol</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">customHeaders</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;*&quot;</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Content-Type, elastic-apm-traceparent&quot;</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Access-Control-Request-Method&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;GET, OPTIONS, POST&quot;</span>/&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">remove</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;X-Powered-By&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">customHeaders</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">httpProtocol</span>&gt;</span></span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在後來自己的幾次練習，發現有的時候 APM-server 狀態都沒有正確，最後是將 container 全部 remove , 包含建立的 network 還有 elasticsearch 的 data，然後重新跑 <code>docker-compose up</code>，最後才出現了正確的狀態，之前也有嘗試過在 <code>apm-server</code>的容器內用 curl 去打 <code>elasticsearch:9200</code> 也是成功的，這個問題就始終查不到正確的解決方案…</p>\n</blockquote>\n<p><img src=\"/artblog/APM-Server-RUM/2021-10-05-102219.jpg\"></p>\n<h3 id=\"apm-agent\"><a href=\"#apm-agent\" class=\"headerlink\" title=\"apm-agent\"></a>apm-agent</h3><h4 id=\"client-端範例\"><a href=\"#client-端範例\" class=\"headerlink\" title=\"client 端範例\"></a>client 端範例</h4><p>如果想看文件的話可以參考<a href=\"https://www.elastic.co/guide/en/apm/agent/js-base/current/getting-started.html\">此處</a>，取得 <a href=\"https://github.com/elastic/apm-agent-rum-js/releases/tag/@elastic/apm-rum@5.6.1\">GitHub</a> 或是 <a href=\"https://unpkg.com/@elastic/apm-rum/dist/bundles/elastic-apm-rum.umd.min.js\">UNPKG</a> 的 js 並於專案中引用載入，記得<code>elastic-apm-rum.umd.js</code>要先加入至專案</p>\n<p>基本上只要在共用頁面<code>_Layout.cshtml</code>裡面埋這段 Code 就好了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;~/Scripts/Plugins/elastic-apm-rum.umd.js&quot;</span> crossorigin&gt;&lt;/script&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  elasticApm.<span class=\"title function_\">init</span>(&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">serviceName</span>: <span class=\"string\">&#x27;mySite-FE&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">serverUrl</span>: <span class=\"string\">&#x27;http://localhost:8200&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">active</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">instrument</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">disableInstrumentations</span>:[<span class=\"string\">&#x27;eventtarget&#x27;</span>],</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"attr\">environment</span>: <span class=\"string\">&#x27;localhost&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>因為有設定<code>environment</code>，所以可以切換環境<br><img src=\"/artblog/APM-Server-RUM/apm05.png\"></p>\n<p>文件請參考<a href=\"https://www.elastic.co/guide/en/apm/agent/rum-js/current/agent-api.html\">agent API</a>，以及<a href=\"https://www.elastic.co/guide/en/apm/agent/rum-js/current/configuration.html\">init 設定</a></p>\n<p>例如加入使用者資訊，就可以透過<code>user.id : &quot;382119&quot;</code>來篩選資料，或是透過<code>user.name : &quot;art&quot;</code>以人名篩選</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">elasticApm.<span class=\"title function_\">setUserContext</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: @<span class=\"title class_\">AuthorizeManagement</span>.<span class=\"property\">CurrentUser</span>.<span class=\"property\">Id</span>,</span><br><span class=\"line\">  <span class=\"attr\">username</span>: <span class=\"string\">&#x27;@AuthorizeManagement.CurrentUser.Name&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>此處的<code>AuthorizeManagement</code>物件是後端自行設計的一個用來記錄登入者資訊的一個靜態類別，實際需要替換為你自己後端的資料來源</p>\n</blockquote>\n<p><img src=\"/artblog/APM-Server-RUM/apm04.png\"></p>\n<h4 id=\"自行撰寫事件\"><a href=\"#自行撰寫事件\" class=\"headerlink\" title=\"自行撰寫事件\"></a>自行撰寫事件</h4><p>如果套件自行建立的資料不符合需求，也可以選擇自己寫事件，下面是一個範例</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>會員資料異動模擬<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;phone&quot;</span>&gt;</span>電話<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;form.phone&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>姓名<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;form.name&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @@<span class=\"attr\">click</span>=<span class=\"string\">&quot;insAuditLog&quot;</span>&gt;</span>修改<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @@<span class=\"attr\">click</span>=<span class=\"string\">&quot;getAuditLog&quot;</span>&gt;</span>refresh<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>共 &#123;&#123; recordCount &#125;&#125; 筆異動紀錄<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;table table-bordered table-sm&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>#<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>異動紀錄<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(record,index) in records&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; index + 1&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;table table-bordered table-sm&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>#<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>異動欄位<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>異動前<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>異動後<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>異動日期<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>異動人員<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(content,index) in record._source.content&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; index+1 &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; content.field &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; content.valueBefore &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; content.valueAfter &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; record._source.modifiedDate &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123; record._source.modifiedBy &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">@section scripts&#123;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;~/Scripts/Page/AuditLog/Index.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>基本上就是在初始化的時候宣告<code>pageLoadSampled</code>，跟 server 說我要自己定義事件了，你不用幫我用預設的事件了，所以後續就自行撰寫<code>startTransaction()</code>還有<code>startSpan()</code>了，這個部份我沒有太深入研究，暫時對我來說基本的夠用了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">SERVER_URL</span> = <span class=\"string\">&quot;http://localhost:8898/&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">records</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">form</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">phone</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    elasticApm.<span class=\"title function_\">init</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">serviceName</span>: <span class=\"string\">&quot;mySite-FE&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">serverUrl</span>: <span class=\"string\">&quot;http://localhost:8200&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">pageLoadSampled</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">getAuditLog</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">checkForm</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> <span class=\"variable language_\">this</span>.<span class=\"property\">form</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">form</span>.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> element = <span class=\"variable language_\">this</span>.<span class=\"property\">form</span>[key];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (element) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">getAuditLog</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> transaction = elasticApm.<span class=\"title function_\">startTransaction</span>(<span class=\"string\">&quot;取得資料&quot;</span>, <span class=\"string\">&quot;custom&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> httpSpan = transaction.<span class=\"title function_\">startSpan</span>(<span class=\"string\">&quot;取得異動紀錄&quot;</span>, <span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> vm = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">      $.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">&quot;/AuditLog/GetFakeData&quot;</span>,</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">done</span>(<span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res.<span class=\"property\">hits</span> &amp;&amp; res.<span class=\"property\">hits</span>.<span class=\"property\">hits</span>) vm.<span class=\"property\">records</span> = res.<span class=\"property\">hits</span>.<span class=\"property\">hits</span>;</span><br><span class=\"line\">        httpSpan.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (transaction) transaction.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">insAuditLog</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> transaction = elasticApm.<span class=\"title function_\">startTransaction</span>(<span class=\"string\">&quot;異動資料&quot;</span>, <span class=\"string\">&quot;custom&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"title function_\">checkForm</span>() === <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;plz input data in form&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> httpSpan = transaction.<span class=\"title function_\">startSpan</span>(<span class=\"string\">&quot;新增異動紀錄&quot;</span>, <span class=\"string\">&quot;http&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> vm = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">      $.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">&quot;/AuditLog/InsFakeData&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: &#123; ...vm.<span class=\"property\">form</span> &#125;,</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;POST&quot;</span>,</span><br><span class=\"line\">      &#125;).<span class=\"title function_\">done</span>(<span class=\"keyword\">function</span> (<span class=\"params\">res</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">        httpSpan.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">        <span class=\"comment\">// var transaction = elasticApm.getCurrentTransaction()</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (transaction) transaction.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">recordCount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">records</span> ? <span class=\"variable language_\">this</span>.<span class=\"property\">records</span>.<span class=\"property\">length</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Kibana-APM\"><a href=\"#Kibana-APM\" class=\"headerlink\" title=\"Kibana - APM\"></a>Kibana - APM</h4><p>大概結果就像是這樣，自訂的事件已經會被記錄下來</p>\n<p><img src=\"/artblog/APM-Server-RUM/apm01.png\"><br><img src=\"/artblog/APM-Server-RUM/apm02.png\"></p>\n<h3 id=\"apm-agent-webpack\"><a href=\"#apm-agent-webpack\" class=\"headerlink\" title=\"apm-agent (webpack)\"></a>apm-agent (webpack)</h3><p>如果是透過 webpack 打包程式，在程式內要引用 apm-agent 的話則是先透過指令安裝套件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install @elastic/apm-rum --save</span><br></pre></td></tr></table></figure>\n\n<p>然後在程式內引用即可，目前我自己的作法是建立一個 singleton 去初始化，然後再有需要用到的地方再去呼叫</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; init <span class=\"keyword\">as</span> initApm &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@elastic/apm-rum&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> instance = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ApmHelper</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * init apm with userObject</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">&#123;Id: string, Name: string</span>&#125;&#125; user</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">ApmBase</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">user</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!instance) &#123;</span><br><span class=\"line\">      instance = <span class=\"title function_\">initApm</span>(&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ref:https://www.elastic.co/guide/en/apm/agent/rum-js/current/configuration.html</span></span><br><span class=\"line\">        <span class=\"comment\">// 這邊沒有定義 serviceUrl 的原因是預設值為 http://localhost:8200</span></span><br><span class=\"line\">        <span class=\"attr\">serviceName</span>: <span class=\"string\">&quot;my-site&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">environment</span>: <span class=\"string\">&quot;localhost&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">active</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">instrument</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">disableInstrumentations</span>: [<span class=\"string\">&quot;eventtarget&quot;</span>],</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user) &#123;</span><br><span class=\"line\">      instance.<span class=\"title function_\">setUserContext</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">id</span>: user.<span class=\"property\">Id</span>,</span><br><span class=\"line\">        <span class=\"attr\">username</span>: user.<span class=\"property\">Name</span>,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">ApmHelper</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在進入點的時候，我先初始化 apm</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.js</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...略</span></span><br><span class=\"line\">  <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">ApmHelper</span>(&#123; <span class=\"title class_\">Id</span>: <span class=\"string\">&quot;001&quot;</span>, <span class=\"title class_\">Name</span>: <span class=\"string\">&quot;Art&quot;</span> &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>此時若進入該頁面，會看到背景發出了一個事件出去<br><img src=\"/artblog/APM-Server-RUM/2021-10-05-103056.jpg\"><br><img src=\"/artblog/APM-Server-RUM/2021-10-05-103232.jpg\"></p>\n<p>可以看到他打的是我們 apm-server，所以我們稍後也可以在<code>kibana</code>看到資訊</p>\n<p>此時我們 F12 來看一下 index.js 讀取花了 1.05 秒，而 APM 這邊也有正確記錄下來<br><img src=\"/artblog/APM-Server-RUM/2021-10-05-103510.jpg\"><br><img src=\"/artblog/APM-Server-RUM/2021-10-05-103656.jpg\"></p>\n<p>另外，我也在網站上隨便測了幾個會發出 http request 的事件，接著回到<code>kibana</code>去觀察，可以看到剛剛測試的事件數據</p>\n<p><img src=\"/artblog/APM-Server-RUM/2021-10-05-104215.jpg\"><br><img src=\"/artblog/APM-Server-RUM/2021-10-05-104349.jpg\"></p>\n<p>在其他的元件內，做一個假的按鈕，點了之後就呼叫 APM 附加我們要記錄下來的資料，然後故意丟一個 ERROR，讓 APM 紀錄資訊</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;somethingWrong&quot;</span>&gt;</span>GetWrong<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...略</span></span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">somethingWrong</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> apm = <span class=\"keyword\">new</span> <span class=\"title class_\">ApmHelper</span>();</span><br><span class=\"line\">      <span class=\"keyword\">let</span> fakeData = &#123; <span class=\"attr\">orderId</span>: <span class=\"number\">12345</span>, <span class=\"attr\">productId</span>: <span class=\"number\">67890</span> &#125;;</span><br><span class=\"line\">      apm.<span class=\"title function_\">setCustomContext</span>(fakeData);</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;錯誤測試&quot;</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在錯誤測試的部分，可以看到 F12 的情況像是這樣<br><img src=\"/artblog/APM-Server-RUM/2021-10-05-104542.jpg\"></p>\n<p><img src=\"/artblog/APM-Server-RUM/2021-10-05-104726.jpg\"></p>\n<p>點進去看之後，我覺得比較有參考價值的就是最後一行，是哪一隻檔案的哪一個 function 錯誤</p>\n<p><img src=\"/artblog/APM-Server-RUM/2021-10-05-104827.jpg\"></p>\n<p>選擇另外一個頁籤，可以看到我們透過<code>setCustomContext()</code>附加上去的假資料<br><img src=\"/artblog/APM-Server-RUM/2021-10-05-105017.jpg\"></p>\n<h4 id=\"小結\"><a href=\"#小結\" class=\"headerlink\" title=\"小結\"></a>小結</h4><ol>\n<li>在整個網站會共用的地方，透過上面的程式做初始化，這樣在每一個頁面至少都能夠抓到<code>page-load</code>還有<code>http-request</code>的數據</li>\n<li>在比較重要的地方，可以再透過<code>setCustomContext()</code>的方式去附加一些重要資訊</li>\n<li>前端爆掉<code>throw Error</code>的話，至少可以在<code>kibana</code>能夠看到數據，就可以趕緊針對性的處理了</li>\n</ol>\n<h2 id=\"參考連結\"><a href=\"#參考連結\" class=\"headerlink\" title=\"參考連結\"></a>參考連結</h2><ol>\n<li><a href=\"https://www.elastic.co/guide/en/apm/agent/rum-js/current/index.html\">APM Real User Monitoring JavaScript Agent Reference</a></li>\n<li><a href=\"https://www.elastic.co/guide/en/apm/agent/js-base/current/custom-transactions.html\">Custom Transaction</a></li>\n<li><a href=\"https://www.elastic.co/guide/en/apm/agent/js-base/current/transaction-api.html\">Transaction API</a></li>\n</ol>\n","tags":["elasticSearch","APM","RUM"]},{"title":"Alex宅幹嘛 - Vue一個萬年曆","url":"/artblog//alex-vue-calendar/","content":"<p>本次主題為透過 Vue 練習製作一個月曆，效果類似 Win10 的小月曆，紀錄一下影片重點，有興趣的話可以 follow ALEX 的頻道</p>\n<p><a href=\"https://www.youtube.com/watch?v=0NoClrHms-Y\">[Alex 宅幹嘛] 👨‍💻 一起 Vue 個萬年曆 - Youtube</a><br><a href=\"https://codepen.io/achen224/pen/dLgBXw\">萬年曆 - CodePen</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"要點：\"><a href=\"#要點：\" class=\"headerlink\" title=\"要點：\"></a>要點：</h2><ol>\n<li>日曆要可以顯示當前的日期，也可以切換時間，所以會有兩組時間：<code>今天</code>、<code>顯示日期</code>(年、月、日、星期幾)</li>\n<li>預設值的建立，一開始就將兩個日期都設定為系統日 (js 月份的算法從 0 開始)</li>\n<li>畫面提供按鈕切換日期，包含加減月份、加減年份、回到今天，這幾個按鈕都是在操作<code>顯示日期</code></li>\n<li>加減月份須注意跨年的計算</li>\n<li>畫面應該要顯示六行才能顯示一整個完整的月份</li>\n<li>先取得顯示日期的月份，得到該日期的<code>星期幾</code>(day)，就可以得知<code>該月份第一天</code>，在第一行的哪一個地方，只需要再往前推算，就能知道<code>整個月曆的第一天</code></li>\n<li>月曆的起點(<code>月曆第一天</code>)跟長度(<code>6行*7列=42個日期</code>)有了，所以可以將日期的資料透過迴圈，產生出 javascript date 物件，並存放於陣列中</li>\n<li>畫面透過<code>v-for</code>及雙迴圈的技巧，將日期陣列的資料透過 HTML5 的 data 屬性綁定 DOM (<code>v-for=&quot;i in 6&quot;</code>，是數字的話，會從 1 開始)</li>\n<li>利用<code>calendar[(i-1)*7+(j-1)].date</code>，中間的 index 值其實就是一個陣列轉 index 的技巧，很實用</li>\n<li>利用 CSS 語法的<code>content:attr(data-date)</code>可以取得 DOM 的 data 屬性，透過這樣的方式將陣列的資料從 Vue 綁定到 DOM，再用 CSS 讀出來顯示</li>\n<li>為了要區別<code>今天</code>與<code>其他月份</code>，撰寫兩個不同的 CSS 來處理 UI 顯示</li>\n<li>今天：DOM 綁定的日期需等於今天的年份、月份、日期</li>\n<li>其他月份：DOM 綁定的日期，月份不等於今天的月份</li>\n</ol>\n<blockquote>\n<p>日期相關的套件除了<code>moment.js</code>之外，也可以考慮輕量化的<code>day.js</code></p>\n</blockquote>\n","categories":["vue"],"tags":["Alex宅幹嘛"]},{"title":"ELK Stack on Docker","url":"/artblog//ELK-Stack-on-Docker/","content":"<p>ELK Stack 其實是三套軟體的組合，分別是負責儲存資料的 elasticSearch、收集資訊的 logstash 以及一個觀看數據的 UI 介面 Kibana</p>\n<p>還沒有接觸過的人可以參考一下<a href=\"https://www.elastic.co/cn/solutions/apm\">網站介紹</a>，基本上就是拿幾套軟體建構一個可以用來監測應用程式執行效能的工具</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Net-Framework\"><a href=\"#Net-Framework\" class=\"headerlink\" title=\".Net Framework\"></a>.Net Framework</h2><p>對於.Net Core 的支援應該是比較好的，如果要用在 ASP.NET MVC，必須是在.Net Framework 4.6.1 以上的版本才能支援</p>\n<p>利用官方所提供的<a href=\"https://github.com/elastic/apm-agent-dotnet\">範例程式</a>，可以快速地做一個 Demo 網站來看看<br>下載範例之後，可以看到在<code>src</code>目錄底下有幾個專案資料夾，</p>\n<ol>\n<li><code>Elastic.Apm.AspNetFullFramework</code>底下 bin 目錄中的<code>Elastic.Apm.AspNetFullFramework.dll</code></li>\n<li><code>Elastic.Apm</code>底下 bin 目錄的 net461 底下的<code>Elastic.Apm.dll</code></li>\n</ol>\n<p>之所以要用這樣的方式加入參考，其實是為了要範例已經寫好的<code>ElasticApmModule.cs</code>這隻檔案；在網站的<code>web.config</code>中加入下列程式碼，註冊一個<code>httpModule</code>，以便讓 ELK Stack 可以自動抓到瀏覽網站的一些數據。這隻檔案繼承了<code>IHttpModule</code>，並實作了一些方法，有興趣的可以看看 Source；相關的知識可以看一下<a href=\"https://icejuly.pixnet.net/blog/post/27181316-httpmodule%E8%88%87httphandler%E8%A9%B3%E8%A7%A3%28%E8%BD%89%E8%BC%89%29\">HttpModule 與 HttpHandler 詳解(轉載)</a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--Web.Config--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">system.webServer</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ElasticApmModule&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;Elastic.Apm.AspNetFullFramework.ElasticApmModule&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">modules</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">validation</span> <span class=\"attr\">validateIntegratedModeConfiguration</span>=<span class=\"string\">&quot;false&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">system.webServer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://www.elastic.co/guide/en/apm/agent/dotnet/current/public-api.html\">elastic public API</a>有提供 API 的範例以及一些說明，透過這些 API 可以初步的監測應用程式效能數據</p>\n<blockquote>\n<p>正確姿勢應該是要用 nuget 去安裝<code>elastic.apm</code>這個套件，而<code>IhttpModule</code>這一塊應該要自己寫才是</p>\n</blockquote>\n<h2 id=\"安裝-ELK-Stack-on-Docker\"><a href=\"#安裝-ELK-Stack-on-Docker\" class=\"headerlink\" title=\"安裝 ELK Stack on Docker\"></a>安裝 ELK Stack on Docker</h2><p>直接使用<a href=\"https://github.com/deviantony/docker-elk\">Elastic stack (ELK) on Docker</a>的 docker-compose 檔做些調整進行安裝，clone 下來之後同時掛載 APM</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker-compose -f docker-compose.yml -f extensions/apm-server/apm-server-compose.yml up</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>記得 windows docker 要切換到 linux container 模式，記得 C 槽的分享權限要打開</p>\n</blockquote>\n<h2 id=\"中文介面-Kibana\"><a href=\"#中文介面-Kibana\" class=\"headerlink\" title=\"中文介面 Kibana\"></a>中文介面 Kibana</h2><p>因為 kibana 在後續的版本有提供中文介面，首先將相關的 images 下載最新版本，目前最新為 7.2.0，然後調整一下設定</p>\n<ol>\n<li>環境變數檔案<code>.env</code>將版本號從 6.5.1 改為 7.2.0</li>\n<li>修改<code>kibana.yml</code>設定如下</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">server.name: kibana</span><br><span class=\"line\">server.host: &quot;0&quot;</span><br><span class=\"line\">elasticsearch.hosts: http://elasticsearch:9200</span><br><span class=\"line\">i18n.locale: zh-CN</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>Kibana 設置文件:<a href=\"https://www.elastic.co/guide/en/kibana/current/settings.html\">Configuring kibana</a><br>附上 Github:<a href=\"https://github.com/partypeopleland/my-docker-elk\">my-docker-elk</a></p>\n<hr>\n<p>補充，調整 ElasticSearch on Docker 所使用的記憶體</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 原本是256m，改為512m，或是1g之類的</span></span><br><span class=\"line\"><span class=\"attr\">ES_JAVA_OPTS:</span> <span class=\"string\">&quot;-Xmx512m -Xms512m&quot;</span></span><br></pre></td></tr></table></figure>\n","categories":["docker"],"tags":["elasticSearch"]},{"title":"C#委派練習","url":"/artblog//csharp-delegate/","content":"<p>一直以來C#委派的語法總是很難搞懂，有一天寫一寫javascript的callback，突然感覺好像就是一樣的東西，似乎也沒那麼難，剛好有時間就找找範例來練習一下</p>\n<span id=\"more\"></span>\n\n<p>從 CSV 文字檔中讀取紀錄，然後轉成 dto 進行其他操作</p>\n<ul>\n<li>方法 A：從檔案中取得資料，逐行執行某些行為</li>\n<li>方法 B：將文字轉換為 DTO 實體</li>\n</ul>\n<p>為了不要讓某些事情的程式碼寫死在方法 A 裡面，具體的行為應從外部傳入給方法 A，所以透過委派的方式來做</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先宣告一個委派，輸入為字串，輸出是自訂的DTO物件，具體的方法則是定義在ConvertStrToDto</span></span><br><span class=\"line\">    Func&lt;<span class=\"built_in\">string</span>, OutBoundUserCsv&gt; myHandler = ConvertStrToDto;</span><br><span class=\"line\">    ReadCsvFile(myHandler);</span><br><span class=\"line\">    Console.ReadKey();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> OutBoundUserCsv <span class=\"title\">ConvertStrToDto</span>(<span class=\"params\"><span class=\"built_in\">string</span> source</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 將原始字串切割為陣列後逐一填入entity</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> d = source.Split(<span class=\"keyword\">new</span>[] &#123; <span class=\"string\">&quot; &quot;</span> &#125;, StringSplitOptions.RemoveEmptyEntries);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> OutBoundUserCsv()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        UserId = d[<span class=\"number\">0</span>],</span><br><span class=\"line\">        UserName = d[<span class=\"number\">1</span>]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ReadCsvFile</span>(<span class=\"params\">Func&lt;<span class=\"built_in\">string</span>, OutBoundUserCsv&gt; myHandler</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 透過StreamReader讀取檔案，否則檔案很大的話會拖垮系統</span></span><br><span class=\"line\">    <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> StreamReader(<span class=\"string\">&quot;Input.txt&quot;</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!reader.EndOfStream)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> line = reader.ReadLine();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> usr = myHandler.Invoke(line);</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$&quot;UserId:[<span class=\"subst\">&#123;usr.UserId&#125;</span>] Name:[<span class=\"subst\">&#123;usr.UserName&#125;</span>] &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/artblog/csharp-delegate/fun01.png\"></p>\n<p>當然不要重複造輪子，所以其實 CSV 檔案的操作可以考慮使用<a href=\"https://www.filehelpers.net/\">FileHelpers</a> 之類的套件來處理，這邊只是為了練習一下委派的用法來示例</p>\n<p>Sample Code:<a href=\"https://github.com/partypeopleland/FileCsvToEntity\">GitHub</a></p>\n<h2 id=\"測試連線資料庫的數據\"><a href=\"#測試連線資料庫的數據\" class=\"headerlink\" title=\"測試連線資料庫的數據\"></a>測試連線資料庫的數據</h2><p>想要測試在不同的連線環境(固網、WIFI、VPN…Etc)之下，連線資料庫的速度</p>\n<p>所以寫了這個小程式，還挺適合用委派的</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"built_in\">int</span> times = <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> items = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">string</span>, Func&lt;<span class=\"built_in\">long</span>&gt;&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &#123;<span class=\"string\">&quot;MsSql&quot;</span>, MsSql&#125;,</span><br><span class=\"line\">            &#123;<span class=\"string\">&quot;MariaDB&quot;</span>, MariaDb&#125;,</span><br><span class=\"line\">            &#123;<span class=\"string\">&quot;Oracle&quot;</span>, Oracle&#125;,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> items)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            PrintResult(LoopWorks(item.Value, times), item.Key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">PrintResult</span>(<span class=\"params\">(<span class=\"built_in\">long</span>, <span class=\"built_in\">decimal</span>, <span class=\"built_in\">int</span></span>) job, <span class=\"built_in\">string</span> title)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$&quot;<span class=\"subst\">&#123;title&#125;</span>    執行 <span class=\"subst\">&#123;job.Item3&#125;</span> 次資料存取，總計花費 <span class=\"subst\">&#123;job.Item1:N1&#125;</span> ms，平均 <span class=\"subst\">&#123;job.Item2&#125;</span> ms&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> (<span class=\"params\"><span class=\"built_in\">long</span>, <span class=\"built_in\">decimal</span>, <span class=\"built_in\">int</span></span>) <span class=\"title\">LoopWorks</span>(<span class=\"params\">Func&lt;<span class=\"built_in\">long</span>&gt; works, <span class=\"built_in\">int</span> times</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">long</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= times; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> speed = works.Invoke();</span><br><span class=\"line\">            total += speed;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (total, Math.Round((<span class=\"built_in\">decimal</span>) total / times, <span class=\"number\">2</span>), times);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">long</span> <span class=\"title\">MsSql</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> stopwatch = <span class=\"keyword\">new</span> Stopwatch();</span><br><span class=\"line\">        stopwatch.Start();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> source = <span class=\"keyword\">new</span> MsSqlAdapter().GetTestData();</span><br><span class=\"line\">        stopwatch.Stop();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stopwatch.ElapsedMilliseconds;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">long</span> <span class=\"title\">MariaDb</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> stopwatch = <span class=\"keyword\">new</span> Stopwatch();</span><br><span class=\"line\">        stopwatch.Start();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> source = <span class=\"keyword\">new</span> MariaDbAdapter().GetTestData();</span><br><span class=\"line\">        stopwatch.Stop();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stopwatch.ElapsedMilliseconds;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">long</span> <span class=\"title\">Oracle</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> stopwatch = <span class=\"keyword\">new</span> Stopwatch();</span><br><span class=\"line\">        stopwatch.Start();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> source = <span class=\"keyword\">new</span> OracleAdapter().GetTestData();</span><br><span class=\"line\">        stopwatch.Stop();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stopwatch.ElapsedMilliseconds;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["csharp"],"tags":["delegate"]},{"title":"Json web token","url":"/artblog//Json-web-token/","content":"<p>介紹一下 jwt token 是怎麼一回事，並提供範例</p>\n<span id=\"more\"></span>\n\n<h2 id=\"JWT-Token-format\"><a href=\"#JWT-Token-format\" class=\"headerlink\" title=\"JWT Token format\"></a>JWT Token format</h2><p>可以先到介紹 JWT 的網站<a href=\"https://jwt.io/\">https://jwt.io/</a>，試玩一下 JWT token<br><img src=\"/artblog/./images/2019-11-01_13-56-46.png\"></p>\n<p>Token 分為三部份，<span color=\"blue\">header</span>.<span color=\"yellow\">payload</span>.<span color=\"green\">signature</span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0 NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9. TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Part01-header\"><a href=\"#Part01-header\" class=\"headerlink\" title=\"Part01 - header\"></a>Part01 - header</h3><table>\n<thead>\n<tr>\n<th>屬性</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>alg</td>\n<td>加密採用何種演算法</td>\n</tr>\n<tr>\n<td>typ</td>\n<td>定義類型</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;alg&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;HS256&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;typ&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;JWT&quot;</span> <span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>透過<code>base64</code>編碼結果為<code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</code>，這就是第一部份</p>\n<h3 id=\"Part02-payload\"><a href=\"#Part02-payload\" class=\"headerlink\" title=\"Part02 - payload\"></a>Part02 - payload</h3><p>實際上我們拿來存放資料的地方，當然也可以放自行定義的資料內容。例如：帳號、會員等級、暱稱等，RFC 7519 文件中也有預先定義，可以參考看看<br>REF:</p>\n<ol>\n<li><a href=\"https://tools.ietf.org/html/rfc7519\">https://tools.ietf.org/html/rfc7519</a></li>\n<li><a href=\"https://www.iana.org/assignments/jwt/jwt.xhtml\">https://www.iana.org/assignments/jwt/jwt.xhtml</a></li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;sub&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1234567890&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;John Doe&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;admin&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>透過<code>base64</code>編碼結果為：<code>eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</code></p>\n<h3 id=\"part03-signature\"><a href=\"#part03-signature\" class=\"headerlink\" title=\"part03 - signature\"></a>part03 - signature</h3><p>將<code>header</code>與<code>payload</code>兩部份的資料以<code>.</code>串接之後，透過設定之加密演算法使用金鑰產生簽章</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">HMACSHA256( base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload), &quot;secret&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>簽章為<code>TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</code></p>\n<h2 id=\"JWT-Token-in-CSharp\"><a href=\"#JWT-Token-in-CSharp\" class=\"headerlink\" title=\"JWT Token in CSharp\"></a>JWT Token in CSharp</h2><p>此處使用的是微軟的 JWT，使用之前需要先安裝 package</p>\n<blockquote>\n<p>Install-Package System.IdentityModel.Tokens.Jwt</p>\n</blockquote>\n<h3 id=\"HMAC-key\"><a href=\"#HMAC-key\" class=\"headerlink\" title=\"HMAC key\"></a>HMAC key</h3><p>在這邊會需要使用到 HMAC 的 Key，對於 HMAC 這部分有興趣的人可以參考一下網路上的文章<br>此處所需要使用的 secret，直接透過隨機產生</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hmac = <span class=\"keyword\">new</span> HMACSHA256();</span><br><span class=\"line\"><span class=\"keyword\">var</span> key = Convert.ToBase64String(hmac.Key);</span><br><span class=\"line\">Console.WriteLine(key);</span><br></pre></td></tr></table></figure>\n\n<p>如果想要自行產生，請注意幾個要點</p>\n<ol>\n<li>將金鑰儲存起來，必須使用<code>base64</code>格式</li>\n<li>金鑰的內容必須要先經過編碼，編碼格式與你採用的 JWT 編碼相同</li>\n</ol>\n<p>例如我想要設定我的金鑰是<code>secret</code>，所以經過<code>base64</code>之後，得到<code>c2VjcmV0</code>，因為我 JWT 採用 SHA256 編碼，所以接著將它再透過 SHA-256 hash 之後，結果為<code>1c1185e02ff3e23b3e5a1c5bc86cf15d4126caa3dcde0fdb6e93adc4deec119e</code>，最終就將這個字串放到 app.config 內就可以了</p>\n<p>REF:</p>\n<ol>\n<li><a href=\"http://zake7749.github.io/2015/08/06/message_auth/\">訊息鑑別技術</a></li>\n<li><a href=\"https://www.freeformatter.com/hmac-generator.html\">HMAC Generator &#x2F; Tester Tool</a></li>\n</ol>\n<h3 id=\"附加身份資訊\"><a href=\"#附加身份資訊\" class=\"headerlink\" title=\"附加身份資訊\"></a>附加身份資訊</h3><p><code>Claim</code>這個類別可以用來存放一些我們想要在使用者身上綁定的一些相關資訊，MS 已經有做<code>ClaimTypes Class</code>提供常用的項目，所以我們可以直接拿來用就可以了<br>如果需要自己增添資訊，<code>Claim</code>的建構式也支援字串</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> identity = <span class=\"keyword\">new</span> ClaimsIdentity(<span class=\"keyword\">new</span>[]</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Claim(ClaimTypes.NameIdentifier, <span class=\"string\">&quot;art&quot;</span>)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>REF:</p>\n<ol>\n<li><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.security.claims.claim?view=netframework-4.8\">.NET Framework 4.8: Claim Class</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.security.claims.claimtypes?view=netframework-4.8\">.NET Framework 4.8: ClaimTypes Class</a></li>\n</ol>\n<h3 id=\"如何產生-Token\"><a href=\"#如何產生-Token\" class=\"headerlink\" title=\"如何產生 Token\"></a>如何產生 Token</h3><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span> _secret = <span class=\"string\">&quot;SjuXhiUgltqTPgJSBLn6Il2IsNN0WUydRVpjb8BkwoHcrEjQveFSNdBVW1NovijJXi1yFIlZxDbrm2ROMC8Fjw==&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">GenerateToken</span>(<span class=\"params\">ClaimsIdentity identity, <span class=\"built_in\">int</span> expireMinutes = <span class=\"number\">20</span></span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> symmetricKey = Convert.FromBase64String(_secret);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tokenHandler = <span class=\"keyword\">new</span> JwtSecurityTokenHandler();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> now = DateTime.UtcNow;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> tokenDescriptor = <span class=\"keyword\">new</span> SecurityTokenDescriptor</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Subject = identity,</span><br><span class=\"line\">        Expires = now.AddMinutes(expireMinutes),</span><br><span class=\"line\">        SigningCredentials = <span class=\"keyword\">new</span> SigningCredentials(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> SymmetricSecurityKey(symmetricKey),</span><br><span class=\"line\">            SecurityAlgorithms.HmacSha256Signature</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> stoken = tokenHandler.CreateToken(tokenDescriptor);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> token = tokenHandler.WriteToken(stoken);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>利用<code>SecurityTokenDescriptor</code>類別，準備相關資料<ol>\n<li>使用者身份資訊(<code>ClaimsIdentity</code>)</li>\n<li>Token 的有效期限</li>\n<li>設定簽名憑證資料(<code>SigningCredentials</code>)：<strong>在這一個步驟，需要使用金鑰，並且指定要採用何種加密演算法</strong></li>\n</ol>\n</li>\n<li>利用<code>JwtSecurityTokenHandler</code>類別<code>CreateToke()</code>，產生 token</li>\n<li>利用<code>JwtSecurityTokenHandler</code>類別<code>WriteToken()</code>取得緊湊的序列化格式的 Token，產生出來的 token 就會是像下面這樣的格式</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br></pre></td></tr></table></figure>\n\n<p>REF:</p>\n<ol>\n<li><a href=\"https://dotblogs.com.tw/yc421206/2019/01/08/authentication_via_ms_system_identitymodel_tokens_jwt\">[ASP.NET Web API] 實作 System.IdentityModel.Tokens.Jwt 進行身分驗證</a></li>\n<li><a href=\"https://docs.microsoft.com/zh-tw/dotnet/api/system.identitymodel.tokens.jwt.jwtsecuritytokenhandler?view=azure-dotnet\">Azure SDK for .NET: JwtSecurityTokenHandler Class</a></li>\n<li><a href=\"https://docs.microsoft.com/zh-tw/dotnet/api/microsoft.identitymodel.tokens.securitytokendescriptor?view=azure-dotnet\">Azure SDK for .NET: SecurityTokenDescriptor Class</a></li>\n</ol>\n<h3 id=\"如何驗證-Token\"><a href=\"#如何驗證-Token\" class=\"headerlink\" title=\"如何驗證 Token\"></a>如何驗證 Token</h3><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span> _secret = <span class=\"string\">&quot;SjuXhiUgltqTPgJSBLn6Il2IsNN0WUydRVpjb8BkwoHcrEjQveFSNdBVW1NovijJXi1yFIlZxDbrm2ROMC8Fjw==&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">TryValidateToken</span>(<span class=\"params\"><span class=\"built_in\">string</span> token, <span class=\"keyword\">out</span> ClaimsPrincipal principal</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    principal = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tokenHandler = <span class=\"keyword\">new</span> JwtSecurityTokenHandler();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> jwtToken = tokenHandler.ReadToken(token);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (jwtToken == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> symmetricKey = Convert.FromBase64String(_secret);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> validationParameters = <span class=\"keyword\">new</span> TokenValidationParameters()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            RequireExpirationTime = <span class=\"literal\">true</span>,</span><br><span class=\"line\">            ValidateIssuer = <span class=\"literal\">false</span>,</span><br><span class=\"line\">            ValidateAudience = <span class=\"literal\">false</span>,</span><br><span class=\"line\">            IssuerSigningKey = <span class=\"keyword\">new</span> SymmetricSecurityKey(symmetricKey)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        SecurityToken securityToken;</span><br><span class=\"line\">        principal = tokenHandler.ValidateToken(token, validationParameters, <span class=\"keyword\">out</span> securityToken);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>先讀取 token 內容，看看有沒有東西，此步驟可透過<code>ReadToken()</code>或是<code>ReadJwtToken()</code>來判斷回傳值是否為<code>null</code></li>\n<li>利用<code>TokenValidationParameters</code>類別，準備相關資料<ol>\n<li>需要驗證 token 是否必須具備<code>時效(expirationTime)</code></li>\n<li>不針對 token 進行發行者(<code>iss</code>)的驗證，因為我們在產生 token 的時候也沒有建立發行者的資訊，iss 為可選項目</li>\n<li>不針對 token 進行 Audience 的驗證</li>\n<li>設定簽名驗證所使用的金鑰</li>\n</ol>\n</li>\n<li>利用<code>JwtSecurityTokenHandler</code>類別<code>ValidateToken()</code>方法對 Token 進行驗證，回傳值為類別<code>ClaimsPrincipal</code></li>\n</ol>\n<p>最終取得的<code>claimsPrincipal</code>，就可以透過<code>Identity.IsAuthenticated</code>屬性，取得是否經過授權等等的資訊了</p>\n<p>REF:</p>\n<ol>\n<li><a href=\"https://tools.ietf.org/html/rfc7519\">RFC 7519</a></li>\n<li><a href=\"https://docs.microsoft.com/zh-tw/dotnet/api/microsoft.identitymodel.tokens.tokenvalidationparameters?view=azure-dotnet\">Azure SDK for .NET: TokenValidationParameters Class</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.security.claims.claimsprincipal?view=netframework-4.8\">Azure SDK for .NET: ClaimsPrincipal Class</a></li>\n</ol>\n<h3 id=\"如何透過-Attribute-驗證-JWT-Token\"><a href=\"#如何透過-Attribute-驗證-JWT-Token\" class=\"headerlink\" title=\"如何透過 Attribute 驗證 JWT Token\"></a>如何透過 Attribute 驗證 JWT Token</h3><p>如果採用的是 WebAPI 專案，應該是透過繼承<code>AuthorizationFilterAttribute</code>類別，並複寫其中的<code>OnAuthorization</code>方法實作；如果是一般的 MVC 網站，那麼繼承<code>AuthorizeAttribute</code>後，複寫<code>OnAuthorization</code>即可</p>\n<p>有一種情況是，nuget 已經有安裝了 <code>Microsoft aspnet.WebApi.Core 5.2.3</code>，但是在參考那邊卻沒有引用到<code>System.Web.Http</code>，解決辦法是重新安裝該套件，或者是直接從 nuget 安裝 <code>System.Web.http</code> 這個套件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">PM&gt; </span><span class=\"language-bash\">Update-Package Microsoft.AspNet.WebApi.Core -reinstall</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">JWTAuthAttribute</span> : <span class=\"title\">AuthorizeAttribute</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 系統權限Module</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ISystemAuthorityModule _systemAuthorityModule;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> ISystemAuthorityModule SystemAuthorityModule</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> =&gt; <span class=\"keyword\">this</span>._systemAuthorityModule ?? (<span class=\"keyword\">this</span>._systemAuthorityModule = ModuleFactory.GetSystemAuthorityModule());</span><br><span class=\"line\">        <span class=\"keyword\">set</span> =&gt; <span class=\"keyword\">this</span>._systemAuthorityModule = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"built_in\">bool</span> <span class=\"title\">AuthorizeCore</span>(<span class=\"params\">HttpContextBase httpContext</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 解析header取得principal</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> principal = ParseAuthorizeHeader(httpContext);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (principal == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 取得員工編號</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> employeeNo = <span class=\"built_in\">int</span>.Parse(principal.FindFirst(ClaimTypes.NameIdentifier).Value);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (employeeNo == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 驗證權限</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> controller = Convert.ToString(httpContext.Request.RequestContext.RouteData.Values[<span class=\"string\">&quot;controller&quot;</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> action = Convert.ToString(httpContext.Request.RequestContext.RouteData.Values[<span class=\"string\">&quot;action&quot;</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> urls = <span class=\"keyword\">new</span>[] &#123; <span class=\"string\">$&quot;/<span class=\"subst\">&#123;controller&#125;</span>&quot;</span>, <span class=\"string\">$&quot;/<span class=\"subst\">&#123;controller&#125;</span>/<span class=\"subst\">&#123;action&#125;</span>&quot;</span> &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"keyword\">this</span>.SystemAuthorityModule.ValidateUserFunction(employeeNo, urls);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> ClaimsPrincipal <span class=\"title\">ParseAuthorizeHeader</span>(<span class=\"params\">HttpContextBase httpContext</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> token = httpContext.Request.Headers[<span class=\"string\">&quot;Authorization&quot;</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">string</span>.IsNullOrEmpty(token)) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        token = token.Replace(<span class=\"string\">&quot;Bearer &quot;</span>, <span class=\"built_in\">string</span>.Empty);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> principal = JWTHelper.GetPrincipal(token);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> principal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如何於-Controller-中套用-Attribute-進行-JWT-token-的驗證\"><a href=\"#如何於-Controller-中套用-Attribute-進行-JWT-token-的驗證\" class=\"headerlink\" title=\"如何於 Controller 中套用 Attribute 進行 JWT token 的驗證\"></a>如何於 Controller 中套用 Attribute 進行 JWT token 的驗證</h3><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">JWTController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 使用者Module</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> Lazy&lt;IUserModule&gt; _userModule = <span class=\"keyword\">new</span> Lazy&lt;IUserModule&gt;(ModuleFactory.GetUserModule);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> IUserModule UserModule =&gt; <span class=\"keyword\">this</span>._userModule.Value;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> JsonResult <span class=\"title\">GetToken</span>(<span class=\"params\">LoginForm loginForm</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 輸入驗證</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">string</span>.IsNullOrEmpty(loginForm.Account) || <span class=\"built_in\">string</span>.IsNullOrEmpty(loginForm.Password))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> APIResult() &#123; Message = <span class=\"string\">&quot;請輸入帳號密碼&quot;</span>, IsSuccess = <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 驗證使用者</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> user = UserModule.VerifyUser(loginForm.Account, loginForm.Password);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (user == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> APIResult() &#123; Message = <span class=\"string\">&quot;帳號密碼錯誤&quot;</span>, IsSuccess = <span class=\"literal\">false</span> &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 產生token</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> identity = <span class=\"keyword\">new</span> ClaimsIdentity(</span><br><span class=\"line\">               <span class=\"keyword\">new</span>[]</span><br><span class=\"line\">                 &#123;</span><br><span class=\"line\">                      <span class=\"keyword\">new</span> Claim(ClaimTypes.NameIdentifier, user.EmployeeNo.ToString()),</span><br><span class=\"line\">                      <span class=\"keyword\">new</span> Claim(ClaimTypes.Name, user.UserName),</span><br><span class=\"line\">                      <span class=\"keyword\">new</span> Claim(<span class=\"string\">&quot;Account&quot;</span>, user.Account),</span><br><span class=\"line\">                      <span class=\"keyword\">new</span> Claim(ClaimTypes.Email, user.EmailAccount),</span><br><span class=\"line\">                 &#125;);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> token = JWTHelper.GenerateToken(identity);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> APIResult() &#123; Data = token, IsSuccess = <span class=\"literal\">true</span>, Message = <span class=\"built_in\">string</span>.Empty &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">        [<span class=\"meta\">JWTAuth</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> JsonResult <span class=\"title\">FeatureA</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> APIResult() &#123; IsSuccess = <span class=\"literal\">true</span>, Message = <span class=\"string\">&quot;允許執行&quot;</span> &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">        [<span class=\"meta\">JWTAuth</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> JsonResult <span class=\"title\">FeatureB</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> APIResult() &#123; IsSuccess = <span class=\"literal\">true</span>, Message = <span class=\"string\">&quot;不允許執行&quot;</span> &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>REF:</p>\n<ol>\n<li><a href=\"https://blog.yowko.com/unit-test-need-systemwebhttp/\">ASP.NET Web API Unit Test 出現需要加入 System.Web.Http 參考錯誤</a></li>\n<li><a href=\"https://weblog.west-wind.com/posts/2013/apr/18/a-webapi-basic-authentication-authorization-filter\">A WebAPI Basic Authentication Authorization Filter</a></li>\n</ol>\n<h2 id=\"如何測試\"><a href=\"#如何測試\" class=\"headerlink\" title=\"如何測試\"></a>如何測試</h2><p>對於完成的功能，如果需要進行測試，當然會希望知道實際上運作是否正確，一般來說撰寫單元測試的目的是為了確保某一個類別、方法的職責如我們預期般運作，但如果是要測試網站真的能不能用 jwt，當然最實際的做法就是把網站真的跑起來測試看看</p>\n<h3 id=\"透過-OWIN-SelfHost\"><a href=\"#透過-OWIN-SelfHost\" class=\"headerlink\" title=\"透過 OWIN SelfHost\"></a>透過 OWIN SelfHost</h3><p>透過 OWIN 可以利用程式啟動你的 WebAPI 網站，細節可以看一下外部參考連結，因為這個方式我並沒有實作，所以也就無法分享一些實際經驗了，特別推薦一下余小章的相關文章，這系列含金量很高，而且都貼心的包含了 Sample Code</p>\n<p>REF:</p>\n<ol>\n<li><a href=\"https://dotblogs.com.tw/yc421206/2019/01/05/webapi_test_via_owin\">[Web API] 使用 OWIN 進行單元測試</a></li>\n<li><a href=\"https://docs.microsoft.com/zh-tw/aspnet/web-api/overview/hosting-aspnet-web-api/use-owin-to-self-host-web-api\">使用 OWIN 自我裝載 ASP.NET Web API</a></li>\n</ol>\n<h3 id=\"手動啟動\"><a href=\"#手動啟動\" class=\"headerlink\" title=\"手動啟動\"></a>手動啟動</h3><p>另外的方式當然就是在跑測試的時候將網站先手動啟動，然後再去執行測試，這樣的方式僅適合用來開發時期驗證一下，以現在專案大多都與 CI Server 整合在一起的情況，應該是不太能夠在 CI Server 上還在每次 Build 都先手動掛載網站；不過測試程式還有一個很棒的意義，就是提供人家理解，怎麼去使用你所開發的程式，相當於使用說明書了，如果你的程式介面沒有高竿到讓人一看簽章方法就能用，還是提供一下說明書比較好些</p>\n<h3 id=\"測試案例撰寫\"><a href=\"#測試案例撰寫\" class=\"headerlink\" title=\"測試案例撰寫\"></a>測試案例撰寫</h3><h4 id=\"產生-Token\"><a href=\"#產生-Token\" class=\"headerlink\" title=\"產生 Token\"></a>產生 Token</h4><p>因為執行後產生的 token 之中，在每一次執行都不一樣，因為 payload 的值透過 MS 的 JWT 類別處理都會加上<code>nbf</code>、<code>iat</code>，再加上我們設定的<code>exp</code>，這幾個都是每次都不同的，所以也很難對他執行單元測試(除非改用別的 nuget 套件應該可以完全自訂要產生哪些內容)，所以這裡的測試程式其實比較像是一個說明書，並沒有驗證任何東西，只是單純地將結果 Console 出來而已</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">TestMethod()</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">GenerateToken</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> user = GetTestUser();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> identity = <span class=\"keyword\">new</span> ClaimsIdentity(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> [] &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Claim(ClaimTypes.NameIdentifier, user.EmployeeNo.ToString()),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Claim(ClaimTypes.Name, user.UserName),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Claim(<span class=\"string\">&quot;Account&quot;</span>,user.UserName),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Claim(ClaimTypes.Email, user.EmailAccount),</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> token = JWTHelper.GenerateToken(identity);</span><br><span class=\"line\">    Console.WriteLine(token);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> User <span class=\"title\">GetTestUser</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Account = <span class=\"string\">&quot;spiderman&quot;</span>,</span><br><span class=\"line\">        EmailAccount = <span class=\"string\">&quot;spiderman@email.com&quot;</span>,</span><br><span class=\"line\">        UserName = <span class=\"string\">&quot;蜘蛛人&quot;</span>,</span><br><span class=\"line\">        EmployeeNo = <span class=\"number\">123456</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;alg&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;HS256&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;typ&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;JWT&quot;</span><span class=\"punctuation\">&#125;</span>.<span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;nameid&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;123456&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;unique_name&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;蜘蛛人&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;Account&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;spiderman&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;email&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;spiderman@email.com&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;nbf&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">1573090246</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;exp&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">1573091446</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;iat&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">1573090246</span><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>exp (Expiration Time) - jwt 的過期時間，這個過期時間必須要大於簽發時間<br>nbf (Not Before) - 定義在什麼時間之前，該 jwt 都是不可用的<br>iat (Issued At) - jwt 的簽發時間</p>\n</blockquote>\n<blockquote>\n<p>對於這幾個 payload 的參數可以看一下 RFC 文件</p>\n</blockquote>\n<h4 id=\"解析-token\"><a href=\"#解析-token\" class=\"headerlink\" title=\"解析 token\"></a>解析 token</h4><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">TestMethod</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ParseToken</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> expected = GetTestUser();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> token = GenerateTestToken();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> principal = JWTHelper.GetPrincipal(token);</span><br><span class=\"line\">    Assert.AreEqual(expected.UserName, principal.Identity.Name);</span><br><span class=\"line\">    Assert.AreEqual(expected.EmployeeNo.ToString(), principal.FindFirst(ClaimTypes.NameIdentifier).Value);</span><br><span class=\"line\">    Assert.AreEqual(expected.Account, principal.FindFirst(<span class=\"string\">&quot;Account&quot;</span>).Value);</span><br><span class=\"line\">    Assert.AreEqual(expected.EmailAccount, principal.FindFirst(ClaimTypes.Email).Value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">string</span> <span class=\"title\">GenerateTestToken</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> user = GetTestUser();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> identity = <span class=\"keyword\">new</span> ClaimsIdentity(</span><br><span class=\"line\">    <span class=\"keyword\">new</span>[]</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Claim(ClaimTypes.NameIdentifier, user.EmployeeNo.ToString()),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Claim(ClaimTypes.Name, user.UserName),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Claim(<span class=\"string\">&quot;Account&quot;</span>, user.Account),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Claim(ClaimTypes.Email, user.EmailAccount),</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> token = JWTHelper.GenerateToken(identity);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> User <span class=\"title\">GetTestUser</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Account = <span class=\"string\">&quot;spiderman&quot;</span>,</span><br><span class=\"line\">        EmailAccount = <span class=\"string\">&quot;spiderman@email.com&quot;</span>,</span><br><span class=\"line\">        UserName = <span class=\"string\">&quot;蜘蛛人&quot;</span>,</span><br><span class=\"line\">        EmployeeNo = <span class=\"number\">123456</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"呼叫-API\"><a href=\"#呼叫-API\" class=\"headerlink\" title=\"呼叫 API\"></a>呼叫 API</h4><p>這邊是實際去利用 HttpClient 呼叫網站的方法，所以網站要先啟起來，而透過 HttpClient 若要帶 token，則可以利用<code>_client.DefaultRequestHeaders.Add(&quot;Authorization&quot;, $&quot;Bearer &#123;token&#125;&quot;);</code>的方式附加於 Header</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> API測試</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">[<span class=\"meta\">TestClass</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ApiTest</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 參考文章:https://dotblogs.com.tw/yc421206/2019/01/07/authentication_via_jwt-dotnet</span></span><br><span class=\"line\">    <span class=\"comment\">// Code：https://github.com/yaochangyu/sample.dotblog/blob/master/WebAPI/JWT/MsJwt/Client/UnitTest1.cs</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> Host = <span class=\"string\">&quot;http://localhost:17459&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HttpClient _client;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">TestInitialize</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">BeforeEach</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _client = <span class=\"keyword\">new</span> HttpClient &#123; BaseAddress = <span class=\"keyword\">new</span> Uri(Host) &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">TestMethod</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> 無token執行回應unauthorized()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> queryUrl = <span class=\"string\">&quot;JWT/FeatureB&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> queryResponse = _client.PostAsync(queryUrl, <span class=\"literal\">null</span>).Result;</span><br><span class=\"line\">        Assert.AreEqual(HttpStatusCode.Unauthorized, queryResponse.StatusCode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">TestMethod</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> 有token無權限執行回應unauthorized()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> queryUrl = <span class=\"string\">&quot;JWT/FeatureB&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> token = GenerateToken();</span><br><span class=\"line\">        _client.DefaultRequestHeaders.Add(<span class=\"string\">&quot;Authorization&quot;</span>, <span class=\"string\">$&quot;Bearer <span class=\"subst\">&#123;token&#125;</span>&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> queryResponse = _client.PostAsync(queryUrl, <span class=\"literal\">null</span>).Result;</span><br><span class=\"line\">        Assert.AreEqual(HttpStatusCode.Unauthorized, queryResponse.StatusCode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">TestMethod</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> 有權限執行回應ok()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> queryUrl = <span class=\"string\">&quot;JWT/FeatureA&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> token = GenerateToken();</span><br><span class=\"line\">        _client.DefaultRequestHeaders.Add(<span class=\"string\">&quot;Authorization&quot;</span>, <span class=\"string\">$&quot;Bearer <span class=\"subst\">&#123;token&#125;</span>&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> queryResponse = _client.PostAsync(queryUrl, <span class=\"literal\">null</span>).Result;</span><br><span class=\"line\">        Assert.AreEqual(HttpStatusCode.OK, queryResponse.StatusCode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">string</span> <span class=\"title\">GenerateToken</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> identity = <span class=\"keyword\">new</span> ClaimsIdentity(</span><br><span class=\"line\">        <span class=\"keyword\">new</span>[]</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> Claim(ClaimTypes.NameIdentifier, <span class=\"string\">&quot;123456&quot;</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> Claim(ClaimTypes.Name, <span class=\"string\">&quot;蜘蛛人&quot;</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> Claim(<span class=\"string\">&quot;Account&quot;</span>, <span class=\"string\">&quot;spiderman&quot;</span>),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> Claim(ClaimTypes.Email, <span class=\"string\">&quot;spiderman@email.com&quot;</span>),</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> token = JWTHelper.GenerateToken(identity);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> token;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安全性\"><a href=\"#安全性\" class=\"headerlink\" title=\"安全性\"></a>安全性</h2><p>最近剛好看到兩篇文章，一篇是關於 JWT 的資安相關的：<a href=\"https://medium.com/swlh/hacking-json-web-tokens-jwts-9122efe91e4a\">Hacking JSON Web Tokens (JWTs)</a>，另外一篇是<a href=\"https://ithelp.ithome.com.tw/articles/10199102\">Web API 開發心得 (7) - 使用 Token 進行 API 授權驗證</a>，借鑑 JWT 機制，實作自己的規則，這兩篇都很有趣，我也想動手嘗試一下</p>\n<p>第一篇文章中的<code>Token signed with key A -&gt; Token verified with key B (RSA scenario)</code>這個驗證，我嘗試了一個晚上還是做不出來 POC，我想是因為相關知識太薄弱了，時間有限，我決定放棄這件事情，改為研究第二篇文章所說的，自訂編碼方式將 token 的 payload 加密</p>\n<blockquote>\n<p>對於實作細節想了解的人，可以參考一下連結，文章最後也有附上我的練習 Code</p>\n</blockquote>\n<p>這一篇文章對我而言較為容易理解，在實作的部分程式碼則是全部照搬，概念懂了再透過逐步偵錯來學習一下，最終終於做出來了</p>\n<p>這兩種方式都有其優劣，畢竟使用 jwt 的場合情境很多，也許有的情況就合適採用原版的，像是提供服務給第三方合作夥伴的，JWT 畢竟是一個通用的協議，對於開發人員來說應該也是較容易的，而且在各種語言都有很多已經實作出來的 lib 可以使用，對於快速開發是很有利的，也省去測試、驗證演算法的時間</p>\n<p>不過如果只是小型網站，或是不需要與外部介接的服務，採用自行設計的演算法編碼規則，或許是個不錯的選項 (?)</p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>正如<a href=\"http://zake7749.github.io/2015/08/06/message_auth/\">訊息鑑別技術</a>一文所說</p>\n<blockquote>\n<p>加密做的是：保證資料的安全性<br>驗證做的是：保證資料的完整性</p>\n</blockquote>\n<p>JWT token 既然是採用<code>base64</code>編碼而已，實際上其實也就相當於明文，使用 jwt 我們只能確保我們所傳送的資料是完整的，沒有被別人竄改過，但是卻不能保證他的機密性，所以在使用 jwt token 的時候，敏感性資訊不要放在裡面，僅提供一些用來識別的 key 值，最後再從後端去資料庫拉所需要的資料比較好</p>\n<h2 id=\"Github-Sample-Code\"><a href=\"#Github-Sample-Code\" class=\"headerlink\" title=\"Github Sample Code\"></a>Github Sample Code</h2><p><a href=\"https://github.com/partypeopleland/JWTDemoSite\">JWTDemoSite</a></p>\n","categories":["javascript"],"tags":["JWT"]},{"title":"LeetCode-FindTheDifference","url":"/artblog//LeetCode-FindTheDifference/","content":"<p>LeetCode 這一題感覺非常容易啊，給出兩個字串，這兩個字串當中只會有一個字是不一樣的，找出來就行了。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Test-Case\"><a href=\"#Test-Case\" class=\"headerlink\" title=\"Test Case\"></a>Test Case</h2><p>輸入：s &#x3D; “abcd”, t &#x3D; “abcde”<br>輸出：e</p>\n<h2 id=\"解題思路\"><a href=\"#解題思路\" class=\"headerlink\" title=\"解題思路\"></a>解題思路</h2><h3 id=\"Dirty-解法\"><a href=\"#Dirty-解法\" class=\"headerlink\" title=\"Dirty 解法\"></a>Dirty 解法</h3><p>當然就是最直覺的解法囉，既然兩個字串只會有一個字不一樣，那麼就把同時出現在兩邊的單字給刪除了，剩下的那個就是答案了</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">char</span> <span class=\"title\">FindTheDifference</span>(<span class=\"params\"><span class=\"built_in\">string</span> s, <span class=\"built_in\">string</span> t</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> bigWord = s.Length &gt; t.Length ? s : t;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> smallWord = s.Length &lt;= t.Length ? s : t;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> bigAry = <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">char</span>&gt;(bigWord);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> smallAry = <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">char</span>&gt;(smallWord);</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> c <span class=\"keyword\">in</span> smallAry)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            bigAry.Remove(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bigAry.FirstOrDefault();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/LeetCode-FindTheDifference/2019-09-27_22-22-35.png\"></p>\n<h3 id=\"進階寫法\"><a href=\"#進階寫法\" class=\"headerlink\" title=\"進階寫法\"></a>進階寫法</h3><p>第一版的 Dirty 寫法，完全沒有任何的優化，想當然的成績應該不是很理想，所以當然要接著想想看還能夠怎麼處理</p>\n<p>我們知道英文字母都可以轉成 ASCII Code 來處理，那麼也就是說，我能夠將兩個字串的 ASCII 碼都算出來，然後加總，接著得到兩個數字相減，就是那個答案的 ASCII Code 了</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">char</span> <span class=\"title\">FindTheDifference</span>(<span class=\"params\"><span class=\"built_in\">string</span> s, <span class=\"built_in\">string</span> t</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sTotal = s.Sum(Convert.ToInt32);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tTotal = t.Sum(Convert.ToInt32);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"built_in\">char</span>)Math.Abs(sTotal - tTotal);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的程式碼可以再簡寫，但是我覺得沒有什麼意義，能夠清晰且直覺的表達程式的意涵，比所謂的一行代碼好多了，而且，就算自己很容易就能夠看懂，但是團隊成員通常程度有高有低，一個良好的習慣是，盡量用大家都能夠理解的寫法，會省去不少時間成本</p>\n<p><img src=\"/artblog/LeetCode-FindTheDifference/2019-09-27_22-31-44.png\"></p>\n<h3 id=\"最終寫法\"><a href=\"#最終寫法\" class=\"headerlink\" title=\"最終寫法\"></a>最終寫法</h3><p>第二版與第一版在執行速度及記憶體的用量來看，差異並不大，但是還是能夠在延續這個思路下去進行優化，曾經有利用過 XOR 的技巧，這次就派上用場了</p>\n<p>來溫習一下 XOR 的真值表，當兩個輸入都相同，輸出為 0；兩個輸入不同的話，則輸出為 1</p>\n<table>\n<thead>\n<tr>\n<th>XOR</th>\n<th>1</th>\n<th>0</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<p>也就是說，我拿英文字母<code>a</code>去跟 0 做 XOR 運算，會得到 <code>a</code> 的 ASCII Code：97</p>\n<p><img src=\"/artblog/LeetCode-FindTheDifference/2019-09-27_22-39-10.png\"></p>\n<p>那麼，如果我用<code>a</code>跟<code>b</code>去做 XOR，接著再用答案去跟<code>b</code>做一次 XOR，也是會得到 97</p>\n<p>這是為什麼呢？來看一下這張圖<br><img src=\"/artblog/LeetCode-FindTheDifference/2019-09-27_22-49-10.png\"></p>\n<p>a 的 ASCII Code 是 97，也就是<code>110 0001</code><br>b 的 ASCII Code 是 98，也就是<code>110 0010</code><br>參考 XOR 真值表，得出最終結果 <code>000 0011</code>，也就是<code>3</code><br>接著如果再用<code>3</code>去跟<code>b</code>做 XOR 運算，答案會是<code>110 0001</code>，也就是 97</p>\n<p>所以，我們只需要將題目給的兩個字串，逐一透過 XOR 運算，最終就可以得到答案</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">char</span> <span class=\"title\">FindTheDifference</span>(<span class=\"params\"><span class=\"built_in\">string</span> s, <span class=\"built_in\">string</span> t</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> c <span class=\"keyword\">in</span> s + t)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            result = result ^ c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"built_in\">char</span>)result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/LeetCode-FindTheDifference/2019-09-27_22-57-09.png\"></p>\n","categories":["LeetCode"]},{"title":"LeetCode - Get Largest Number","url":"/artblog//LeetCode-Get-Largest-Number/","content":"<p>給予一個非負數的數字陣列，利用陣列內的元素排列出一個最大的數字，回傳值為字串</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Test-Case\"><a href=\"#Test-Case\" class=\"headerlink\" title=\"Test Case\"></a>Test Case</h2><blockquote>\n<p>這邊的解法直接丟上去 leetCode 還是會有問題，因為有些 testCase 沒覆蓋到，後續等有空時再繼續做…</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>Numbers</th>\n<th>Expected</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[0, 0]</td>\n<td>0</td>\n</tr>\n<tr>\n<td>[10, 2]</td>\n<td>210</td>\n</tr>\n<tr>\n<td>[3, 30, 34, 5, 9]</td>\n<td>9534330</td>\n</tr>\n<tr>\n<td>[121, 12]</td>\n<td>12121</td>\n</tr>\n<tr>\n<td>[824, 938, 1399, 5607, 6973, 5703, 9609, 4398, 8247]</td>\n<td>9609938824824769735703560743981399</td>\n</tr>\n</tbody></table>\n<p>解題方法很多，重點的比較規則是將兩個數字字串合併後，再去比較，<code>c-sharp</code>的部分利用<code>string.Compare()</code>比較字串避免溢位</p>\n<h2 id=\"Solution-in-Js\"><a href=\"#Solution-in-Js\" class=\"headerlink\" title=\"Solution in Js\"></a>Solution in Js</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"title class_\">GetLargestNumber</span>(numbers) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sortList = numbers.<span class=\"title function_\">sort</span>(<span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> xFirst = x.<span class=\"title function_\">toString</span>() + y.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">      <span class=\"keyword\">let</span> yFirst = y.<span class=\"title function_\">toString</span>() + x.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">      <span class=\"keyword\">return</span> yFirst - xFirst;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = sortList.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (a == b) <span class=\"keyword\">return</span> a.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">      <span class=\"keyword\">return</span> a.<span class=\"title function_\">toString</span>() + b.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">Solution</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Solution-in-C-sharp\"><a href=\"#Solution-in-C-sharp\" class=\"headerlink\" title=\"Solution in C-sharp\"></a>Solution in C-sharp</h2><p>其實就直接將數字陣列利用 IComparer 實作比較的方法，一開始不需要弄成 Dictionary….<br>不過也懶得再重寫了，大概就是這個意思</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution20190510</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">LargestNumber</span>(<span class=\"params\"><span class=\"built_in\">int</span>[] nums</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> myList = GetSortedList(nums);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> GetLargestNumberByList(myList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">string</span> <span class=\"title\">GetLargestNumberByList</span>(<span class=\"params\">IEnumerable&lt;KeyValuePair&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">int</span>&gt;&gt; myList</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> keyValuePair <span class=\"keyword\">in</span> myList)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            result += keyValuePair.Key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IEnumerable&lt;KeyValuePair&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">int</span>&gt;&gt; GetSortedList(IEnumerable&lt;<span class=\"built_in\">int</span>&gt; nums)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> dict = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">int</span>&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> num <span class=\"keyword\">in</span> nums)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dict.ContainsKey(num.ToString()))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dict.Add(num.ToString(), num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = dict.ToList();</span><br><span class=\"line\">        result.Sort(mySort);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">int</span> <span class=\"title\">mySort</span>(<span class=\"params\">KeyValuePair&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">int</span>&gt; x, KeyValuePair&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">int</span>&gt; y</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> xFirst = x.Key + y.Key;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> yFirst = y.Key + x.Key;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">string</span>.Compare(yFirst, xFirst);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["LeetCode"]},{"title":"LeetCode-MoveZeroes","url":"/artblog//LeetCode-MoveZeroes/","content":"<p>原始題目  </p>\n<p>Given an array nums, write a function to move all 0’s to the end of it while maintaining the relative order of the non-zero elements.</p>\n<span id=\"more\"></span>\n\n<h3 id=\"中文翻譯\"><a href=\"#中文翻譯\" class=\"headerlink\" title=\"中文翻譯\"></a>中文翻譯</h3><p>今天團隊大神又帶萌新刷 LeetCode 了，原始題目是 LeetCode 的 Move Zeroes，但是為了挑戰性，加了一點限制</p>\n<ol>\n<li>將數字陣列裡所有 0 的元素移到最後面</li>\n<li>不改變其他數字的排序</li>\n<li>直接在該陣列物件完成操作,不可複製或建立新的陣列</li>\n</ol>\n<h3 id=\"TestCase\"><a href=\"#TestCase\" class=\"headerlink\" title=\"TestCase:\"></a>TestCase:</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: [0,1,0,3,12]</span><br><span class=\"line\">Output: [1,3,12,0,0]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解題\"><a href=\"#解題\" class=\"headerlink\" title=\"解題\"></a>解題</h2><h3 id=\"第一個版本\"><a href=\"#第一個版本\" class=\"headerlink\" title=\"第一個版本\"></a>第一個版本</h3><p>第一個版本就真的像是候捷說的<code>全憑本能</code>程序員，這個版本還算簡單，但進步空間還是很大的，套用了兩次迴圈，複雜度數值應該不會很好看</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">MoveZeroes</span>(<span class=\"params\"><span class=\"built_in\">int</span>[] nums</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; nums.Length; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果已經是最後一格，不動作</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == nums.Length - <span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 當前有數值，不動作</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] != <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 找出下一個不是0的index</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> notZeroIndex = FindNotZero(nums, i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (notZeroIndex == <span class=\"number\">-1</span>) <span class=\"keyword\">continue</span>; <span class=\"comment\">// 找不到，不動作</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 交換數字</span></span><br><span class=\"line\">        nums[i] = nums[notZeroIndex];</span><br><span class=\"line\">        nums[notZeroIndex] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">int</span> <span class=\"title\">FindNotZero</span>(<span class=\"params\"><span class=\"built_in\">int</span>[] nums, <span class=\"built_in\">int</span> currentIndex</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = currentIndex; i &lt; nums.Length; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] != <span class=\"number\">0</span>) <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/LeetCode-MoveZeroes/2019-11-01_23-13-28.png\"></p>\n<h3 id=\"第二個版本\"><a href=\"#第二個版本\" class=\"headerlink\" title=\"第二個版本\"></a>第二個版本</h3><p>這個版本開始採用了兩個指標，所以變得有點難以理解，最後還是依靠大神提點才搞出了這個版本，原本以為應該是不錯了，但是實際上跑出來的數值，感覺跟第一個版本沒啥明顯差異</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">MoveZeroes</span>(<span class=\"params\"><span class=\"built_in\">int</span>[] nums</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> j = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &lt; nums.Length)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果前面的為0，後面不為0，就交換</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] == <span class=\"number\">0</span> &amp;&amp; nums[j] != <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            nums[i] = nums[j];</span><br><span class=\"line\">            nums[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果兩者都為0，那後面的 + 1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[i] == <span class=\"number\">0</span> &amp;&amp; nums[j] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 否則往下一個數字開始處理</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            j = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/LeetCode-MoveZeroes/2019-11-01_23-13-54.png\"></p>\n<h3 id=\"第三個版本\"><a href=\"#第三個版本\" class=\"headerlink\" title=\"第三個版本\"></a>第三個版本</h3><p>最終由大神說明最終版本的思路，一樣是採用兩個指標，指標 right 用來順序跑回圈往下走；指標 left 就是用來交換數值用的</p>\n<ol>\n<li>left 指標都必須指在 0 上面等著被交換</li>\n<li>right 指標只有在不是 0 的時候才做交換</li>\n</ol>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">MoveZeroes</span>(<span class=\"params\"><span class=\"built_in\">int</span>[] nums</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> left = <span class=\"number\">0</span>, right = <span class=\"number\">0</span>; right &lt; nums.Length; right++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[right] != <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">int</span> temp = nums[right];</span><br><span class=\"line\">            nums[right] = nums[left];</span><br><span class=\"line\">            nums[left] = temp;</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/LeetCode-MoveZeroes/2019-11-01_23-41-32.png\"><br>程式碼很簡短，速度也很快，第三種版本有一種豁然開朗的感覺，但是一開始就算知道思路，還是卡關很久，附上三個案例的步驟<br><img src=\"/artblog/LeetCode-MoveZeroes/2019-11-02_00-23-13.png\"></p>\n<p><img src=\"/artblog/LeetCode-MoveZeroes/2019-11-02_00-22-25.png\"></p>\n<blockquote>\n<p>陣列中沒有 0，在每一個步驟，left 實際上都是自己跟自己交換，然後最終 left 指標再+1</p>\n</blockquote>\n<p><img src=\"/artblog/LeetCode-MoveZeroes/2019-11-02_00-23-55.png\"></p>\n<blockquote>\n<p>在步驟 3 的時候，right 碰到了 0，所以跳過不做事情；所以 left 也就被固定下來 (只有 right 碰到不是 0 的時候，left 才會增加)</p>\n</blockquote>\n","categories":["LeetCode"]},{"title":"LeetCode-Pow(x,n)","url":"/artblog//LeetCode-Pow(x,n)/","content":"<p>leetcode 050 pow(x,n)：求 x 的 n 次方</p>\n<p>這個題目在練習的時候一開始做不出來，回家後再做 x 了一次總算是弄出來，但是就跟同事說的一樣，程式真的很醜，多一個測試案例就多一個 if</p>\n<p>這絕對不是最佳解啊，由於數學都還給老師，指數早就忘光光，趁著這次的機會又溫習了一下，解題當然不能使用 Math.Pow()，這樣就太犯規了</p>\n<span id=\"more\"></span>\n\n<h2 id=\"解題\"><a href=\"#解題\" class=\"headerlink\" title=\"解題\"></a>解題</h2><p>如果 n (次方數) 為偶數，答案應為 x 的 n &#x2F; 2 次方 _ x 的 n &#x2F; 2 次方，例如： 2^4 &#x3D; 2^2 _ 2^2 &#x3D; 4 _ 4 &#x3D; 16<br>如果是奇數，答案應為偶數的解答再乘上一個 x，例如：2^5 &#x3D; ( 2^2 _ 2^2 ) _ 2 &#x3D; 16 _ 2 &#x3D; 32<br>次方數的計算則利用遞迴處理，次方為負數的情況，例如：2^-3 &#x3D; ( 1 &#x2F; 2 _ 1 &#x2F; 2 _ 1 &#x2F; 2 ) &#x3D; 1 &#x2F; 8 &#x3D; 1 &#x2F; ( 2^3 )</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">MyPow</span>(x, n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n &gt; <span class=\"number\">0</span> ? <span class=\"title function_\">pow</span>(x, n) : <span class=\"number\">1</span> / <span class=\"title function_\">pow</span>(x, n);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">pow</span>(<span class=\"params\">x, n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> mid = <span class=\"title function_\">pow</span>(x, <span class=\"built_in\">parseInt</span>(n / <span class=\"number\">2</span>));</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n % <span class=\"number\">2</span> == <span class=\"number\">0</span> ? mid * mid : mid * mid * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = solution;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/LeetCode-Pow(x,n)/1547321782_35845.png\"></p>\n<p>Sample Code：<a href=\"https://github.com/art-Blog/Leetcode-050-pow\">GitHub</a></p>\n","categories":["LeetCode"]},{"title":"LeetCode - RemoveDuplicates","url":"/artblog//LeetCode-RemoveDuplicates/","content":"<p>刪除相鄰的重複字元</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Test-Case\"><a href=\"#Test-Case\" class=\"headerlink\" title=\"Test Case\"></a>Test Case</h2><p>Input:abbaca<br>Output:ca</p>\n<p>Input:aaaaaaa<br>Output:a</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">RemoveDuplicates</span>(<span class=\"params\"><span class=\"built_in\">string</span> S</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> Stack&lt;<span class=\"built_in\">char</span>&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> s <span class=\"keyword\">in</span> S)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result.Any())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (result.First() == s)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    result.Pop();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    result.Push(s);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                result.Push(s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">string</span>.Join(<span class=\"built_in\">string</span>.Empty, result.ToArray().Reverse());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/artblog/LeetCode-RemoveDuplicates/leetcode_1047_01.png\"></p>\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><p>這個版本其實是第三個版本，一開始是透過 <code>regex</code> 來做，有點拿大砲轟蚊子的感覺，當然效能也很不好<br>畢竟 regex 用來處理更複雜的文字結構才是他的優勢</p>\n<p>第二個版本依循前一個版本的思路，但沒注意到字串宣告在動態時期的問題，造成記憶體耗費過多的問題</p>\n<p>第三個版本的思路比較正確一點，但應該還是有其優化的空間</p>\n<ol>\n<li>判斷集合有無資料，無資料就塞入第一個字元</li>\n<li>集合中若有資料，則判斷目前集合的第一個字元是否與當前字元相符合，相同，則透過 pop()取出</li>\n<li>若不相同，則將當前字元放入集合</li>\n<li>最終 stack 內容即為答案，但因為 stack 的特性所以要先反轉，若用<code>List</code>就不需要反轉了</li>\n</ol>\n<blockquote>\n<ol>\n<li>字串其實就是 char 的集合，所以直接透過 foreach 迴圈處理</li>\n<li>字串宣告在動態時期都是會另外開闢一個記憶體空間來存放，若需字串處理還是透過<code>StingBuilder</code>較好</li>\n</ol>\n</blockquote>\n<p>其實道理都知道，但真的在做的時候常常還是會忽略這些基本規則，所以還是需要踩一下雷加深記憶</p>\n","categories":["LeetCode"]},{"title":"LeetCode-Sum of Two Integers","url":"/artblog//LeetCode-Sum-of-Two-Integers/","content":"<p>計算兩個整數的和，但是不允許使用加、減運算子</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Test-Case\"><a href=\"#Test-Case\" class=\"headerlink\" title=\"Test Case\"></a>Test Case</h2><p>Input: a &#x3D; 1, b &#x3D; 2<br>Output: 3</p>\n<p>Input: a &#x3D; -2, b &#x3D; 3<br>Output: 1</p>\n<hr>\n<p>如果可以用的話這一題就直接 a + b 就好了，是吧，想也知道沒那麼膚淺；這一題解題思路就是利用邏輯運算子來處理。</p>\n<p>我們都知道數字可以轉成二進制，例如：23 跟 7 這兩個數字相加，會變成像是下面這樣子</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 23 :  10111</span></span><br><span class=\"line\"><span class=\"comment\">//  7 :  00111</span></span><br><span class=\"line\"><span class=\"comment\">// 30 :  10222</span></span><br></pre></td></tr></table></figure>\n\n<p>可是二進制並沒有 2 這種東西，碰到 2 就是進位，所以實際上應該是</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 30 : 11110</span></span><br></pre></td></tr></table></figure>\n\n<p>OK，到這邊再看一下邏輯閘的概念，</p>\n<table>\n<thead>\n<tr>\n<th>AND</th>\n<th>1</th>\n<th>0</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<p>AND邏輯閘很好理解，只要兩者都為真值，輸出則為真。</p>\n<table>\n<thead>\n<tr>\n<th>OR</th>\n<th>1</th>\n<th>0</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<p>OR邏輯閘也是一樣，只要兩者有一個是真值，輸出就為真</p>\n<table>\n<thead>\n<tr>\n<th>XOR</th>\n<th>1</th>\n<th>0</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<p>互斥或閘就比較難理解了，如果沒有概念的話可以參考一下電子電路的互斥或閘邏輯圖</p>\n<p><img src=\"https://knowthecode.io/wp-content/uploads/2016/10/XOR-gate-composition.jpg\"></p>\n<p>原文出處：<a href=\"https://knowthecode.io/labs/basics-of-data-and-program-circuitry/episode-7\">Understanding Gates – XOR Gate</a></p>\n<p>從上圖可以很清楚的看到，互斥或閘的邏輯，紅線的部分表示真值，在兩者相同的情況下，輸出皆為0。</p>\n<p>回過頭來看一下二進制相加的這個問題，我們將計算拆成兩個部分，第一個部分是數字相加有進位的部分，第二個部分則是沒有進位的部分，所以我們期望得到的數值，應該是</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 23  :  10111</span></span><br><span class=\"line\"><span class=\"comment\">//  7  :  00111</span></span><br><span class=\"line\"><span class=\"comment\">// 30  :  10222</span></span><br><span class=\"line\"><span class=\"comment\">// 30  :  11110</span></span><br><span class=\"line\"><span class=\"comment\">// ============</span></span><br><span class=\"line\"><span class=\"comment\">// x   :  10000</span></span><br><span class=\"line\"><span class=\"comment\">// y   :  01110</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>X 這個變數我們可以透過 XOR Gate 得到，但是 y 這個進位的怎麼辦？其實也不難，就利用 AND Gate接著再將結果左移一個位元就好了。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ============</span></span><br><span class=\"line\"><span class=\"comment\">// x   :  10000  --&gt; XOR gate</span></span><br><span class=\"line\"><span class=\"comment\">// y&#x27;  :  01110  --&gt; AND gate , then left shift</span></span><br></pre></td></tr></table></figure>\n\n<p>在Csharp裡面可以直接透過邏輯運算子來進行數字的二進制邏輯運算，所以我們不需要自行將數字轉二進制，在一個一個去做邏輯運算</p>\n<p>可是如果，我的XOR與AND計算得出的數字，兩者之和又剛好需要再進位怎麼辦呢？<br>那就把這兩個數字，再重新計算一次數字相加就可以了，到最後，如果進位的數字等於0，表示XOR的運算結果就是答案了</p>\n<p>所以，可以得到如下程式碼</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">GetSum</span>(<span class=\"params\"><span class=\"built_in\">int</span> a, <span class=\"built_in\">int</span> b</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> x = a ^ b;  <span class=\"comment\">// XOR 運算結果</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> y = ((a &amp; b) &lt;&lt; <span class=\"number\">1</span>); <span class=\"comment\">// AND 運算結果再左移一位元，表示進位的數字</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> y==<span class=\"number\">0</span> ? x : GetSum(x,y); <span class=\"comment\">// 如果不需要進位，則XOR就是答案；否則再重新計算兩者之和</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>這次的練習其實一開始只知道概念是利用二進制計算，如果用手寫的我大概瞬間就知道怎麼解，但是要利用csharp來進行邏輯運算，一開始真的卡了很久，因為對邏輯運算子很不熟，還以為需要先轉二進制，再一個一個位元下去比對，Convert來Convert去的，搞得頭昏腦脹，經過大神解說後，才發現根本不用這樣子搞，直接透過csharp提供的運算子來做就好了。</p>\n<p>這一題大概就是考考二進制的觀念，以及邏輯閘，當然遞迴處理也可以換成while迴圈，終止條件一樣是判斷進位即可。<br>總的來說，簡單，又很有趣。</p>\n","categories":["LeetCode"]},{"title":"LeetCode - relative sort array","url":"/artblog//LeetCode-relative-sort-array/","content":"<p>给你两个数组，arr1 和 arr2<br>arr1 中的元素各不相同<br>arr2 中的每个元素都出现在 arr1 中<br>对 arr1 中的元素进行排序，使 arr1 中项的相对顺序和 arr2 中的相对顺序相同。未在 arr2 中出现过的元素需要按照升序放在 arr1 的末尾。</p>\n<span id=\"more\"></span>\n\n<p>上面這一段是LeetCode中文站的題目說明，對於很難理解英文題目的人而言應該是個不錯的選擇，通常我會看完題目後再回到英文版去解答，這一題的意思其實就是讓arr1的數字，依照arr2的順序來排列，因為arr2的順序是2,1,4,3,9,6，所以把arr1裡面的2都放在前面，接著放1,4,3,9,6這些數字，都放完之後，把剩餘的數字依照昇冪排序即可</p>\n<p>VSCode有一個外掛可以很方便的練習，就不多介紹了，自行觀看:<a href=\"https://marketplace.visualstudio.com/items?itemName=shengchen.vscode-leetcode\">leetcode</a></p>\n<hr>\n<h2 id=\"Test-Case\"><a href=\"#Test-Case\" class=\"headerlink\" title=\"Test Case\"></a>Test Case</h2><p>输入：arr1 &#x3D; [2,3,1,3,2,4,6,7,9,2,19], arr2 &#x3D; [2,1,4,3,9,6]<br>输出：[2,2,2,1,4,3,3,9,6,7,19]</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> relativeSortArray = <span class=\"keyword\">function</span>(<span class=\"params\">arr1, arr2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> all = arr1</span><br><span class=\"line\">    <span class=\"keyword\">let</span> group = arr2</span><br><span class=\"line\">    <span class=\"keyword\">let</span> part1 = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> part2 = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; all.<span class=\"property\">length</span>; index++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (group.<span class=\"title function_\">includes</span>(all[index]))&#123;</span><br><span class=\"line\">            part1 = [...part1,...all.<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">x</span>=&gt;</span>x===group[index])]<span class=\"comment\">//?</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            part2.<span class=\"title function_\">push</span>(all[index])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> part1.<span class=\"title function_\">concat</span>(part2.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>a-b))</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>先宣告好變數來存放arr2存在的資料、以及不存在的資料</li>\n<li>利用for迴圈處理arr1，存在arr2的數字表示需要篩選出來，不存在的就放著等最後的排序</li>\n<li>迴圈跑完後將兩個部分結合再一起，第二個部分再排序即可</li>\n</ol>\n","categories":["LeetCode"]},{"title":"Redis 初學指令備忘","url":"/artblog//redis-command/","content":"<p>紀錄一下 redis 相關指令，不常用真的會忘記</p>\n<span id=\"more\"></span>\n\n<p>遠端連線至 redis 主機後，於 command shell 執行指令 <code>redis-cli</code> 進入 redis 的命令模式<br>初學練習可利用 docker 建立 redis 服務，於本機執行<code>redis-cli</code>進行各項操作</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">取得 docker redis image</span></span><br><span class=\"line\">docker pull redis</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">start a redis instance</span></span><br><span class=\"line\">docker run --name some-redis -d -p 6379:6379 redis</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">透過 redis-cli 直接連接</span></span><br><span class=\"line\">docker run -it --network some-network --rm redis redis-cli -h some-redis</span><br></pre></td></tr></table></figure>\n\n<p>如果 docker 建立 container 失敗，且提示是 port 被占用，先透過指令確認是否被保留</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">netsh int ipv4 show excludedportrange protocol=tcp</span><br></pre></td></tr></table></figure>\n\n<p>解決方案是先關閉 winnat 建立 container 再啟用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">排除保留 port 錯誤</span></span><br><span class=\"line\">net stop winnat</span><br><span class=\"line\">docker run --name some-redis -d -p 6379:6379 redis</span><br><span class=\"line\">net start winnat</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">連線進入 redis container 並執行 bash</span></span><br><span class=\"line\">docker exec -it myredis /bin/bash</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">使用 redis-cli 操作</span></span><br><span class=\"line\">redis-cli</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>more Infomation here: <a href=\"https://hub.docker.com/_/redis\">Docker Hub redis</a></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>command</th>\n<th>desc</th>\n<th>sample</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"http://www.redis.cn/commands/keys.html\">KEYS pattern</a></td>\n<td>查詢有哪些 key</td>\n<td><code>KEYS *</code></td>\n</tr>\n<tr>\n<td><a href=\"http://www.redis.cn/commands/set.html\">SET key value </a></td>\n<td>設定 key 的內容</td>\n<td><code>SET mykey &quot;hello&quot;</code></td>\n</tr>\n<tr>\n<td><a href=\"http://www.redis.cn/commands/get.html\">Get key</a></td>\n<td>取得 key 的內容</td>\n<td><code>GET mykey</code></td>\n</tr>\n</tbody></table>\n","categories":["redis"]},{"title":"Vue Cli 3 初學","url":"/artblog//create-vue-cli-3/","content":"<p>練習vue cli3，主要是多頁面設定的部分，怕忘記紀錄一下</p>\n<span id=\"more\"></span>\n\n<h2 id=\"start\"><a href=\"#start\" class=\"headerlink\" title=\"start\"></a>start</h2><p><a href=\"https://cli.vuejs.org/zh/guide/installation.html\">Vue CLI Document</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安裝 Vue Cli 3</span></span><br><span class=\"line\">npm install -g @vue/cli</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">建立新專案</span></span><br><span class=\"line\">vue create hello-world</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多頁面設定\"><a href=\"#多頁面設定\" class=\"headerlink\" title=\"多頁面設定\"></a>多頁面設定</h2><p>vue cli 3 使用 webpack 來處理，所以沿用 webpack 的 multi entry 設定方式即可</p>\n<p><a href=\"https://cli.vuejs.org/zh/config/#pages\">Vue 配置參考</a></p>\n<p><a href=\"https://webpack.docschina.org/configuration/resolve/\">Webpack 解析(Resolve)</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vue.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 多頁面設定</span></span><br><span class=\"line\">  <span class=\"attr\">pages</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">index</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// page 的入口</span></span><br><span class=\"line\">      <span class=\"attr\">entry</span>: <span class=\"string\">&quot;src/pages/index/main.js&quot;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 模板来源</span></span><br><span class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">&quot;public/index.html&quot;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 在 dist/index.html 的输出</span></span><br><span class=\"line\">      <span class=\"attr\">filename</span>: <span class=\"string\">&quot;index.html&quot;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 当使用 title 选项时，</span></span><br><span class=\"line\">      <span class=\"comment\">// template 中的 title 标签需要是 &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span></span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&quot;Index Page&quot;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 在这个页面中包含的块，默认情况下会包含</span></span><br><span class=\"line\">      <span class=\"comment\">// 提取出来的通用 chunk 和 vendor chunk。</span></span><br><span class=\"line\">      <span class=\"attr\">chunks</span>: [<span class=\"string\">&quot;chunk-vendors&quot;</span>, <span class=\"string\">&quot;chunk-common&quot;</span>, <span class=\"string\">&quot;index&quot;</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 当使用只有入口的字符串格式时，</span></span><br><span class=\"line\">    <span class=\"comment\">// 模板会被推导为 `public/about.html`</span></span><br><span class=\"line\">    <span class=\"comment\">// 并且如果找不到的话，就回退到 `public/index.html`。</span></span><br><span class=\"line\">    <span class=\"comment\">// 输出文件名会被推导为 `about.html`。</span></span><br><span class=\"line\">    <span class=\"attr\">about</span>: <span class=\"string\">&quot;src/pages/about/main.js&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">productionSourceMap</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">configureWebpack</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">components</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;src/components/&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hot-Module-Reload-HMR\"><a href=\"#Hot-Module-Reload-HMR\" class=\"headerlink\" title=\"Hot Module Reload (HMR)\"></a>Hot Module Reload (HMR)</h2><p>透過 webpack 的監視設定來處理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"attr\">configureWebpack</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">watchOptions</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">poll</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BootStrap-Vue\"><a href=\"#BootStrap-Vue\" class=\"headerlink\" title=\"BootStrap + Vue\"></a>BootStrap + Vue</h2><p><a href=\"https://bootstrap-vue.js.org/docs\">OfficialWebSite</a></p>\n<p><a href=\"https://bootstrap-vue.js.org/docs/components/alert\">元件語法範例</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安裝，擇一使用</span></span><br><span class=\"line\">npm i vue bootstrap-vue bootstrap</span><br><span class=\"line\">yarn add vue bootstrap-vue bootstrap</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在 entry(通常預設為main.js) 註冊 BootStrapVue</span></span><br><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br><span class=\"line\">import BootstrapVue from &#x27;bootstrap-vue&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#x27;bootstrap/dist/css/bootstrap.css&#x27;</span><br><span class=\"line\">import &#x27;bootstrap-vue/dist/bootstrap-vue.css&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(BootstrapVue)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":["vue"],"tags":["vue-cli3"]},{"title":"vuex 初體驗","url":"/artblog//vuex/","content":"<p>從最簡單的<a href=\"https://jsfiddle.net/n9jmu5v7/1269/\">範例</a>開始學習，配合<a href=\"https://vuex.vuejs.org/zh/guide/\">官方網站</a>文件使用</p>\n<blockquote>\n<p><a href=\"https://stackoverflow.com/questions/46097687/vuex-passing-multiple-parameters-to-action\">Vuex - passing multiple parameters to action</a></p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"基本狀態管理\"><a href=\"#基本狀態管理\" class=\"headerlink\" title=\"基本狀態管理\"></a>基本狀態管理</h2><p>下面範例從官網取得，主要演示了基本的 state 及 mutations 操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">increment</span>: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.<span class=\"property\">count</span>++,</span><br><span class=\"line\">    <span class=\"attr\">decrement</span>: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.<span class=\"property\">count</span>--</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">count</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">increment</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      store.<span class=\"title function_\">commit</span>(<span class=\"string\">&quot;increment&quot;</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">decrement</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      store.<span class=\"title function_\">commit</span>(<span class=\"string\">&quot;decrement&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>state 用來存放需要被共用的資料，這裡面的資料需要異動的話，需要透過 mutations 來更新資料</li>\n<li>store 狀態更新：<code>store.commit(&#39;方法名稱&#39;,傳入參數)</code></li>\n<li>mutations 第一個參數為 state，第二個參數為傳入的參數，若有多個參數需要傳入，可透過解構來處理</li>\n<li>透過計算屬性取得 store 狀態</li>\n<li>在根組件註冊 store，子組件可透過<code>this.$store</code>訪問到數據</li>\n</ol>\n<h2 id=\"getter-的用法\"><a href=\"#getter-的用法\" class=\"headerlink\" title=\"getter 的用法\"></a>getter 的用法</h2><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.10/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdnjs.cloudflare.com/ajax/libs/vuex/3.1.0/vuex.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item,index) in list&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      共 &#123;&#123; listCount &#125;&#125; 筆資料</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;getCountryList&quot;</span>&gt;</span>getCountryList<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;getNumberList&quot;</span>&gt;</span>getNumberList<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> <span class=\"variable constant_\">ENUMS</span> = &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title class_\">List</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"title class_\">Number</span>: <span class=\"string\">&quot;GetNumberList&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"title class_\">Country</span>: <span class=\"string\">&quot;GetCountryList&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">function</span> <span class=\"title function_\">postData</span>(<span class=\"params\">url, data</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// Default options are marked with *</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> <span class=\"title function_\">fetch</span>(url, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">body</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(data), <span class=\"comment\">// must match &#x27;Content-Type&#x27; header</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">cache</span>: <span class=\"string\">&quot;no-cache&quot;</span>, <span class=\"comment\">// *default, no-cache, reload, force-cache, only-if-cached</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">credentials</span>: <span class=\"string\">&quot;same-origin&quot;</span>, <span class=\"comment\">// include, same-origin, *omit</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">headers</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"string\">&quot;content-type&quot;</span>: <span class=\"string\">&quot;application/json&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">method</span>: <span class=\"string\">&quot;POST&quot;</span>, <span class=\"comment\">// *GET, POST, PUT, DELETE, etc.</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">mode</span>: <span class=\"string\">&quot;cors&quot;</span>, <span class=\"comment\">// no-cors, cors, *same-origin</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">redirect</span>: <span class=\"string\">&quot;follow&quot;</span>, <span class=\"comment\">// manual, *follow, error</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">referrer</span>: <span class=\"string\">&quot;no-referrer&quot;</span> <span class=\"comment\">// *client, no-referrer</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.<span class=\"title function_\">json</span>()); <span class=\"comment\">// 輸出成 json</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">state</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">list</span>: [],</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">dataSets</span>:[</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">paymentInfoDataSet</span>:[]</span></span><br><span class=\"line\"><span class=\"language-javascript\">          ]</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">actions</span>:&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"title function_\">getPaymentDetail</span>(<span class=\"params\">&#123; commit &#125;, &#123; paymentId, url &#125;</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"title function_\">postData</span>(url, &#123; <span class=\"attr\">paymentId</span>: paymentId &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                      <span class=\"title function_\">commit</span>(<span class=\"string\">&quot;updatePaymentInfo&quot;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                          <span class=\"attr\">paymentId</span>: paymentId,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                          <span class=\"attr\">info</span>: response</span></span><br><span class=\"line\"><span class=\"language-javascript\">                      &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                  &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">mutations</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          [<span class=\"variable constant_\">ENUMS</span>.<span class=\"property\">List</span>.<span class=\"property\">Number</span>](state, list) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            state.<span class=\"property\">list</span> = [...list];</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          [<span class=\"variable constant_\">ENUMS</span>.<span class=\"property\">List</span>.<span class=\"property\">Country</span>](state, list) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            state.<span class=\"property\">list</span> = [...list];</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          [<span class=\"string\">&quot;updatePaymentInfo&quot;</span>](state, detail) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"keyword\">let</span> newDataSet = [...dataSets.<span class=\"property\">paymentInfoDataSet</span>];</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"keyword\">let</span> currentData = state.<span class=\"property\">dataSets</span>.<span class=\"property\">paymentInfoDataSet</span>.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x.<span class=\"property\">paymentId</span> === detail.<span class=\"property\">paymentId</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">              <span class=\"keyword\">if</span> (currentData) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                  <span class=\"keyword\">let</span> removeIndex = newDataSet.<span class=\"title function_\">findIndex</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                      <span class=\"keyword\">return</span> item.<span class=\"property\">paymentId</span> === detail.<span class=\"property\">paymentId</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                  &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                  newDataSet.<span class=\"title function_\">splice</span>(removeIndex, <span class=\"number\">1</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">              &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">              newDataSet.<span class=\"title function_\">push</span>(detail);</span></span><br><span class=\"line\"><span class=\"language-javascript\">              state.<span class=\"property\">dataSets</span>.<span class=\"property\">paymentInfoDataSet</span> = newDataSet;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">getters</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"title function_\">currentList</span>(<span class=\"params\">state</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> state.<span class=\"property\">list</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"title function_\">currentListCount</span>(<span class=\"params\">state, getters</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> getters.<span class=\"property\">currentList</span>.<span class=\"property\">length</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        store,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">defList</span>: [<span class=\"string\">&quot;american&quot;</span>, <span class=\"string\">&quot;chinese&quot;</span>, <span class=\"string\">&quot;japaneses&quot;</span>, <span class=\"string\">&quot;europe&quot;</span>, <span class=\"string\">&quot;africa&quot;</span>],</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"attr\">numberList</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">computed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"title function_\">list</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"property\">getters</span>.<span class=\"property\">currentList</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"title function_\">listCount</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"property\">getters</span>.<span class=\"property\">currentListCount</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"title function_\">getCountryList</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            store.<span class=\"title function_\">commit</span>(<span class=\"variable constant_\">ENUMS</span>.<span class=\"property\">List</span>.<span class=\"property\">Country</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">defList</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">          <span class=\"title function_\">getNumberList</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            store.<span class=\"title function_\">commit</span>(<span class=\"variable constant_\">ENUMS</span>.<span class=\"property\">List</span>.<span class=\"property\">Number</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">numberList</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>getter</code> 大概就相當於是 <code>store</code> 的計算屬性，結果會被 cache 起來，但如果使用方法的格式，有參數傳入，則仍舊是每次呼叫都會執行一次</li>\n<li><code>mutation</code> 做資料更新的話，應該利用新對象替換掉舊對象。例如：<code>state.obj = &#123; ...state.obj, newProp: 123 &#125;</code></li>\n<li>使用常量替代 <code>Mutation</code> 事件類型，這個可以用也可以不用，但是大專案的話最好還是好好管理一下</li>\n<li><code>mutation</code> 必須是同步函数，非同步的應該使用<code>actions</code></li>\n</ol>\n<h2 id=\"非同步操作-Actions\"><a href=\"#非同步操作-Actions\" class=\"headerlink\" title=\"非同步操作 Actions\"></a>非同步操作 Actions</h2><p>Actions 透過 <code>store.dispatch</code>觸發：<code>store.dispatch(&#39;getPaymentDetail&#39;)</code><br>在送出請求並獲得結果後，再呼叫 mutation 更新資料</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// actions支持非同步操作</span></span><br><span class=\"line\"><span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">  checkout (&#123; commit, state &#125;, products) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 把当前购物车的物品备份起来</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> savedCartItems = [...state.<span class=\"property\">cart</span>.<span class=\"property\">added</span>]</span><br><span class=\"line\">    <span class=\"comment\">// 发出结账请求，然后乐观地清空购物车</span></span><br><span class=\"line\">    <span class=\"title function_\">commit</span>(types.<span class=\"property\">CHECKOUT_REQUEST</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 购物 API 接受一个成功回调和一个失败回调</span></span><br><span class=\"line\">    shop.<span class=\"title function_\">buyProducts</span>(</span><br><span class=\"line\">      products,</span><br><span class=\"line\">      <span class=\"comment\">// 成功操作</span></span><br><span class=\"line\">      <span class=\"function\">() =&gt;</span> <span class=\"title function_\">commit</span>(types.<span class=\"property\">CHECKOUT_SUCCESS</span>),</span><br><span class=\"line\">      <span class=\"comment\">// 失败操作</span></span><br><span class=\"line\">      <span class=\"function\">() =&gt;</span> <span class=\"title function_\">commit</span>(types.<span class=\"property\">CHECKOUT_FAILURE</span>, savedCartItems)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表單處理\"><a href=\"#表單處理\" class=\"headerlink\" title=\"表單處理\"></a>表單處理</h2><p>若使用狀態管理，在表單處理上若使用 v-model，在嚴格模式下由於資料異動並非是由 mutation 處理，因此會拋出例外<br>比較簡便的做法是利用 computed 的 get、set，在 set 事件中來處理資料更新</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;message&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">message</span>: &#123;</span><br><span class=\"line\">    get () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"property\">state</span>.<span class=\"property\">obj</span>.<span class=\"property\">message</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set (value) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;updateMessage&#x27;</span>, value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["vue"],"tags":["vuex"]},{"title":"docker 管理工具 portainer","url":"/artblog//docker-management-tool-portainer/","content":"<p>portainer 是一個圖形化的 docker images 及 container 管理工具，對於練習 docker 相關的初學者來說是一個很不錯的工具，雖然它仍舊提供了遠端管理的部分，但因為我其實只有在練習一些整合的服務的時候，會需要用到 Docker，主要也只是為了單機練習使用，因此並沒有太多接觸，如果你跟我一樣對於指令列並不是那麼熟悉，相信這一款工具可以足以應付大多數的需求</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Windows-10-1803-安裝-portainer\"><a href=\"#Windows-10-1803-安裝-portainer\" class=\"headerlink\" title=\"Windows 10 1803+ 安裝 portainer\"></a>Windows 10 1803+ 安裝 portainer</h2><p>我習慣的開發環境是 Windows，安裝的也是 Docker for windows，因此介紹的也是 windows 的安裝方式。</p>\n<p>安裝的時候要注意先將 docker 設定的<code>Expose daemon on tcp://localhost:2375 without TLS</code>打勾<br><img src=\"/artblog/docker-management-tool-portainer/2019-10-18_14-17-57.png\"></p>\n<p>接著再執行下列指令將 portainer 跑起來，如果順利的話，可以在<code>http://localhost:9000</code>開啟 portainer 的介面</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker volume create portainer_data</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d -p 9000:9000 -p 8000:8000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</span><br></pre></td></tr></table></figure>\n\n<p>Ref:</p>\n<ol>\n<li><a href=\"https://portainer.readthedocs.io/en/stable/deployment.html\">https://portainer.readthedocs.io/en/stable/deployment.html</a></li>\n</ol>\n<h2 id=\"更新版本\"><a href=\"#更新版本\" class=\"headerlink\" title=\"更新版本\"></a>更新版本</h2><p>因為我們資料都放在 volume 裡面了，所以只要將原先的容器刪除後，再次下載最新的 images 利用相同的指令重新 run 起來就可以了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker stop portainer</span><br><span class=\"line\">docker rm portainer</span><br><span class=\"line\">docker pull portainer/portainer:latest</span><br><span class=\"line\">docker run -d -p 9000:9000 -p 8000:8000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"docker-volume-錯誤\"><a href=\"#docker-volume-錯誤\" class=\"headerlink\" title=\"docker volume 錯誤\"></a>docker volume 錯誤</h2><p>若日後發生安裝其他 container 掛載 volume 錯誤，可嘗試重新設定一次 docker 的 Shared Drive，取消並重新勾選 C 槽，或是<code>Reset credentials</code>，過程中會需要輸入日後掛載的使用者身份，因此需要輸入帳號、密碼</p>\n","categories":["docker"],"tags":["docker"]},{"title":"docker-yapi初體驗","url":"/artblog//yapi-docker/","content":"<p>這幾天在查 testcafe 的東西，不小心看到鐵人賽 30 天文章的介紹，所以才知道這東西，一看之下驚為天人，這東西可以用來做什麼我都還沒清楚的了解，我就光看特色包含了，整合自動化測試、Mock Server，就決定要找時間好好了解一下了</p>\n<span id=\"more\"></span>\n\n<p>當然當初逛到的那系列鐵人賽文章也是必須要拜讀一下的，尤其 PO 文大大還同時放上了 Youtube 錄影，實在太感謝了<br><a href=\"https://ithelp.ithome.com.tw/users/20120775/ironman/2653?page=1\">持續測試 30 天</a></p>\n<h2 id=\"yapi-是甚麼東西？\"><a href=\"#yapi-是甚麼東西？\" class=\"headerlink\" title=\"yapi 是甚麼東西？\"></a>yapi 是甚麼東西？</h2><p><img src=\"https://github.com/YMFE/yapi/raw/master/yapi-base-flow.jpg\"><br>YApi 是高效、易用、功能強大的 api 管理平台，旨在為開發、產品、測試人員提供更優雅的接口管理服務。可以幫助開發者輕鬆創建、發布、維護 API，YApi 還為用戶提供了優秀的交互體驗，開發人員只需利用平台提供的接口數據寫入工具以及簡單的點擊操作就可以實現接口的管理。</p>\n<p>這邊列出一些 yApi 的特色</p>\n<ol>\n<li>基於 Json5 和 Mockjs 定義接口返回數據的結構和文檔，效率提升多倍</li>\n<li>扁平化權限設計，即保證了大型企業級項目的管理，又保證了易用性</li>\n<li>類似 postman 的接口調試</li>\n<li>自動化測試, 支持對 Response 斷言</li>\n<li>MockServer 除支持普通的隨機 mock 外，還增加了 Mock 期望功能，根據設置的請求過濾規則，返回期望數據</li>\n<li>支持 postman, har, swagger 數據導入</li>\n<li>免費開源，內網部署，信息再也不怕洩露了</li>\n</ol>\n<blockquote>\n<p>好吧，我承認上面那段是從官網抄來的，在我沒有更好的辦法解釋他是個甚麼東西之前，介紹文案用官網的也是一個不錯的選擇</p>\n</blockquote>\n<h3 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h3><p><a href=\"https://hellosean1025.github.io/yapi/\">yAPI 使用說明</a></p>\n<h2 id=\"如何安裝-yapi\"><a href=\"#如何安裝-yapi\" class=\"headerlink\" title=\"如何安裝 yapi\"></a>如何安裝 yapi</h2><p><a href=\"https://github.com/YMFE/yapi\">官方 Github</a>有中文說明，挺好的，可以去看看，不過像這種平台式的東西肯定有人弄成 docker，果不其然，搜尋<code>docker-compose yapi</code>，資料還挺多的，不過有的可以更新、有的不行，看來看去好像這個很簡潔，而且 readme 也有提到若官方有更新，他也會盡快跟上，挺好！就用它了</p>\n<blockquote>\n<p>open source 有個很重要的原則，就是用任何東西之前，看看 readme 以及檔案最後更新的時間，很多時候會是決定你要不要採用的關鍵因素</p>\n</blockquote>\n<h3 id=\"docler-Yapi-by-fjc0k\"><a href=\"#docler-Yapi-by-fjc0k\" class=\"headerlink\" title=\"docler-Yapi by fjc0k\"></a>docler-Yapi by fjc0k</h3><p>docker-Yapi:<a href=\"https://github.com/fjc0k/docker-YApi\">https://github.com/fjc0k/docker-YApi</a></p>\n<ol>\n<li>需要先修改<code>.config.js</code>中的<code>adminAccount</code>管理者登入信箱，密碼預設為<code>ymfe.org</code></li>\n<li>透過<code>docker-compose up -d</code>執行</li>\n<li>瀏覽器開啟<code>localhost:40001</code>即可訪問 yapi 平台</li>\n</ol>\n<blockquote>\n<p>這些在 github readme 也有提及</p>\n</blockquote>\n<p>如果沒有更改其他設定的情況下，預設是禁止註冊新帳號的，所以管理者就是唯一的使用者<br>因為平台沒有資料，都是存放在資料庫內，所以勢必是透過 volume 來處理這一塊，在 windows 平台上使用 mongo db 好像會有些問題，我碰到的是<code>系統權限不足</code>，解決方案如下</p>\n<h3 id=\"如何在-win10-安裝-mongo-db\"><a href=\"#如何在-win10-安裝-mongo-db\" class=\"headerlink\" title=\"如何在 win10 安裝 mongo db\"></a>如何在 win10 安裝 mongo db</h3><p>在 windows 環境下使用 mongo db，需要寫入資料到硬碟，但似乎是與微軟 NTFS 格式有關而發生無法寫入的問題，<a href=\"https://github.com/docker-library/mongo/issues/190\">這一篇</a>有提到解法，在啟動 docker 的時候利用<code>-g &lt;path&gt;</code>參數，但我啟動 docker 都是滑鼠 double click icon 耶，哈哈，不過既然知道與 volume 有關，那就先建立 docker volume，並且在<code>docker-compose.yml</code>之中調用已建立好的 volume 即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker volume create yapi-mongo-db</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">yapi-web:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">jayfong/yapi:latest</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">yapi-web</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">40001</span><span class=\"string\">:3000</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./config.js:/yapi/config.js</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">yapi-mongo</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\">  <span class=\"attr\">yapi-mongo:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mongo:latest</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">yapi-mongo</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">yapi-mongo-db:/data/db</span></span><br><span class=\"line\">    <span class=\"attr\">expose:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">27017</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"attr\">yapi-mongo-db:</span></span><br></pre></td></tr></table></figure>\n","categories":["測試"],"tags":["docker","yApi"]},{"title":"elastic search 練習 audit log","url":"/artblog//elastic-search-practice-audit-log/","content":"<p>其實會有這一篇原因也只是因為DB是珍貴資源，如果將Log都放在DB內是很傷的一件事情，如果可以將Log從DB拿出來，對DB的負擔就減輕了</p>\n<span id=\"more\"></span>\n\n<p>在實作 audit log 系統的時候，除了程式的部分，其實在儲存體的部分也可以改用 elastic Search 來做<br>關於 audit log 的文章，可以參考這一篇:<a href=\"https://www.c-sharpcorner.com/article/audit-trail-and-data-versioning-with-c-sharp-and-mvc/\">Audit Trail And Data Versioning With C# And MVC</a></p>\n<p>範例文章是利用 C#及 EF 來實作，從頭到尾都解說過一次，連 UI 的 razor 頁面都做了，可以先瀏覽過一次<br>es 的功能很多也蠻強大的，可以做全文檢索搜尋、可以跟 APM 整合來記錄應用程式效能紀錄，作為改善效能的依據，不過那些就等以後學習到在研究了</p>\n<p>這一次的練習則是延續上次的 ELK Stack，這次直接透過 <code>Restful API</code> 進行資料的操作，為的就是要先模擬出來後端資料儲存的這一塊<br>使用 es 的好處最直覺的一個就是將 log 記錄與 DB 拆開來，對於 LOG 的查詢、操作，不再影響現有的資料庫<br>對於 DB 效能是有好處的，否則當資料量大，大家都在查詢的時候，網站卻因為資料庫效能的關係而影響到 end-user 體驗，那就不是很好了</p>\n<p>一般來說，大部分的專案可能都會有兩種資訊需要被記錄下來</p>\n<ol>\n<li>歷程：資料異動後，需要記錄異動前後、異動人員、時間的資料，例如：商品資料異動、會員資料異動</li>\n<li>紀錄：發生事件後，需要記錄觸發事件的相關資料，例如：個資查詢記錄、系統登入記錄</li>\n</ol>\n<p>設計思路是利用群組、類型來區分資料，查詢則透過 unique Key，紀錄的內容則放在一個自定義的屬性內</p>\n<blockquote>\n<p>要注意的是，因為 elasticSearch 先前設計上的錯誤，同一個 index 底下目前僅支援一個 type</p>\n</blockquote>\n<p>中文的文件可以先參考<a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/current/query-dsl-intro.html\">這一份</a></p>\n<ol>\n<li><code>logType</code>：資料類型</li>\n<li><code>refId</code>：unique Key</li>\n<li><code>content</code>：要保存的資料內容</li>\n</ol>\n<h2 id=\"客戶異動歷程試資料\"><a href=\"#客戶異動歷程試資料\" class=\"headerlink\" title=\"客戶異動歷程試資料\"></a>客戶異動歷程試資料</h2><p><code>content</code>的資料內容為一個資料集合，可儲存多筆，每一筆資料紀錄異動的資料項目，異動前後的值</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;refId&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">10002000</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;logType&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;customer&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;modifiedBy&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1234</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;modifiedDate&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2019-04-24 06:22:16&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;content&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;field&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Mobile Phone&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;valueBefore&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;0912345678&quot;</span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;valueAfter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;0912333444&quot;</span> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"系統登入紀錄測試資料\"><a href=\"#系統登入紀錄測試資料\" class=\"headerlink\" title=\"系統登入紀錄測試資料\"></a>系統登入紀錄測試資料</h2><p><code>content</code>的資料內容為一個物件，紀錄了登錄時間、狀態、IP 等資訊</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;refId&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1234</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;logType&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;login&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;content&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;loginDate&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2018-10-09 12:03:00&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;ipAddress&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;123.123.123.123&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;machineName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;LAPTOP-XXXXXXX&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;loginStatus&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Y&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查詢某位客戶的異動歷程紀錄\"><a href=\"#查詢某位客戶的異動歷程紀錄\" class=\"headerlink\" title=\"查詢某位客戶的異動歷程紀錄\"></a>查詢某位客戶的異動歷程紀錄</h2><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;bool&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;must&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;match&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;logType&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;customer&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;match&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;refId&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">10002000</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查詢某位使用者針對客戶資料操作的歷程記錄\"><a href=\"#查詢某位使用者針對客戶資料操作的歷程記錄\" class=\"headerlink\" title=\"查詢某位使用者針對客戶資料操作的歷程記錄\"></a>查詢某位使用者針對客戶資料操作的歷程記錄</h2><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;query&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;bool&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;must&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;match&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;logType&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;customer&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;match&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;modifiedBy&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1234</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>在異動紀錄的部分可以猜想的到的情境，大概都是以某個客戶、某個東西為出發點，所以就拿它當作 unique key</p>\n<p>以個資紀錄查詢的這個例子來看，情境如果是客戶資料外洩，要求來查詢他的資料有誰看過，那麼就以客戶編號查詢即可<br>但假設第二個情境：內部稽核發現某位系統使用者有做一些資安疑慮的事情，因此需要查詢他看過那些人的資料，這個時候就會需要用員工編號查詢</p>\n<p>因此在這邊的資料結構設計可能需要再想想<br>在 Content 目前的結構是沒有辦法很好的運用索引，可能就是要拆開來，做兩個不同的 index&#x2F;type 來處理這兩類的紀錄 (歷程、LOG)</p>\n<p>不過目前為止，只是為了練習基本操作，就先這樣吧</p>\n<blockquote>\n<p>瀏覽器操作 Elastic Search 有一個外掛很好用，叫做 Elastic Search HEAD，有興趣的再自己研究一下吧</p>\n</blockquote>\n","tags":["elasticSearch","auditLog"]},{"title":"elasticSearch load testing with Jmeter","url":"/artblog//elasticSearch-load-testing-with-Jmeter/","content":"<p>對於網站效能很重要的一個指標就是：能夠承受多少壓力。評估你的網站使用者，並實際測試給出數據，就是壓力測試的目標</p>\n<span id=\"more\"></span>\n\n<h2 id=\"壓力測試工具-Jmeter\"><a href=\"#壓力測試工具-Jmeter\" class=\"headerlink\" title=\"壓力測試工具 Jmeter\"></a>壓力測試工具 Jmeter</h2><p>免費，好用，windows 也可以用，透過 GUI 撰寫測試腳本，利用 CLI 執行，產出美美的報告及數據結果，不用嗎？</p>\n<p>當然要囉，安裝方法很簡單，搞定 Java SDK 再下載一個 windows 版本的 jmeter 解壓縮執行就行了</p>\n<h3 id=\"Java-SDK\"><a href=\"#Java-SDK\" class=\"headerlink\" title=\"Java SDK\"></a>Java SDK</h3><p>如果在 command line 下<code>java -version</code>有出現版本資訊的話就行了，沒有的話就需要去官網下載，過程會需要加入它們的會員</p>\n<h3 id=\"Jmeter\"><a href=\"#Jmeter\" class=\"headerlink\" title=\"Jmeter\"></a>Jmeter</h3><p>到<a href=\"http://jmeter.apache.org/download_jmeter.cgi\">APACHE Jmeter download</a>下載 Binaries 的 zip 檔案，拿回來後挑一個喜歡的地方放置解壓縮，解壓縮完成後在<code>bin</code>目錄底下有一個<code>jmeter.bat</code>，執行就會出現 jmeter GUI 了。</p>\n<blockquote>\n<p>他同時會開啟一個 command line 視窗，不用關閉，在視窗中也會提醒你若需要跑測試，最好還是用 cli 的方式執行</p>\n</blockquote>\n<h3 id=\"撰寫測試腳本\"><a href=\"#撰寫測試腳本\" class=\"headerlink\" title=\"撰寫測試腳本\"></a>撰寫測試腳本</h3><p>透過 GUI 來撰寫測試腳本</p>\n<h4 id=\"TestPlan-Add-Threads-Thread-Group\"><a href=\"#TestPlan-Add-Threads-Thread-Group\" class=\"headerlink\" title=\"TestPlan: Add -&gt; Threads -&gt; Thread Group\"></a>TestPlan: Add -&gt; Threads -&gt; Thread Group</h4><p>Number of Threads: 模擬多少個使用者的請求，ex:3000<br>Ramp-Up Period: 在幾秒內達到所設定的使用者人數，ex:10<br>Loop Count: 跑幾次，1</p>\n<blockquote>\n<p>上面這段設定口語化一點就是：10 秒鐘內發出 3000 個請求，重複一次</p>\n</blockquote>\n<h4 id=\"Thread-Group-Add-Sampler-HTTP-Request\"><a href=\"#Thread-Group-Add-Sampler-HTTP-Request\" class=\"headerlink\" title=\"Thread Group: Add -&gt; Sampler -&gt; HTTP Request\"></a>Thread Group: Add -&gt; Sampler -&gt; HTTP Request</h4><p>Name: 給這個 request 一個名字<br>Protocol: 通訊協定，這邊要輸入<code>http</code>或其他的，沒輸入不能用的<br>Server Name or IP: 把主機 host 或 IP 填入<br>Port Number: elasticSearch 預設是 9200，照著填吧</p>\n<p>在 HTTP Request 的部分，就看要測試甚麼路徑、Method，依序填入</p>\n<h4 id=\"HTTP-Request-Add-Config-Element-HTTP-Header-Manager\"><a href=\"#HTTP-Request-Add-Config-Element-HTTP-Header-Manager\" class=\"headerlink\" title=\"HTTP Request: Add-&gt; Config Element -&gt; HTTP Header Manager\"></a>HTTP Request: Add-&gt; Config Element -&gt; HTTP Header Manager</h4><p>因為送的是 Json，所以加一個 Content-Type header 的資料在這邊</p>\n<h4 id=\"Thread-Group-Add-Listener-Summary-Report\"><a href=\"#Thread-Group-Add-Listener-Summary-Report\" class=\"headerlink\" title=\"Thread Group: Add -&gt; Listener -&gt; Summary Report\"></a>Thread Group: Add -&gt; Listener -&gt; Summary Report</h4><p>於 GUI 內用來看測試結果的</p>\n<p>這些東西都做完之後，可以點綠色三角形 ICON 跑測試，就可以在這邊看到測試結果，但建議還是先存檔，然後用 CLI 跑</p>\n<h3 id=\"指令備忘\"><a href=\"#指令備忘\" class=\"headerlink\" title=\"指令備忘\"></a>指令備忘</h3><p>透過 command line 到剛才安裝的目錄&#x2F;bin 底下，於此處執行命令，可附加參數</p>\n<p>-n: 不跑 GUI<br>-t: 執行計畫的檔案名稱, 附檔名為 jmx 的檔案<br>-l: 執行結果的儲存檔案名稱，副檔名為 jtl<br>-e: load testing 後產生報表 dashboard<br>-o: 輸出資料夾名稱</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">jmeter -n -t test.jmx -l result.jtl -e -o report</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"參考連結\"><a href=\"#參考連結\" class=\"headerlink\" title=\"參考連結\"></a>參考連結</h3><ol>\n<li><a href=\"https://www.blazemeter.com/blog/elasticsearch-load-testing-learn-how/\">Elasticsearch Load Testing - Learn How</a></li>\n<li><a href=\"http://dog0416.blogspot.com/2017/06/stress-test-jmeter-command-line-mode.html\">[Stress Test] JMeter Command line mode and report dashboard 指令操作模式與報表儀表板</a></li>\n</ol>\n","categories":["測試"],"tags":["jmeter"]},{"title":"html5 - web storage","url":"/artblog//html5-web-storage/","content":"<p>網頁應用程式以往都是透過後端在處理狀態、資料、數據，但是現在瀏覽器也提供的一個client端的簡易儲存方式，有一些應用程式不須要常常向後端交換數據的話，就可以透過local的儲存方式來做。<br>例如：todo-list、行事曆等等，這些都可以在client端做，而不需要向後端存數據，當然還有很多應用的方式，這邊就稍微介紹一下</p>\n<span id=\"more\"></span>\n\n<p><code>sessoinStorage</code> 與 <code>localStorage</code> 都是 client 端儲存資料的一種方式</p>\n<p><code>localStorage</code> 的儲存期限並沒有限制，透過 window.open 開啟新視窗，使用的都是同一份 localStorage，即使視窗全部關閉，只要資料不清掉，重新開啟之後資料仍舊存在</p>\n<p><code>sessionStorage</code> 則是關閉分頁就會被清掉，透過 window.open 開啟新視窗，使用的就是各自分頁自己的 sessionStorage，與其他分頁不相干，而關閉網頁再重新開啟，sessionStorage 也會隨即遺失；實際測試重新 reload 頁面，sessionStorage 仍舊會存在；要特別注意的是，window.open 出去的分頁，會將目前的 sessionStorage 資料複製一份出去給新分頁</p>\n<p>如果希望每個分頁的資料在 window.open 都不一樣，可以在 window.open 之前先清掉，在 open，接著再重新給值，而頁面載入的時候，就需要判斷是否存在 sessionStorage，不存在就自動給一個新的值，<a href=\"https://codepen.io/anon/pen/XwROxW\">範例 CodePan</a></p>\n<p>它們都是 key-value-pair 的形式，所以要存取物件的話需要先經由序列化、反序列化處理<br>也因為它們都是儲存於 client 端的資訊，所以並不適合放置一些敏感性的資訊，像是個資、卡號等等</p>\n<p>應用情境上，<code>sessionStorage</code> 因為生命週期僅存在於本次瀏覽，關閉後就結束，比較適合拿來放置一些臨時性的資料<br><code>localStorage</code> 則可以考慮放置一些增進使用者體驗的東西，例如網頁下拉選單需要從後端取得資料，就可以利用 <code>localStorage</code> 來改善使用者體驗</p>\n<p>操作語法兩者也很類似</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 將資料存到sessionStorage</span></span><br><span class=\"line\"><span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;value&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 從sessionStorage取得之前存的資料</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&quot;key&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 從sessionStorage移除之前存的資料</span></span><br><span class=\"line\"><span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">removeItem</span>(<span class=\"string\">&quot;key&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 從sessionStorage移除之前存的所有資料</span></span><br><span class=\"line\"><span class=\"variable language_\">sessionStorage</span>.<span class=\"title function_\">clear</span>();</span><br></pre></td></tr></table></figure>\n\n<p>更詳細的介紹請參考 <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Window/sessionStorage\">MDN</a></p>\n","categories":["html5"],"tags":["sessionStorage","localStorage"]},{"title":"import 與 export 的用法","url":"/artblog//import-and-export/","content":"<p>在 js 中需要引用別支檔案的內容，通常會使用 node 的機制，或是使用 es6 的機制，這兩種常常搞混，所以特別紀錄一下用法</p>\n<span id=\"more\"></span>\n\n<p>參考資料來源：</p>\n<ol>\n<li><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Statements/export\">MDN web docs:export</a></li>\n<li><a href=\"https://es6.ruanyifeng.com/#docs/style#%E6%A8%A1%E5%9D%97\">阮一峰 - ECMAScript6 入門 - 編程風格</a></li>\n<li><a href=\"https://blog.hellojcc.tw/2016/01/08/module-exports-vs-exports-in-node-js/\">node.js 中 module.exports 及 exports 的差異及區別</a></li>\n</ol>\n<h1 id=\"ES6-範例-1\"><a href=\"#ES6-範例-1\" class=\"headerlink\" title=\"ES6 範例 1\"></a>ES6 範例 1</h1><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// data.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; numbers &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./data.js&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(numbers); <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ES6-範例-2\"><a href=\"#ES6-範例-2\" class=\"headerlink\" title=\"ES6 範例 2\"></a>ES6 範例 2</h1><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// data.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> numbers;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numbers <span class=\"keyword\">from</span> <span class=\"string\">&quot;./data.js&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(numbers); <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"node-範例-1\"><a href=\"#node-範例-1\" class=\"headerlink\" title=\"node 範例 1\"></a>node 範例 1</h1><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// data.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = numbers;</span><br><span class=\"line\"><span class=\"comment\">// 或是寫成</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> numbers = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./data.js&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(numbers); <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"node-範例-2\"><a href=\"#node-範例-2\" class=\"headerlink\" title=\"node 範例 2\"></a>node 範例 2</h1><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// data.js</span></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">char</span> = [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> char = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./data.js&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(char); <span class=\"comment\">// &#123; char: [ &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27; ] &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"node-範例-3\"><a href=\"#node-範例-3\" class=\"headerlink\" title=\"node 範例 3\"></a>node 範例 3</h1><p>如果有兩個以上的匯出….混用，結果是吃 exports</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// data.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">char</span> = [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">NaNiKoLeh</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./data.js&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">NaNiKoLeh</span>); <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<p>使用<code>module.exports</code>，最終的結果是吃最後一個的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// data.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">NaNiKoLeh</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./data.js&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">NaNiKoLeh</span>); <span class=\"comment\">// [ &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27; ]</span></span><br></pre></td></tr></table></figure>\n\n<p>這個就比較有意思了，因為用 export.char 會輸出一個物件，所以可以匯出多個資料</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// data.js</span></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">num</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">char</span> = [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">NaNiKoLeh</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./data.js&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">NaNiKoLeh</span>); <span class=\"comment\">// &#123; num: [1, 2, 3 ], char: [ &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27; ]&#125;</span></span><br></pre></td></tr></table></figure>\n","categories":["javascript"],"tags":["es6"]},{"title":"js 兩日期相減計算","url":"/artblog//date-diff-calculation/","content":"<p>常常有機會碰到javascript日期計算，而通常資料都是&#96;2018&#x2F;08&#x2F;22 15:30:00”的字串格式，所以趁這個機會紀錄一下。</p>\n<span id=\"more\"></span>\n\n<p>日期計算通常都會利用javascript的DateTime物件來做處理，所以第一步是先將字串格式轉換成js的日期物件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">convertStrToDate</span>(<span class=\"params\">dateStr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> ary = dateStr.<span class=\"title function_\">split</span>(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> d = ary[<span class=\"number\">0</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> t = ary[<span class=\"number\">1</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&quot;:&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(d[<span class=\"number\">0</span>], d[<span class=\"number\">1</span>] - <span class=\"number\">1</span>, d[<span class=\"number\">2</span>], t[<span class=\"number\">0</span>], t[<span class=\"number\">1</span>], t[<span class=\"number\">2</span>], <span class=\"number\">00</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接著透過日期物件的<code>getTime()</code>取得毫秒數再去相減，不過其實也可以直接用兩個日期物件相減，得到的一樣會是毫秒數。最後再將毫秒數轉為我們需要的字串格式，當中利用到的基本觀念就是進位、取餘數。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Marh.round() 四捨五入</span></span><br><span class=\"line\"><span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(<span class=\"number\">1.4</span>); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(<span class=\"number\">1.5</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Math.floor() 無條件捨去</span></span><br><span class=\"line\"><span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"number\">1.9</span>); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"number\">2.1</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Math.ceil() 無條件進位</span></span><br><span class=\"line\"><span class=\"title class_\">Math</span>.<span class=\"title function_\">ceil</span>(<span class=\"number\">0.9</span>); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"title class_\">Math</span>.<span class=\"title function_\">ceil</span>(<span class=\"number\">1.1</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取餘數，整數</span></span><br><span class=\"line\"><span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"number\">10</span> % <span class=\"number\">3</span>) <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取除法，整數</span></span><br><span class=\"line\"><span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"number\">10</span> / <span class=\"number\">3</span>) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>有了兩個日期相差的毫秒數之後，再透過上述數學運算，可以分別取得差異的天數、小時數、分鐘數、秒數，再將這些資料以需要的格式輸出</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">dateDiff</span>(<span class=\"params\">start, end</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">leftPad</span> = num =&gt; (num &gt; <span class=\"number\">9</span> ? num : <span class=\"string\">&quot;0&quot;</span> + num);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> diffMs = end - start; <span class=\"comment\">// 取得兩日期相差的毫秒數 </span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> diffDays = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((diffMs / <span class=\"number\">86400000</span>)); <span class=\"comment\">// 取得天數</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> diffHrs = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((diffMs % <span class=\"number\">86400000</span>) / <span class=\"number\">3600000</span>); <span class=\"comment\">// 取得小時數</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> diffMins = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(((diffMs % <span class=\"number\">86400000</span>) % <span class=\"number\">3600000</span>) / <span class=\"number\">60000</span>); <span class=\"comment\">// 取得分鐘數</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> diffSecs = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>((((diffMs % <span class=\"number\">86400000</span>) % <span class=\"number\">3600000</span>) % <span class=\"number\">60000</span>) / <span class=\"number\">1000</span>); <span class=\"comment\">// 取得秒數</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">leftPad</span>(diffHrs) + <span class=\"string\">&quot;:&quot;</span> + <span class=\"title function_\">leftPad</span>(diffMins) + <span class=\"string\">&quot;:&quot;</span> + <span class=\"title function_\">leftPad</span>(diffSecs);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>實務上就可以直接透過這樣的方式進行計算，取得兩個日期的差異結果了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> startTime = <span class=\"title function_\">convertStrToDate</span>(<span class=\"string\">&quot;2019/08/21 15:30:00&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> endTime = <span class=\"title function_\">convertStrToDate</span>(<span class=\"string\">&quot;2019/08/23 16:55:05&quot;</span>); </span><br><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"title function_\">dateDiff</span>(startTime, endTime) <span class=\"comment\">// 01:25:05</span></span><br></pre></td></tr></table></figure>\n","categories":["javascript"]},{"title":"js 非同步事件練習","url":"/artblog//async-event-practice/","content":"<p>紀錄一下 javascript 中非同步的寫法範例</p>\n<span id=\"more\"></span>\n\n<h2 id=\"非同步範例\"><a href=\"#非同步範例\" class=\"headerlink\" title=\"非同步範例\"></a>非同步範例</h2><h3 id=\"01-Promise\"><a href=\"#01-Promise\" class=\"headerlink\" title=\"01 Promise\"></a>01 Promise</h3><p><a href=\"https://github.com/partypeopleland/jsPromiseDemo/blob/master/promiseSample01.html\">Sample Page 01</a></p>\n<p>使用 <code>new Promise(resolve,reject)</code> 去模擬三個事件的執行順序，可以想見若未來還有其他事件要增加，最終的寫法肯定會越來越像氣功波，且難以維護</p>\n<p>在事件內返回的是一個 <code>Promise</code>，以便讓後續的 <code>then()</code>語法可以接續下去，<code>setTimeout()</code>是用來模擬 ajax 或是其他需要執行較長時間的程序，在程序結束完畢之後，透過<code>resolve()</code>改變 Promise 的狀態為執行成功，這樣子在外面的執行事件偵測到就會往下執行<code>then()</code>區塊</p>\n<p>假設第一個事件是透過 ajax 取得後端資料，取得資料後需要再後續步驟接續處理資料，可以將資料傳入給<code>resolve()</code>函式，這樣子在後續的<code>then()</code>就可以作為輸入參數來使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 事件範例</span></span><br><span class=\"line\"><span class=\"title function_\">work01</span>(<span class=\"params\">ms</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"params\">ms</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> time = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(&#123; title, time &#125;);</span><br><span class=\"line\">    &#125;, ms);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 執行事件範例</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">work01</span>(<span class=\"number\">3000</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">info</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">showInfo</span>(info);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">work02</span>(<span class=\"number\">2000</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">info</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">showInfo</span>(info);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">work03</span>(<span class=\"number\">1000</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">info</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">showInfo</span>(info);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"02-async-await\"><a href=\"#02-async-await\" class=\"headerlink\" title=\"02 async &#x2F; await\"></a>02 async &#x2F; await</h3><p><a href=\"https://github.com/partypeopleland/jsPromiseDemo/blob/master/promiseSample02.html\">Sample Page 02</a></p>\n<p>事件方法與先前使用<code>Promise</code>並無不同，但是在執行事件的方法中，需要宣告為<code>async</code>表示此方法為一個非同步方法，並於該方法之內，將需要等候執行完成的方法前端加上<code>await</code>表示此方法需要等候執行結束才可以往下繼續執行，使用語法糖來改寫<code>Promise</code>的最大好處是：程式碼階層數量不再受到事件數量影響，便於閱讀也容易維護、撰寫</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以 async / await 改寫執行事件</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"title function_\">doJob</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> r1 = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">work01</span>(<span class=\"number\">3000</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">showInfo</span>(r1);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> r2 = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">work02</span>(<span class=\"number\">2000</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">showInfo</span>(r2);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> r3 = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">work03</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">showInfo</span>(r3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// or 使用inline method 凸顯程式意圖</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"title function_\">doJob</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">showInfo</span>(<span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">work01</span>(<span class=\"number\">3000</span>));</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">showInfo</span>(<span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">work02</span>(<span class=\"number\">2000</span>));</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">showInfo</span>(<span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">work03</span>(<span class=\"number\">1000</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"03-Promise-catch-error\"><a href=\"#03-Promise-catch-error\" class=\"headerlink\" title=\"03 Promise catch error\"></a>03 Promise catch error</h3><p><a href=\"https://github.com/partypeopleland/jsPromiseDemo/blob/master/promiseSample03.html\">Sample Page 03</a></p>\n<p>若要加上錯誤處理，則是添加上<code>reject()</code>區段，並於執行事件的方法中加上<code>catch()</code>來捕捉例外</p>\n<blockquote>\n<p>jquery ajax API 返回的就是 promise，不需要再自己包一個</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">infos</span>: [],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">ajaxPromise</span>(<span class=\"params\">params</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> $.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: params.<span class=\"property\">type</span> || <span class=\"string\">&quot;get&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">async</span>: params.<span class=\"property\">async</span> || <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: params.<span class=\"property\">url</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: params.<span class=\"property\">data</span> || <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">setData</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">infos</span> = data;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"title function_\">doJob</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">ajaxPromise</span>(&#123; <span class=\"attr\">url</span>: <span class=\"string\">&quot;dataNotExist.json&quot;</span> &#125;)</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(data);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">doJob</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"04-async-await-catch-error\"><a href=\"#04-async-await-catch-error\" class=\"headerlink\" title=\"04 async &#x2F; await catch error\"></a>04 async &#x2F; await catch error</h3><p><a href=\"https://github.com/partypeopleland/jsPromiseDemo/blob/master/promiseSample04.html\">Sample Page 04</a></p>\n<p>若改寫成 <code>async / await</code>，<code>Promise</code> 發生錯誤時會拋出<code>reject()</code>的異常，因此在執行事件中需要透過<code>try...catch...</code>來處理</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">infos</span>: [],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">ajaxPromise</span>(<span class=\"params\">params</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> $.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: params.<span class=\"property\">type</span> || <span class=\"string\">&quot;get&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">async</span>: params.<span class=\"property\">async</span> || <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: params.<span class=\"property\">url</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: params.<span class=\"property\">data</span> || <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">setData</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">infos</span> = data;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"title function_\">doJob</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">ajaxPromise</span>(&#123; <span class=\"attr\">url</span>: <span class=\"string\">&quot;dataNotExist.json&quot;</span> &#125;);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(data);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">doJob</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"實際經驗\"><a href=\"#實際經驗\" class=\"headerlink\" title=\"實際經驗\"></a>實際經驗</h2><p>因為對非同步真的不熟，在實務上也犯了將<code>$.ajax</code>再包一層 promise 卻發現無法正確工作，查了很久才發現這件事情，特別紀錄一下</p>\n<p>使用<code>$.ajax</code>語法就已經是回傳非同步的 Promise 了，如果要用來控制程式流程，可以像下面這樣寫</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 只是拿來做console的ID用</span></span><br><span class=\"line\">  <span class=\"comment\">// ref:https://stackoverflow.com/questions/1349404/generate-random-string-characters-in-javascript</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">makeId</span>(<span class=\"params\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> characters =</span><br><span class=\"line\">      <span class=\"string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> charactersLength = characters.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">      result += characters.<span class=\"title function_\">charAt</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * charactersLength));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 記得要return，才會將promise回傳出去</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\">params</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> id = <span class=\"title function_\">makeId</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;id&#125;</span> start`</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">url</span>: <span class=\"string\">&quot;http://localhost:40001/mock/8/Common/GetZipCode&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">method</span>: <span class=\"string\">&quot;POST&quot;</span>,</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`<span class=\"subst\">$&#123;id&#125;</span> end`</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 宣告為async，並於回傳的promise方法之前加上 await 修飾詞</span></span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">init</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">test</span>();</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">test</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">init</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["javascript"],"tags":["promise","async/await"]},{"title":"使用 testCafe 做E2E測試","url":"/artblog//testCafe/","content":"<p>End-To-End Testing 在自動化測試中，扮演著很重要的一個腳色，以往在單元測試的部分，若與外部溝通，通常我們會運用 mock、stub 來對依賴關係做一個隔離<br>但是在 End-To-End 測試中，反而是盡量避免使用 mock、stub，為的是要模擬使用者操作網站介面，來驗證我們的網站功能是否正確</p>\n<span id=\"more\"></span>\n\n<h2 id=\"testcafe\"><a href=\"#testcafe\" class=\"headerlink\" title=\"testcafe\"></a>testcafe</h2><p>基於 node.js 的自動化端對端測試工具</p>\n<ul>\n<li><a href=\"https://github.com/DevExpress/testcafe\">Github</a></li>\n<li><a href=\"https://devexpress.github.io/testcafe/\">webSite</a></li>\n</ul>\n<h2 id=\"優點\"><a href=\"#優點\" class=\"headerlink\" title=\"優點\"></a>優點</h2><ol>\n<li>支援主流平台:Mac、Linux、Windows</li>\n<li>安裝簡易、一分鐘搞定 <code>npm install testcafe -g</code></li>\n<li>open source</li>\n</ol>\n<h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><ol>\n<li>支援 ES6 與 typeScript，所以可以直接用 typescript 寫測試，配合 VSCode，享受強型別及 intellisense</li>\n<li>提供 Live Runner 模式，監測檔案變更自動重跑測試</li>\n<li>自動等候網頁載入完成及 XHR，這個真的很方便，省去很多麻煩</li>\n<li>並行測試，可同時開啟同個瀏覽器的多個實體跑測試，加快速度</li>\n<li>支持 page object pattern，並附上<a href=\"https://devexpress.github.io/testcafe/documentation/recipes/extract-reusable-test-code/use-page-model.html\">範例</a>教學</li>\n</ol>\n<h2 id=\"持續交付\"><a href=\"#持續交付\" class=\"headerlink\" title=\"持續交付\"></a>持續交付</h2><p>官方文件也提供各式工具的文章說明，此部分請自行查看<a href=\"https://devexpress.github.io/testcafe/documentation/continuous-integration/\">Continuous Integration</a></p>\n<h2 id=\"Report\"><a href=\"#Report\" class=\"headerlink\" title=\"Report\"></a>Report</h2><p>報告的格式，testcafe 是直接做成 npm 套件，文件上也有說要怎麼自行建立喜歡的報告格式，但是我還是直接在<a href=\"https://www.npmjs.com/search?q=testcafe-reporter\">NPM</a>上搜尋人家做好的比較方便</p>\n<p>比較漂亮的有一份是<a href=\"https://www.npmjs.com/package/testcafe-reporter-cucumber-json\">Cucumber JSON TestCafe Reporter</a>，這一套實際上是幫你產一個 Json 出來，然後用另外一套報告產生器來讀這份資料</p>\n<p>使用上就是直接下命令即可，這邊的<code>reporter-app-name</code>、<code>reporter-app-version</code>會直接顯示在報告內的 App 欄位那邊，產出的 json 則是被指定到<code>reports/report.json</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">testcafe chrome ./path-to-tests/*(.js|.testcafe|.ts) --reporter cucumber-json:reports/report.json --reporter-app-name=&#x27;My App&#x27; --reporter-app-version=&#x27;x.y.z&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>產生 Html report 則還需要先安裝套件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save-dev multiple-cucumber-html-reporter</span><br></pre></td></tr></table></figure>\n\n<p>接著建立一個<code>report-generator.js</code>，照著貼就行了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> report = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;multiple-cucumber-html-reporter&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> projectName = path.<span class=\"title function_\">basename</span>(__dirname);</span><br><span class=\"line\"><span class=\"keyword\">const</span> projectVersion = process.<span class=\"property\">env</span>.<span class=\"property\">npm_package_version</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> reportGenerationTime = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">toISOString</span>();</span><br><span class=\"line\">report.<span class=\"title function_\">generate</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">reportName</span>: <span class=\"string\">&quot;TestCafe Report&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">jsonDir</span>: <span class=\"string\">&quot;reports&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">reportPath</span>: <span class=\"string\">&quot;reports&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">openReportInBrowser</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">disableLog</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">displayDuration</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">durationInMS</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">customData</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: <span class=\"string\">&quot;Run info&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: [</span><br><span class=\"line\">      &#123; <span class=\"attr\">label</span>: <span class=\"string\">&quot;Project&quot;</span>, <span class=\"attr\">value</span>: <span class=\"string\">`<span class=\"subst\">$&#123;projectName&#125;</span>`</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">label</span>: <span class=\"string\">&quot;Release&quot;</span>, <span class=\"attr\">value</span>: <span class=\"string\">`<span class=\"subst\">$&#123;projectVersion&#125;</span>`</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">label</span>: <span class=\"string\">&quot;Report Generation Time&quot;</span>, <span class=\"attr\">value</span>: <span class=\"string\">`<span class=\"subst\">$&#123;reportGenerationTime&#125;</span>`</span> &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>最後，在<code>package.json</code>之內加一個別名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;report&quot;</span>: <span class=\"string\">&quot;node report-generator.js&quot;</span>,</span><br></pre></td></tr></table></figure>\n\n<p>這樣子就可以先</p>\n<ol>\n<li>產生數據</li>\n<li>透過數據產生報告</li>\n</ol>\n<h2 id=\"如何撰寫測試\"><a href=\"#如何撰寫測試\" class=\"headerlink\" title=\"如何撰寫測試\"></a>如何撰寫測試</h2><p>細節就不說明了，官方文件照著參考就行，這邊提幾個記憶點</p>\n<h3 id=\"page-model\"><a href=\"#page-model\" class=\"headerlink\" title=\"page-model\"></a>page-model</h3><p>如果還不熟悉，那先撰寫測試好些，然後呢，順利跑過之後，再想著重構。別一開始就想著重構重構、到最後拆得亂七八糟，調整個需求都差點忘記去哪裡改的話，那還不如別重構呢。</p>\n<p>文件上說的支援 page-object 的方式，其實也就是以前 91 上課曾經提到過的將程式與 UI 中間再加一層，避免它們彼此相依，這樣若 UI 有變動，程式碼是不會受影響的，看著文件倒是又重新溫習了一次</p>\n<p>程式碼可以參考一下<a href=\"https://github.com/mwq27/testcafe-page-model-example/blob/master/testcafe/page-models/Login.ts\">GitHub:mwq27&#x2F;testcafe-page-model-example</a>，參考這份程式碼直接利用 typeScript 撰寫，搭配 VSCode 也是不錯的選擇</p>\n<h3 id=\"網站登入\"><a href=\"#網站登入\" class=\"headerlink\" title=\"網站登入\"></a>網站登入</h3><p>可以將登入方法封裝於 pageObject 內重複使用，也可以利用<a href=\"https://devexpress.github.io/testcafe/documentation/test-api/authentication/user-roles.html\">Role()</a>的方式來設定目前要使用的身分，這樣要用哪一個身分來測試網站，就直接在測試中調用<code>t.useRole(role)</code>，在測試上應該是挺語意化的。</p>\n<h3 id=\"埋-DOM-的-data-test-屬性\"><a href=\"#埋-DOM-的-data-test-屬性\" class=\"headerlink\" title=\"埋 DOM 的 data-test 屬性\"></a>埋 DOM 的 data-test 屬性</h3><p>如果不想要未來改變 HTML 屬性影響到測試，那就最好將要測試的 DOM，給他一個測試用的選取方式，<code>例如 &lt;span data-test=&quot;result&quot;&gt;--&lt;/span&gt;</code>。<br>這樣做的好處是測試中的<code>Selector</code>會清晰很多，而且測試程式也不再與 DOM 的 id、name 掛勾</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方法1</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">OrderHistory</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">EditButton</span>: <span class=\"title class_\">Selector</span> = <span class=\"title class_\">Selector</span>(</span><br><span class=\"line\">    <span class=\"string\">&quot;#orderTable &gt; tbody &gt; tr &gt; td &gt; div &gt; div.row.order-history-info__table-row.ml-0.mr-0 &gt; div:nth-child(14) &gt; a&quot;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title class_\">ShowOrderDetail</span>(<span class=\"attr\">browser</span>: <span class=\"title class_\">TestController</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> browser.<span class=\"title function_\">click</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">EditButton</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法2</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">OrderHistory</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">EditButton</span>: <span class=\"title class_\">Selector</span> = <span class=\"title class_\">Selector</span>(<span class=\"string\">&quot;[data-test=&#x27;editButton&#x27;]&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title class_\">ShowOrderDetail</span>(<span class=\"attr\">browser</span>: <span class=\"title class_\">TestController</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> browser.<span class=\"title function_\">click</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">EditButton</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["測試"],"tags":["testCafe","E2E testing"]},{"title":"使用 Hexo 建立個人部落格","url":"/artblog//hexo-blog/","content":"<p>看了好幾篇 hexo 的文章，加上自己也已經很習慣使用 VScode 作為日常開發<br>尤其是 markdown 文件的撰寫便利，想想還是自己架個小小的 blog 紀錄日常心得吧</p>\n<span id=\"more\"></span>\n\n<h1 id=\"為甚麼用-Hexo\"><a href=\"#為甚麼用-Hexo\" class=\"headerlink\" title=\"為甚麼用 Hexo\"></a>為甚麼用 Hexo</h1><p>對我而言 hexo 有幾項優點：</p>\n<ol>\n<li>安裝快速</li>\n<li>靜態 HTML：不需後端伺服器，所以可以架在自己的 NAS 上面</li>\n<li>更換佈景主題方便，且資源眾多，雖說重點只是記錄知識，但是偶爾換換主題也是挺賞心悅目的一件事</li>\n<li>採用 markdown 撰寫，而且 VSCode 的支援度頗高</li>\n<li>容易客製調整，基本上就是 HTML 與 JavaScript，如果哪天想要改了也很方便</li>\n<li>有多種佈署外掛，包含 github、heroku 等空間，也有支援 FTP&#x2F;SFTP 的方式來佈署<blockquote>\n<p>佈署相關可參照官方文件：<a href=\"https://hexo.io/docs/deployment.html\">https://hexo.io/docs/deployment.html</a></p>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h1><p>當然是先查看一下說明</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo --help</span><br></pre></td></tr></table></figure>\n\n<p>基本的指令及描述如果不太清楚，就直接去<a href=\"http://hexo.io/docs/\">官方網站</a>看吧</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Describe</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>clean</td>\n<td>Remove generated files and cache.</td>\n</tr>\n<tr>\n<td>config</td>\n<td>Get or set configurations.</td>\n</tr>\n<tr>\n<td>deploy</td>\n<td>Deploy your website.</td>\n</tr>\n<tr>\n<td>generate</td>\n<td>Generate static files.</td>\n</tr>\n<tr>\n<td>help</td>\n<td>Get help on a command.</td>\n</tr>\n<tr>\n<td>init</td>\n<td>Create a new Hexo folder.</td>\n</tr>\n<tr>\n<td>list</td>\n<td>List the information of the site</td>\n</tr>\n<tr>\n<td>migrate</td>\n<td>Migrate your site from other system to Hexo.</td>\n</tr>\n<tr>\n<td>new</td>\n<td>Create a new post.</td>\n</tr>\n<tr>\n<td>publish</td>\n<td>Moves a draft post from _drafts to _posts folder.</td>\n</tr>\n<tr>\n<td>render</td>\n<td>Render files with renderer plugins.</td>\n</tr>\n<tr>\n<td>server</td>\n<td>Start the server.</td>\n</tr>\n<tr>\n<td>version</td>\n<td>Display version information.</td>\n</tr>\n</tbody></table>\n<p>這邊我較常用到的是</p>\n<h2 id=\"建立文章\"><a href=\"#建立文章\" class=\"headerlink\" title=\"建立文章\"></a>建立文章</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new &quot;hello~world!&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"啟動網站預覽\"><a href=\"#啟動網站預覽\" class=\"headerlink\" title=\"啟動網站預覽\"></a>啟動網站預覽</h2><p>預設會在<code>localhost:4000</code>，同時修改文章的話還會有 browserSync</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"編譯部落格為靜態網頁\"><a href=\"#編譯部落格為靜態網頁\" class=\"headerlink\" title=\"編譯部落格為靜態網頁\"></a>編譯部落格為靜態網頁</h2><p>透過指令將部落格文章編譯成靜態網頁便於佈署，也可以輸入縮寫<code>hexo g</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo generate</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"刪除快取及產生出來的檔案\"><a href=\"#刪除快取及產生出來的檔案\" class=\"headerlink\" title=\"刪除快取及產生出來的檔案\"></a>刪除快取及產生出來的檔案</h2><p>需要刪除無效的標籤索引時可以透過指令刪除產生出來的檔案及快取資料，下次重新產生即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"佈署網站\"><a href=\"#佈署網站\" class=\"headerlink\" title=\"佈署網站\"></a>佈署網站</h1><p>已經準備好靜態網頁資料後，剩下的就是將資料發布至伺服器上，一開始是放在 NAS，但後來想想有穩定又免錢的 github pages 幹嘛不用，於是又補了第二段，第一段 NAS 的部分看看就好囉</p>\n<h2 id=\"NAS\"><a href=\"#NAS\" class=\"headerlink\" title=\"NAS\"></a>NAS</h2><p>在我的 case 是透過 nas 作為伺服器，嘗試之後，透過 node.js 將網頁透過區域網路上傳是最簡易的做法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//gulpfile.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; series &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;gulp&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs-extra&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Hexo</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;hexo&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> del = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;del&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> source = <span class=\"string\">&#x27;public&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> dist = <span class=\"string\">&#x27;\\\\\\\\192.168.1.80\\\\web\\\\hexo&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The `clean` function is not exported so it can be considered a private task.</span></span><br><span class=\"line\"><span class=\"comment\">// It can still be used within the `series()` composition.</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">clean</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// body omitted</span></span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;clean old files&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"title function_\">del</span>([<span class=\"string\">&#x27;public/**/*&#x27;</span>]);</span><br><span class=\"line\">\t<span class=\"title function_\">cb</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The `build` function is exported so it is public and can be run with the `gulp` command.</span></span><br><span class=\"line\"><span class=\"comment\">// It can also be used within the `series()` composition.</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">build</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// body omitted</span></span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;build hexo html files&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> hexo = <span class=\"keyword\">new</span> <span class=\"title class_\">Hexo</span>(process.<span class=\"title function_\">cwd</span>(), &#123;&#125;);</span><br><span class=\"line\">\thexo.<span class=\"title function_\">init</span>()</span><br><span class=\"line\">\t\t.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> hexo.<span class=\"title function_\">call</span>(<span class=\"string\">&#x27;generate&#x27;</span>, &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">watch</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\t.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> hexo.<span class=\"title function_\">exit</span>();</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\t.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"title function_\">cb</span>();</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\t.<span class=\"title function_\">catch</span>(<span class=\"keyword\">function</span> (<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);</span><br><span class=\"line\">\t\t\thexo.<span class=\"title function_\">exit</span>(err);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"title function_\">cb</span>(err);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deploy</span>(<span class=\"params\">cb</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">copyFiles</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">await</span> fs.<span class=\"title function_\">copy</span>(source, dist);</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;deploy success!&#x27;</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"title function_\">copyFiles</span>();</span><br><span class=\"line\">\t<span class=\"title function_\">cb</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">build</span> = build;</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">deploy</span> = deploy;</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">clean</span> = clean;</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">default</span> = <span class=\"title function_\">series</span>(clean, build, deploy);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"github-pages\"><a href=\"#github-pages\" class=\"headerlink\" title=\"github pages\"></a>github pages</h2><p>首先要有一個 public 的 repository 來存放 hexo 所產生出來的靜態網頁，開一個新的 repo 即可</p>\n<p>接著修改<code>hexo</code>設定檔，大致上就是設定好發布的 repo url 及 branch，另外要注意的是網站若為子目錄，也要進行設定，官方網站的文件常常改地方，所以直接截圖</p>\n<p><img src=\"/artblog/hexo-blog/2020-01-15_11-06-48.png\"></p>\n<p><a href=\"https://hexo.io/docs/github-pages#content-inner\">說明文件</a>，其實這邊利用的方法就是 private repository 的方式，因為比較簡單，只需要在設定檔中做下面這樣的設定，就可以方便地發布了</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># URL</span></span><br><span class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">https://partypeopleland.github.io/artblog</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/artblog/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">    <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/partypeopleland/artblog.git</span></span><br><span class=\"line\">    <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n<p>安裝 npm 套件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>利用指令發布網站</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo d -g</span><br></pre></td></tr></table></figure>\n\n<p>接著到 repository 的設定頁面，將 github pages 打開就完成了</p>\n<h1 id=\"使用-Next-Theme\"><a href=\"#使用-Next-Theme\" class=\"headerlink\" title=\"使用 Next Theme\"></a>使用 Next Theme</h1><p>使用 Hexo 也好一陣子，始終在換主題，發現了這套 Theme 看起來很舒服也很多人使用，畢竟部落格文章其實我覺得也不用太花俏，這個 Theme 在閱讀上非常舒服，那就是他了</p>\n<p>安裝透過<a href=\"https://github.com/theme-next/hexo-theme-next/tree/master/docs/zh-CN\">官網</a>的說明，直接進入子目錄將最新檔案 clone 下來即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ cd hexo</span><br><span class=\"line\">$ git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<p>如果需要更詳細的說明，請參考<a href=\"https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/INSTALLATION.md\">詳細安裝步驟</a></p>\n<p>這樣子將 Theme 檔案下載完畢後，修改設定指定主題為<code>next</code>就好了<br><img src=\"/artblog/hexo-blog/2020-08-27_153317.png\"></p>\n<h2 id=\"設定主題\"><a href=\"#設定主題\" class=\"headerlink\" title=\"設定主題\"></a>設定主題</h2><p>因為可以設定的東西跟選項很多，我也不打算介紹，因為很多地方都解釋得很清楚，這邊提供<a href=\"https://theme-next.iissnan.com/\">網站</a>參考就好，底下列出我的調整項目</p>\n<h3 id=\"Hexo-設定文件：-config-yml\"><a href=\"#Hexo-設定文件：-config-yml\" class=\"headerlink\" title=\"Hexo 設定文件：_config.yml\"></a>Hexo 設定文件：<code>_config.yml</code></h3><h3 id=\"主題設定文件：Themes-next-config-yml\"><a href=\"#主題設定文件：Themes-next-config-yml\" class=\"headerlink\" title=\"主題設定文件：Themes/next/_config.yml\"></a>主題設定文件：<code>Themes/next/_config.yml</code></h3><ol>\n<li>主題設定<code>scheme: Pisces</code></li>\n<li>主題設定<code>language: zh-TW</code></li>\n<li>Hexo 設定<code>language: zh-TW</code></li>\n</ol>\n<blockquote>\n<p>如果改完，使用 local 預覽卻發現變成阿拉伯文，記得先<code>hexo clean</code>清除暫存再試一次</p>\n</blockquote>\n","categories":["工具"],"tags":["hexo","github pages"]},{"title":"函數簽章方法的預設值","url":"/artblog//default-parameters-in-function-signature/","content":"<p>javascript 函式的簽章方法，也就是輸入的參數可以有預設值，可以先參考一下<a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Functions/Default_parameters\">MDN</a>的文件說明</p>\n<span id=\"more\"></span>\n\n<p>可以透過這個方式，將原本由外部注入的事件若沒有處理，也可以有預設的方式來做<br>例如，移除陣列中的某個數字，如果找不到，就拋出一個例外，同時也提供讓發生這件事情的時候，程式該怎麼處理，也能夠由外部來指定的彈性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">removeSomething</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  source,</span></span><br><span class=\"line\"><span class=\"params\">  value,</span></span><br><span class=\"line\"><span class=\"params\">  fnIfAbsent = () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RangeError</span>();</span></span><br><span class=\"line\"><span class=\"params\">  &#125;</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> index = source.<span class=\"title function_\">indexOf</span>(value);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (index === -<span class=\"number\">1</span>) <span class=\"title function_\">fnIfAbsent</span>(index);</span><br><span class=\"line\">  <span class=\"keyword\">else</span> source.<span class=\"title function_\">splice</span>(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> value = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> data = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"title function_\">removeSomething</span>(data, value, <span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`集合內沒有 <span class=\"subst\">$&#123;value&#125;</span> 這個值`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data); <span class=\"comment\">// [ 1, 2, 4, 5, 6, 7, 8, 9, 10 ]</span></span><br></pre></td></tr></table></figure>\n","categories":["javascript"]},{"title":"利用 gulp 壓縮合併 js 檔案","url":"/artblog//gulp-minify-concat-js/","content":"<p>透過 gulp 將 javascript 檔案壓縮合併，減少前端 request 連線數量<br>本文參考自<a href=\"https://blog.csdn.net/x550392236/article/details/77985928\">gulp 给静态资源文件添加 hash(md5)后缀 防止缓存</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"gulpfile-js-設定檔\"><a href=\"#gulpfile-js-設定檔\" class=\"headerlink\" title=\"gulpfile.js 設定檔\"></a>gulpfile.js 設定檔</h2><p>參照下面設定範例，任務<code>minifyJs</code>從原始來源讀取後先合併更名，接著做最小化並計算 hash 之後，存檔，並且另外再產生 json 檔案給後續替換 html 引用</p>\n<p>任務<code>revHtmlJs</code>則是將指定頁面及 hash json 資料做查找替換，透過調整第三方依賴套件的原始碼，可以做到替換檔名後方 queryString 的部分</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; src, dest &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;gulp&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;gulp&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> rename = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;gulp-rename&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> concat = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;gulp-concat&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> uglify = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;gulp-uglify-es&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> rev = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;gulp-rev&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> revCollector = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;gulp-rev-collector&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">minifyJs</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">src</span>(<span class=\"string\">&quot;Scripts/Page/Cart/Component/**/*.js&quot;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">concat</span>(<span class=\"string\">&quot;cartComponent.js&quot;</span>))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">      <span class=\"title function_\">rename</span>(<span class=\"keyword\">function</span>(<span class=\"params\">path</span>) &#123;</span><br><span class=\"line\">        path.<span class=\"property\">basename</span> += <span class=\"string\">&quot;.min&quot;</span>;</span><br><span class=\"line\">        path.<span class=\"property\">extname</span> = <span class=\"string\">&quot;.js&quot;</span>;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">uglify</span>(<span class=\"comment\">/* options */</span>))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">rev</span>())</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">dest</span>(<span class=\"string\">&quot;Scripts/Page/Cart&quot;</span>))</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(rev.<span class=\"title function_\">manifest</span>())</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">dest</span>(<span class=\"string\">&quot;Scripts/Page/Cart&quot;</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">revHtmlJs</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">src</span>([<span class=\"string\">&quot;Scripts/Page/Cart/*.json&quot;</span>, <span class=\"string\">&quot;Views/OrderHistory/Index.cshtml&quot;</span>])</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">revCollector</span>())</span><br><span class=\"line\">    .<span class=\"title function_\">pipe</span>(<span class=\"title function_\">dest</span>(<span class=\"string\">&quot;Views/OrderHistory&quot;</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> def = gulp.<span class=\"title function_\">series</span>(minifyJs, revHtmlJs);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">default</span> = def;</span><br></pre></td></tr></table></figure>\n\n<p>比較重要的就是需要調整相關的依賴套件，實際上調整的部分如下</p>\n<h2 id=\"調整-gulp-第三方依賴套件\"><a href=\"#調整-gulp-第三方依賴套件\" class=\"headerlink\" title=\"調整 gulp 第三方依賴套件\"></a>調整 gulp 第三方依賴套件</h2><h3 id=\"gulp-rev\"><a href=\"#gulp-rev\" class=\"headerlink\" title=\"gulp-rev\"></a>gulp-rev</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 將檔案替換為後方加上queryString的形式，而不是直接將檔案名稱改掉</span></span><br><span class=\"line\"><span class=\"comment\">// manifest[originalFile] = revisionedFile;</span></span><br><span class=\"line\">manifest[originalFile] = originalFile + <span class=\"string\">&quot;?v=&quot;</span> + file.<span class=\"property\">revHash</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"rev-path\"><a href=\"#rev-path\" class=\"headerlink\" title=\"rev-path\"></a>rev-path</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不修改檔案名稱，維持原本的檔名</span></span><br><span class=\"line\"><span class=\"comment\">// return modifyFilename(pth, (filename, ext) =&gt; `$&#123;filename&#125;-$&#123;hash&#125;$&#123;ext&#125;`);</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"title function_\">modifyFilename</span>(pth, <span class=\"function\">(<span class=\"params\">filename, ext</span>) =&gt;</span> <span class=\"string\">`<span class=\"subst\">$&#123;filename&#125;</span><span class=\"subst\">$&#123;ext&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"gulp-rev-collector\"><a href=\"#gulp-rev-collector\" class=\"headerlink\" title=\"gulp-rev-collector\"></a>gulp-rev-collector</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原本透過 regex 的部分，在 pattern 後方加上 ?v=xxxxxxxxxx 的pattern</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> versionPattern = <span class=\"string\">&quot;(\\\\?v=(\\\\w)&#123;10&#125;)?&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> regPatt = prefixDelim + pattern + versionPattern;</span><br><span class=\"line\">changes.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">regexp</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(regPatt, <span class=\"string\">&quot;g&quot;</span>),</span><br><span class=\"line\">  <span class=\"attr\">patternLength</span>: pattern.<span class=\"property\">length</span>,</span><br><span class=\"line\">  <span class=\"attr\">replacement</span>: <span class=\"string\">&quot;$1&quot;</span> + manifest[key]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"整合-visual-studio-build-event\"><a href=\"#整合-visual-studio-build-event\" class=\"headerlink\" title=\"整合 visual studio build event\"></a>整合 visual studio build event</h2><p>於專案右鍵選內容，點選<code>建置事件</code>頁籤，在建置前事件命令列輸入指令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm run build --prefix $(ProjectDir)</span><br></pre></td></tr></table></figure>\n\n<p>透過指令在 vs build 之前先執行 npm run build 的指令，參數 prefix 表示指定執行時的目錄路徑，這邊用 vs 的預設專案目錄變數代入<br>而在 package.json 檔案之中，直接宣告 build 指令即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;build&quot;</span>: <span class=\"string\">&quot;gulp&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"其他做法\"><a href=\"#其他做法\" class=\"headerlink\" title=\"其他做法\"></a>其他做法</h1><p>上述是透過前端的方式來處理，但若後端採用 scriptBundle 也可以做到相同的事情，唯獨在 ES6 語法的部分可能會因為轉譯錯誤而造成網站 cshtml 無法瀏覽，只需要透過 babelBundle 取代掉 jsBundle 即可</p>\n<p>先透過 nuget 安裝套件，相關的依賴套件會一併安裝</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Install-Package React.Web.Mvc4 -Version 4.1.1</span><br></pre></td></tr></table></figure>\n\n<p>在使用上與 ScriptBundle 相同，因此可以很好的與專案整合在一起<br>若要直接在開發時</p>\n<p>在 bundle 的部分原則上還是建議利用群組的方式來管理相關的 js 檔案，例如第三方套件一組；自己寫的 js 一組，然後在頁面上就是引用兩組</p>\n<p>範例就像下面這樣</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">RegisterBundles</span>(<span class=\"params\">BundleCollection bundles</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 壓縮合併</span></span><br><span class=\"line\">  BundleTable.EnableOptimizations = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  bundles.Add(<span class=\"keyword\">new</span> ScriptBundle(<span class=\"string\">&quot;~/bundles/jquery&quot;</span>)</span><br><span class=\"line\">      .Include(JsBundleCollection.jqery)</span><br><span class=\"line\">      .Include(JsBundleCollection.jqueryValidate)</span><br><span class=\"line\">  );</span><br><span class=\"line\">  ...略</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">JsBundleCollection</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span>[] jqery =</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;~/Scripts/Plugins/Jquery/jquery-&#123;version&#125;.js&quot;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span>[] jqueryValidate =</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;~/Scripts/Plugins/JqueryValidate/jquery.validate.js&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;~/Scripts/Plugins/JqueryValidate/jquery.validate.unobtrusive.js&quot;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這樣做的好處是使用者的瀏覽器如果已經有讀取過，那麼就不需要再重新下載，對於使用者體驗是有幫助的；而較常調整的檔案，修改後會有不同的 hash 值，瀏覽器會重新取得，對於 client 端來說，也可以確保每次讀取的都是最新的資料</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// page.cshtml</span></span><br><span class=\"line\">@section scripts&#123;</span><br><span class=\"line\">    @Scripts.Render(<span class=\"string\">&quot;~/bundles/jquery&quot;</span>)</span><br><span class=\"line\">    @Scripts.Render(<span class=\"string\">&quot;~/bundles/page&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h1><p>如果專案是 csharp mvc，直接 nuget 安裝套件較為方便；逼不得已的情況下再考慮用 gulp 硬幹，畢竟是要改第三方套件，不是很好</p>\n","categories":["node.js"],"tags":["gulp"]},{"title":"如何建立 Load Balance 環境","url":"/artblog//load-balance-environment/","content":"<p><a href=\"https://partypeopleland.github.io/artblog/2019/12/10/%E5%A6%82%E4%BD%95%E6%89%93%E5%8C%85%E8%87%AA%E5%B7%B1%E7%9A%84-netcore%E7%B6%B2%E7%AB%99%E5%88%B0docker/\">上一篇</a>主要是練習如何將自己開發的網站，放到 docker 裡面，並且透過 dockerfile 將網站建立起來</p>\n<p>接下來要完成的目標是，希望能夠利用 docker 的特性，佈署多個實體，並透過 nginx 實作反向代理及負載平衡</p>\n<span id=\"more\"></span>\n\n<h2 id=\"docker-compose-file\"><a href=\"#docker-compose-file\" class=\"headerlink\" title=\"docker-compose file\"></a>docker-compose file</h2><p>先貼一下完整的 docker-compose 檔案</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">nginx:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./nginx/nginx.conf:/etc/nginx/nginx.conf</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./nginx/conf.d:/etc/nginx/conf.d</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">web1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">web2</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">8888</span><span class=\"string\">:80</span></span><br><span class=\"line\">  <span class=\"attr\">web1:</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span></span><br><span class=\"line\">      <span class=\"attr\">context:</span> <span class=\"string\">.</span></span><br><span class=\"line\">      <span class=\"attr\">dockerfile:</span> <span class=\"string\">build/build-image.dockerfile</span></span><br><span class=\"line\">      <span class=\"attr\">args:</span></span><br><span class=\"line\">        <span class=\"attr\">project_name:</span> <span class=\"string\">$project_name</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8001:80&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">web2:</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span></span><br><span class=\"line\">      <span class=\"attr\">context:</span> <span class=\"string\">.</span></span><br><span class=\"line\">      <span class=\"attr\">dockerfile:</span> <span class=\"string\">build/build-image.dockerfile</span></span><br><span class=\"line\">      <span class=\"attr\">args:</span></span><br><span class=\"line\">        <span class=\"attr\">project_name:</span> <span class=\"string\">$project_name</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;8002:80&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"指定網站的建構檔案\"><a href=\"#指定網站的建構檔案\" class=\"headerlink\" title=\"指定網站的建構檔案\"></a>指定網站的建構檔案</h3><p>因為先前的練習已經有完成一個網站的 dockerfile 了，在這邊就直接拿這個檔案來用，因此在<code>build</code>的部分需要指定 dockerfile 的路徑</p>\n<p>而由於之前我們的 dockerfile 需要指定專案名稱才能夠建立，所以在這邊也透過<code>arg</code>傳入參數，此處的參數<code>$project_name</code>實際上是吃專案目錄下<code>.env</code>檔案的內容，另外 port 的部分，加上這一段只是為了讓網站的 80 port 可以掛載到 host 的 port 方便測試而已，實際上可以不要加</p>\n<p><code>.env</code>的檔案內容如下，就是直接指定一對 key-value</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">project_name=aspMVC</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"設定-nginx-的建構步驟\"><a href=\"#設定-nginx-的建構步驟\" class=\"headerlink\" title=\"設定 nginx 的建構步驟\"></a>設定 nginx 的建構步驟</h3><p>此處其實只有兩個重點，第一個將 host 的 8888 port 對應到 nginx 的 80 port，第二個就是掛載 nginx 的設定檔，這個是為了等等方便我們調整設定</p>\n<h3 id=\"建立容器\"><a href=\"#建立容器\" class=\"headerlink\" title=\"建立容器\"></a>建立容器</h3><p>透過<code>docker-compose up -d</code>指令執行我們設定好的建構檔案<br>沒有意外的話，應該可以看到容器被正確建立起來，但還需要調整 nginx 的設定檔，才能夠讓網站被看到<br><img src=\"/artblog/load-balance-environment/2019-12-17_16-59-48.png\"></p>\n<h3 id=\"查詢容器的-IP\"><a href=\"#查詢容器的-IP\" class=\"headerlink\" title=\"查詢容器的 IP\"></a>查詢容器的 IP</h3><p>先找到容器的 id<br><img src=\"/artblog/load-balance-environment/2019-12-17_17-08-31.png\"></p>\n<p>再透過 docker inspect &lt;容器 id&gt;查看資訊，找到 networks 底下的 IP 就是了<br><img src=\"/artblog/load-balance-environment/2019-12-17_17-09-42.png\"></p>\n<h3 id=\"設定-nginx-的反向代理\"><a href=\"#設定-nginx-的反向代理\" class=\"headerlink\" title=\"設定 nginx 的反向代理\"></a>設定 nginx 的反向代理</h3><p><img src=\"/artblog/load-balance-environment/2019-12-17_17-10-57.png\"></p>\n<h3 id=\"重新讀取-nginx-設定\"><a href=\"#重新讀取-nginx-設定\" class=\"headerlink\" title=\"重新讀取 nginx 設定\"></a>重新讀取 nginx 設定</h3><p><img src=\"/artblog/load-balance-environment/2019-12-17_17-12-19.png\"></p>\n<h3 id=\"測試網站\"><a href=\"#測試網站\" class=\"headerlink\" title=\"測試網站\"></a>測試網站</h3><p><img src=\"/artblog/load-balance-environment/2019-12-17_17-13-34.png\"></p>\n<h2 id=\"Sample-Code\"><a href=\"#Sample-Code\" class=\"headerlink\" title=\"Sample Code\"></a>Sample Code</h2><p><a href=\"https://github.com/art-Blog/netcore-docker\">Github</a></p>\n","categories":["devOps"],"tags":["docker","nginx"]},{"title":"如何打包自己的 .net core 網站到 docker","url":"/artblog//deploy-netcore-website-to-docker/","content":"<p>第一個練習</p>\n<span id=\"more\"></span>\n\n<h3 id=\"建立範本網站\"><a href=\"#建立範本網站\" class=\"headerlink\" title=\"建立範本網站\"></a>建立範本網站</h3><p>利用 dotnet new web 指令快速建立一個.net core 網站範本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">建立一個.net core 網站範本，專案目錄為aspMVC</span></span><br><span class=\"line\">dotnet new web -o aspMVC</span><br></pre></td></tr></table></figure>\n\n<p>透過上述指令會建立一個可以執行的.net core 網站範本，在本次練習中就充當我們自己所開發的網頁</p>\n<h3 id=\"建立-dockerfile\"><a href=\"#建立-dockerfile\" class=\"headerlink\" title=\"建立 dockerfile\"></a>建立 dockerfile</h3><p>大致上就是先透過一個包含有 sdk 可以建置的容器去 build 專案，再將這個建置完的檔案拿去另一個 runtime 的容器佈署<br>容器的版本要能夠支援你的應用程式，在這邊我的測試網站是透過.net core 3.0 建立，所以選擇的 image 也是 3.0 版本</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 建置發行檔案</span></span><br><span class=\"line\"><span class=\"comment\"># copy 當前目錄檔案--&gt;容器內app目錄</span></span><br><span class=\"line\"><span class=\"comment\"># 到容器目錄app底下執行donet publish到 /app/out</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> mcr.microsoft.com/dotnet/core/sdk:<span class=\"number\">3.0</span> AS build</span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> . ./app/</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> dotnet publish -c Release -o out</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 佈署RUNTIME容器並執行網站</span></span><br><span class=\"line\"><span class=\"comment\"># 從build容器內複製build好的檔案至runtime容器</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> mcr.microsoft.com/dotnet/core/aspnet:<span class=\"number\">3.0</span> AS runtime</span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=build /app/out ./</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;dotnet&quot;</span>, <span class=\"string\">&quot;aspMVC.dll&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"建立-image\"><a href=\"#建立-image\" class=\"headerlink\" title=\"建立 image\"></a>建立 image</h3><p>建立好 dockerfile 之後，就是透過 docker build 指令讓 docker 依照我們設定好的指令建立 image</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -t myimage .</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>上述指令會執行當前目錄的 dockerfile 建立 image，並標記名稱為 myimage</p>\n</blockquote>\n<h3 id=\"建立-container\"><a href=\"#建立-container\" class=\"headerlink\" title=\"建立 container\"></a>建立 container</h3><ol>\n<li>使用 myimage 映像檔建立一個新的容器</li>\n<li>容器名稱為 mycontainer</li>\n<li>將容器的 80 port 對應至 本機的 8000 port</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --name=mycontainer -p 8000:80 myimage</span><br></pre></td></tr></table></figure>\n\n<p>如此一來，就可以開啟<code>http://localhost:8000</code>瀏覽網站</p>\n<h2 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h2><p>這邊都是從<a href=\"https://blog.johnwu.cc/article/docker-build-asp-net-core-image.html\">Docker 教學 - 打包 ASP.NET Core 前後端專案 Docker Image</a>看來的，文章含金量高，建議前往閱讀</p>\n<h3 id=\"外部傳入參數\"><a href=\"#外部傳入參數\" class=\"headerlink\" title=\"外部傳入參數\"></a>外部傳入參數</h3><p>透過外部傳入參數，這樣相同的專案大概都適用</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># build/build-image.dockerfile</span></span><br><span class=\"line\"><span class=\"comment\">### build stage</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> mcr.microsoft.com/dotnet/core/sdk:<span class=\"number\">3.0</span> AS build</span><br><span class=\"line\"><span class=\"keyword\">ARG</span> project_name</span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> ./src ./src</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /src</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> dotnet publish <span class=\"variable\">$project_name</span> -o /publish --configuration Release</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### publish stage</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> mcr.microsoft.com/dotnet/core/aspnet:<span class=\"number\">3.0</span> AS runtime</span><br><span class=\"line\"><span class=\"keyword\">ARG</span> project_name</span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=build /publish ./</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> project_dll=<span class=\"string\">&quot;$&#123;project_name&#125;.dll&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> dotnet <span class=\"variable\">$project_dll</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># sample:</span></span><br><span class=\"line\"><span class=\"comment\"># docker build -f build/build-image.dockerfile -t test --build-arg project_name=aspMVC .</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>上面的指令最坑的應該就是<code>ENV</code>那一行了，等於後面不要加上空格</p>\n</blockquote>\n<h3 id=\"編譯前端專案\"><a href=\"#編譯前端專案\" class=\"headerlink\" title=\"編譯前端專案\"></a>編譯前端專案</h3><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># build/build-image.dockerfile</span></span><br><span class=\"line\"><span class=\"comment\">### build stage</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> mcr.microsoft.com/dotnet/core/sdk:<span class=\"number\">3.0</span> AS dotnet-build-<span class=\"keyword\">env</span></span><br><span class=\"line\"><span class=\"keyword\">ARG</span> project_name</span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> ./src ./src</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /src</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> dotnet publish <span class=\"variable\">$project_name</span> -o /publish --configuration Release</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### Build Stage - npm</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> node:<span class=\"number\">11</span> AS npm-build-<span class=\"keyword\">env</span></span><br><span class=\"line\"><span class=\"keyword\">ARG</span> project_name</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">mkdir</span> -p /publish</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> npm <span class=\"built_in\">set</span> progress=<span class=\"literal\">false</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> ./src /src</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /src/<span class=\"variable\">$project_name</span></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"keyword\">if</span> [ -f <span class=\"string\">&quot;package.json&quot;</span> ]; <span class=\"keyword\">then</span> \\</span></span><br><span class=\"line\"><span class=\"language-bash\">        npm i; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">        npm run build; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">        <span class=\"keyword\">if</span> [ -d <span class=\"string\">&quot;wwwroot&quot;</span> ]; <span class=\"keyword\">then</span> <span class=\"built_in\">cp</span> -R wwwroot /publish; <span class=\"keyword\">fi</span>; \\</span></span><br><span class=\"line\"><span class=\"language-bash\">    <span class=\"keyword\">fi</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">### publish stage</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> mcr.microsoft.com/dotnet/core/aspnet:<span class=\"number\">3.0</span> AS runtime</span><br><span class=\"line\"><span class=\"keyword\">ARG</span> project_name</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=dotnet-build-env /publish .</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=npm-build-env /publish .</span></span><br><span class=\"line\"><span class=\"keyword\">ENV</span> project_dll=<span class=\"string\">&quot;$&#123;project_name&#125;.dll&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> dotnet <span class=\"variable\">$project_dll</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># sample</span></span><br><span class=\"line\"><span class=\"comment\"># docker build -f build/build-image.dockerfile -t test --build-arg project_name=aspMVC .</span></span><br><span class=\"line\"><span class=\"comment\"># docker run -d --name=mytest --rm -p 8002:80 test</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/deploy-netcore-website-to-docker/2019-12-10_15-01-37.png\"></p>\n<p>上圖就是在 node-build-env 中透過 webpack 處理前端程式的部分，相關依賴套件要先 npm install –save-dev，避免在 docker build 的時候出錯</p>\n<h3 id=\"快速清掉-build-時暫存的-stage-image\"><a href=\"#快速清掉-build-時暫存的-stage-image\" class=\"headerlink\" title=\"快速清掉 build 時暫存的 stage image\"></a>快速清掉 build 時暫存的 stage image</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">FOR /f &quot;tokens=*&quot; %i IN (&#x27;docker images -f &quot;dangling=true&quot; -q&#x27;) DO docker rmi -f %i</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Sample-Code\"><a href=\"#Sample-Code\" class=\"headerlink\" title=\"Sample Code\"></a>Sample Code</h2><p><a href=\"https://github.com/partypeopleland/netcore-docker\">GitHub：netcore-docker</a></p>\n","tags":["docker",".netCore"]},{"title":"如何發布自己的NPM套件","url":"/artblog//deploy-your-own-npm-package/","content":"<p>發布 npm 套件的紀錄</p>\n<span id=\"more\"></span>\n\n<h2 id=\"如何開始\"><a href=\"#如何開始\" class=\"headerlink\" title=\"如何開始\"></a>如何開始</h2><h3 id=\"版控\"><a href=\"#版控\" class=\"headerlink\" title=\"版控\"></a>版控</h3><p>初始化一個 Git 版控倉庫</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/deploy-your-own-npm-package/2019-11-13_11-21-38.png\"></p>\n<h3 id=\"建立版控忽略清單\"><a href=\"#建立版控忽略清單\" class=\"headerlink\" title=\"建立版控忽略清單\"></a>建立版控忽略清單</h3><p>此處透過<code>VSCode</code>套件<a href=\"https://marketplace.visualstudio.com/items?itemName=piotrpalarz.vscode-gitignore-generator\">.gitignore generator</a>產生，僅需要透過選取即可自動產生相關的清單</p>\n<p><img src=\"/artblog/deploy-your-own-npm-package/2019-11-13_11-25-44.png\"></p>\n<h3 id=\"建立-package-json-設定檔\"><a href=\"#建立-package-json-設定檔\" class=\"headerlink\" title=\"建立 package.json 設定檔\"></a>建立 package.json 設定檔</h3><p>透過預設值建立指令檔，之後再用編輯軟體開啟檔案修改</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/deploy-your-own-npm-package/2019-11-13_11-27-47.png\"></p>\n<p>關於發布比較重要的幾個設定，例如：</p>\n<ol>\n<li>程式進入點(main)，在這邊的程式定義了一開始你套件從哪一隻程式開始</li>\n<li>版本(version)，每一次發布的版本都需要更新</li>\n<li>版控(repository)，如果有填寫的話會在 NPM 套件資訊頁面顯示</li>\n</ol>\n<h2 id=\"如何撰寫套件\"><a href=\"#如何撰寫套件\" class=\"headerlink\" title=\"如何撰寫套件\"></a>如何撰寫套件</h2><p>透過 module.exports 匯出<br>利用 require 載入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foo.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = &#123;</span><br><span class=\"line\">  <span class=\"attr\">message</span>: <span class=\"string\">&quot;hello&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">getFoo</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; ...bar &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./foo.js&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = foo.<span class=\"title function_\">getFoo</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>記得模組匯出物件時，因為是傳參考，所以需要先複製物件輸出</p>\n</blockquote>\n<h2 id=\"如何發布套件\"><a href=\"#如何發布套件\" class=\"headerlink\" title=\"如何發布套件\"></a>如何發布套件</h2><p>發布到 NPM 的話會需要一個帳號，所以還沒有申請的話是無法發布的，申請完畢後只要在指令列打上</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm adduser</span><br></pre></td></tr></table></figure>\n\n<p>依照提示輸入帳號、密碼及相關資訊，就會在你的帳號底下新增一組 token，而這個 token 就會在你的電腦中，等到下次要發布就不需要再輸入帳密，在這邊假設已經開發完畢了一個套件，需要發佈到 NPM 其實也很簡單</p>\n<p><img src=\"/artblog/deploy-your-own-npm-package/2019-11-13_12-00-15.png\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在package.json目錄下輸入</span></span><br><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/deploy-your-own-npm-package/2019-11-13_12-01-25.png\"></p>\n<p>程式就會自動替你將套件發布上去 NPM 了，稍後就可以在 NPM 個人帳號的 package 找到</p>\n<h3 id=\"如何架設私有-registry\"><a href=\"#如何架設私有-registry\" class=\"headerlink\" title=\"如何架設私有 registry\"></a>如何架設私有 registry</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull verdaccio/verdaccio</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d -v:/data/verdaccio/storage:/verdaccio/storage --name verdaccio -p 4873:4873 verdaccio/verdaccio</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">替換 registry</span></span><br><span class=\"line\">npm config set registry http://localhost:4873/</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">輸入帳號、密碼新建一個使用者登入</span></span><br><span class=\"line\">npm adduser</span><br></pre></td></tr></table></figure>\n\n<p>替換 registry 後，若日常 npm 使用有問題，建議還是透過 <code>npm config edit</code> 指令重設 registry</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">registry=https://registry.npmjs.org/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何更新套件\"><a href=\"#如何更新套件\" class=\"headerlink\" title=\"如何更新套件\"></a>如何更新套件</h2><h3 id=\"更新package-json的-version-版本號碼\"><a href=\"#更新package-json的-version-版本號碼\" class=\"headerlink\" title=\"更新package.json的 version 版本號碼\"></a>更新<code>package.json</code>的 version 版本號碼</h3><p>你可以透過手動變更<code>package.json</code>，也可以透過<code>npm version &lt;update_Type&gt;</code>的指令<br><img src=\"/artblog/deploy-your-own-npm-package/2019-11-13_12-18-04.png\"></p>\n<h3 id=\"重新執行npm-publish\"><a href=\"#重新執行npm-publish\" class=\"headerlink\" title=\"重新執行npm publish\"></a>重新執行<code>npm publish</code></h3><h2 id=\"如何使用套件\"><a href=\"#如何使用套件\" class=\"headerlink\" title=\"如何使用套件\"></a>如何使用套件</h2><p>當套件已經發布上去之後，別的專案要使用可以直接透過下面的指令就可以自動下載套件了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install &lt;PACKAGE_NAME&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/deploy-your-own-npm-package/2019-11-13_12-04-23.png\"></p>\n<p><img src=\"/artblog/deploy-your-own-npm-package/2019-11-13_12-06-55.png\"></p>\n<h2 id=\"如何取消發布\"><a href=\"#如何取消發布\" class=\"headerlink\" title=\"如何取消發布\"></a>如何取消發布</h2><p>如果需要撤銷發布，只要輸入下列指令即可，但是請確保是在發布後 72 小時之內做這件事情</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm unpublish &lt;PACKAGE_NAME&gt; --force</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/deploy-your-own-npm-package/2019-11-13_12-10-13.png\"></p>\n<p>因為套件發布之後，可能會有人下載使用，如果有其他人依賴你的套件，就會有問題，因此官方對於撤銷發布是不建議的，也因此有很多限制</p>\n<p>關於官方對此的政策，可參考<a href=\"https://www.npmjs.com/policies/unpublish\">npm Unpublish Policy</a></p>\n","categories":["javascript"],"tags":["npm"]},{"title":"差集運算","url":"/artblog//difference-operation/","content":"<p>差集運算指的是兩份清單中，不一樣的部分；依照A差集B，或是B差集A，會有不同的結果</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>忘了在哪邊看到的，大概就是【我有的你沒有】這樣的概念，朗朗上口挺好記</p>\n</blockquote>\n<p>這邊可以看一下<a href=\"https://zh.wikipedia.org/wiki/%E8%A1%A5%E9%9B%86\">WIKI</a>上面的圖可能會比較好理解一點</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"> \t<span class=\"keyword\">var</span> list1 = <span class=\"keyword\">new</span>[] &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> list2 = <span class=\"keyword\">new</span>[] &#123; <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = list1.Except(list2).ToArray();</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"built_in\">string</span>.Join(<span class=\"string\">&quot;,&quot;</span>, array); <span class=\"comment\">// 1,2,3</span></span><br></pre></td></tr></table></figure>\n\n<p>但是如果今天要比較計算的是物件，就不能直接用Except來做了，需要告訴程式怎麼樣去比較物件，透過繼承IEqualityComparer來實作比較的方法，下面是LINQPAD的範例</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Main</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> list1 = <span class=\"keyword\">new</span> List&lt;User&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User &#123;Name = <span class=\"string\">&quot;AAA&quot;</span>, Age = <span class=\"number\">20</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User &#123;Name = <span class=\"string\">&quot;BBB&quot;</span>, Age = <span class=\"number\">20</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User &#123;Name = <span class=\"string\">&quot;CCC&quot;</span>, Age = <span class=\"number\">20</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User &#123;Name = <span class=\"string\">&quot;DDD&quot;</span>, Age = <span class=\"number\">20</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User &#123;Name = <span class=\"string\">&quot;EEE&quot;</span>, Age = <span class=\"number\">20</span>&#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> list2 = <span class=\"keyword\">new</span> List&lt;User&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User &#123;Name = <span class=\"string\">&quot;DDD&quot;</span>, Age = <span class=\"number\">20</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User &#123;Name = <span class=\"string\">&quot;EEE&quot;</span>, Age = <span class=\"number\">20</span>&#125;,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User &#123;Name = <span class=\"string\">&quot;FFF&quot;</span>, Age = <span class=\"number\">20</span>&#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = list1.Except(list2, <span class=\"keyword\">new</span> UserEqualityComparer()).ToList();</span><br><span class=\"line\">\tresult.Dump();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Define other methods and classes here</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">UserEqualityComparer</span> : <span class=\"title\">IEqualityComparer</span>&lt;<span class=\"title\">User</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">Equals</span>(<span class=\"params\">User x, User y</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x.Name == y.Name &amp;&amp; x.Age == y.Age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">GetHashCode</span>(<span class=\"params\">User obj</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> name = obj.Name == <span class=\"literal\">null</span> ? <span class=\"number\">0</span> : obj.Name.GetHashCode();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> age = obj.Age.GetHashCode();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name ^ age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Age &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["csharp"],"tags":["linq"]},{"title":"網站登入實作","url":"/artblog//login-website/","content":"<p>網站登入的實際範例，本次參考資料：<a href=\"https://www.cnblogs.com/KingJaja/p/5234290.html\">[ASP.NET] ASP.NET Identity 中 ClaimsIdentity 解析</a></p>\n<span id=\"more\"></span>\n\n<p>下列範例中僅有關鍵部分，細節都略去了，如果還要甚麼登入 Log、IP 判斷，就自行再找地方加上去吧</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在登入之前先將使用者登出</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (User.Identity.IsAuthenticated)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// SignOut這裡的字串最好用常數字串來處理，避免手誤跟別的地方key不一樣發生各種靈異事件</span></span><br><span class=\"line\">    AuthenticationManager.SignOut(DefaultAuthenticationTypes.ApplicationCookie);</span><br><span class=\"line\">    Session.Clear();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 驗證使用者登入帳號、密碼，通過驗證則返回 User DTO；失敗返回 null</span></span><br><span class=\"line\"><span class=\"comment\">// 驗證使用者登入的部分，可實作多種驗證方式，例如 AD 或是普通的帳號密碼</span></span><br><span class=\"line\"><span class=\"comment\">// 此處範例僅用普通的驗證帳密</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isVeryUser(account,password))&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> identity = <span class=\"keyword\">new</span> ClaimsIdentity(</span><br><span class=\"line\">    <span class=\"keyword\">new</span>[]</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Claim(ClaimTypes.NameIdentifier, id.ToString()),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Claim(ClaimTypes.Name, name),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Claim(<span class=\"string\">&quot;Account&quot;</span>, account),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Claim(ClaimTypes.Email, email),</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    DefaultAuthenticationTypes.ApplicationCookie);</span><br><span class=\"line\">    AuthenticationManager.SignIn(identity);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.RedirectToAction(<span class=\"string\">&quot;Index&quot;</span>, <span class=\"string\">&quot;Home&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 登入失敗，返回原登入頁面</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.View(loginForm);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":["csharp"],"tags":["identity"]},{"title":"讀書心得 Working Effectively with Legacy Code","url":"/artblog//Working-Effectively-with-Legacy-Code/","content":"<p>這一本書原本已經絕版了，最近才又由出版社拿到版權，很多人評價這本書是非常值得閱讀的，趁這次機會買下來好好用功一下，寫個讀書心得</p>\n<span id=\"more\"></span>\n\n<h2 id=\"part-1-修改機制\"><a href=\"#part-1-修改機制\" class=\"headerlink\" title=\"part 1 修改機制\"></a>part 1 修改機制</h2><h3 id=\"CH1-修改軟體\"><a href=\"#CH1-修改軟體\" class=\"headerlink\" title=\"CH1 修改軟體\"></a>CH1 修改軟體</h3><p>這一篇比較枯燥，大概就是講一些理論，定義了何謂添加新功能、修改 Bug；從這一章可以知道軟體開發大部分的情況下，我們是不會去針對已經存在的功能做出改變，除了修 Bug 之外。<br>不論是重構、加新功能、還是進行最佳化，都不會(也不應該)影響到既有的功能，這個概念是一切的基礎。</p>\n<h3 id=\"CH2-帶著回饋工作\"><a href=\"#CH2-帶著回饋工作\" class=\"headerlink\" title=\"CH2 帶著回饋工作\"></a>CH2 帶著回饋工作</h3><p>開頭利用情境來闡述目前業界普遍針對修改系統的工作方式：Edit and Pray；然後再換另一個情境來比較。緊接著開始探討甚麼是單元測試，並且單元測試應該具備的元素。<br>在這一篇我覺得比較需要記得的就是單元測試應該要能夠幫助你將錯誤定位出來。這個是很重要的。<br>不論是以往大神授課，還是自己在單元測試，都會提到一個單元測試最好只測試一件事情。</p>\n<blockquote>\n<p>當這個單元測試失敗的時候，你應該要知道去哪裡修正它</p>\n</blockquote>\n<p>在後續的文章也提供了一個簡單的情境範例，說明在單元測試中，相依類別如何進行測試，解依賴的過程。在這一篇我覺得譯者說的很棒，有關於樸素化的解釋，雖然翻譯的還是有點怪怪的，但是在譯者的說明中，我能夠完全理解樸素化的意思，在透過建構式注入相依類別的時候，這就會讓類別相依另外一個類別，如果我們只是需要其中的某個資料，那就直接傳入該資料就好了。</p>\n<blockquote>\n<p>並不是將傳入參數簡化為基本類型，而是要用多少就給多少</p>\n</blockquote>\n<p>所以其實這一章的重點就是在告訴我們，怎麼樣帶著回饋工作 (feedback)：透過單元測試<br>如何針對遺留代碼進行單元測試，書中給出一個流程：</p>\n<ol>\n<li>確定變動點</li>\n<li>找出測試點</li>\n<li>解依賴</li>\n<li>邊寫測試</li>\n<li>修改、重構</li>\n</ol>\n<p>至於細節、技巧，如何達成，則是在後續的章節說明</p>\n<h3 id=\"CH3-感測和分離\"><a href=\"#CH3-感測和分離\" class=\"headerlink\" title=\"CH3 感測和分離\"></a>CH3 感測和分離</h3><p>我想這一章節的重點應該是用範例來解釋假物件以及如何驗證這件事情，書中的範例我其實有點難理解，但是其實因為對單元測試也摸了一陣子，大概是能夠接收到書中的範例，期望用一個情境來帶出來測試的困難，然後利用相依於介面及職責分離這些 OOP 原則，透過注入的方式將控制反轉，這樣，我們就可以做一個假物件來繼承介面，從而驗證原本難以測試的功能</p>\n<p>我猜，這些範例最重要的事情就是提供一個 Stub 與 Mock 的範例及思路，這對於測試是非常重要的</p>\n<h3 id=\"CH4-接縫模型\"><a href=\"#CH4-接縫模型\" class=\"headerlink\" title=\"CH4 接縫模型\"></a>CH4 接縫模型</h3><p>這一章有一個很精采的重點，在 Production Code 需要執行，但測試時卻不希望因為執行某行程式而帶來副作用，書中直接使用了繼承+複寫的技巧，這一招適用的情境可不少。</p>\n<blockquote>\n<p><code>接縫(Seam)</code>這一個名詞。在程式中某一些特殊的點，無需做任何修改就可以達到變動程式行為的目的。</p>\n</blockquote>\n<p>有點饒舌，但是大概的意思就是可以針對軟體的行為進行變動，且不需要異動到 Production Code，這是解除依賴關係的一個很重要的技巧。</p>\n<p>因為這個是非常重要的技能(就像是電玩遊戲的【弱點識破】這種感覺)，只要找出來這個點，就可以針對這一份 code 進行測試的一些動作，所以書中也針對這個舉出一些範例供參考</p>\n<h3 id=\"CH5-工具\"><a href=\"#CH5-工具\" class=\"headerlink\" title=\"CH5 工具\"></a>CH5 工具</h3><p>在實際針對 legacy code 進行重構之前，我們應該要先準備一些工具幫助我們，目前很多主流語言應該都有一些配套的方案可以用，據我所知，在 C#的部分就有 rider 與 VS 系列 IDE 可用，這些 IDE 最大的作用就是讓你改完 Code，可以 Build，然後可以採用喜歡的測試框架，撰寫測試。如果是像我一樣的入門者，應該就是直接使用 Visual Studio 2019 搭配 MsTest 來做了吧。</p>\n<p>手動重構是沒問題的，但是總是效率較低下，且可能失誤；VS 也有內建一些簡單的重構功能，像是 Rename 等等，但是 Resharper 這套來做重構，在重構工具的這部分就不多著墨。但是書中有特別給了一個範例，稍微說明了一下重構工具或許也會改變軟體的行為，雖然我不知道現在的工具會不會這樣(這本書有點年代了)，但是重構前後的程式碼當然還是要看過一次，知道工具幫你做了哪些事情是很必要的，而不是像施展了軟體黑魔法一下，只看結果不看過程。</p>\n<h2 id=\"part-2-修改程式碼的技術\"><a href=\"#part-2-修改程式碼的技術\" class=\"headerlink\" title=\"part 2 修改程式碼的技術\"></a>part 2 修改程式碼的技術</h2><h3 id=\"CH-6-時間緊迫，但必須修改\"><a href=\"#CH-6-時間緊迫，但必須修改\" class=\"headerlink\" title=\"CH 6 時間緊迫，但必須修改\"></a>CH 6 時間緊迫，但必須修改</h3><p>在 real world 的情況下，常常會碰到的情況就是這樣，這一章節介紹了幾種對既有系統影響最少的方法來進行程式碼的調整，其重點就在於盡量不要對既有程式碼做太多的變動，而是撰寫新的程式碼來達成需求，文中介紹的<code>新生方法</code>、<code>新生類別</code>；<code>外覆方法</code>、<code>外覆類別</code>都有詳細的介紹及範例，如果還不熟悉的話，可以研讀一下範例，並了解一下各種方式的優缺點，其實這一段如果是熟悉設計模式的人，應該會很容易理解；因此也可以視為物件導向的一些 pattern 應用範例來看。</p>\n<blockquote>\n<p>盡量將新撰寫的程式碼與舊的程式碼區別開來之外，很重要的一點是替新撰寫的部份加上測試保護，逐漸將整個系統納入受保護的範圍之內。</p>\n</blockquote>\n<h3 id=\"CH-7-漫長的修改\"><a href=\"#CH-7-漫長的修改\" class=\"headerlink\" title=\"CH 7 漫長的修改\"></a>CH 7 漫長的修改</h3><p>維護 legacy code 的時候，往往需要先對程式碼進行理解後，才能開始著手修改，而從程式碼反推回去 knowhow 的部分，總是最困擾我的，如果再加上獲取回饋的時間太久，開發會變得異常困難。所以在開發過程，如果能夠即時得到代碼的回饋，能夠快速地知道修改代碼之後的結果，無疑是非常有幫助的。</p>\n<p>若是需要快速得到程式碼的回饋，當然最好是能夠針對類別來單獨做測試，所以這個章節著重在解依賴這一部分，如果需要針對某個類別進行測試，而該類別又相依於其他實體類別，通常可以將相依的實體類別抽象介面，而被測試類別就可以改為相依於介面而非實作，在測試中就可以針對介面新建一個假的物件，並注入給被測試類別，就能夠解開依賴關係。</p>\n<p>後續可以在針對這些類別作重構，將這些類別分在不同的專案，彼此間的關係都利用介面來隔開，對於系統的穩定是有很大的幫助，雖然代價是複雜度會上升，找東西會花比較久，但通常找到之後，調整會變得更加順利，要比較有感覺的話，應該就是專案分層的概念，將系統的實作切成<code>module</code>、<code>DAO</code>、<code>DTO</code>、<code>DAC</code>、<code>adapter</code>幾個部份，當今天需要切換某個搜尋引擎的資料來源，僅需要新增加一個實作該搜尋引擎介面的類別，並將<code>factory</code>指向該類別，或是由設定檔來做切換，程式的修改點就只會有<code>factory</code>，既有的程式就不會動到，而新撰寫的搜尋類別也可以撰寫新的測試。</p>\n<blockquote>\n<p>前提是要先學好物件導向</p>\n</blockquote>\n<h3 id=\"CH-8-添加特性\"><a href=\"#CH-8-添加特性\" class=\"headerlink\" title=\"CH 8 添加特性\"></a>CH 8 添加特性</h3><p>添加新功能，在這個章節著重介紹了 TDD 技術，這個章節將 TDD 的步驟用範例的方式說明，對於初學者來說是一個很棒的例子。</p>\n<p>除了耳熟能詳的 TDD 循環之外，也提到了差異式程式設計，而這種方法透過繼承的方式來處理需求，這樣的開發方式經過時間的驗證，是很容易造成過度複雜的繼承關係與爆炸的子類別，對於理解系統的困難度也會增加。</p>\n<p>不過甚麼技術其實都是一體兩面，有好也有壞處，好處是能夠讓你非常快速的通過測試，並且未來可以再透過別的方式進行重構；在實務上，其實也有很多不得已的因素，也許當下就真的只能用繼承來完成需求</p>\n<blockquote>\n<p>老話再說一次：每一種技術都有它適用的情境，也許今天來看是很糟糕的程式，在當時的時空背景就是最佳解。</p>\n</blockquote>\n<h3 id=\"CH-9-無法將類別放入測試控制工具之中\"><a href=\"#CH-9-無法將類別放入測試控制工具之中\" class=\"headerlink\" title=\"CH 9 無法將類別放入測試控制工具之中\"></a>CH 9 無法將類別放入測試控制工具之中</h3><p>這一章提到一個觀念與一般開發的習慣有些衝突，其實在一般開發與測試程式之間，他們的一些標準是不同的，文中舉例，以假的 Connection 物件來說明，該物件是為了讓被測試類別能夠順利執行才建立的，這個假的 Connection 物件並不會出現在 Production Code，其實這也是之前上課常常被提醒到的觀念之一</p>\n<p>另外，也建議了一個方式，如果被測試類別需要一些物件才能夠運作，可以考慮先丟個 null 進去吧，等到執行時如果真的需要該物件，程式會報錯，屆時再去處理也不遲，這不就是<strong>撞到有聲</strong>的概念嗎？挺好笑的但也很實在。這是一個值得記住的小技巧</p>\n<blockquote>\n<p>這樣的技巧僅適用於 Java 與 C#這類，在 RUNTIME 時期會針對 null 參照拋出例外的語言，所以最好別用在 C 與 C++中</p>\n</blockquote>\n<p>但是正確的觀念是，在 Production code 的部分，盡量不要將 null 值傳來傳去，如果真有必要，請考慮改用 Null Object Pattern</p>\n<p>接著再次介紹了一下<strong>繼承與複寫</strong>這個技巧，這真的是一個很有效的解依賴手段</p>\n<p>然後就是一連串的舉例與觀念介紹，說實在的，一堆名詞看得頭昏眼花，例子從 C 語言到 java 都有，大概看一下就略過細節，總結重點就是舉了一些 legacy code 的例子，說明應該要怎麼設計，從可能存在於系統的各種依賴、建構式、全域變數、包含依賴，然後接著又是舉例 legacy code 中可能存在的物件包物件的參數，稱之為洋蔥參數。</p>\n<p>大致上的解依賴手法都是繼承、複寫、提取介面等等，相信有過一些物件導向開發經驗的人都能夠有所體悟</p>\n<p>包含依賴的感覺就像是 asp 常常會用到的#include 語法，如果一個檔案前面給你#include 了 100 行，然後存在一個 class，要如何將該 class 抓出來單獨寫測試，這無疑是一個很具備挑戰性的事情，因為現在主要開發的語言都沒有這個包含依賴的用法，這一節我直接略過。</p>\n<p>過去的 asp 時代就給他過去吧</p>\n<p>總結，這章超級硬，如果要仔細看，請確保是在精神良好睡眠充足的情況下閱讀</p>\n<h3 id=\"CH-10-無法在測試控制工具中執行方法\"><a href=\"#CH-10-無法在測試控制工具中執行方法\" class=\"headerlink\" title=\"CH 10 無法在測試控制工具中執行方法\"></a>CH 10 無法在測試控制工具中執行方法</h3><p>其實意思就是說如果你的方法無法順利地在測試中呼叫的話該怎麼辦？</p>\n<p>看到這邊我想大家應該都清楚了，這本書的標題是拿來做甚麼用的？沒錯，他就是給你拿來當作參考書用的</p>\n<p>當你發現撰寫測試卡住的時候，搜尋一下標題，接著找到該章節，進去看看文章的解說，查查看有沒有你可以用得上的建議。這個章節列出了一些可能讓你無法順利測試的原因，並且如這本書的風格一樣，告訴你應該怎麼做的同時，也告訴你為甚麼應該這樣做。</p>\n<p>當然，有些地方翻譯的還不是很通順，需要多看幾次才能夠理解。</p>\n<h3 id=\"CH-11-修改時應當測試哪些方法\"><a href=\"#CH-11-修改時應當測試哪些方法\" class=\"headerlink\" title=\"CH 11 修改時應當測試哪些方法\"></a>CH 11 修改時應當測試哪些方法</h3><p>當修改程式的時候，你修改的地方很有可能會連帶影響到其他地方的程式碼造成連鎖影響，書中花了不少篇幅在解釋這件事情，其實就是<code>蝴蝶效應</code>四個字而已。<br>書籍中介紹了一種<code>影響草圖</code>的東西(或稱影響結構圖)，不過我覺得現代的 IDE 已經很進步了，雖說無法完全的呈現修改影響到的地方，但是其實在<code>Rider</code>或是<code>VisualStudio2019</code>都有快捷鍵可以知道某個方法被哪裡呼叫、某個方法的定義在哪，這些其實都已經很方便了，配合全專案字串搜尋的方式更是可以找到不少相關的資訊，用習慣了也很快速，所以其實我沒有很在意影響草圖，知道有這麼一件事情就好了。</p>\n<p>不過將草圖畫完整的話，可以直觀的看到彼此間的關係，也不錯，至少可以很快速地看到哪一個東西被很多線連到，那在修改他的時候就要很小心；但是實務上應該沒啥機會用到，有那時間畫圖、事情都不知道做多少去了…</p>\n<p>這一章節用 Java 的例子來解釋要怎麼查某個變數的值從哪裡來，在我看來是有點浪費篇幅，感覺就是想要模擬一段程式去追 Code，但是我很難從模擬的情境中感同身受，可能對從來沒有寫過程式的人會有效吧，但是曾經動手寫過 Code 的人應該都不太需要看他怎麼追 Code……</p>\n<p>好吧，至少我個人而言，第一個小節我只需要看標題就夠了：<strong>推測程式碼修改所產生的影響</strong>，請與 CH11 的章節名稱一起搭配服用，效果更佳</p>\n<p>第二個小節叫做：<strong>前向推測</strong>，模擬了一個暫存類別，給出程式碼並告訴我們需求：類別<code>InMemoryDirectory</code>可以添加元素，產生索引，並存取其中的元素。接著就是解釋調整需求，然後就是程式碼細節還有影響草圖的繪製過程 blah~ blah~ blah~</p>\n<p>好了，最後就是重點，草圖畫了那麼多，那到底要在哪寫測試？其實就是從這些地方去自行選擇。</p>\n<p>我覺得這一章節理論性質比較重，除了解釋<code>影響草圖</code>這件事情；還花很多篇幅告訴你怎麼從程式碼跟需求，畫出<code>影響草圖</code>；而<code>影響草圖</code>範圍的多寡，很大一部分取決於開發人員的物件導向觀念、以及是否有良好的開發習慣、或者說是團隊開發規範。</p>\n<blockquote>\n<p>最終還是你自己要決定哪一個東西該測</p>\n</blockquote>\n<h3 id=\"CH-12-在同一個地方進行多處修改，是否應該將所有相關的類別都解依賴\"><a href=\"#CH-12-在同一個地方進行多處修改，是否應該將所有相關的類別都解依賴\" class=\"headerlink\" title=\"CH 12 在同一個地方進行多處修改，是否應該將所有相關的類別都解依賴\"></a>CH 12 在同一個地方進行多處修改，是否應該將所有相關的類別都解依賴</h3><p>這個標題實在是有點難懂，仔細看看章節一開頭的說明，感覺大概就是：如果你要測試卻發現有很多地方都要調整，而且要花很久的時間，那是不是一定要照著之前教的，一步步解開依賴才能將測試安置到位呢？不是的，這裡有偷吃步告訴你；就像是不鼓勵直接針對 private 測試一樣，如果你很想測試 prviate 方法，會往後退一層，找到呼叫該 private 方法的 public 方法進行測試，這樣一來，我們只需要測試公開方法，就會覆蓋到私有方法了，這邊是一樣的道理，你可以用這樣的概念，去測試那些很難直接拉出來做單元測試的東西</p>\n<p>其實這也就是一個測試覆蓋的概念，說穿了沒甚麼，但是這邊要特別注意的一個觀念是，這樣的方式當然還是不能夠作為真正的解決方案，在有空閒的時候，你還是需要按部就班地完成單元測試；這裡的偷吃步只是一個鋪墊，一個讓你可以先建構測試保護，有了安全網之後，就可以大刀闊斧地調整程式碼了。這章節主要的概念是這樣，接下來談的都是細節，如何做，這裡的解釋我實在是沒耐心看，因為它用了很理論、文言的方式去說，我嘗試著去理解他的說明，但我真的沒有辦法很順利地明白理解他要說的東西，可能要等到二刷、三刷這本書的時候才能較好的理解吧，這邊的實際步驟，細節我還沒法內化，這裡的核心就是透過理論，建議你這個攔截點應該怎麼決定比較好，這幾個名詞可能要先看一下</p>\n<ol>\n<li>修改點</li>\n<li>攔截點</li>\n<li>匯點</li>\n</ol>\n<p>對於這些名詞我雖然有自己的想法，但自認沒有很理解這一章節，所以保守一點不發表心得，有興趣的人再自己看書吧，如果跟我一樣沒有很在乎實作細節的人，我們吸收觀念就好，那麼重點就在於這一章節的最一開頭，以及最後的兩頁結尾的部分，就像我上面說的，這邊就是先做個測試保護，然後再有時間的時候，換成單元測試</p>\n<h3 id=\"CH-13-修改時應該怎樣寫測試\"><a href=\"#CH-13-修改時應該怎樣寫測試\" class=\"headerlink\" title=\"CH 13 修改時應該怎樣寫測試\"></a>CH 13 修改時應該怎樣寫測試</h3><p>我們撰寫測試的時候，通常都是為了要確認我們的程式應該要有的行為。</p>\n<p>TDD 方法是先預期，然後去滿足，所以開發途徑是很有目標性的；而開發完畢後，這些測試就等於保護網，因為它確保了我們軟體應該要做到的事情；但是在遺留程式碼撰寫測試的時候，我們首先要搞清楚的事情是，我們的程式碼<code>目前</code>能做到什麼？</p>\n<p>作者將保持這些行為的測試稱之為<code>特徵測試</code>，這些測試主要的目的是為了明確的描述系統目前的實際行為是甚麼，而不是<code>我猜測結果應該會是怎樣怎樣</code>，簡單的來說，就是你先寫一個測試，看看實際的執行結果是甚麼，然後把結果填寫回去 expected，這樣測試通過之後，這個測試就是一個安全防護，在你之後針對 production code 的修改，它都可以維持程式碼先前的特徵，確保你的修改不會改變程式碼的行為</p>\n<p>那這樣子要寫多少測試呢？當然就是去看你的 production code，想辦法理解程式碼的行為，並嘗試幫這些行為的特徵撰寫測試</p>\n<h3 id=\"CH-14-棘手的函式庫依賴問題\"><a href=\"#CH-14-棘手的函式庫依賴問題\" class=\"headerlink\" title=\"CH 14 棘手的函式庫依賴問題\"></a>CH 14 棘手的函式庫依賴問題</h3><p>這章節開頭給的模擬情境是假設你的專案依賴外部套件，而這些套件的授權費用一年比一年高，的確是噩夢啊；先不要講版稅，對於外部套件依賴程度過高，如果套件還是非開源的，那的確是很危險的事情，這邊書裡面給了一個建議，避免直接對這些東西直接呼叫，很重要，切記，請遵循<code>針對介面設計軟體</code>這句話</p>\n<p>這一章節很短，就只有兩頁，說真的我不是很清楚這個章節的用意，在遺留程式碼中的外部依賴函式庫？我幹嘛要針對他們做測試呢？如果有必要，我就用 mock 來模擬它們的回傳值就好了啊；但我想這章節應該重點在提醒我們，如果遇上了外部函式庫，我們有甚麼可以做的，有提供介面最好，沒提供，就是裝飾模式了：這裡有提到如果外部函式庫把具體的類別設定為<code>final</code>、<code>sealed</code>，讓我們無法去 mock，所以我們能做的也只能寫一個對應的外覆類別，如果忘記了什麼是外覆類別，回去參考一下<code>CH6</code>，簡單說就是裝飾模式。</p>\n<p>對於外部函式庫，我的想法就是拿來用就好了，有問題的話我就換一個，沒得換就是裝飾模式或自己硬幹，實務上我不曾碰到這樣的情境，因此也沒甚麼特殊的感想</p>\n<h3 id=\"CH-15-到處都是-API-呼叫\"><a href=\"#CH-15-到處都是-API-呼叫\" class=\"headerlink\" title=\"CH 15 到處都是 API 呼叫\"></a>CH 15 到處都是 API 呼叫</h3><p>這章節一開始先點出了很多系統面臨的情境，並且實際上給出了一段很糟糕的程式碼，然後後面就是對這段程式的重構思路及步驟</p>\n<ol>\n<li>了解這段程式碼在幹嘛</li>\n<li>職責分離</li>\n<li>設計介面、方法</li>\n</ol>\n<blockquote>\n<p>書中的範例程式碼這段不用自己看 Code，因為在後面有整理了說明，但如果你想，也可以自己對照程式碼瀏覽，但我基本上略過不看，有很大的原因是因為我懶，其次是因為它是 Java 的 Code</p>\n</blockquote>\n<p>那接下來要怎麼樣把我們的設計，重構<code>legacy code</code>呢？</p>\n<ol>\n<li>剝離並外覆 API</li>\n<li>根據職責提取</li>\n</ol>\n<p>這一章節我覺得主要是在教怎麼重構有外部函式庫的程式碼，我有些能看懂也有些看得很糊塗，但我不擔心最後該怎麼重構，因為書中的建議也都是基於物件導向，設計模式給出的建議，大家就活學活用吧</p>\n<h3 id=\"CH-16-對程式碼的理解不足\"><a href=\"#CH-16-對程式碼的理解不足\" class=\"headerlink\" title=\"CH 16 對程式碼的理解不足\"></a>CH 16 對程式碼的理解不足</h3><p>這章節介紹了一些簡單的方法，讓你在理解程式碼的路上有一些幫助，經歷前面兩三個章節，這一章應該算是中場休息一下</p>\n<ol>\n<li>畫草圖：說真的光看這圖我還真看不懂，但其實只要討論的人能看懂大概的思路就行了，我自己的經驗是前公司有一位同事，他在說明、討論的時候往往會利用白板，隨手畫出某些主體，然後程式碼在這幾個主體當中是怎麼流動、運作的，那些草圖換個時空背景應該就沒人懂了，但當下對於溝通的確是很有幫助</li>\n<li>清單標註：<ul>\n<li><strong>職責分離</strong>：在程式碼可以用不同的顏色標記起來，這個我覺得有點扯，因為現在大家應該都是在編輯器、IDE 裡面看 Code，我沒看到有哪款軟體提供這個功能，只是為了標記程式碼的顏色，但其實他的用意只是在程式碼當中區分那些是相關職責的，通常我在重構的時候會把相同的東西放在一起，然後前面打上一個簡單的註解，中間再多空幾行來隔開</li>\n<li><strong>理解方法結構</strong>：快速讓人理解程式碼的結構，其實就是<code>縮排</code>，但是現在的工具其實都有自動格式化，如<code>eslint + vscode</code>的組合可以處理<code>javascript</code>；Intellij 系列的工具與微軟 Visual Studio 2019 也都有這些功能；所以應該很少見了，當然書裡面給的建議還是有用的，因為以往我開發好幾年的 <code>asp</code>就曾因為排版這件事情，好幾次在調整程式碼之前，先將整份 asp 程式碼花幾個小時整理好縮排。</li>\n<li><strong>方法提取</strong>：其實我想將這一點改為<code>善用重構技巧</code>，理解某段職責後將其抽取方法出來，弄成一段一段的小函式，細節就去看其他的重構書吧，這個要說說不完</li>\n<li><strong>理解你的修改所產生的影響</strong>：簡單說就是像標題這樣，你需要知道你的調整會影響那些東西，相關的方法書裡面有說，但我覺得我不會用他</li>\n</ul>\n</li>\n<li>草稿式重構：我覺得這個很有趣，也就是先從版控抓出程式，然後大刀闊斧地動手重構，但是不要儲存結果；在這樣的過程當中，可以加深對於程式碼的理解，從而為下一次的重構打好基礎</li>\n<li>刪除不用的程式碼：這個也是很重要的一件事情，有的時候因為種種原因，會有一些用不到的程式遺留下來，可能是錯誤的註解；可能是沒有上線的功能；不論是怎樣的原因，他現在沒有用，那就刪除吧，如果你要說那個程式碼未來有可能會用到，那就從之前的版控紀錄去查看就好了</li>\n</ol>\n<h3 id=\"CH-17-程式毫無結構可言\"><a href=\"#CH-17-程式毫無結構可言\" class=\"headerlink\" title=\"CH 17 程式毫無結構可言\"></a>CH 17 程式毫無結構可言</h3><p>通常程式的結構在初期都是設計良好的，但隨時間經過，可能因為種種因素導致專案日漸複雜，在不同的時空背景下，可能礙於時間、團隊成員技術能力而被迫讓程式碼產生了更多的<code>bad smell</code></p>\n<p>這章節我覺得要畫重點的就是<strong>講解系統的故事</strong>。這節用了<code>Junit的架構</code>來做為範例，用好幾頁的篇幅來列出<code>簡略版的描述</code>，然後把一些細節在下面列出，作為描述的<code>隱瞞的事實</code>，這樣的手法其實只是為了讓架構經由簡略的述說，強迫你抽象出來，省略掉細節，這有個好處，是能讓你更了解系統，但是好處不僅僅是這樣；在需要修改系統的時候，可以先嘗試著修改剛剛的<code>簡略描述</code>，並思考若是修改點放在這個地方是否比較合適，書裡面講的有點難懂，但是意義有表達到，相信不明白的人多看幾次也能看懂；這的確是一個不錯的方法，而且我相信大多數的工程師其實歷練兩三年後，也能自動獲得這項技能</p>\n<p>至於其他的，<strong>Naked CRC</strong>有點像是<code>CH16</code>的<code>畫草圖</code>；而<strong>反省你們的交流或討論</strong>其實意義就是字面上的那樣，要三思而後行</p>\n<h3 id=\"CH-18-測試程式碼礙手礙腳\"><a href=\"#CH-18-測試程式碼礙手礙腳\" class=\"headerlink\" title=\"CH 18 測試程式碼礙手礙腳\"></a>CH 18 測試程式碼礙手礙腳</h3><p>看這章的時候很自然的聯想到小朋友的童書，說的內容是小朋友玩具亂丟，讓爸爸踩到，所以我們東西要收好喔~作者在這章節就是在幹一樣的事情，跟我們說程式碼要分門別類放好，否則會很容易踩到喔(笑)。這章節說的都是管理測試程式碼的東西，作者給出了他自己的建議與習慣供參考，當然這些東西都是可以改的，純粹是看人</p>\n<ol>\n<li>類別的測試程式碼，加上<code>Test</code>後綴</li>\n<li>測試程式用到的偽類別使用<code>Fake</code>開頭</li>\n<li>測式子類別加上前綴<code>Testing</code></li>\n</ol>\n<p>在提到程式碼應該放哪裡時，也提到了佈署的問題，我是看不太懂這一段的意義，因為我覺得佈署只有 production code，測試程式不需要佈署才是，正確的做法應該是在 CI 上面跑完測試無誤，由 CI deploy 出去 production code 的專案就好；在開發的時候習慣上就是很自然地另外開一個專案來做測試專案，deploy 出去的時候根本不會有測試檔案的問題，而日常開發撰寫也已經習慣了這樣的模式，可能別的語言會有差異吧，那就見仁見智了</p>\n<h3 id=\"CH-19-對非物件導向的專案，如何安全地對它進行修改\"><a href=\"#CH-19-對非物件導向的專案，如何安全地對它進行修改\" class=\"headerlink\" title=\"CH 19 對非物件導向的專案，如何安全地對它進行修改\"></a>CH 19 對非物件導向的專案，如何安全地對它進行修改</h3><p>基本上我略過了此一章節，我曾經嘗試努力地看懂，但卻發現我看不懂前幾節那些範例，因為那些範例都不是 csharp，甚至也不是 java，而那些情境，我也似乎不會碰到，而後面的小節，提到的重構技巧及手法，其實在別的書也有提到，所以我直接放生了此一章節，並感謝還好我現在都寫 OOP</p>\n<p>這一章節可能對於 C 語言的開發者比較有用吧，辛苦了</p>\n<h3 id=\"CH-20-處理大類別\"><a href=\"#CH-20-處理大類別\" class=\"headerlink\" title=\"CH 20 處理大類別\"></a>CH 20 處理大類別</h3><p>這個章節感覺核心也是在重構，當一個類別已經成長得很龐大，是時候將他的職責更細分，拆成更小的類別。這一章節給出範例，讓不熟悉這類型<code>bad smell</code>的人也可以很直觀的感受，在優化設計的部分，先是依據職責畫出設計，但是這樣的東西是否過度設計了呢？</p>\n<p>於是又延伸出了職責識別這件事情的幾種技巧</p>\n<ol>\n<li><strong>方法分組</strong>：尋找類似的方法名稱，將它們列出來，找出那一些看起來就像是應該在一起的</li>\n<li><strong>觀察隱藏方法</strong>：若類別內充斥著大量的<code>private</code>或<code>protected</code>，那是否代表有一個<code>class</code>應該要被抽象出來？</li>\n<li><strong>尋找可以更改的決定</strong>：我的理解是，程式碼裡面可能有一些東西是我們寫死固定的，像是<code>var dbConn = xxxxxxxxxx</code>，這樣子取得資料庫連線的部分，或許可以抽象出來，變成<code>var dbConn = GetConnection()</code>將這些東西抽象出來，甚至是抽象到另外一個類別去。這個解釋真的很困難，如果還不懂的話我放棄，有興趣的還是看看書籍說明吧</li>\n<li><strong>尋找內部關係</strong>：簡單說就是看看這個大類別裡面的關係，變數阿、方法阿，看看能不能將某一些東西抽象到另外一個類別去，將類別所有成員畫出來，然後相關聯的就畫一條線，看看它們之間的關係，決定應該要怎麼拆類別</li>\n<li><strong>尋找主要職責</strong>：這個部分可以從兩部份去看，<code>從介面層級</code>或<code>從實作層級</code>違反了 SRP，這裡要注意的應該是實作層級的部分，但如果實作內容是呼叫別的類別來處理，那麼這個類別就不算是<code>大類別</code>，它是<code>facade</code></li>\n<li><strong>草稿式重構</strong>：有一句話可以解釋這個名詞，那就是<code>坐而言不如起而行</code>，通俗一點就是<code>拿起鍵盤，正面上它</code>，前面提到草稿式重構式作為理解程式碼的一個好手段，用意是為了讓你了解實際上的程式碼職責到底是甚麼，是為了之後的重構鋪路，所以在這個階段的成果都是暫時的，是假的，終究是要拋棄掉的(海浪法師上身的感覺)</li>\n<li><strong>關注目前工作</strong>：這個解釋只有三行，我真心看不懂，似乎是你可以將目前編寫的新程式碼，視為一個獨立的職責…所以咧？放生大類別不去管它，然後新寫一個類別？嗯，這個好像也是一個重構技巧，不影響舊有程式碼，我們為新寫的程式碼撰寫測試保護，應該概念有點像是之前看過的概念，在一團泥沼之中開闢一個處女地出來做保護，就是用的這樣的手法</li>\n</ol>\n<p>不論如何，上面的這些技巧其實都是很不錯的方法</p>\n<h3 id=\"CH-21-需要修改大量相同的程式碼\"><a href=\"#CH-21-需要修改大量相同的程式碼\" class=\"headerlink\" title=\"CH 21 需要修改大量相同的程式碼\"></a>CH 21 需要修改大量相同的程式碼</h3><p>這一章節的實際範例是常常碰到的情境，我們有兩個類別，其中有一些東西都長得很像，根據書裡面的建議，我們覺得好像可以做一些消除重複程式碼的動作，但又不知道好不好，那麼最好的辦法就是實際動手做做看，感覺一下刪除重複片段後，程式碼變得怎麼樣了</p>\n<p>具體的步驟在書裏面有步驟照著做，重構前後的程式碼可讀性差很多，這個應該算是比較基礎的重構範例，難度不高，但很有用。最後面有個很精華的提醒：既然我們都已經將大部分重複的程式碼都提取到父類別了，那麼延伸類別裡面其實也只剩下一點點程式碼，那我們是否需要將延伸出來的兩個類別拿掉？</p>\n<p>拿掉延伸類別，並於父類別加入一個靜態方法，差異的部分改成用參數傳入就好；或者是改成兩個靜態方法呼叫？前者在呼叫端變得不友善，由使用者去控制傳入參數我覺得沒有很好；後者書裡面給出了一個答案，這樣做的話你所有原先呼叫這一段程式碼的地方都需要做調整。至於要做到甚麼程度，那就見仁見智囉</p>\n<p>這裡提到一個名詞：正交性(orthogonality)，他的解釋我理解成：修改某個程式影響到範圍極其有限，不會影響到其他的地方，調整是很容易、直覺，就像是傳統工廠的機台，一個旋轉按鈕就只對應一個地方。</p>\n<blockquote>\n<p>書裡面有很棒的一段話：<code>將重複的程式碼都消除之後，設計會自己浮現出來</code>。</p>\n</blockquote>\n<h3 id=\"CH-22-要修改一個巨型方法，卻沒辦法為它編寫測試\"><a href=\"#CH-22-要修改一個巨型方法，卻沒辦法為它編寫測試\" class=\"headerlink\" title=\"CH 22 要修改一個巨型方法，卻沒辦法為它編寫測試\"></a>CH 22 要修改一個巨型方法，卻沒辦法為它編寫測試</h3><p>我們都知道程式碼最好是短一些好，最好是方法名稱跟內容很直覺，一看就對得上的那一種，但想像總是有差距。書裡面列出幾個範例，每一種看了真的都會心一笑，心理 OS 都會說：嘿<del>我都見過</del></p>\n<p>在這邊我有幸體驗了書裡面所說的，如果你沒有工具能夠支援<code>提取方法</code>、<code>自動排版</code>，那麼光是這兩件事情就能夠耗掉你絕大部分的熱情，我當時是幫一隻約 3 千多行的<code>asp</code>程式碼每一行重新排版，因為只有先做到這一件事情，我才能開始嘗試理解這一支程式，我記得那一個下午我花了 3 個小時做這件事情，而類似的程式碼還有幾萬支…</p>\n<p>離題了，現在不管是<code>Rider</code>或是<code>Resharper</code>還是<code>VS 2019</code>都提供了提取方法，至於其他的語言應該也有支援的工具可用，所以依靠工具來做這件事情，基本上可以省去很多測試的時間，這章節也是秉持著先前的風格，一步步的教你如何處理巨型方法的重構，此處要注意的幾個重點</p>\n<ol>\n<li>請使用工具幫你提取方法來重構</li>\n<li>重構出來的方法名稱，應該是從一個更高層面來傳達語意</li>\n<li>提取出來的這些接縫之後可以利用來解依賴</li>\n</ol>\n<p>如果你選擇手動重構的話，該如何測試書裡面也有提供建議，第一個就是<code>引入感測變數</code>，有點難以理解的名詞，其實說穿了就是在你的程式碼裡面埋變數，然後在執行的時候，把變數秀出來看看是否如預期；第二個方法就是<code>只提取你所了解的</code>程式碼，我覺得這個意思就是只提取你能夠理解的、簡短的程式碼。再往後還有一些建議跟技巧，不過我想我不用全部列出來了，這一章針對的是巨大方法的重構實務，從實務技巧與重構的策略都給予一些建議</p>\n<h3 id=\"CH-23-降低修改的風險\"><a href=\"#CH-23-降低修改的風險\" class=\"headerlink\" title=\"CH 23 降低修改的風險\"></a>CH 23 降低修改的風險</h3><p>這一章有點哲學，但我們抓著小標題來看，其實脈絡就很明顯，要降低修改的風險第一個小節就是在講取得即時回饋，很棒的是現在有很多語言都有很棒的工具可以幫我們做到這件事情，VS2013 時代的<a href=\"https://www.youtube.com/watch?v=8wrVbxp3Ikc\">Alive 套件 (joey demo TDD with Alive - Youtube )</a>，一直到<code>VS2019</code> 的<a href=\"https://docs.microsoft.com/zh-tw/visualstudio/test/live-unit-testing?view=vs-2019\">Live unit testing</a>，在<code>JavaScript</code>的部分，也有<a href=\"https://quokkajs.com/\">Quokka.js</a>與<a href=\"https://wallabyjs.com/\">Wallaby.js</a>可以用；<code>Python</code>也有<a href=\"https://marketplace.visualstudio.com/items?itemName=almenon.arepl\">AREPL for python</a>、<a href=\"https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter\">Jupyter</a>，這些工具都可以幫助你即時取得回饋</p>\n<blockquote>\n<p>我之所以會開始喜歡寫<code>javascript</code>，很大一部分原因是因為有<code>quokka</code>跟<code>wallaby</code>可用</p>\n</blockquote>\n<p>第二個部分就是確保你當前的目標，換句話來說，就等於 TDD 的重構帽子，當你戴上了重構帽子，你就只做重構這件事情；當你戴上了添加新功能帽子，那就只做開發的行為；第三個部分就是保持簽章方法在修改前後一致，這個就真的是良心建議了，照著做，會有好處的。另外這裡還有一個方法是<code>依靠編譯器</code>，這個手法如果我沒有理解錯的話，是故意讓它錯誤，然後編譯器會告訴你這東西還有哪裡有在用，接著再去修改就好，我不清楚別的語言，但起碼在<code>csharp</code>，IDE 都能夠很好的幫你找出某個變數有哪些地方在用，似乎是不需要用到這樣的手段。</p>\n<p>其他還有<code>pair programming</code>，但我想在實務上的工作環境中，這應該有點天方夜譚了，而如果在實務中可以做到<code>pair programming</code>，我想也沒必要聽我說<code>pair programming</code>的好處了</p>\n<h3 id=\"CH-24-當你感到絕望時\"><a href=\"#CH-24-當你感到絕望時\" class=\"headerlink\" title=\"CH 24 當你感到絕望時\"></a>CH 24 當你感到絕望時</h3><p>最後這章節我沒有細看，因為這章節屬於心靈雞湯的範圍，如果你感到氣餒、對重構事業感到無力，來喝點心靈雞湯吧。</p>\n<h2 id=\"part-3-解依賴技術\"><a href=\"#part-3-解依賴技術\" class=\"headerlink\" title=\"part 3 解依賴技術\"></a>part 3 解依賴技術</h2><h3 id=\"CH-25-解依賴技術\"><a href=\"#CH-25-解依賴技術\" class=\"headerlink\" title=\"CH 25 解依賴技術\"></a>CH 25 解依賴技術</h3><p>這本書的最後一章羅列出了很多解依賴的技術，可以將這個章節視作操作手冊吧</p>\n<ol>\n<li>參數適配</li>\n<li>分解出方法物件</li>\n<li>定義補全</li>\n<li>封裝全域參照</li>\n<li>暴露靜態方法</li>\n<li>提取並覆寫呼叫</li>\n<li>提取並覆寫工廠方法</li>\n<li>提取並覆寫獲取方法</li>\n<li>實作提取</li>\n<li>介面提取</li>\n<li>引入實例委託</li>\n<li>引入靜態設置方法</li>\n<li>連接替換</li>\n<li>參數化建構子</li>\n<li>參數化方法</li>\n<li>樸素化參數</li>\n<li>特性提升</li>\n<li>依賴下推</li>\n<li>換函數為函數指標</li>\n<li>以獲取方法替換全域參照</li>\n<li>子子類別化並覆寫方法</li>\n<li>替換實例變數</li>\n<li>模板重定義</li>\n<li>文字重定義</li>\n</ol>\n<p>上面這一大堆方法裡面，有一些並不適用於<code>csharp</code>，有一些解釋的可能我很難理解，但大致上都會提供一個範例並告訴你 SOP 怎麼去做這項重構，我覺得如果真的對於實務上的重構有困惑，那麼<code>Martin Fowler</code>的<a href=\"https://martinfowler.com/books/refactoring.html\">refactor</a>應該是必讀的</p>\n<ol>\n<li><a href=\"https://www.tenlong.com.tw/products/9789865021832?list_name=srh\">重構｜改善既有程式的設計, 2&#x2F;e (繁中平裝版)(Refactoring: Improving The Design of Existing Code, 2&#x2F;e)</a>，這本書是 2019 年重新用 javascript 作為範例的版本，如果要看 2008 年版本，印象中是用 java 作為範例的</li>\n<li><a href=\"https://www.tenlong.com.tw/products/9789861814025\">重構－向範式前進 (Refactoring to Patterns)</a>適合對<code>refactor</code>與<code>design pattern</code>有興趣的人閱讀，比較困難一些；這本書也有簡體中文版本：<a href=\"https://www.tenlong.com.tw/products/9787115297259\">重構與模式 (Refactoring to Patterns)</a></li>\n</ol>\n<h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>真是難得，一本書從開始到結束時間跨度一年以上也真沒誰了，很高興我又寫完了一本書的心得，真的不用這種方式我每一本都念不完</p>\n<p>我的閱讀方式是掃過一次，有印象後，之後打算當工具書一樣，有需要的話翻閱標題，再回去看細節，所以心得也是提醒我自己，這一章節我能夠獲得甚麼東西，或者是我的感受怎樣，當然這些東西肯定每個人都不同，也許都會有自己的解讀，如果有甚麼想法、意見想要討論的，歡迎留言</p>\n","categories":["心得"],"tags":["待補"]},{"title":"Cypress.io E2E測試","url":"/artblog//cypress-io-e2e-testing/","content":"<p>會開始學習<code>cypress.io</code>的原因是因為看到<a href=\"https://medium.com/hannah-lin/cypress-2-%E7%9C%8B%E5%AE%98%E6%96%B9%E6%96%87%E4%BB%B6%E5%AD%B8%E7%BF%92%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95-76606c4420be\">[Cypress 2] 看官方文件學習 Command &amp; Assertion</a>這篇，另外 Joey 也推薦這一套工具，在這一篇文章中介紹的是<code>cypress.io</code>的一些基礎用法，更深入的部分：Cli、CI 整合都還沒有辦法介紹給大家，後續如果還有機會的話再撰寫成系列文章跟大家分享。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"End-To-End-Testing\"><a href=\"#End-To-End-Testing\" class=\"headerlink\" title=\"End To End Testing\"></a>End To End Testing</h2><p>e2e 測試其實就是模擬真實用戶情境、驗證被測試系統及其組件是否能順利工作、驗證所產生的資料是否正確。不論是在軟體開發的哪個生命週期裡面，通常會有一些角色會去執行 e2e 測試，用來驗證產品是否如預期般運作</p>\n<h3 id=\"傳統手工測試人員\"><a href=\"#傳統手工測試人員\" class=\"headerlink\" title=\"傳統手工測試人員\"></a>傳統手工測試人員</h3><p>在程式設計師開發完畢之後進行驗收的人員，他們大概的特色就是不會寫程式，都是用手動的方式去驗證功能是否正確；通常這樣的人員對於領域知識都很了解，但是對於程式設計的背景知識相對薄弱；恰好與程式設計師相反、互補。通常這個角色在公司不會只有這一項工作要做，往往都是兼職測試；實務上它們可能的身份還會有<code>專案經理</code>、<code>產品經理</code>、<code>客服人員</code>、<code>產品教育訓練講師</code>…等等</p>\n<h3 id=\"程式設計師\"><a href=\"#程式設計師\" class=\"headerlink\" title=\"程式設計師\"></a>程式設計師</h3><p>在程式設計師開發完畢之後，也會有一些人會對自己開發的成果進行測試。通常它們的手段就是在 local，或者是所謂的開發機上面直接手動測試。對於這個角色而言，e2e 測試的確不是他們的重點，它們更多的時間、精力會放在單元測試上面。</p>\n<h3 id=\"測試人員\"><a href=\"#測試人員\" class=\"headerlink\" title=\"測試人員\"></a>測試人員</h3><p>在規模比較大的公司裡面才會有可能存在的專職測試人員，因為是全職投入測試的關係，往往他們會需要用到自動化測試工具來協助它們完成測試任務。也因此它們會需要有程式設計的知識，以及動手實作的能力；相比於程式設計師較重視單元測試，他們會更著重於使用各種測試技術和方法來測試和發現軟體中存在的軟體缺陷，而 e2e 測試只是幫助他們完成他們任務的其中一環而已</p>\n<h2 id=\"有什麼工具可以幫助我們完成-E2E-Testing？\"><a href=\"#有什麼工具可以幫助我們完成-E2E-Testing？\" class=\"headerlink\" title=\"有什麼工具可以幫助我們完成 E2E Testing？\"></a>有什麼工具可以幫助我們完成 E2E Testing？</h2><h3 id=\"Katalon-Recorder-Selenium-tests-generator\"><a href=\"#Katalon-Recorder-Selenium-tests-generator\" class=\"headerlink\" title=\"Katalon Recorder (Selenium tests generator)\"></a>Katalon Recorder (Selenium tests generator)</h3><p><a href=\"https://chrome.google.com/webstore/detail/katalon-recorder-selenium/ljdobmomdgdljniojadhoplhkpialdid\">Katalon Recorder (Selenium tests generator)</a></p>\n<p>作為初學 e2e 測試的人，我會推薦先使用這一套上手，大概了解一下 e2e 測試是怎麼一回事</p>\n<p>因為用這一套可以錄影，也就是將你操作瀏覽器的步驟給錄下來，事後也可以針對每一個步驟進行修改；而且可以透過匯出程式碼的功能，將錄影下來的步驟透過程式碼執行；對於入門應該算蠻有效的。</p>\n<p>這一套適合的對象應該是初學者、或是比較不需要撰寫程式的手動測試人員會較合適，至於付費軟體 katalon studio 就不予置評了，因為我沒有用過。</p>\n<h3 id=\"testcafe-js\"><a href=\"#testcafe-js\" class=\"headerlink\" title=\"testcafe.js\"></a>testcafe.js</h3><p>之前寫過一篇<a href=\"https://partypeopleland.github.io/artblog/2019/06/24/%E4%BD%BF%E7%94%A8testcafe%E5%81%9AE2E%E6%B8%AC%E8%A9%A6/\">使用 testcafe 做 E2E 測試</a>，現在看來當時感覺不錯的優點，現今應該都算標準配備了，是胃口被養刁了嗎？總覺得時至今日，<code>testcafe.js</code> 的優勢跟人相比，記憶點只剩下支援<code>typescript</code>、官方提供三大框架支援。</p>\n<p>這一套適合的對象應該是喜歡使用<code>typescript</code>的開發人員、或者是前端三大框架(React, Vue, Angular)的使用者，因為可以直接在測試程式中透過官方提供的框架 Selector 去指定框架的元件，這個很加分</p>\n<h3 id=\"cypress-io\"><a href=\"#cypress-io\" class=\"headerlink\" title=\"cypress.io\"></a>cypress.io</h3><h4 id=\"官方自己說的優點\"><a href=\"#官方自己說的優點\" class=\"headerlink\" title=\"官方自己說的優點\"></a>官方自己說的優點</h4><p>基本上官方自己有說<a href=\"https://docs.cypress.io/zh-cn/guides/overview/key-differences.html\">他們的優勢</a>在哪邊，老實說我有很多東西看不太懂，或者是說沒能真正理解。</p>\n<p>所以底下我就節錄我看得懂，或是說我覺得這應該不錯的部分</p>\n<p>因为 Cypress 是本地安装的, 它可以从系统层提供对自动化任务的服务. 也就是说，比如截图或录屏, 一般的命令执行和请求成为可能.</p>\n<blockquote>\n<p>在 CI 過程提供截圖快照，或者是錄影，在某些時候是很有用的</p>\n</blockquote>\n<p>你的测试代码可以访问任何只要是你应用能访问的东西。</p>\n<blockquote>\n<p>所以我可以很直覺的撰寫測試代碼，這應該是優點吧</p>\n</blockquote>\n<p>通过修改响应状态码为 500 测试你的应用如何对错误做出响应的。</p>\n<blockquote>\n<p>這個是說我能夠修改回應的結果(狀態)？ 如果可以的話，不就是像 mock 那樣的東西了嗎？</p>\n</blockquote>\n<p>你不再需要使用 UI 来构建状态；这意味着你不必访问登录页面，输入用户名和密码，并等待页面加载和&#x2F;或重定向到你运行的每个测试；Cypress 让你能够快捷方式并以编程方式登录</p>\n<blockquote>\n<p>這意味著我如果有一些狀態是需要經由繁瑣的 UI 互動完成之後才能測試的功能，我可以透過其他的方式做到，聽起來很不錯。</p>\n</blockquote>\n<p>测试运行时使用开发者工具，你可以看到每个控制台消息，每个网络请求。 你可以检查元素，甚至可以在规范代码或应用程序代码中使用调试器语句。 不会有信息丢失 - 你可以使用你已经熟悉的所有工具。 这使你可以同时测试和开发所有内容。</p>\n<blockquote>\n<p>這絕對是優點，透過 cypress 執行測試時，我可以使用<code>cy.pause()</code>暫停下來，並悠閒地開啟 F12 利用 Chrome Develop tools 來查看請求、回應，試用了一下真的很不錯</p>\n</blockquote>\n<h4 id=\"我覺得是優點的優點\"><a href=\"#我覺得是優點的優點\" class=\"headerlink\" title=\"我覺得是優點的優點\"></a>我覺得是優點的優點</h4><ol>\n<li>官網有中文文件</li>\n<li>Cypress 是免費、開源的</li>\n<li>安裝方便：只需要透過一行指令就整個裝好，不需要再安裝其他別的東西</li>\n<li>圖形化介面及完整的指令列工具</li>\n</ol>\n<p>官網文件並沒有 100%都是中文，但起碼基本的文件都已經是簡體中文了。如果你的英文再好一點，官方的英文文件應該對你不是問題。<br><a href=\"https://docs.cypress.io/zh-cn/guides/overview/why-cypress.html#\">Cypress Document</a></p>\n<p>但還是有一些文件看起來是用機器翻譯的，文法非常地不通順，這種時候還是看英文的會比較好，例如下面這個例子<br><img src=\"/artblog/cypress-io-e2e-testing/2020-05-15_14-13-46.png\"></p>\n<h4 id=\"IDE整合\"><a href=\"#IDE整合\" class=\"headerlink\" title=\"ＩＤＥ整合\"></a>ＩＤＥ整合</h4><p>這些資訊在官方文件都有<a href=\"https://docs.cypress.io/guides/tooling/IDE-integration\">說明</a>介紹，因此這邊就略過說明，請自行前往觀看。在 IDE 整合的這一塊，最好是仔細的看過一次照著做一遍，會對開發很有幫助。</p>\n<h5 id=\"VSCode\"><a href=\"#VSCode\" class=\"headerlink\" title=\"VSCode\"></a>VSCode</h5><ol>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=JosefBiehler.cypress-fixture-intellisense\">Cypress Fixture-IntelliSense</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=Shelex.vscode-cy-helper\">Cypress Helper</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=andrew-codes.cypress-snippets\">Cypress Snippets</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=tnrich.vscode-extension-open-cypress\">Open Cypress</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=chrisbreiding.test-utils\">Test Utils</a></li>\n</ol>\n<h5 id=\"Intelli-J\"><a href=\"#Intelli-J\" class=\"headerlink\" title=\"Intelli J\"></a>Intelli J</h5><ol>\n<li><a href=\"https://plugins.jetbrains.com/plugin/13819-cypress\">Intellij-Cypress</a></li>\n</ol>\n<p>在 Rider 的 plugin 裡面，我直接安裝了<code>cypress</code>的 plugin，並且依照官網指示，在專案的套件中，也安裝了<a href=\"https://www.npmjs.com/package/cypress-intellij-reporter\">cypress-intellij-reporter</a>，隨後在 Rider 的測試檔案內，就可以直接透過點擊 Icon 的方式去執行 e2e 測試了<br><img src=\"/artblog/cypress-io-e2e-testing/2020-05-15_10-10-13.png\"></p>\n<p>看樣子其實也只是幫你把特定的測試透過指令列的方式去執行，如果執行某一個測試，會發現在測試執行之前，<code>it</code>的後面會幫你自動加上去<code>only</code>，測試完再改回來</p>\n<p><img src=\"/artblog/cypress-io-e2e-testing/2020-05-15_15-49-05.png\"></p>\n<h2 id=\"How-To-Start\"><a href=\"#How-To-Start\" class=\"headerlink\" title=\"How To Start\"></a>How To Start</h2><h3 id=\"啟動-local-網站\"><a href=\"#啟動-local-網站\" class=\"headerlink\" title=\"啟動 local 網站\"></a>啟動 local 網站</h3><p>雖然你可以測試已經<code>deploy</code>出去的應用程式，但官方比較推薦的是測試<code>local</code>的應用程式，對此官方文件解釋原因</p>\n<ol>\n<li>cypress 在整個開發流程當中都很有用</li>\n<li>你可以同時進行測試、開發，其實就是利用 cypress 透過 TDD 方法開發你的應用程式</li>\n<li>你可以控制 local 的應用程式、但你無法控制 deploy 出去的應用程式</li>\n</ol>\n<blockquote>\n<p>cypress 官方文件提到：许多 Cypress 的用户都选择在本地运行绝大多数的集成测试，而在生产环境上运行少数的冒烟测试。</p>\n</blockquote>\n<blockquote>\n<p>節錄 wiki<a href=\"https://zh.wikipedia.org/wiki/%E5%86%92%E7%83%9F%E6%B5%8B%E8%AF%95_(%E8%BD%AF%E4%BB%B6)\">冒煙測試</a>：冒煙測試僅僅是在短時間廣泛地覆蓋產品功能。如果關鍵功能無法正常工作或關鍵 bug 尚未修復，那麼你們的團隊就不需要浪費更多時間去安裝部署以及測試</p>\n</blockquote>\n<p>講白一點就是，大部分的整合測試都在 local 做，你只需要在 production 作一些關鍵性的測試即可</p>\n<h3 id=\"訪問-local-網站\"><a href=\"#訪問-local-網站\" class=\"headerlink\" title=\"訪問 local 網站\"></a>訪問 local 網站</h3><p>當然要先安裝好<code>cypress</code>，安裝完畢後會在專案目錄下自動建立<code>cypress</code>子目錄；然後把 cypress 提供的範例測試程式<code>cypress/integration/examples</code>清掉，接著建立自己的測試程式，此處我們就命名為<code>cypress/integration/myTest/my.spec.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cypress GUI</span></span><br><span class=\"line\">npx cypress open</span><br></pre></td></tr></table></figure>\n\n<p>這個時候你可以先開啟 cypress GUI，會發現我們建立的測試檔案已經存在了</p>\n<p><img src=\"/artblog/cypress-io-e2e-testing/2020-05-15_12-22-11.png\"></p>\n<p>接著撰寫測試內容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cypress/integration/myTest/my.spec.js</span></span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&quot;The Home Page&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&quot;successfully loads&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 訪問網址，請替換為你自己的開發網站網址</span></span><br><span class=\"line\">    cy.<span class=\"title function_\">visit</span>(<span class=\"string\">&quot;http://localhost:4351&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"cypress-設定\"><a href=\"#cypress-設定\" class=\"headerlink\" title=\"cypress 設定\"></a>cypress 設定</h3><p>cypress 有提供設定，可以將測試網站的網址記錄在這邊<br><img src=\"/artblog/cypress-io-e2e-testing/2020-05-15_12-26-26.png\"></p>\n<p>這樣，就可以在測試程式中直接以相對路徑來撰寫網址</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cypress/integration/myTest/my.spec.js</span></span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&quot;The Home Page&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&quot;successfully loads&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    cy.<span class=\"title function_\">visit</span>(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/cypress-io-e2e-testing/2020-05-15_14-04-52.png\"></p>\n<p>當然這邊只是示範一下有這個設定檔，其他設定項目當然還是請參考網站<a href=\"https://docs.cypress.io/zh-cn/guides/references/configuration.html#Cypress-config\">介紹</a>囉</p>\n<p>另外，在 GUI 介面，你也可以瀏覽這些資訊，這個介面甚至用顏色告訴你，目前吃的設定值是甚麼，設定的來源是哪裡<br>這個是我第一次看到這樣的概念跟設計，感覺很不錯<br><img src=\"/artblog/cypress-io-e2e-testing/2020-05-15_12-29-31.png\"></p>\n<h3 id=\"Intelligent-code-completion\"><a href=\"#Intelligent-code-completion\" class=\"headerlink\" title=\"Intelligent code completion\"></a>Intelligent code completion</h3><p>在<code>/Cypress</code>目錄下新增<code>tsconfig.json</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;allowJs&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;baseUrl&quot;</span>: <span class=\"string\">&quot;../node_modules&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;types&quot;</span>: [</span><br><span class=\"line\">      <span class=\"string\">&quot;cypress&quot;</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;include&quot;</span>: [</span><br><span class=\"line\">    <span class=\"string\">&quot;**/*.*&quot;</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在<code>VSCode</code>底下就會有智慧標籤提示<code>cypress</code>的語法，對於開發速度上也有很大的提升<br><img src=\"/artblog/cypress-io-e2e-testing/2021-09-30-105817.jpg\"></p>\n<h2 id=\"測試策略\"><a href=\"#測試策略\" class=\"headerlink\" title=\"測試策略\"></a>測試策略</h2><p>前幾個中文文件應該都是人工翻譯的對吧，後面講到一些專有名詞怎麼感覺就是非常地不通順呢？所以，我覺得還是用我能夠理解的文法稍微說明一下好了</p>\n<h3 id=\"Seeding-Data\"><a href=\"#Seeding-Data\" class=\"headerlink\" title=\"Seeding Data\"></a>Seeding Data</h3><p>在即將撰寫 e2e 測試之前，通常我們為了測試順利進行，會需要做一些準備工作，例如：如果我們想要測是一個登入的行為，那麼我們至少會需要在後端資料庫有一個測試的帳號用來驗證。<br>在測試執行之前，先一步建立好這些需要的數據資料，並且在測試完畢後清除，這就是<code>set up</code>、<code>tear down</code></p>\n<p><code>cypress</code>提供了<code>cy.exec()</code>、<code>cy.task()</code>、<code>cy.request()</code>，搭配<code>before()</code>、<code>beforeEach()</code>這兩個<code>hooks</code>來做到這件事情</p>\n<blockquote>\n<p>所謂的 Hooks 就是在測試前後會觸發的事件，具體要看測試框架提供那些。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&quot;The Home Page&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    cy.<span class=\"title function_\">exec</span>(<span class=\"string\">&quot;npm run db:reset &amp;&amp; npm run db:seed&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    cy.<span class=\"title function_\">request</span>(<span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;/test/seed/post&quot;</span>, &#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&quot;First Post&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">authorId</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"attr\">body</span>: <span class=\"string\">&quot;...&quot;</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    cy.<span class=\"title function_\">request</span>(<span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;/test/seed/user&quot;</span>, &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;Jane&quot;</span> &#125;)</span><br><span class=\"line\">      .<span class=\"title function_\">its</span>(<span class=\"string\">&quot;body&quot;</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">as</span>(<span class=\"string\">&quot;currentUser&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&quot;successfully loads&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    cy.<span class=\"title function_\">visit</span>(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>以官網的範例來看，在測試執行之前，可以透過<code>cy.exec()</code>用 npm 去執行那些你已經寫好的<code>scripts</code>，或者是為了省去實際測試程式的前置動作，將必要的互動直接打到後端 API 去執行。<br>但是官網也有提到，雖然不是錯誤的做法，但這樣的確是會影響到程式的可讀性、維護性；另外也因為所有的東西都是實際與後端溝通，再加上初始化的動作等等，這樣的一個測試會很慢</p>\n<h3 id=\"Stubbing-the-server\"><a href=\"#Stubbing-the-server\" class=\"headerlink\" title=\"Stubbing the server\"></a>Stubbing the server</h3><p>以前的應用程式大概都是從後端直接吐整個頁面，所有的操作行為都直接返回<code>HTML</code>，這樣的話的確是沒甚麼好改的；但現代化的應用程式大部分都已經改用 json 與後端交換資料，我們可以強制 server 端回傳我們想要的資料內容</p>\n<p>直接看具體的範例來學習怎麼使用<code>stub</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&quot;首頁&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&quot;登入失敗測試&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 建立 stub：此處回傳 1 表示登入失敗</span></span><br><span class=\"line\">    cy.<span class=\"title function_\">server</span>();</span><br><span class=\"line\">    cy.<span class=\"title function_\">route</span>(<span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;Account/SignIn&quot;</span>, &#123;</span><br><span class=\"line\">      <span class=\"attr\">logonStatus</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"attr\">message</span>: <span class=\"string\">&quot;假資料&quot;</span>,</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">as</span>(<span class=\"string\">&quot;signIn&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 測試程式</span></span><br><span class=\"line\">    cy.<span class=\"title function_\">visit</span>(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">    cy.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;#basic_loginId&quot;</span>).<span class=\"title function_\">type</span>(<span class=\"string\">&quot;fakeUser@notExist.com&quot;</span>);</span><br><span class=\"line\">    cy.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;#basic_password&quot;</span>).<span class=\"title function_\">type</span>(<span class=\"string\">&quot;fakePassword&quot;</span>);</span><br><span class=\"line\">    cy.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;[type=submit]&quot;</span>).<span class=\"title function_\">click</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 驗證結果</span></span><br><span class=\"line\">    cy.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;.ant-modal-confirm-content&quot;</span>).<span class=\"title function_\">should</span>(</span><br><span class=\"line\">      <span class=\"string\">&quot;contain&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;登入失敗！請確認您的帳號與密碼。&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/cypress-io-e2e-testing/2020-05-15_15-14-28.png\"></p>\n<p>可以看到在<code>Routes</code>的部份有顯示我們模擬了一個 Route 的 stub，然後再下方的<code>XHR STUB</code>也表示這個請求，是由我們設定好的 Stub 提供回應結果；在右側也可以看到模擬接收的<code>Response</code>內容就是我們在測試程式中撰寫的資料</p>\n","categories":["e2e"],"tags":["cypress"]},{"title":"Cypress.io 搭配 cucumber 進行測試","url":"/artblog//cypress-io-cucumber-testing/","content":"<p>這一篇文章主要是針對 cypress.io + cucumber 的介紹</p>\n<span id=\"more\"></span>\n\n<h2 id=\"How-To-Start\"><a href=\"#How-To-Start\" class=\"headerlink\" title=\"How To Start\"></a>How To Start</h2><p>安裝 <a href=\"https://github.com/TheBrainFamily/cypress-cucumber-preprocessor\">cypress-cucumber-processor</a> 套件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install cypress-cucumber-preprocessor --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>指定預處理器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cypress/plugins/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cucumber = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;cypress-cucumber-preprocessor&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"function\">(<span class=\"params\">on, config</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">on</span>(<span class=\"string\">&quot;file:preprocessor&quot;</span>, <span class=\"title function_\">cucumber</span>());</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>讓<code>cypress</code>支援<code>feature</code>檔，並且忽略<code>*.js</code>這樣就只顯示 <code>feature</code> 的測試檔案，而不會有其他<code>js</code>檔案的干擾</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cypress.json</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;testFiles&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;**/*.feature&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ignoreTestFiles&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;*.js&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>同時在<code>package.json</code>加入下列的設定區段</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;cypress-cucumber-preprocessor&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;nonGlobalStepDefinitions&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的設定其實牽涉到了傳統的 cucumber 問題，也就是所有的東西都是<code>global</code></p>\n<ol>\n<li>撰寫測試步驟定義的時候，你必須確保不會跟其他定義衝突，這一點在大型專案特別困擾</li>\n<li>也因為所有的東西都是<code>global</code>，導致執行測試的時候，所有東西都需要掃過一次，這將造成效能問題</li>\n</ol>\n<blockquote>\n<p>如果不改變其他設定的話，依照這樣做下來，在一些可以共用的 step 定義，可以存放在<code>cypress/integration/common</code>資料夾下</p>\n</blockquote>\n<p>撰寫測試檔案的規則</p>\n<ol>\n<li>所有<code>feature</code>檔案都必須在<code>cypress/integration</code>目錄下</li>\n<li>在<code>feature</code>檔相同層級，建立一個與其相同名稱的資料夾作為存放 step 定義的地方</li>\n</ol>\n<p>撰寫測試的範例如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Given</span>, <span class=\"title class_\">When</span>, <span class=\"title class_\">Then</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;cypress-cucumber-preprocessor/steps&#x27;</span>;</span><br><span class=\"line\"><span class=\"title class_\">Given</span>(<span class=\"regexp\">/^One given step$/</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"title class_\">Given</span>(<span class=\"regexp\">/^another given step$/</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">When</span>(<span class=\"regexp\">/^Some other when step$/</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Then</span>(<span class=\"regexp\">/^I have some results$/</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"cucumber\"><a href=\"#cucumber\" class=\"headerlink\" title=\"cucumber\"></a>cucumber</h2><h3 id=\"IDE-支援-cucumber-的程度\"><a href=\"#IDE-支援-cucumber-的程度\" class=\"headerlink\" title=\"IDE 支援 cucumber 的程度\"></a>IDE 支援 cucumber 的程度</h3><p>套件本身有一些高亮、其他功能支援，但我覺得比較重要的功能就是能夠在<code>feature</code>檔，透過<code>F12</code>的快捷鍵，跳至<code>step</code>定義</p>\n<p>如果用<code>Rider</code>開發，可以直接透過<code>Ctrl</code>+<code>Alt</code>+<code>S</code>叫出設定，並將<code>cucumber</code>外掛裝好<br>如果是<code>VSCode</code>，就安裝<a href=\"https://marketplace.visualstudio.com/items?itemName=alexkrechik.cucumberautocomplete\">Cucumber (Gherkin) Full Support</a>，並且設定一下定義檔的路徑</p>\n<p><img src=\"/artblog/cypress-io-cucumber-testing/2020-07-30_162947.png\"><br>透過右上角的 ICON 開啟<code>Json</code>格式進行編輯<br><img src=\"/artblog/cypress-io-cucumber-testing/2020-07-30_163203.png\"></p>\n<p>因為 cypress 的定義檔放在規定的路徑下，所以加入了<code>cypress/integration/**/*.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;cucumberautocomplete.steps&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;cypress/integration/**/*.js&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;test/features/step_definitions/*.js&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;node_modules/qa-lib/src/step_definitions/*.js&quot;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">\t<span class=\"string\">&quot;cucumberautocomplete.strictGherkinCompletion&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此處我們透過新增一個簡單的測試案例來練習如何透過 IDE 提供的功能方便我們撰寫</p>\n<p>一開始先新增一個<code>feature</code>檔案<br><img src=\"/artblog/cypress-io-cucumber-testing/2020-08-04_104641.png\"></p>\n<p>當然因為<code>cypress-cucumber-preprocessor</code>的關係，我們需要把定義檔放在同名的子目錄下，所以我也建立了一個<code>Search</code>目錄<br><img src=\"/artblog/cypress-io-cucumber-testing/2020-08-04_110352.png\"></p>\n<p>接著完成這份測試</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Feature: Google Search Test</span><br><span class=\"line\"></span><br><span class=\"line\">  Scenario: 搜尋測試</span><br><span class=\"line\">    Given 瀏覽 Google 首頁</span><br><span class=\"line\">    When 我輸入 art的辦公桌</span><br><span class=\"line\">    Then 會出現搜尋結果</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/cypress-io-cucumber-testing/2020-08-04_105634.png\"><br>在黃色底線的地方按下<code>Alt</code>+<code>Enter</code>，叫出 Rider 的快速選單，選擇 <code>Run inspection on</code>的選項，他會詢問你檢查定義檔的範圍在哪裡<br><img src=\"/artblog/cypress-io-cucumber-testing/2020-08-04_105824.png\"><br>這邊可以自己決定，我這邊是定義了一個<code>Scope</code>叫做<code>GoogleSearch</code>，指定目錄，讓他去找這個<code>Scope</code>底下有沒有符合我<code>feature</code>檔描述的<code>Step 定義</code><br><img src=\"/artblog/cypress-io-cucumber-testing/2020-08-04_110009.png\"><br>完成後會看到下面的視窗，顯示我尚未定義這些步驟<br><img src=\"/artblog/cypress-io-cucumber-testing/2020-08-04_110136.png\"><br>選擇一個步驟，右側視窗上會出現按鈕，點選建立步驟定義的按鈕，他會詢問要將產生出來的定義放在哪裡，這邊我們選擇建立新檔案<br><img src=\"/artblog/cypress-io-cucumber-testing/2020-08-04_110549.png\"></p>\n<p>接著他會出現下面的視窗，記得調整定義檔輸出的目錄及檔案名稱<br><img src=\"/artblog/cypress-io-cucumber-testing/2020-08-04_111029.png\"></p>\n<p>它會自動幫你建立對應的 Step 檔案，只是自動建立的是針對<code>cucumber</code>，並非我們使用的<code>cypress-cucumber-preprocessor</code>，所以還是需要自己調整<br><img src=\"/artblog/cypress-io-cucumber-testing/2020-08-04_111210.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"title class_\">Given</span>, <span class=\"title class_\">Then</span>, <span class=\"title class_\">When</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;cypress-cucumber-preprocessor/steps&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Given</span>(<span class=\"regexp\">/^瀏覽 Google 首頁$/</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;step1&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"title class_\">When</span>(<span class=\"regexp\">/^我輸入 art的辦公桌$/</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;step2&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"title class_\">Then</span>(<span class=\"regexp\">/^會出現搜尋結果$/</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;step3&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>接著我們看一下執行結果<br><img src=\"/artblog/cypress-io-cucumber-testing/2020-08-04_112535.png\"></p>\n<p>測試框架有順利執行定義，接著就可以填充每個定義的內容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"title class_\">Given</span>, <span class=\"title class_\">Then</span>, <span class=\"title class_\">When</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;cypress-cucumber-preprocessor/steps&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">SEARCH_FIELD</span> = <span class=\"string\">&quot;input[type=text]&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">SEARCH_BUTTON</span> = <span class=\"string\">&quot;input[type=submit]&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GoogleSearchPage</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">visit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    cy.<span class=\"title function_\">visit</span>(<span class=\"string\">&quot;http://www.google.com&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">type</span>(<span class=\"params\">query</span>) &#123;</span><br><span class=\"line\">    cy.<span class=\"title function_\">get</span>(<span class=\"variable constant_\">SEARCH_FIELD</span>).<span class=\"title function_\">type</span>(query);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">pressSearch</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    cy.<span class=\"title function_\">get</span>(<span class=\"variable constant_\">SEARCH_BUTTON</span>).<span class=\"title function_\">contains</span>(<span class=\"string\">&quot;Google 搜尋&quot;</span>).<span class=\"title function_\">click</span>(&#123; <span class=\"attr\">force</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">RESULT_LINK</span> = <span class=\"string\">&quot;h3&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GoogleResultsPage</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">expect</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">toHaveResults</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        cy.<span class=\"title function_\">get</span>(<span class=\"variable constant_\">RESULT_LINK</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">its</span>(<span class=\"string\">&quot;length&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">length</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">expect</span>(length).<span class=\"property\">to</span>.<span class=\"property\">be</span>.<span class=\"title function_\">greaterThan</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Given</span>(<span class=\"regexp\">/^瀏覽 Google 首頁$/</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">GoogleSearchPage</span>.<span class=\"title function_\">visit</span>();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"title class_\">When</span>(<span class=\"regexp\">/^我輸入 art的辦公桌$/</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">GoogleSearchPage</span>.<span class=\"title function_\">type</span>(<span class=\"string\">&quot;art的辦公桌&quot;</span>);</span><br><span class=\"line\">  <span class=\"title class_\">GoogleSearchPage</span>.<span class=\"title function_\">pressSearch</span>();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"title class_\">Then</span>(<span class=\"regexp\">/^會出現搜尋結果$/</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">GoogleResultsPage</span>.<span class=\"title function_\">expect</span>().<span class=\"title function_\">toHaveResults</span>();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/cypress-io-cucumber-testing/2020-08-04_114821.png\"></p>\n<h3 id=\"使用-Gherkin-撰寫測試案例\"><a href=\"#使用-Gherkin-撰寫測試案例\" class=\"headerlink\" title=\"使用 Gherkin 撰寫測試案例\"></a>使用 Gherkin 撰寫測試案例</h3><p>使用 BDD 方式撰寫測試案例，與一般的測試案例不太一樣；一般來說我們可能會有類似下面這樣的測試案例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&quot;搜尋測試&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&quot;搜尋業務 art 應該會出現 1 筆資料&quot;</span>, <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> expected = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title class_\">SearchPageObject</span>.<span class=\"title class_\">Search</span>(&#123; <span class=\"attr\">search</span>: <span class=\"string\">&quot;art&quot;</span> &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> <span class=\"title class_\">SearchPageObject</span>.<span class=\"title class_\">GetResult</span>();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> actual = result.<span class=\"property\">data</span>.<span class=\"property\">length</span>;</span><br><span class=\"line\">    assert.<span class=\"title function_\">equal</span>(actual, expected);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>我們的重點可能會放在程式的輸入、輸出，結構通常會以 3A 原則：arrange、act、assert 來編排，但是不論將上述的測試程式如何的拆分職責，語意化，始終不如直接用我們熟悉的自然語言來得更直接<br>但是我個人認為，這樣的方式放在 e2e 測試案例，就有點不合時宜，因為 e2e 測試主要是為了要模擬使用者對網站真實的操作，這也能讓我在撰寫測試的時候將注意力放在使用者的行為，而不是程式的行為</p>\n<p>在如何撰寫的部分，可以看一下下面這兩篇文章，會比較有概念</p>\n<ol>\n<li><a href=\"https://www.jianshu.com/p/7ea42a0bf37e\">写好 BDD 测试用例 —— 羊头、蜂腰、蝎尾</a></li>\n<li><a href=\"https://cuketest.gitbooks.io/-bdd/content/cucumber/concepts.html\">Cucumber 的概念定义</a></li>\n</ol>\n<h2 id=\"撰寫測試的建議\"><a href=\"#撰寫測試的建議\" class=\"headerlink\" title=\"撰寫測試的建議\"></a>撰寫測試的建議</h2><h3 id=\"使用-data-attribute\"><a href=\"#使用-data-attribute\" class=\"headerlink\" title=\"使用 data-* attribute\"></a>使用 data-* attribute</h3><p>一直以來撰寫程式碼的時候都希望能夠不要重複，最根本的原因就是因為如果寫錯了，相同的東西可能要改很多次。那麼如果今天是 HTML 有東西改了呢？</p>\n<p><code>cypress.io</code> 的<a href=\"https://docs.cypress.io/guides/references/best-practices.html#Selecting-Elements\">best practice</a>也有提到，給予 DOM 一個<code>data-*</code>的 attribute 用在 selector 是比較推薦的做法</p>\n<p>文章下方表格也說明了各種 selector 語法的缺點，並解釋了為甚麼不要這樣做、這樣做為什麼不夠好</p>\n<blockquote>\n<p><code>Best Practice</code>這種東西之所以會出現，意味著這些都是從別人的失敗經驗裡面歸納出來的好辦法。</p>\n</blockquote>\n<h3 id=\"使用-page-object-pattern\"><a href=\"#使用-page-object-pattern\" class=\"headerlink\" title=\"使用 page object pattern\"></a>使用 page object pattern</h3><p><code>page object</code>的部分有一篇文章或許可以給大家參考一下:<a href=\"https://www.cypress.io/blog/2019/01/03/stop-using-page-objects-and-start-using-app-actions/\">Stop using Page Objects and Start using App Actions</a></p>\n<h3 id=\"依據不同環境執行測試\"><a href=\"#依據不同環境執行測試\" class=\"headerlink\" title=\"依據不同環境執行測試\"></a>依據不同環境執行測試</h3><p>預設<code>cypress</code>會使用專案根目錄下的<code>cypress.json</code>，但是我們可以透過下面的方式來覆蓋掉預設設定值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cypress/plugins/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; cypressConfigResolver &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;../config/cypress-config-resolver&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"function\">(<span class=\"params\">on, config</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">on</span>(<span class=\"string\">&quot;file:preprocessor&quot;</span>, <span class=\"title function_\">cucumber</span>());</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">cypressConfigResolver</span>();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cypress/config/cypress-config-resolver.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs-extra&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">cypressConfigResolverByFile</span> = (<span class=\"params\">filename</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> pathToConfigFile = path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">`<span class=\"subst\">$&#123;filename&#125;</span>.json`</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fs.<span class=\"title function_\">readJsonSync</span>(pathToConfigFile);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">cypressConfigResolver</span> = (<span class=\"params\"></span>) =&gt;</span><br><span class=\"line\">  <span class=\"title function_\">cypressConfigResolverByFile</span>(process.<span class=\"property\">env</span>.<span class=\"property\">CYPRESS_ENV</span> || <span class=\"string\">&quot;localhost&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>.<span class=\"property\">cypressConfigResolver</span> = cypressConfigResolver;</span><br></pre></td></tr></table></figure>\n\n<p>相對應的，也要為環境建立一個自己的設定檔，在<code>Windows</code>作業系統之下，設定環境變數可以利用<code>SET</code>指令，接著在程式內就可以利用<code>process.env.xxxx</code>的方式取得環境變數</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;cy:open:localhost&quot;</span>: <span class=\"string\">&quot;SET CYPRESS_ENV=localhost &amp;&amp; npm run cy:open&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;cy:open:lab&quot;</span>: <span class=\"string\">&quot;SET CYPRESS_ENV=lab &amp;&amp; npm run cy:open&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;cy:open&quot;</span>: <span class=\"string\">&quot;cypress open&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cypress/config/localhost.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;baseUrl&quot;</span>: <span class=\"string\">&quot;https://www.google.es&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cypress/config/production.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;baseUrl&quot;</span>: <span class=\"string\">&quot;https://www.google.com&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"執行某些特定的測試\"><a href=\"#執行某些特定的測試\" class=\"headerlink\" title=\"執行某些特定的測試\"></a>執行某些特定的測試</h3><p>我們可以在平常開發的時候撰寫一些 e2e 測試，但如果所有測試都拿去跑的話，可能就沒有那麼必要，這時候在 CI 上面跑一些冒煙測試，是比較可行的方案</p>\n<blockquote>\n<p>冒煙測試僅僅是在短時間廣泛地覆蓋產品功能。如果關鍵功能無法正常工作或關鍵 bug 尚未修復，那麼你們的團隊就不需要浪費更多時間去安裝部署以及測試。，則煙霧測試將在有限的時間內廣泛涵蓋產品功能。不會浪費更多的時間來安裝或測試 – <a href=\"https://zh.wikipedia.org/wiki/%E5%86%92%E7%83%9F%E6%B5%8B%E8%AF%95_(%E8%BD%AF%E4%BB%B6)\">wiki</a></p>\n</blockquote>\n<p>在這樣的情況下我們可以透過指定 TAGS 來將測試的範圍限縮，語法範例如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//package.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;cy:run1&quot;</span>: <span class=\"string\">&quot;cypress run --env TAGS=&#x27;@e2e-test&#x27; --spec &#x27;cypress/integration/**/*.feature&#x27;&quot;</span>,</span><br><span class=\"line\">\t<span class=\"string\">&quot;cy:run2&quot;</span>: <span class=\"string\">&quot;cypress run --headless --browser chrome --spec &#x27;cypress/integration/moneyIn/orderqaSearch.feature,cypress/integration/moneyIn/orderqaCreate.feature&#x27;&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>安裝了套件之後，執行完測試也會產生相對應的報告資料 json 檔案，後續就可以利用這個檔案產生報告</p>\n<p>附帶一提，在透過<code>command line</code>執行<code>cyrpess run</code>指令，在我的環境下總是會出現一些錯誤，像是<code>cypress Timed out waiting for the browser to connect. Retrying</code>；或者是<code>could not find CRI target / Failed to connect to Chrome</code>，但如果僅是透過<code>cypress open</code>，手動執行測試案例，是沒有問題的，問題可能出在<code>headless</code>模式底下</p>\n<p>從這一點來看，也許<code>cypress</code>還不是很穩定</p>\n<h3 id=\"產生測試報告\"><a href=\"#產生測試報告\" class=\"headerlink\" title=\"產生測試報告\"></a>產生測試報告</h3><p>這裡採用的是<a href=\"https://www.npmjs.com/package/cucumber-html-reporter\">cucumber-html-reporter</a>，這個套件能夠幫你把<code>cypress-cucumber-preprocessor</code>測試產生的數據，拿來產生 HTML 格式的報告</p>\n<h4 id=\"Generate-Json\"><a href=\"#Generate-Json\" class=\"headerlink\" title=\"Generate Json\"></a>Generate Json</h4><p>設定<code>package.json</code>，使其產生測試數據</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;cypress-cucumber-preprocessor&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;nonGlobalStepDefinitions&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;cucumberJson&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;generate&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;outputFolder&quot;</span>: <span class=\"string\">&quot;cypress/cucumber-json&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;filePrefix&quot;</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;fileSuffix&quot;</span>: <span class=\"string\">&quot;.cucumber&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h4><p>安裝報告的套件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install cucumber-html-reporter --save-dev</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>cucumber.js 的版本差異，會需要找到支援的 cucumber-html-reporter 安裝</p>\n</blockquote>\n<h4 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h4><p>建立一個<code>cucumber-html-reporter.js</code>檔案，之後給<code>node</code>呼叫產生報告用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cucumber-html-reporter.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> reporter = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;cucumber-html-reporter&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\">  <span class=\"attr\">theme</span>: <span class=\"string\">&quot;hierarchy&quot;</span>, <span class=\"comment\">// Available: [&#x27;bootstrap&#x27;, &#x27;hierarchy&#x27;, &#x27;foundation&#x27;, &#x27;simple&#x27;] Type: String</span></span><br><span class=\"line\">  <span class=\"attr\">jsonDir</span>: <span class=\"string\">&quot;cypress/cucumber-json&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: <span class=\"string\">&quot;reports/cucumber_report.html&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">reportSuiteAsScenarios</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">scenarioTimestamp</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">launchReport</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">ignoreBadJsonFile</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">scenarioTimestamp</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">metadata</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;App Version&quot;</span>: <span class=\"string\">&quot;1.0.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;Test Environment&quot;</span>: <span class=\"string\">&quot;STAGING&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Browser</span>: <span class=\"string\">&quot;Chrome  54.0.2840.98&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Platform</span>: <span class=\"string\">&quot;Windows 10&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Parallel</span>: <span class=\"string\">&quot;Scenarios&quot;</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Executed</span>: <span class=\"string\">&quot;Remote&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">reporter.<span class=\"title function_\">generate</span>(options);</span><br></pre></td></tr></table></figure>\n\n<p>設定的部分還是需要前往官網看看<a href=\"https://www.npmjs.com/package/cucumber-html-reporter\">說明文件</a>的，不過其實<code>metadata</code>的資訊都可以自訂，就看需求來處理囉</p>\n<p>下面是故意讓測試案例失敗的例子，畫面會顯示錯誤原因，以及相關的程式行數，如果 step 成功的話會是綠色的，失敗則會是紅色，當然如果沒有改設定的話，失敗的測試案例也會截圖<br><img src=\"/artblog/cypress-io-cucumber-testing/2020-08-04_162737.png\"></p>\n<h2 id=\"資料來源\"><a href=\"#資料來源\" class=\"headerlink\" title=\"資料來源\"></a>資料來源</h2><p><a href=\"https://medium.com/@itortv/how-to-integrate-cypress-and-cucumber-in-your-development-flow-in-just-a-few-weeks-96a46ac9165a\">How to integrate Cypress and Cucumber in your development flow in just a few weeks.</a></p>\n<blockquote>\n<p>如果對英文不苦惱，強烈建議前往原文瀏覽，這篇文章大部分都是原文的補充及心得</p>\n</blockquote>\n<p><a href=\"https://github.com/TheBrainFamily/cypress-cucumber-preprocessor#readme\">cypress-cucumber-preprocessor github</a></p>\n<blockquote>\n<p>學習、使用工具最重要的事情就是看說明書了，對吧</p>\n</blockquote>\n","categories":["e2e"],"tags":["cypress"]},{"title":"Cypress.io 測試資料的處理","url":"/artblog//cypress-io-test-data-handling/","content":"<p>實際上撰寫 e2e 測試的時候，我們常常會需要做一些預設的測試資料在資料庫內，假設我今天想要測試會員在網站上購物的流程，那麼網站一定會需要有商品、會員、訂單等等資料結構。<br>在這樣的情況下，為了確保測試的可重複性，通常會在測試開始之前做測試資料的初始化；測試完畢之後做測試資料的清除。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Hook\"><a href=\"#Hook\" class=\"headerlink\" title=\"Hook\"></a>Hook</h2><p>如果有寫過前端測試，像是<code>jest</code>、<code>mocha</code>，那這部分應該很輕鬆就能理解，<a href=\"https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests.html#Hooks\">官網</a>上也有說明，其實也沒有很困難，這些東西就只是代表，跑測試的時候，什麼時機點會觸發這些對應的事件，我們可以透過這些 Hook 來將我們要處理的事情，插入在這些時間點，通常在每個測試開始之前，我們會插入該測試所需要初始化的事件</p>\n<p>官方的例子就已經蠻清楚的，如果還是有問題，其實就直接跑看看，觀察一下 Log 就行了；在下面的例子裡面，注意到<code>hook</code>可以放在最外層，也可以放在<code>describe</code>區段之內，兩者的意義是不同的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">beforeEach</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// root-level hook</span></span><br><span class=\"line\">  <span class=\"comment\">// runs before every test</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&quot;Hooks&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">before</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// runs once before all tests in the block</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">beforeEach</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// runs before each test in the block</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">afterEach</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// runs after each test in the block</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">after</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// runs once after all tests in the block</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-node-js-執行初始化\"><a href=\"#使用-node-js-執行初始化\" class=\"headerlink\" title=\"使用 node.js 執行初始化\"></a>使用 node.js 執行初始化</h2><p><a href=\"https://docs.cypress.io/api/commands/exec.html#Syntax\">文件</a>有寫到使用的情境；我們目前希望在測試程式裡面要去影響到資料庫的內容，所以透過<code>cy.exec()</code>這個指令去執行<code>node.js</code>的指令</p>\n<p>假設我的資料庫用的是<code>mariaDB</code>，因此先安裝好套件<code>npm install mariaDB</code>，再依照<a href=\"https://github.com/mariadb-corporation/mariadb-connector-nodejs/blob/master/documentation/promise-api.md\">官方文件</a>說明進行修改，就可以操作資料庫了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// appConfig.js</span></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">orderId</span> = <span class=\"number\">1234567890</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// dbConfig.js</span></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">dbConfig</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">host</span>: <span class=\"string\">&quot;127.0.0.1&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">port</span>: <span class=\"number\">4006</span>,</span><br><span class=\"line\">  <span class=\"attr\">user</span>: <span class=\"string\">&quot;admin&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">password</span>: <span class=\"string\">&quot;admin&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">database</span>: <span class=\"string\">&quot;mydb&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">connectionLimit</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mariaDBHelper.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mariaDb = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;mariadb&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;../_config/dbConfig&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> pool = mariaDb.<span class=\"title function_\">createPool</span>(config.<span class=\"property\">dbConfig</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">clearAsync</span>(<span class=\"params\">orderId</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> conn = <span class=\"keyword\">await</span> pool.<span class=\"title function_\">getConnection</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> response = <span class=\"keyword\">await</span> conn.<span class=\"title function_\">query</span>(<span class=\"string\">&quot;select id from order where orderId = ?&quot;</span>, [</span><br><span class=\"line\">    orderId,</span><br><span class=\"line\">  ]);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (response[<span class=\"number\">0</span>] !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> qaId = response[<span class=\"number\">0</span>].<span class=\"property\">id</span>;</span><br><span class=\"line\">    response = <span class=\"keyword\">await</span> conn.<span class=\"title function_\">query</span>(<span class=\"string\">&quot;delete from order where Id= ?&quot;</span>, [qaId]);</span><br><span class=\"line\">    response = <span class=\"keyword\">await</span> conn.<span class=\"title function_\">query</span>(<span class=\"string\">&quot;delete from order_comment where qa_id=?&quot;</span>, [</span><br><span class=\"line\">      qaId,</span><br><span class=\"line\">    ]);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;cleanup qaId:&quot;</span> + qaId);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (conn) &#123;</span><br><span class=\"line\">    conn.<span class=\"title function_\">end</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">clearDB</span> = <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> (<span class=\"params\">appConfig</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title function_\">clearAsync</span>(appConfig.<span class=\"property\">orderId</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// db_clear.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> appConfig = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./_config/appConfig.js&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> mariaDBHelper = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./helper/mariaDBHelper.js&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">mariaDBHelper.<span class=\"title function_\">clearDB</span>(appConfig).<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  process.<span class=\"title function_\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//... 略</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;db:init&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;node ./db/init.js&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>實際在測試程式就利用<code>beforeEach</code>的<code>hook</code>來執行初始化的動作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;質檢單&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">beforeEach</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\tcy.<span class=\"title function_\">exec</span>(<span class=\"string\">&#x27;npm run db:init&#x27;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title function_\">it</span>(<span class=\"string\">&#x27;myTest&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//...some test code</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>執行測試後，會發現左側有<code>Hook</code>的名稱<br><img src=\"/artblog/cypress-io-test-data-handling/2020-07-23-171258.png\"></p>\n<h2 id=\"我不想串真實資料怎麼辦\"><a href=\"#我不想串真實資料怎麼辦\" class=\"headerlink\" title=\"我不想串真實資料怎麼辦\"></a>我不想串真實資料怎麼辦</h2><p>那就用假資料來做測試吧，可能有一些情境是你不想再跑測試的時候，讓他去吃到 API 過來的資料，而是想要模擬一個固定的回傳結果來測試；這樣的做法就是讓測試與外部相依隔離開來，所以會這樣做的情況，一般來說就已經不會再是整合測試的範疇，而是逐漸往單元測試靠攏了，當然具體如何還是要看實際的程式碼與應用情境</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">cy.<span class=\"title function_\">route</span>(url);</span><br><span class=\"line\">cy.<span class=\"title function_\">route</span>(url, response);</span><br><span class=\"line\">cy.<span class=\"title function_\">route</span>(method, url);</span><br><span class=\"line\">cy.<span class=\"title function_\">route</span>(method, url, response);</span><br><span class=\"line\">cy.<span class=\"title function_\">route</span>(callbackFn);</span><br><span class=\"line\">cy.<span class=\"title function_\">route</span>(options);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模擬一個假資料回應\"><a href=\"#模擬一個假資料回應\" class=\"headerlink\" title=\"模擬一個假資料回應\"></a>模擬一個假資料回應</h3><p><code>cypress.io</code>提供<a href=\"https://docs.cypress.io/api/commands/route.html\">route</a>語法，因此可以將指定的<code>url</code>，替換為預先指定好的回應結果</p>\n<p>例如下列的指令，將會監聽符合條件的網址請求，並回應一個 name 為 Phoebe 的使用者資料</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">cy.<span class=\"title function_\">route</span>(<span class=\"regexp\">/users\\/\\d+/</span>, &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;Phoebe&quot;</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>當請求網址符合剛才的正則表達式，實際取得的回應結果就會是剛才的假資料</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;https://localhost:7777/users/1337&quot;</span>, <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(data); <span class=\"comment\">// =&gt; &#123;id: 1, name: &quot;Phoebe&quot;&#125;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模擬多個假資料回應\"><a href=\"#模擬多個假資料回應\" class=\"headerlink\" title=\"模擬多個假資料回應\"></a>模擬多個假資料回應</h3><p>在下面這個範例透過<code>as()</code>、<code>cy.wait()</code>的方式，先幫<code>route</code>設定一個別名，然後透過<code>wait</code>去等候這個指令的執行結果，然後我們可以再次透過<code>route</code>去重複指定相同 url 的回應結果；透過相同的別名就可以取得新的回應結果了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">cy.<span class=\"title function_\">server</span>();</span><br><span class=\"line\">cy.<span class=\"title function_\">route</span>(<span class=\"string\">&quot;/beetles&quot;</span>, []).<span class=\"title function_\">as</span>(<span class=\"string\">&quot;getBeetles&quot;</span>);</span><br><span class=\"line\">cy.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;#search&quot;</span>).<span class=\"title function_\">type</span>(<span class=\"string\">&quot;Weevil&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// wait for the first response to finish</span></span><br><span class=\"line\">cy.<span class=\"title function_\">wait</span>(<span class=\"string\">&quot;@getBeetles&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// the results should be empty because we</span></span><br><span class=\"line\"><span class=\"comment\">// responded with an empty array first</span></span><br><span class=\"line\">cy.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;#beetle-results&quot;</span>).<span class=\"title function_\">should</span>(<span class=\"string\">&quot;be.empty&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// now re-define the /beetles response</span></span><br><span class=\"line\">cy.<span class=\"title function_\">route</span>(<span class=\"string\">&quot;/beetles&quot;</span>, [&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;Geotrupidae&quot;</span> &#125;]);</span><br><span class=\"line\"></span><br><span class=\"line\">cy.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;#search&quot;</span>).<span class=\"title function_\">type</span>(<span class=\"string\">&quot;Geotrupidae&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// now when we wait for &#x27;getBeetles&#x27; again, Cypress will</span></span><br><span class=\"line\"><span class=\"comment\">// automatically know to wait for the 2nd response</span></span><br><span class=\"line\">cy.<span class=\"title function_\">wait</span>(<span class=\"string\">&quot;@getBeetles&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// we responded with 1 beetle item so now we should</span></span><br><span class=\"line\"><span class=\"comment\">// have one result</span></span><br><span class=\"line\">cy.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;#beetle-results&quot;</span>).<span class=\"title function_\">should</span>(<span class=\"string\">&quot;have.length&quot;</span>, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"靜態測試資料-fixture\"><a href=\"#靜態測試資料-fixture\" class=\"headerlink\" title=\"靜態測試資料 (fixture)\"></a>靜態測試資料 (fixture)</h3><p>上面的做法都是將假資料寫在程式內，但為了方便管理，透過指定將靜態資料讀取進來，在將它設定為回應結果，應該是比較實務的做法，我們可以透過<code>cy.fixture()</code>做到這件事情，語法的細節可以參考<a href=\"https://docs.cypress.io/api/commands/fixture.html\">官網文件</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">cy.<span class=\"title function_\">fixture</span>(filePath);</span><br><span class=\"line\">cy.<span class=\"title function_\">fixture</span>(filePath, encoding);</span><br><span class=\"line\">cy.<span class=\"title function_\">fixture</span>(filePath, options);</span><br><span class=\"line\">cy.<span class=\"title function_\">fixture</span>(filePath, encoding, options);</span><br></pre></td></tr></table></figure>\n\n<p>一種方式是先用<code>fixture</code>接著再<code>route</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">cy.<span class=\"title function_\">fixture</span>(<span class=\"string\">&quot;user&quot;</span>).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  user.<span class=\"property\">firstName</span> = <span class=\"string\">&quot;Jane&quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// work with the users array here</span></span><br><span class=\"line\"></span><br><span class=\"line\">  cy.<span class=\"title function_\">route</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;**/user/123&quot;</span>, user);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>另外一種方式是直接一行解決掉，使用<code>route</code>的時候跟他說資料來自<code>fixture</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">cy.<span class=\"title function_\">server</span>();</span><br><span class=\"line\">cy.<span class=\"title function_\">route</span>(<span class=\"string\">&quot;**/posts/*&quot;</span>, <span class=\"string\">&quot;fixture:logo.png&quot;</span>).<span class=\"title function_\">as</span>(<span class=\"string\">&quot;getLogo&quot;</span>);</span><br><span class=\"line\">cy.<span class=\"title function_\">route</span>(<span class=\"string\">&quot;**/users&quot;</span>, <span class=\"string\">&quot;fixture:users/all.json&quot;</span>).<span class=\"title function_\">as</span>(<span class=\"string\">&quot;getUsers&quot;</span>);</span><br><span class=\"line\">cy.<span class=\"title function_\">route</span>(<span class=\"string\">&quot;**/admin&quot;</span>, <span class=\"string\">&quot;fx:users/admin.json&quot;</span>).<span class=\"title function_\">as</span>(<span class=\"string\">&quot;getAdmin&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>當然也可以透過別名來串聯這兩個指令，具體還是看自己喜歡哪種方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">cy.<span class=\"title function_\">fixture</span>(<span class=\"string\">&quot;user&quot;</span>).<span class=\"title function_\">as</span>(<span class=\"string\">&quot;fxUser&quot;</span>);</span><br><span class=\"line\">cy.<span class=\"title function_\">route</span>(<span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;**/users&quot;</span>, <span class=\"string\">&quot;@fxUser&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>上述的所有範例都取自<a href=\"https://docs.cypress.io/api/commands/route.html\">官網</a></p>\n</blockquote>\n<blockquote>\n<ol>\n<li><code>cy.route()</code>可以拿來做假資料，也可以直接發出請求</li>\n<li><code>cy.request()</code>會真的跟指定<code>end-point</code>發出請求，<code>cy.route()</code>則不一定</li>\n</ol>\n</blockquote>\n<p>此外，需要特別補充的是，在<code>/fixtures/</code>底下的 json 檔案，如果發生了無法解析<code>JSON</code>的錯誤，可以檢查一下是否檔案的編碼格式有沒有包含<code>BOM</code>，能夠正常運作的是不包含<code>BOM</code>的，所以記得要將<code>BOM</code>移除掉<br><img src=\"/artblog/cypress-io-test-data-handling/20210930-2.jpg\"><br><img src=\"/artblog/cypress-io-test-data-handling/20210930-3.jpg\"><br><img src=\"/artblog/cypress-io-test-data-handling/20210930-4.jpg\"></p>\n<p>如果使用<code>VSCode</code>做編輯器，可以在下方資訊點選後選擇<code>Save with Encoding</code>，並選擇<code>UTF-8</code>的格式；如果使用<code>Rider</code>的話，也可以點選<code>Remove BOM</code><br><img src=\"/artblog/cypress-io-test-data-handling/20210930-1.jpg\"></p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>測試資料的初始化、清除。要做到怎樣的程度，應該還是要看環境決定，如果只是在工程師自己開發環境在練習可能還無所謂，能跑就好；但是，如果不是在開發環境內，可能就要考慮一下，如果資料庫有髒資料的話會不會有甚麼影響，最好能夠避免這些副作用，<code>cypress</code>能夠做到整合測試資料的初始化與清除，但它也能夠用<code>stub</code>的方式模擬回應結果來隔絕外部相依，這些應該是看情境搭配，相輔相成的</p>\n<p>如果我想要完全模擬使用者的操作行為，也做好了測試資料的初始化與清除作業，但是偏偏流程當中有一個環節是跟其他公司的服務串接的，例如串接外部金流，但是對方卻沒有提供測試信用卡給你刷，可是你卻又要測試刷卡購物流程，難道你會每次測試都拿自己的卡出來真的刷嗎？肯定不會嘛，所以勢必要針對這個服務做隔離，當然目的還是再整合測試，但是卻隔絕了外部環境的相依，畢竟我們要測試的是刷卡購物的流程，而不是這張卡到底能不能刷過；如果我們要測試刷卡不過的購物流程，那就再寫一個模擬刷卡失敗的情境就好了</p>\n<p>對於<code>cypress</code>的使用我還在摸著石頭過河，文章若有錯誤的地方，請不吝指正，謝謝</p>\n","categories":["e2e"],"tags":["cypress"]},{"title":"Cypress.io 登入的測試案例","url":"/artblog//cypress-io-login-test-case/","content":"<p>這一篇專門講一下如何在<code>cypress.io</code>的測試程式裡面，撰寫登入系統的部分，之後如果有機會會慢慢更新</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Logging-in\"><a href=\"#Logging-in\" class=\"headerlink\" title=\"Logging in\"></a>Logging in</h2><p>這一段的目的是將測試行為中常常重複的登入動作，希望用一行指令就可以解決掉登入這件事情，很多功能都需要識別使用者身份，底下的程式是直接打後端 API 去做登入，略過了模擬頁面輸入帳密的行為，利用<code>cy.request()</code>來向後端實際發出請求登入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&quot;前台&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&quot;進入member頁面&quot;</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    cy.<span class=\"title function_\">request</span>(<span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;Account/SignIn&quot;</span>, &#123;</span><br><span class=\"line\">      <span class=\"attr\">loginId</span>: <span class=\"string\">&quot;real@user.com&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">password</span>: <span class=\"string\">&quot;realPassword&quot;</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    cy.<span class=\"title function_\">visit</span>(<span class=\"string\">&quot;/member&quot;</span>);</span><br><span class=\"line\">    cy.<span class=\"title function_\">url</span>().<span class=\"title function_\">should</span>(<span class=\"string\">&quot;contain&quot;</span>, <span class=\"string\">&quot;/member&quot;</span>);</span><br><span class=\"line\">    cy.<span class=\"title function_\">getCookie</span>(<span class=\"string\">&quot;.AspNetCore.Cookies&quot;</span>).<span class=\"title function_\">should</span>(<span class=\"string\">&quot;exist&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>上面的測試中，我們採用了<code>cy.request()</code>實際向後端登入送出帳密，之後則是瀏覽頁面，在官網的範例中，利用<code>set up</code>的方式去建立假資料<br>這樣做的好處是，確保測試程式沒有相依資料庫，因為他的準備工作都在執行測試之前用<code>set up</code>做掉了</p>\n<p>但是因為每個人的情境不一樣，工作、開發流程、團隊文化、甚至是機器配置都不一樣，實際上你也可以選擇在開發環境的資料庫中使用已存在的帳號進行測試登入行為，只要你的團隊有共識即可</p>\n<p><img src=\"/artblog/cypress-io-login-test-case/2020-05-15_15-32-49.png\"></p>\n<h2 id=\"Login-with-CSRFTOken\"><a href=\"#Login-with-CSRFTOken\" class=\"headerlink\" title=\"Login with CSRFTOken\"></a>Login with CSRFTOken</h2><p>真實世界裡面，網站為了避免資安攻擊，大部分都會加上一些防護措施，尤其是登入頁面，開發 <code>ASP.NET MVC</code>網站，也通常會利用在頁面埋上一個 token 的方式來判斷這個請求是否是從正確頁面過來的，通常後端會做這樣的事情</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AccountController.cs</span></span><br><span class=\"line\">[<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">[<span class=\"meta\">ValidateAntiForgeryToken</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">Login</span>(<span class=\"params\">LoginForm loginForm</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//...some code</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.View(loginForm);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>還有這樣的事情</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// login.cshtml</span></span><br><span class=\"line\">@using (Html.BeginForm(<span class=\"string\">&quot;Login&quot;</span>, <span class=\"string\">&quot;Account&quot;</span>, FormMethod.Post))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t@Html.AntiForgeryToken()</span><br><span class=\"line\">\t@* 帳號 *@</span><br><span class=\"line\">\t&lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span><br><span class=\"line\">\t\t@Html.LabelFor(model =&gt; model.Account)</span><br><span class=\"line\">\t\t@Html.EditorFor(model =&gt; model.Account, <span class=\"keyword\">new</span> &#123; htmlAttributes = <span class=\"keyword\">new</span> &#123; @class = <span class=\"string\">&quot;form-control&quot;</span>, placeholder = <span class=\"string\">&quot;請輸入帳號&quot;</span> &#125; &#125;)</span><br><span class=\"line\">\t\t@Html.ValidationMessageFor(model =&gt; model.Account, <span class=\"string\">&quot;&quot;</span>, <span class=\"keyword\">new</span> &#123; @class = <span class=\"string\">&quot;text-danger&quot;</span> &#125;)</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t@*....略 ....*@</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果是這樣子的登入頁面，就沒辦法用先前的方式背景登入，所以我們要透過一些小技巧來做</p>\n<p>增加一個 cypress 的指令，叫做<code>loginByCSRF</code>，這個指令接收 token 參數後，背景發出一個請求給後端登入頁面，傳送帳號、密碼及 token</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> account = <span class=\"string\">&quot;fakeUser&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> password = <span class=\"string\">&quot;fakePassword&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Cypress</span>.<span class=\"property\">Commands</span>.<span class=\"title function_\">add</span>(<span class=\"string\">&quot;loginByCSRF&quot;</span>, <span class=\"function\">(<span class=\"params\">csrfToken</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  cy.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&quot;POST&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&quot;/Account/Login&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">failOnStatusCode</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">form</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">body</span>: &#123;</span><br><span class=\"line\">      account,</span><br><span class=\"line\">      password,</span><br><span class=\"line\">      <span class=\"attr\">__RequestVerificationToken</span>: csrfToken,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在測試程式中，需要做登入的地方</p>\n<ol>\n<li>利用<code>request</code>取得登入頁面 Html，從中取得 token</li>\n<li>再次發出<code>request</code>，這一次將帳密跟 token 一起送給後端登入判斷</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> account = <span class=\"string\">&quot;fakeUser&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> password = <span class=\"string\">&quot;fakePassword&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">cy.<span class=\"title function_\">request</span>(<span class=\"string\">&quot;/Account/Login&quot;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">its</span>(<span class=\"string\">&quot;body&quot;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">body</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> $html = <span class=\"title class_\">Cypress</span>.$(body);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> csrf = $html.<span class=\"title function_\">find</span>(<span class=\"string\">&quot;input[name=__RequestVerificationToken]&quot;</span>).<span class=\"title function_\">val</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    cy.<span class=\"title function_\">loginByCSRF</span>(csrf).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">resp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// assert 登入是否成功</span></span><br><span class=\"line\">      <span class=\"title function_\">expect</span>(resp.<span class=\"property\">status</span>).<span class=\"property\">to</span>.<span class=\"title function_\">eq</span>(<span class=\"number\">200</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>這個範例是從<a href=\"https://docs.cypress.io/examples/examples/recipes.html\">官方文件:Recipes</a>看到的，還有很多範例可以參考</p>\n<p>完整的範例如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&quot;頁面測試&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> account = <span class=\"string\">&quot;testuser&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> password = <span class=\"string\">&quot;testpass&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Cypress</span>.<span class=\"property\">Commands</span>.<span class=\"title function_\">add</span>(<span class=\"string\">&quot;loginByCSRF&quot;</span>, <span class=\"function\">(<span class=\"params\">csrfToken</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    cy.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">method</span>: <span class=\"string\">&quot;POST&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">url</span>: <span class=\"string\">&quot;/Account/Login&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">failOnStatusCode</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">form</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">body</span>: &#123;</span><br><span class=\"line\">        account,</span><br><span class=\"line\">        password,</span><br><span class=\"line\">        <span class=\"attr\">__RequestVerificationToken</span>: csrfToken,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    cy.<span class=\"title function_\">request</span>(<span class=\"string\">&quot;/Account/Login&quot;</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">its</span>(<span class=\"string\">&quot;body&quot;</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">body</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> $html = <span class=\"title class_\">Cypress</span>.$(body);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> csrf = $html.<span class=\"title function_\">find</span>(<span class=\"string\">&quot;input[name=__RequestVerificationToken]&quot;</span>).<span class=\"title function_\">val</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        cy.<span class=\"title function_\">loginByCSRF</span>(csrf).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">resp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">expect</span>(resp.<span class=\"property\">status</span>).<span class=\"property\">to</span>.<span class=\"title function_\">eq</span>(<span class=\"number\">200</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&quot;會員專區&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    cy.<span class=\"title function_\">visit</span>(<span class=\"string\">&quot;/Member&quot;</span>);</span><br><span class=\"line\">    cy.<span class=\"title function_\">url</span>().<span class=\"title function_\">should</span>(<span class=\"string\">&quot;contain&quot;</span>, <span class=\"string\">&quot;/Member&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重構登入\"><a href=\"#重構登入\" class=\"headerlink\" title=\"重構登入\"></a>重構登入</h2><p><img src=\"/artblog/cypress-io-login-test-case/2020-07-09_16-05-26.png\"></p>\n<p>我們將原本的程式碼進行重構，將一些可能重複利用的程式碼抽離出來放到其他地方去，盡量讓測試程式乾淨一點</p>\n<p>將會員登入的部分放到會員的<code>helper</code>裡面，之後需要登入就直接呼叫此方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// helper/memberHelper.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">signIn</span>: <span class=\"function\">(<span class=\"params\">user</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    cy.<span class=\"title function_\">request</span>(<span class=\"string\">&quot;/Account/Login&quot;</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">its</span>(<span class=\"string\">&quot;body&quot;</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">body</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> $html = <span class=\"title class_\">Cypress</span>.$(body);</span><br><span class=\"line\">        <span class=\"keyword\">const</span> csrf = $html.<span class=\"title function_\">find</span>(<span class=\"string\">&quot;input[name=__RequestVerificationToken]&quot;</span>).<span class=\"title function_\">val</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        cy.<span class=\"title function_\">loginByCSRF</span>(user, csrf).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">resp</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"title function_\">expect</span>(resp.<span class=\"property\">status</span>).<span class=\"property\">to</span>.<span class=\"title function_\">eq</span>(<span class=\"number\">200</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>一些測試的會員登入帳號就放在這邊</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// helper/user.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">art</span>: &#123; <span class=\"attr\">account</span>: <span class=\"string\">&quot;art&quot;</span>, <span class=\"attr\">password</span>: <span class=\"string\">&quot;111&quot;</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">bob</span>: &#123; <span class=\"attr\">account</span>: <span class=\"string\">&quot;bob&quot;</span>, <span class=\"attr\">password</span>: <span class=\"string\">&quot;222&quot;</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">cat</span>: &#123; <span class=\"attr\">account</span>: <span class=\"string\">&quot;cat&quot;</span>, <span class=\"attr\">password</span>: <span class=\"string\">&quot;333&quot;</span> &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>將新增的指令放在這個檔案內，就可以於 cypress 內重複使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cypress/support/commands.js</span></span><br><span class=\"line\"><span class=\"title class_\">Cypress</span>.<span class=\"property\">Commands</span>.<span class=\"title function_\">add</span>(<span class=\"string\">&quot;loginByCSRF&quot;</span>, <span class=\"function\">(<span class=\"params\">user, token</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  cy.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&quot;POST&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&quot;/Account/Login&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">failOnStatusCode</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">form</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">body</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">account</span>: user.<span class=\"property\">account</span>,</span><br><span class=\"line\">      <span class=\"attr\">password</span>: user.<span class=\"property\">password</span>,</span><br><span class=\"line\">      <span class=\"attr\">__RequestVerificationToken</span>: token,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>測試程式中引用檔案後，直接改寫如下，相較於先前版本，更容易理解，不過如果想要省略掉 user.js，其實也可以讓自訂指令從接收<code>user</code>物件，改為直接接收帳號密碼參數，這個就看個人選擇了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// /cypress/integration/MyTest/my.spec.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> member <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../../helper/memberHelper&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> users <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../../helper/user&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&quot;頁面測試&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    member.<span class=\"title function_\">signIn</span>(users.<span class=\"property\">art</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&quot;會員專區&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    cy.<span class=\"title function_\">visit</span>(<span class=\"string\">&quot;/Member&quot;</span>);</span><br><span class=\"line\">    cy.<span class=\"title function_\">url</span>().<span class=\"title function_\">should</span>(<span class=\"string\">&quot;contain&quot;</span>, <span class=\"string\">&quot;/Member&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"補充-20220714\"><a href=\"#補充-20220714\" class=\"headerlink\" title=\"補充 - 20220714\"></a>補充 - 20220714</h2><p>因為先前的文章作法現在看來有很多改進空間，不調整原先的文章，直接補充在這邊</p>\n<h3 id=\"去除多餘的結構\"><a href=\"#去除多餘的結構\" class=\"headerlink\" title=\"去除多餘的結構\"></a>去除多餘的結構</h3><p>原先的登入方式將登入行為與取得 token 的部分拆成兩個部分，應該可以放在一起，讓邏輯維持在同一個地方，而不是分散兩地，現在我會把它寫成下面這樣</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cypress/support/commands.js</span></span><br><span class=\"line\"><span class=\"title class_\">Cypress</span>.<span class=\"property\">Commands</span>.<span class=\"title function_\">add</span>(<span class=\"string\">&quot;login&quot;</span>, <span class=\"function\">(<span class=\"params\">&#123; account, password &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  cy.<span class=\"title function_\">request</span>(<span class=\"string\">&quot;/Account/Login&quot;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">its</span>(<span class=\"string\">&quot;body&quot;</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">body</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> $html = <span class=\"title class_\">Cypress</span>.$(body);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> csrf = $html.<span class=\"title function_\">find</span>(<span class=\"string\">&quot;input[name=__RequestVerificationToken]&quot;</span>).<span class=\"title function_\">val</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">      cy.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">method</span>: <span class=\"string\">&quot;POST&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">url</span>: <span class=\"string\">&quot;/Account/Login&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">failOnStatusCode</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"attr\">form</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">body</span>: &#123;</span><br><span class=\"line\">          account,</span><br><span class=\"line\">          password,</span><br><span class=\"line\">          <span class=\"attr\">__RequestVerificationToken</span>: csrf,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//sample.spec.js</span></span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&quot;頁面測試&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">beforeEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    cy.<span class=\"title function_\">login</span>(&#123; <span class=\"attr\">account</span>: <span class=\"string\">&quot;guest&quot;</span>, <span class=\"attr\">password</span>: <span class=\"string\">&quot;guest&quot;</span> &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">it</span>(<span class=\"string\">&quot;檢視會員專區頁面&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    cy.<span class=\"title function_\">visit</span>(<span class=\"string\">&quot;/Member&quot;</span>);</span><br><span class=\"line\">    cy.<span class=\"title function_\">url</span>().<span class=\"title function_\">should</span>(<span class=\"string\">&quot;contain&quot;</span>, <span class=\"string\">&quot;/Member&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>因為自訂指令希望是通用，所以將它與原先版本的 user, memberHelper 解耦合，上面的做法是用<code>request</code>去做，我想應該也可以做成直接透過<code>cy.visit()</code>,然後用<code>cy.get()</code>然後再 type()去實際操作登入，坦白說我對於這個有點困惑，但至少兩種方法我都能夠做的出來。等我要用的時候也有辦法做到；但目前的想法是，希望測試案例聚焦在我想要測試的東西上面，如果是想要驗證登入後的行為，我會選擇讓登入的動作在背景就做掉，而不是完全百分百的模擬登入操作的這件事情</p>\n","categories":["e2e"],"tags":["cypress"]},{"title":"ELK stack with filebeat","url":"/artblog//ELK-stack-with-filebeat/","content":"<p>本次練習如何透過<code>filebeat</code>採集主機資訊，並傳遞給<code>logstash</code>進行分析過濾後，由<code>kibana</code>的介面去查看資料；另外一個用法是直接讓<code>filebeat</code>的資料丟給<code>elasticSearch</code>，並且最終在<code>kibana</code>的<code>Logs</code>功能裡面查看，不過我沒有使用就不介紹了</p>\n<span id=\"more\"></span>\n\n<h2 id=\"架構\"><a href=\"#架構\" class=\"headerlink\" title=\"架構\"></a>架構</h2><p><img src=\"/artblog/ELK-stack-with-filebeat/01.png\"></p>\n<h2 id=\"環境建立\"><a href=\"#環境建立\" class=\"headerlink\" title=\"環境建立\"></a>環境建立</h2><p>基本上就是透過 docker 建立所需要的東西，這部分請參考我自己練習的<a href=\"https://github.com/art-Blog/my-docker-elk\">docker-compose</a>，當然我也是改自<a href=\"https://github.com/deviantony/docker-elk\">deviantony&#x2F;docker-elk</a>的<code>Elastic stack (ELK) on Docker</code>，有興趣的人可以了解一下</p>\n<h2 id=\"filebeat\"><a href=\"#filebeat\" class=\"headerlink\" title=\"filebeat\"></a>filebeat</h2><p>依照下列的設定表示要監控該目錄下的 log 檔案，本次練習要監控的目標檔案是由 IIS 產生的網站 log 資料，但因為預計是用 docker 建立，所以我們在此處只需要指定某個路徑，屆時要建立 container 的時候，再透過 volume 來掛載實際路徑即可</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">filebeat.inputs:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">log</span></span><br><span class=\"line\">      <span class=\"attr\">enabled:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">/logs/*.log</span></span><br></pre></td></tr></table></figure>\n\n<p>而標籤這個屬性則可以讓後續處理的 Logstash 知道應該用怎樣的規則解析資料用的</p>\n<ul>\n<li>標記 iis-log 是為了讓 logstash 可以我們自訂的 iis-log 解析方式來切割我們所需要的欄位</li>\n<li>標記 web 是為了在 logstash 輸出的時候，可以分類在不同的 index，這樣在 kibana 可以透過切換索引的方式來查詢不同的資料</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">tags:</span> [<span class=\"string\">&#x27;iis-log&#x27;</span>, <span class=\"string\">&#x27;web&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>這邊範例使用 docker 架設，所以寫的也是 docker-compose 裡面對應的名稱，但實務上通常會是另外一台</p>\n<p>因為<code>filebeat</code>所占用的資源通常很少，對於系統可忽略不計，而<code>logstash</code>會占用較多資源，所以實務上通常都是用<code>filebeat</code>收集資料，由<code>logstash</code>分析處理再轉發給<code>elasticSearch</code>儲存</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">output.logstash:</span></span><br><span class=\"line\">    <span class=\"attr\">hosts:</span> [<span class=\"string\">&#x27;logstash:5000&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<p>所以完整的<code>filebeat</code>設定檔如下</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">filebeat.inputs:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">log</span></span><br><span class=\"line\">      <span class=\"attr\">paths:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">/logs/*.log</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span> [<span class=\"string\">&#x27;iis-log&#x27;</span>, <span class=\"string\">&#x27;web&#x27;</span>]</span><br><span class=\"line\"><span class=\"attr\">output.logstash:</span></span><br><span class=\"line\">    <span class=\"attr\">hosts:</span> [<span class=\"string\">&#x27;logstash:5000&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"LogStash\"><a href=\"#LogStash\" class=\"headerlink\" title=\"LogStash\"></a>LogStash</h2><h3 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h3><p>不免俗地從<code>Hello World</code>開始，為了示範方便，採用<code>Docker</code>安裝<code>Logstash</code>來進行測試</p>\n<p>先下載 logstash docker image</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull docker.elastic.co/logstash/logstash:7.9.3</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/ELK-stack-with-filebeat/04.png\"></p>\n<p>嘗試一下看看版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --rm docker.elastic.co/logstash/logstash:7.9.3 --version</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/ELK-stack-with-filebeat/05.png\"></p>\n<p>設定檔的結構分成三大區塊 <code>input</code>、<code>filter</code>、<code>output</code>，對應的行為就是：輸入資料、處理資料、輸出資料<br>在這邊我們希望由鍵盤輸入資料，顯示在螢幕上，採用的都是標準輸入、輸出，所以指令如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -it --rm logstash -e &quot;input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123; &#125; &#125;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>輸入的<code>Hello World</code>之後可以看到螢幕上輸出的結果<br><img src=\"/artblog/ELK-stack-with-filebeat/06.png\"></p>\n<h3 id=\"設定語法\"><a href=\"#設定語法\" class=\"headerlink\" title=\"設定語法\"></a>設定語法</h3><p><strong>區段</strong><br>用大括號來定義，裡面可以包含<code>logstash</code>外掛設定，例如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">    stdin &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>表示藉由 input 外掛<code>stdin</code>作為 logstash 的輸入</p>\n<p><strong>資料型態</strong></p>\n<table>\n<thead>\n<tr>\n<th>type</th>\n<th>sample</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>bool</td>\n<td>debug &#x3D;&gt; true</td>\n</tr>\n<tr>\n<td>string</td>\n<td>host &#x3D;&gt; “hostname”</td>\n</tr>\n<tr>\n<td>number</td>\n<td>port &#x3D;&gt; 8080</td>\n</tr>\n<tr>\n<td>array</td>\n<td>match &#x3D;&gt; [“datetime”,”UNIX”,”ISO8601”]</td>\n</tr>\n<tr>\n<td>hash</td>\n<td>options &#x3D;&gt; { key1 &#x3D;&gt; “value1”, key2 &#x3D;&gt; “value2” }</td>\n</tr>\n</tbody></table>\n<p><strong>引用欄位</strong><br>例如資料來源有一個是 tags，要引用他就加上中括號 <code>[tags]</code></p>\n<p><strong>條件判斷</strong></p>\n<table>\n<thead>\n<tr>\n<th>type</th>\n<th>sample</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>equality</td>\n<td><code>==</code>,<code>!=</code>,<code>&lt;</code>,<code>&gt;</code>,<code>&lt;=</code>,<code>&gt;=</code></td>\n</tr>\n<tr>\n<td>regexp</td>\n<td><code>=~</code>,<code>!~</code></td>\n</tr>\n<tr>\n<td>inclusion</td>\n<td><code>in</code>, <code>not in</code></td>\n</tr>\n<tr>\n<td>boolean</td>\n<td><code>and</code>,<code>or</code>,<code>nand</code>,<code>xor</code></td>\n</tr>\n<tr>\n<td>unary</td>\n<td><code>!()</code></td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>參考資料來源取自<code>ELK 權威指南第二版 - </code> - ISBN:978-7-111-56329-7</p>\n</blockquote>\n<h3 id=\"input\"><a href=\"#input\" class=\"headerlink\" title=\"input\"></a><a href=\"https://www.elastic.co/guide/en/logstash/7.9/input-plugins.html\">input</a></h3><p>input 的 plugin 之中，因為我們當前情境要用的是<code>filebeat</code>，相關的文件可以參考<a href=\"https://www.elastic.co/guide/en/logstash/current/plugins-inputs-beats.html\">此處</a>，在這邊因為 <code>filebeat</code> 送資料進來的 port 是 5044，所以 <code>logstash</code> 需要監聽這個 port，設定如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">    beats &#123;</span><br><span class=\"line\">        port =&gt; 5044</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"codec\"><a href=\"#codec\" class=\"headerlink\" title=\"codec\"></a>codec</h3><p>logstash 在處理資料的部分，其實不只是 <code>input | filter | output</code>，應該是 <code>input | decode | filter | encode | output </code>，而<code>codec</code>就是在處理<code>decode</code>、<code>encode</code>的部分<br>不過因為我目前實務上並沒有需求使用到這些東西，所以先暫時知道有這麼一回事情就好，細節的部份可以看一下<a href=\"https://www.elastic.co/guide/en/logstash/current/codec-plugins.html\">官方介紹</a>，了解一下支援的編碼格式</p>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a><a href=\"https://www.elastic.co/guide/en/logstash/7.9/filter-plugins.html\">filter</a></h3><p>照字面上的翻譯是過濾，但其實可以想像成切割，因為這階段做的事情就是將輸入資料透過我們設定好的方式，從原始資料中切割出我們所需要的資料格式，然後交給下一個階段輸出</p>\n<p>IISLOG 原始的資料格式如下，一行就是一筆資料，以空格分開，對應的欄位順序如同<code>#Fields</code>一樣</p>\n<p>新增的自訂欄位設定如下<br><img src=\"/artblog/ELK-stack-with-filebeat/IISREC.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#Software: Microsoft Internet Information Services 10.0</span><br><span class=\"line\">#Version: 1.0</span><br><span class=\"line\">#Date: 2020-11-02 02:36:20</span><br><span class=\"line\">#Fields: date time s-ip cs-method cs-uri-stem cs-uri-query s-port cs-username c-ip cs(User-Agent) cs(Referer) sc-status sc-substatus sc-win32-status sc-bytes cs-bytes time-taken t-id</span><br><span class=\"line\">2020-11-02 02:36:19 ::1 POST /CustomerService/GetServerCustomer - 80 OB測試 ::1 Mozilla/5.0+(Windows+NT+10.0;+Win64;+x64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/86.0.4240.111+Safari/537.36 http://localhost/Order 200 0 0 235 2014 484 61901600</span><br><span class=\"line\">2020-11-02 02:36:17 ::1 POST /CustomerService/GetServerCustomer - 80 OB測試 ::1 Mozilla/5.0+(Windows+NT+10.0;+Win64;+x64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/86.0.4240.111+Safari/537.36 http://localhost/Order 200 0 0 235 2014 1753 25991359</span><br></pre></td></tr></table></figure>\n\n<p>由於將 filebeat 設定標籤為<code>iis-log</code>、<code>web</code>，所以在 filter 這邊就可以透過下列的判斷式處理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">filter &#123;</span><br><span class=\"line\">    if &quot;iis-log&quot; in [tags] &#123;</span><br><span class=\"line\">        # 解析來源，並切割為指定欄位</span><br><span class=\"line\">        # https://www.elastic.co/guide/en/logstash/current/plugins-filters-grok.html#plugins-filters-grok-match</span><br><span class=\"line\">        grok &#123;</span><br><span class=\"line\">            match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;TIMESTAMP_ISO8601:datetime&#125; %&#123;IP:siteIP&#125; %&#123;WORD:method&#125; %&#123;NOTSPACE:uriStem&#125; %&#123;NOTSPACE:uriQuery&#125; %&#123;NUMBER:port&#125; %&#123;NOTSPACE:username&#125; %&#123;IPORHOST:clientHost&#125; %&#123;NOTSPACE:userAgent&#125; %&#123;NOTSPACE:referer&#125; %&#123;NUMBER:httpStatus&#125; %&#123;NUMBER:httpSubtatus&#125; %&#123;NUMBER:win32Status&#125; %&#123;NUMBER:sentBytes&#125; %&#123;NUMBER:receivedBytes&#125; %&#123;NUMBER:timeTaken&#125; %&#123;NOTSPACE:tid&#125;&quot; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 不需要紀錄則丟棄</span><br><span class=\"line\">        if [uriStem] =~ /\\/slb.aspx|\\/signalr\\/|\\/Content\\/|\\/bundles\\/|\\/Scripts\\/|\\/Resource\\/|.css|.js|.ico|.png|.jpg|.svg/ &#123;</span><br><span class=\"line\">            drop &#123; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 請求花費時間的資料格式改為float</span><br><span class=\"line\">        mutate &#123;</span><br><span class=\"line\">            #convert =&gt; [&quot;timeTaken&quot;, &quot;date&quot;]</span><br><span class=\"line\">            convert =&gt; &#123;</span><br><span class=\"line\">                &quot;timeTaken&quot; =&gt; &quot;float&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 自行指定 logstash 的 timestamp</span><br><span class=\"line\">        # https://www.elastic.co/guide/en/logstash/current/plugins-filters-date.html#plugins-filters-date-match</span><br><span class=\"line\">        # Example: datetime的資料格式可能為ISO8601、YYYY-MM-dd HH:mm:ss或是YYYY-MM-dd HH:mm:ss.ZZZ的格式，指定用於日期解析的時區並為+00:00，也就是格林威治時間</span><br><span class=\"line\">        date &#123;</span><br><span class=\"line\">            match =&gt; [ &quot;datetime&quot;, &quot;ISO8601&quot;, &quot;YYYY-MM-dd HH:mm:ss&quot;, &quot;YYYY-MM-dd HH:mm:ss.ZZZ&quot; ]</span><br><span class=\"line\">            locale =&gt; &quot;en&quot;</span><br><span class=\"line\">            timezone =&gt; &quot;+00:00&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意，網站 IIS log 若沒有特別處理，通常都是用 W3C 的格式，而這個格式的時間是格林威治時間，所以在<code>logstash</code>為了要讓他在<code>kibana</code>裡面的時間是我們 UTC+8 的時間，所以利用<code>date</code>這個外掛指定<code>timezone</code></p>\n</blockquote>\n<p>在<code>filter</code>這個部分會常用到的是<code>grok</code>表達語法，格式是<code>%&#123;屬性:自訂切割後屬性名稱&#125;</code>，可以透過<a href=\"https://grokdebug.herokuapp.com/\">grokdebug</a>這個線上工具驗證語法，以上面的設定為例子，就是透過 IIS LOG 的訊息，撰寫對應的 grok 語法去切割我們所需要的資料，有興趣的人可以去網站試試看</p>\n<p><img src=\"/artblog/ELK-stack-with-filebeat/02.png\"></p>\n<h3 id=\"output\"><a href=\"#output\" class=\"headerlink\" title=\"output\"></a><a href=\"https://www.elastic.co/guide/en/logstash/7.9/output-plugins.html\">output</a></h3><p>輸出的部分就較簡單，確認是<code>web</code>的話就塞到<code>web-iis-log-XXXX.XX.XX</code>的 index 去，順便也用標準輸出 <code>stdout</code>，如果有問題還可以去 container 裡面看，如果不需要當然也可以移除 <code>stdout</code>這行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">output &#123;</span><br><span class=\"line\">    if &quot;web&quot; in [tags] &#123;</span><br><span class=\"line\">        stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class=\"line\">        elasticsearch &#123;</span><br><span class=\"line\">            hosts =&gt; &quot;elasticsearch:9200&quot;</span><br><span class=\"line\">            index =&gt; &quot;web-iis-log-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class=\"line\">            ilm_enabled =&gt; true</span><br><span class=\"line\">            ilm_policy =&gt; &quot;log-ilm-policy&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"結果\"><a href=\"#結果\" class=\"headerlink\" title=\"結果\"></a>結果</h2><p>elastic 跟 kibana 的部分就參考 github 內容，這邊比較沒什麼需要說明的，直接看結果</p>\n<p><img src=\"/artblog/ELK-stack-with-filebeat/03.png\"></p>\n<p>可以看到我們經由<code>logstash</code>切割出來的欄位都已經能夠在<code>kibana</code>中出現，例如<code>tid</code>，<code>username</code>等等，這樣就可以利用來搜尋了</p>\n","categories":["elk"],"tags":["elasticSearch","APM","filebeat"]},{"title":"Hangfire 初學","url":"/artblog//Hangfire-%E5%88%9D%E5%AD%B8/","content":"<p>以下範例使用 dotnet core mvc 專案，參考 hangfire 官網文件:<a href=\"https://docs.hangfire.io/en/latest/getting-started/aspnet-core-applications.html\">ASP.NET Core Applications</a>及其他參考資料練習，相關連結隨附於後不再贅述</p>\n<span id=\"more\"></span>\n\n<p>Sample Code:<a href=\"https://github.com/art-Blog/hangfireLab\">Github</a></p>\n<h2 id=\"參考連結\"><a href=\"#參考連結\" class=\"headerlink\" title=\"參考連結\"></a>參考連結</h2><ol>\n<li><a href=\"https://docs.hangfire.io/en/latest/getting-started/aspnet-core-applications.html\">ASP.NET Core Applications</a></li>\n<li><a href=\"https://blog.kkbruce.net/2015/09/hangfire-aspnet-mvc-webapi.html\">使用 HANGFIRE 處理 ASP.NET MVC&#x2F;WEB API 長時間與排程工作</a></li>\n<li><a href=\"https://xpy.gofa.cloud/2019/07/03/aspnetcore_use_hangfire/\">ASP.NET Core 使用 Hangfire 做排程</a></li>\n<li><a href=\"https://docs.hangfire.io/en/latest/background-methods/writing-unit-tests.html\">Hangfire: Writing unit tests</a></li>\n<li><a href=\"https://dotblogs.com.tw/yc421206/2020/03/05/how_to_do_test_at_hangfire_job\">如何對 Hangfire Job 撰寫測試</a></li>\n</ol>\n<h2 id=\"OverView\"><a href=\"#OverView\" class=\"headerlink\" title=\"OverView\"></a>OverView</h2><p><img src=\"/artblog/Hangfire-%E5%88%9D%E5%AD%B8/hangfire-workflow.png\"></p>\n<p>從上圖可以看到 hangfire 的三種腳色</p>\n<ol>\n<li>Client：負責建立各種任務，可藉由 hangfire 提供的方法建立即時、延遲、重複任務。由 Client 負責將其序列化之後儲存於<code>Storage</code></li>\n<li>Storage：儲存任務資料用，有很多 Storage 套件可供選擇，支援 SQL、Redis 等常見主流的 storage 方案</li>\n<li>Server：從<code>storage</code>中取得任務並執行</li>\n</ol>\n<h2 id=\"How-to-Start\"><a href=\"#How-to-Start\" class=\"headerlink\" title=\"How to Start\"></a>How to Start</h2><h3 id=\"建立-dotnet-core-mvc-專案\"><a href=\"#建立-dotnet-core-mvc-專案\" class=\"headerlink\" title=\"建立 dotnet core mvc 專案\"></a>建立 dotnet core mvc 專案</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">dotnet new mvc</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安裝-nuget-套件\"><a href=\"#安裝-nuget-套件\" class=\"headerlink\" title=\"安裝 nuget 套件\"></a>安裝 nuget 套件</h3><ol>\n<li><code>Hangfire.AspNetCore</code></li>\n<li><code>Hangfire.MemoryStorage</code></li>\n</ol>\n<blockquote>\n<p>此處因為練習而採用 memory storage，production 記得要改用持久化的 storage 解決方案</p>\n</blockquote>\n<h3 id=\"啟用-hangfire-dashboard\"><a href=\"#啟用-hangfire-dashboard\" class=\"headerlink\" title=\"啟用 hangfire dashboard\"></a>啟用 hangfire dashboard</h3><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//startup.cs</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...略</span></span><br><span class=\"line\">    <span class=\"comment\">// 加入 hangfire 的server實體，可重複此行加入多個實體</span></span><br><span class=\"line\">    app.UseHangfireServer();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 加入 hangfire 控制面板</span></span><br><span class=\"line\">    app.UseHangfireDashboard(</span><br><span class=\"line\">        pathMatch: <span class=\"string\">&quot;/hangfire&quot;</span>,</span><br><span class=\"line\">        options: <span class=\"keyword\">new</span> DashboardOptions() &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 進入 hangfire dashboard 的授權規則 (有沒有權限看 dashboard 就看這個邏輯怎麼設定)</span></span><br><span class=\"line\">            Authorization = <span class=\"keyword\">new</span>[] &#123; <span class=\"keyword\">new</span> MyAuthFilter() &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseEndpoints(endpoints =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        endpoints.MapControllerRoute(</span><br><span class=\"line\">            name: <span class=\"string\">&quot;default&quot;</span>,</span><br><span class=\"line\">            pattern: <span class=\"string\">&quot;&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    services.AddControllersWithViews();</span><br><span class=\"line\">    services.AddHangfire(config =&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 memory storage</span></span><br><span class=\"line\">        config.UseMemoryStorage();</span><br><span class=\"line\">        <span class=\"comment\">// 使用 console</span></span><br><span class=\"line\">        config.UseConsole();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MyAuthFilter</span> : <span class=\"title\">IDashboardAuthorizationFilter</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">Authorize</span>(<span class=\"params\">[NotNull] DashboardContext context</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 後面可以改別的邏輯，例如判斷session是否存在，或是identity claim等等</span></span><br><span class=\"line\">        <span class=\"comment\">// 此處測試直接讓任何人都可以瀏覽</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"設定-dashboard-並建立第一個-job\"><a href=\"#設定-dashboard-並建立第一個-job\" class=\"headerlink\" title=\"設定 dashboard 並建立第一個 job\"></a>設定 dashboard 並建立第一個 job</h3><figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IWebHostEnvironment env, IBackgroundJobClient backgroundJobs</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...略...</span></span><br><span class=\"line\">    <span class=\"comment\">// 測試需要，直接在startup.cs裡面加入即時任務</span></span><br><span class=\"line\">    backgroundJobs.Enqueue(() =&gt; Console.WriteLine(<span class=\"string\">&quot;Hello world from Hangfire!&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">// ...略...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這樣一來就會可以在網站路由<code>/hangfire</code>底下看到剛剛建立的<code>Console.WriteLine</code>已經完成<br><img src=\"/artblog/Hangfire-%E5%88%9D%E5%AD%B8/2020-05-02_16-51-30.png\"></p>\n<h2 id=\"Job-類型\"><a href=\"#Job-類型\" class=\"headerlink\" title=\"Job 類型\"></a>Job 類型</h2><h3 id=\"Fire-and-forget-jobs\"><a href=\"#Fire-and-forget-jobs\" class=\"headerlink\" title=\"Fire-and-forget jobs\"></a>Fire-and-forget jobs</h3><p>依照<a href=\"https://docs.hangfire.io/en/latest/background-methods/calling-methods-in-background.html\">Calling methods in background</a>一文說明，我們在上一個步驟執行的就是背景調用方法</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jobId = BackgroundJob.Enqueue(() =&gt; Console.WriteLine(<span class=\"string\">&quot;Fire-and-forget!&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>實際上他並不是當下就執行那個任務，而是轉為下列行為：</p>\n<ol>\n<li>序列化方法及參數</li>\n<li>根據序列化的內容建立一個新的<code>背景執行任務</code></li>\n<li>將這個<code>背景執行任務</code>儲存於我們所設定的持久化儲存機制內，也就是<code>storage</code></li>\n<li>將<code>背景執行任務</code>放在 Queue 的執行隊列中排隊</li>\n</ol>\n<p>做完了這些事情後，程式返回原先的地方依序往下執行</p>\n<p>上面這一段有點饒舌，簡單來說就是，當我們使用<code>Enqueue</code>這個方法執行 Console.WriteLine 的時候，其實是把這個東西轉變成一個背景任務，放到 hangfire 的 Queue 裡面排隊。</p>\n<p>那他什麼時候才會執行呢？這就要靠另外一個腳色<code>hangfire server</code>來檢查 Queue 裡面還有沒有任務要執行，有的話它會先把這個任務隱藏，這樣其他的人就沒辦法看到這個任務，這個是為了避免同一個任務被多次執行，接著就是執行任務了，等到執行完成，他才會把這個任務從 Queue 裡面刪除</p>\n<h3 id=\"Delayed-jobs\"><a href=\"#Delayed-jobs\" class=\"headerlink\" title=\"Delayed jobs\"></a>Delayed jobs</h3><p>中文有點難理解，英文原文反而很清楚，所以其實學 IT 的人應該還是要習慣看英文啦~</p>\n<p>官網文件介紹這個情境是，假設有新會員註冊，也許你會希望在會員註冊的第二天發送一封 Email 給他們。我覺得這樣的介紹很不錯，看其他人的 Blog 都說有好幾種排程，我就在想那什麼時候會用到這些東西呢？果然官網沒有讓我失望啊。正好呼應了學新東西最好的方式，就是看官網文件</p>\n<p>下面就是建立一個延遲調用的語法範例，看起來很好懂啊</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jobId = BackgroundJob.Schedule(() =&gt; Console.WriteLine(<span class=\"string\">&quot;Delayed!&quot;</span>), TimeSpan.FromDays(<span class=\"number\">7</span>));</span><br></pre></td></tr></table></figure>\n\n<p>但是其實這邊暴露了另外一個重要資訊喔，那就是<code>hangfire server</code>要多久來檢查定期任務呢？所以其實是有提供設定方式的</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> options = <span class=\"keyword\">new</span> BackgroundJobServerOptions</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    SchedulePollingInterval = TimeSpan.FromMinutes(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"keyword\">new</span> BackgroundJobServer(options);</span><br></pre></td></tr></table></figure>\n\n<p>這裡還有特別提到如果是在 ASP.NET 應用程式的話，還需要做一些額外的事情，詳情就看一下<a href=\"https://docs.hangfire.io/en/latest/background-methods/calling-methods-with-delay.html\">官網說明</a>囉</p>\n<h3 id=\"Recurring-jobs\"><a href=\"#Recurring-jobs\" class=\"headerlink\" title=\"Recurring jobs\"></a>Recurring jobs</h3><p>官網範例只有一行，Cron 類別看來是跟 linux crontab 一樣的東西，可以看一下鳥哥的文章<a href=\"http://linux.vbird.org/linux_basic/0430cron.php\">第十五章、例行性工作排程(crontab)</a>，或者是<a href=\"https://en.wikipedia.org/wiki/Cron#CRON_expression\">wiki 說明</a></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\">RecurringJob.AddOrUpdate(() =&gt; Console.WriteLine(<span class=\"string\">&quot;Recurring!&quot;</span>), Cron.Daily);</span><br><span class=\"line\"><span class=\"comment\">// 或是使用Cron表達式</span></span><br><span class=\"line\">RecurringJob.AddOrUpdate(() =&gt; Console.Write(<span class=\"string\">&quot;Powerful!&quot;</span>), <span class=\"string\">&quot;0 12 * */2&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>加入識別 ID 語法如下</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 給予周期性任務一個識別ID</span></span><br><span class=\"line\">RecurringJob.AddOrUpdate(<span class=\"string\">&quot;some-id&quot;</span>, () =&gt; Console.WriteLine(<span class=\"string\">&quot;wow!!&quot;</span>), Cron.Hourly);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>識別 ID 在某些 Storage 可能會區分大小寫；識別 ID 應為 Unique 值</p>\n</blockquote>\n<p>實際上會在 dashboard 顯示</p>\n<p><img src=\"/artblog/Hangfire-%E5%88%9D%E5%AD%B8/2020-05-02_17-37-52.png\"></p>\n<p><img src=\"/artblog/Hangfire-%E5%88%9D%E5%AD%B8/2020-05-02_17-39-37.png\"></p>\n<p>那為甚麼要有識別 ID 咧？因為要方便我們操作啊。我們可以透過識別 ID 去觸發執行，或是移除</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 移除某個周期性任務，如果不存在也不會報錯</span></span><br><span class=\"line\">RecurringJob.RemoveIfExists(<span class=\"string\">&quot;some-id&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 觸發執行某個周期性任務，不影響原先設定的執行任務時間間隔</span></span><br><span class=\"line\">RecurringJob.Trigger(<span class=\"string\">&quot;some-id&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>想看原文的請 follow<a href=\"https://docs.hangfire.io/en/latest/background-methods/performing-recurrent-tasks.html\">這裡</a></p>\n<h3 id=\"Batches-Batch-Continuations\"><a href=\"#Batches-Batch-Continuations\" class=\"headerlink\" title=\"Batches &amp; Batch Continuations\"></a>Batches &amp; Batch Continuations</h3><p>付費功能，有興趣請自行瀏覽官網說明</p>\n<h2 id=\"加入預設儀錶板資訊\"><a href=\"#加入預設儀錶板資訊\" class=\"headerlink\" title=\"加入預設儀錶板資訊\"></a>加入預設儀錶板資訊</h2><figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...略...</span></span><br><span class=\"line\">    services.AddHangfire(config =&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 memory storage</span></span><br><span class=\"line\">        config.UseMemoryStorage();</span><br><span class=\"line\">        <span class=\"comment\">// 使用 console</span></span><br><span class=\"line\">        config.UseConsole();</span><br><span class=\"line\">        config.UseDashboardMetric(Hangfire.Dashboard.DashboardMetrics.ServerCount) <span class=\"comment\">//服务器数量</span></span><br><span class=\"line\">            .UseDashboardMetric(Hangfire.Dashboard.DashboardMetrics.RecurringJobCount) <span class=\"comment\">//任务数量</span></span><br><span class=\"line\">            .UseDashboardMetric(Hangfire.Dashboard.DashboardMetrics.RetriesCount) <span class=\"comment\">//重试次数</span></span><br><span class=\"line\">            <span class=\"comment\">//.UseDashboardMetric(Hangfire.Dashboard.DashboardMetrics.EnqueuedCountOrNull)//队列数量</span></span><br><span class=\"line\">            <span class=\"comment\">//.UseDashboardMetric(Hangfire.Dashboard.DashboardMetrics.FailedCountOrNull)//失败数量</span></span><br><span class=\"line\">            .UseDashboardMetric(Hangfire.Dashboard.DashboardMetrics.EnqueuedAndQueueCount) <span class=\"comment\">//队列数量</span></span><br><span class=\"line\">            .UseDashboardMetric(Hangfire.Dashboard.DashboardMetrics.ScheduledCount) <span class=\"comment\">//计划任务数量</span></span><br><span class=\"line\">            .UseDashboardMetric(Hangfire.Dashboard.DashboardMetrics.ProcessingCount) <span class=\"comment\">//执行中的任务数量</span></span><br><span class=\"line\">            .UseDashboardMetric(Hangfire.Dashboard.DashboardMetrics.SucceededCount) <span class=\"comment\">//成功作业数量</span></span><br><span class=\"line\">            .UseDashboardMetric(Hangfire.Dashboard.DashboardMetrics.FailedCount) <span class=\"comment\">//失败数量</span></span><br><span class=\"line\">            .UseDashboardMetric(Hangfire.Dashboard.DashboardMetrics.DeletedCount) <span class=\"comment\">//删除数量</span></span><br><span class=\"line\">            .UseDashboardMetric(Hangfire.Dashboard.DashboardMetrics.AwaitingCount); <span class=\"comment\">//等待任务数量</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//...略...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/Hangfire-%E5%88%9D%E5%AD%B8/2020-05-05_15-49-46.png\"></p>\n<h2 id=\"單元測試\"><a href=\"#單元測試\" class=\"headerlink\" title=\"單元測試\"></a>單元測試</h2><figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MyJob</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> IBackgroundJobClient JobClient</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> =&gt; <span class=\"keyword\">this</span>._jobClient ?? (<span class=\"keyword\">this</span>._jobClient = <span class=\"keyword\">new</span> BackgroundJobClient());</span><br><span class=\"line\">        <span class=\"keyword\">set</span> =&gt; <span class=\"keyword\">this</span>._jobClient = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IBackgroundJobClient _jobClient;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyJob</span>() : <span class=\"title\">this</span>(<span class=\"params\"><span class=\"keyword\">new</span> BackgroundJobClient(</span>))</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyJob</span>(<span class=\"params\">IBackgroundJobClient jobClient</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.JobClient = jobClient;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">Hangfire.Dashboard.Management.Support.Job</span>]</span><br><span class=\"line\">    [<span class=\"meta\">DisplayName(<span class=\"string\">&quot;呼叫內部方法&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SomeWork01</span>(<span class=\"params\">PerformContext context = <span class=\"literal\">null</span>, IJobCancellationToken cancellationToken = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cancellationToken.ShutdownToken.IsCancellationRequested)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        context.WriteLine(<span class=\"string\">$&quot;測試用，Now:<span class=\"subst\">&#123;DateTime.Now&#125;</span>&quot;</span>);</span><br><span class=\"line\">        Thread.Sleep(<span class=\"number\">30000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">EnqueueJob</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.JobClient.Enqueue(() =&gt; <span class=\"keyword\">this</span>.SomeWork01(<span class=\"literal\">null</span>, JobCancellationToken.Null));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>production 的部分，MyJob 的 EnqueueJob 方法，負責的事情就是將某一件任務進行排程；而我們的單元測試，也只是要驗證這一件事情。</p>\n<p>因此在單元測試的部分，我們首先建立一個 Mock，並透過建構式注入，稍後才可以透過 mock 物件檢查是否有接收到參數，檢查的部分我們僅驗證任務的名稱是否正確</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">TestClass</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UnitTest1</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">TestMethod</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> Enqueue驗證有呼叫Create方法()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//arrange</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> mockJobClient = Substitute.For&lt;IBackgroundJobClient&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> demoJob = <span class=\"keyword\">new</span> MyJob(mockJobClient);</span><br><span class=\"line\">        <span class=\"comment\">//act</span></span><br><span class=\"line\">        demoJob.EnqueueJob();</span><br><span class=\"line\">        <span class=\"comment\">//assert</span></span><br><span class=\"line\">        mockJobClient.Received().Create(</span><br><span class=\"line\">            Arg.Is&lt;Job&gt;(p =&gt; p.Method.Name == <span class=\"keyword\">nameof</span>(MyJob.SomeWork01)),</span><br><span class=\"line\">            Arg.Any&lt;EnqueuedState&gt;()</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","tags":["hangfire"]},{"title":"Javascript的Proxy","url":"/artblog//javascript-proxy/","content":"<p>一般來說，程序猿、攻城獅在說的 Proxy 其實就是設計模式中的代理模式，說的文言一點就是指一個類別可以作為其它東西的介面；白話一點就是一個傳聲筒。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"intro\"><a href=\"#intro\" class=\"headerlink\" title=\"intro\"></a>intro</h2><p>好像是大話設計這本書吧，提到這個模式用的例子就是某 A 要追求某 B，但他又不好意思跟人家直接講，所以透過一個中間人 C，讓他幫自己去跟心儀的對象說話<br>姑且不論這個例子能否真的追求成功，這個比喻還是蠻形象的。</p>\n<p>大概就是<code>A --&gt; C --&gt; B</code>這樣的概念</p>\n<p>最基本的就是當 C 接收到了 A 的請求，他要可以轉達給 B；至於傳達的內容…當然就是由 C 來決定了，這只是一個概念，實際上這個例子有幾個重點</p>\n<ol>\n<li>原本 A 可以直接與 B 溝通，但我們不想讓 B 知道，所以用 C 來代替</li>\n<li>所以 B 不知道是誰跟他說的，只知道 C</li>\n<li>B 所知道的資訊都是由 C 來的</li>\n</ol>\n<blockquote>\n<p>突然又想到很像是武俠小說裏面的飛劍傳書，然後傳書的內容又偷偷被其他人改掉了這樣的狗血劇情….</p>\n</blockquote>\n<h2 id=\"proxy-pattern-UML\"><a href=\"#proxy-pattern-UML\" class=\"headerlink\" title=\"proxy pattern UML\"></a>proxy pattern UML</h2><p><img src=\"/artblog/javascript-proxy/Proxy_pattern_diagram.svg\"></p>\n<h2 id=\"Sample\"><a href=\"#Sample\" class=\"headerlink\" title=\"Sample\"></a>Sample</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Monster</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">this</span>.<span class=\"property\">eyeCount</span> = <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> handler1 = &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">set</span>(<span class=\"params\">obj, prop, value</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (prop === <span class=\"string\">&quot;eyeCount&quot;</span> &amp;&amp; value % <span class=\"number\">2</span> !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Monsters must have an even number of eyes&quot;</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">set</span>(...<span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> monster1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Monster</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(monster1, handler1);</span><br><span class=\"line\">proxy1.<span class=\"property\">eyeCount</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// expected output: &quot;Monsters must have an even number of eyes&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(proxy1.<span class=\"property\">eyeCount</span>);</span><br><span class=\"line\"><span class=\"comment\">// expected output: 4</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ol>\n<li><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">MDN Proxy</a></li>\n<li><a href=\"https://es6.ruanyifeng.com/#docs/proxy\">阮一峰 ECMAScript 6 入門</a></li>\n</ol>\n","categories":["javascript"],"tags":["proxy","design pattern"]},{"title":"Jenkins參數化建置與上下游專案","url":"/artblog//jenkins-parameterized-builds-and-upstream-downstream-projects/","content":"<p>介紹 Jenkins 參數化建置的設定方式</p>\n<span id=\"more\"></span>\n\n<h2 id=\"參數化建置\"><a href=\"#參數化建置\" class=\"headerlink\" title=\"參數化建置\"></a>參數化建置</h2><p>假設我目前有兩個 Jenkins Job，第一個 Job 執行成功後，才執行第二個 Job</p>\n<p>第一個 Job 我們假設叫做【job01】；第二個 Job 我們把它叫做【job02】；這兩個專案都透過參數化建置與 Git Parameter 來控制檔案來源為哪一個 Branch，這邊先定義變數名稱為 Branch<br><img src=\"/artblog/jenkins-parameterized-builds-and-upstream-downstream-projects/2020-02-25_101604.png\"></p>\n<p>在版控來源指定分支就可以將參數帶過來用了<br><img src=\"/artblog/jenkins-parameterized-builds-and-upstream-downstream-projects/2020-02-25_101843.png\"></p>\n<p>執行也很簡單，透過<code>Build with parameter</code>就可以選擇 branch<br><img src=\"/artblog/jenkins-parameterized-builds-and-upstream-downstream-projects/2020-02-25_102700.png\"></p>\n<p>透過參數化建置其他專案<br><img src=\"/artblog/jenkins-parameterized-builds-and-upstream-downstream-projects/2020-02-25_103243.png\"><br><img src=\"/artblog/jenkins-parameterized-builds-and-upstream-downstream-projects/2020-02-25_103420.png\"></p>\n<p>這樣執行 Job1 之後，就會自動觸發 Job2<br><img src=\"/artblog/jenkins-parameterized-builds-and-upstream-downstream-projects/2020-02-25_103642.png\"></p>\n<p>透過上面的方式，Job02 被觸發的原因是因為 Job01 我們有設定建置後動作，觸發其他專案的參數化建置，其實並不是上下游專案的設定</p>\n<h2 id=\"上下游專案-從上游專案設定\"><a href=\"#上下游專案-從上游專案設定\" class=\"headerlink\" title=\"上下游專案 從上游專案設定\"></a>上下游專案 從上游專案設定</h2><p>建立 Job03、Job04 兩個任務，其中 Job03 設定建置後動作：建置其他專案<br><img src=\"/artblog/jenkins-parameterized-builds-and-upstream-downstream-projects/2020-02-25_104350.png\"><br>這樣子回到 Job03 就會看到他的下游專案為 Job04<br><img src=\"/artblog/jenkins-parameterized-builds-and-upstream-downstream-projects/2020-02-25_104602.png\"></p>\n<p>而回到 Job04，也會看到它的上游專案為 Job03</p>\n<h2 id=\"上下游專案-從下游專案設定\"><a href=\"#上下游專案-從下游專案設定\" class=\"headerlink\" title=\"上下游專案 從下游專案設定\"></a>上下游專案 從下游專案設定</h2><p>也可以直接在下游專案中設定<code>build after other project are built</code><br><img src=\"/artblog/jenkins-parameterized-builds-and-upstream-downstream-projects/2020-02-25_104807.png\"></p>\n<p>效果是一樣的</p>\n<h2 id=\"拉拉作伙ㄟ阿娜？\"><a href=\"#拉拉作伙ㄟ阿娜？\" class=\"headerlink\" title=\"拉拉作伙ㄟ阿娜？\"></a>拉拉作伙ㄟ阿娜？</h2><p>比較妙的是，如果我上游、下游專案都設定，那會發生甚麼事情？<br>答案是實際的任務仍舊觸發一次，但是 Log 紀錄會顯示兩次<br><img src=\"/artblog/jenkins-parameterized-builds-and-upstream-downstream-projects/2020-02-25_105516.png\"><br><img src=\"/artblog/jenkins-parameterized-builds-and-upstream-downstream-projects/2020-02-25_105118.png\"></p>\n<p>那如果加上參數化建置呢？</p>\n<p><img src=\"/artblog/jenkins-parameterized-builds-and-upstream-downstream-projects/2020-02-25_105606.png\"></p>\n<p>答案是，任務觸發兩次</p>\n<p><img src=\"/artblog/jenkins-parameterized-builds-and-upstream-downstream-projects/2020-02-25_105720.png\"><br><img src=\"/artblog/jenkins-parameterized-builds-and-upstream-downstream-projects/2020-02-25_105754.png\"><br><img src=\"/artblog/jenkins-parameterized-builds-and-upstream-downstream-projects/2020-02-25_105817.png\"></p>\n<p>透過任務的上下游設置，會觸發一次；而透過參數化建置其他專案，也會觸發一次；這兩者是分開計算的<br>所以如果是需要傳遞參數的場合，不要再設定任務的上下游依賴關係，避免多次觸發執行</p>\n<h2 id=\"補充-觸發另一個任務並傳遞參數範例\"><a href=\"#補充-觸發另一個任務並傳遞參數範例\" class=\"headerlink\" title=\"補充:觸發另一個任務並傳遞參數範例\"></a>補充:觸發另一個任務並傳遞參數範例</h2><p><img src=\"/artblog/jenkins-parameterized-builds-and-upstream-downstream-projects/2022-11-24-162819.jpg\"><br>如圖，新增 Git Parameter 還有字串參數， Git Parameter 之前有去抓 GIT 資料所以有清單可以選，但下方範例我註解掉了，想要實際練習的人請自行修改一下</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Job 1</span></span><br><span class=\"line\">node &#123;</span><br><span class=\"line\">    <span class=\"comment\">// stage(&#x27;git&#x27;) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//    checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: &#x27;$Branch&#x27;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: &#x27;credentials-id&#x27;, url: &#x27;xxx@git.fake.net:myProject/myProject.git&#x27;]]])</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    stage(<span class=\"string\">&#x27;echo parameter&#x27;</span>) &#123;</span><br><span class=\"line\">        echo <span class=\"string\">&quot;$&#123;Branch&#125;&quot;</span></span><br><span class=\"line\">        echo <span class=\"string\">&quot;$&#123;Greeting&#125;&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    stage(<span class=\"string\">&#x27;Trigger Job 2&#x27;</span>) &#123;</span><br><span class=\"line\">        build <span class=\"attr\">wait:</span> <span class=\"literal\">false</span>, <span class=\"attr\">job:</span> <span class=\"string\">&#x27;pipeline_job_2&#x27;</span>, <span class=\"attr\">parameters:</span> [</span><br><span class=\"line\">            gitParameter(<span class=\"attr\">name:</span> <span class=\"string\">&#x27;Branch&#x27;</span>, <span class=\"attr\">value:</span> Branch),</span><br><span class=\"line\">            string(<span class=\"attr\">name:</span> <span class=\"string\">&#x27;Greeting&#x27;</span>, <span class=\"attr\">value:</span> Greeting),</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Job 2</span></span><br><span class=\"line\">node &#123;</span><br><span class=\"line\">    stage(<span class=\"string\">&#x27;echo parameter&#x27;</span>) &#123;</span><br><span class=\"line\">        echo <span class=\"string\">&quot;$&#123;Branch&#125;&quot;</span></span><br><span class=\"line\">        echo <span class=\"string\">&quot;$&#123;Greeting&#125;&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>第二個任務的設定也要新增一樣的參數<br><img src=\"/artblog/jenkins-parameterized-builds-and-upstream-downstream-projects/2022-11-24-163601.jpg\"></p>\n<p>執行一下 pipeline，看看他有沒有正確傳遞參數跟觸發下一個任務<br><img src=\"/artblog/jenkins-parameterized-builds-and-upstream-downstream-projects/2022-11-24-163715.jpg\"></p>\n<p>看起來是正確的<br><img src=\"/artblog/jenkins-parameterized-builds-and-upstream-downstream-projects/2022-11-24-163854.jpg\"><br><img src=\"/artblog/jenkins-parameterized-builds-and-upstream-downstream-projects/2022-11-24-163411.jpg\"></p>\n<p>因為其他類型的參數好像要一個一個試，我沒有用到就懶了，這邊列出三個應該夠用了</p>\n<table>\n<thead>\n<tr>\n<th>類型</th>\n<th>範例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Secret</td>\n<td><code>build job:&#39;pipeline_job_2&#39;, parameters: [ credentials(&#39;parameter-name&#39;, &#39;credentials-id&#39;) ]</code></td>\n</tr>\n<tr>\n<td>Git Parameter</td>\n<td><code>build job:&#39;pipeline_job_2&#39;, parameters: [ gitParameter(name: &#39;Branch&#39;, value: Branch) ]</code></td>\n</tr>\n<tr>\n<td>字串參數</td>\n<td><code>build job:&#39;pipeline_job_2&#39;, parameters: [ string(name: &#39;Greeting&#39;, value: Greeting) ]</code></td>\n</tr>\n</tbody></table>\n","categories":["devOps"],"tags":["jenkins"]},{"title":"Jenkins檢查前端編譯程式有無簽入版控","url":"/artblog//jenkins-check-frontend-compiled-code/","content":"<p>為了避免開發人員開發完畢之後未正確簽入版控，因此實作一個檢查機制，當版控的檔案與產生出來的檔案不一致的時候，透過通知的機制告知開發人員</p>\n<span id=\"more\"></span>\n<p>透過計算檔案的 checksum，比對兩個檔案的 checksum 即可得知是否相同，為了達到這個目的，需要做到下列事項</p>\n<ol>\n<li>從 Git 取得程式原始碼</li>\n<li>將前端編譯出來的程式複製到暫存的目錄</li>\n<li>重新編譯前端程式，輸出至原來的路徑</li>\n<li>比對暫存目錄、輸出目錄的檔案是否一致</li>\n<li>若比對結果不一致，則發出通知</li>\n</ol>\n<h3 id=\"複製檔案\"><a href=\"#複製檔案\" class=\"headerlink\" title=\"複製檔案\"></a>複製檔案</h3><p>利用 node.js 的 <code>fs-extra</code> 套件來複製檔案，好處是透過 CLI 執行該程式，不管在專案的根目錄或是網站的目錄，都可以正確執行複製目錄的行為，所以 jenkins 的 cli 指令也不需要固定寫死</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// include fs-extra package</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs-extra&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> sourceDir = path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&quot;../Resource/Source&quot;</span>); <span class=\"comment\">// 版控目錄</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> generateDir = path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&quot;../Resource/Bundle&quot;</span>); <span class=\"comment\">// 產出目錄</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// copy source folder to destination</span></span><br><span class=\"line\">fs.<span class=\"title function_\">copy</span>(generateDir, sourceDir, <span class=\"keyword\">function</span>(<span class=\"params\">err</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;An error occured while copying the folder.&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Copy completed!&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重新編譯前端程式\"><a href=\"#重新編譯前端程式\" class=\"headerlink\" title=\"重新編譯前端程式\"></a>重新編譯前端程式</h3><p>透過已設定好的指令執行即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">yarn build</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"比對目錄檔案-checksum-是否一致\"><a href=\"#比對目錄檔案-checksum-是否一致\" class=\"headerlink\" title=\"比對目錄檔案 checksum 是否一致\"></a>比對目錄檔案 checksum 是否一致</h3><p>透過 <code>fs-magic</code> 這個 node.js 的外掛來處理檔案 hash，並比對是否一致，依據最終的結果，透過回傳 EXIT Code 來告知 jenkins 任務的執行是否成功</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//compare.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> _fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs-magic&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// compare directoy contents based on sha256 hash tables</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">compareDirectories</span>(<span class=\"params\">sourceDir, generateDir</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> result = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> errMsg = [];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// fetch file lists</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> [sourceFiles, sourceDirs] = <span class=\"keyword\">await</span> _fs.<span class=\"title function_\">scandir</span>(sourceDir, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> [generateFiles, generateDirs] = <span class=\"keyword\">await</span> _fs.<span class=\"title function_\">scandir</span>(generateDir, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// num files, directories equal ?</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (sourceFiles.<span class=\"property\">length</span> !== generateFiles.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">\t\terrMsg.<span class=\"title function_\">push</span>(<span class=\"string\">`版控:[<span class=\"subst\">$&#123;sourceFiles.length&#125;</span>] 產出:[<span class=\"subst\">$&#123;generateFiles.length&#125;</span>]：目錄內檔案數量不同 `</span>);</span><br><span class=\"line\">\t\tresult = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (sourceDirs.<span class=\"property\">length</span> !== generateDirs.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">\t\terrMsg.<span class=\"title function_\">push</span>(<span class=\"string\">`版控:[<span class=\"subst\">$&#123;sourceDirs.length&#125;</span>] 產出:[<span class=\"subst\">$&#123;generateDirs.length&#125;</span>]：子目錄數量不同`</span>);</span><br><span class=\"line\">\t\tresult = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// generate file checksums</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> hashes1 = <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(sourceFiles.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span> _fs.<span class=\"title function_\">sha256file</span>(f)));</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> hashes2 = <span class=\"keyword\">await</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(generateFiles.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span> _fs.<span class=\"title function_\">sha256file</span>(f)));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// convert arrays to objects filename=&gt;hash</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> lookup = &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; hashes2.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// normalized filenames</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> f2 = generateFiles[i].<span class=\"title function_\">substr</span>(generateDir.<span class=\"property\">length</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// assign</span></span><br><span class=\"line\">\t\tlookup[f2] = hashes2[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// compare dir1 to dir2</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; hashes1.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// normalized filenames</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> f1 = sourceFiles[i].<span class=\"title function_\">substr</span>(sourceDir.<span class=\"property\">length</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// exists ?</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!lookup[f1]) &#123;</span><br><span class=\"line\">\t\t\terrMsg.<span class=\"title function_\">push</span>(<span class=\"string\">`[ERROR] <span class=\"subst\">$&#123;generateDir&#125;</span> 目錄內 <span class=\"subst\">$&#123;f1&#125;</span> 檔案不存在`</span>);</span><br><span class=\"line\">\t\t\tresult = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// hash valid ?</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (lookup[f1] !== hashes1[i]) &#123;</span><br><span class=\"line\">\t\t\terrMsg.<span class=\"title function_\">push</span>(<span class=\"string\">`[ERROR] [<span class=\"subst\">$&#123;f1&#125;</span>] checksum not match!`</span>);</span><br><span class=\"line\">\t\t\terrMsg.<span class=\"title function_\">push</span>(<span class=\"string\">`[產 出]:[<span class=\"subst\">$&#123;lookup[f1]&#125;</span>]`</span>);</span><br><span class=\"line\">\t\t\terrMsg.<span class=\"title function_\">push</span>(<span class=\"string\">`[版 控]:[<span class=\"subst\">$&#123;hashes1[i]&#125;</span>]`</span>);</span><br><span class=\"line\">\t\t\tresult = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123; result, errMsg &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = compareDirectories;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// compareFiles.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> compareDirectories = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./compare.js&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> sourceDir = path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&quot;../Resource/Source&quot;</span>); <span class=\"comment\">// 版控目錄</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> generateDir = path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&quot;../Resource/Bundle&quot;</span>); <span class=\"comment\">// 產出目錄</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">compareFiles</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> &#123; result, errMsg &#125; = <span class=\"keyword\">await</span> <span class=\"title function_\">compareDirectories</span>(sourceDir, generateDir);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`result:<span class=\"subst\">$&#123;result&#125;</span>`</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">\t\tprocess.<span class=\"title function_\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tprocess.<span class=\"title function_\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">compareFiles</span>();</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>透過 exit code 回應執行結果成功或失敗，藉此控制 Jenkins Job 任務結果，可再接續其他下游專案運作</p>\n</blockquote>\n<h3 id=\"Jenkins-設定範例\"><a href=\"#Jenkins-設定範例\" class=\"headerlink\" title=\"Jenkins 設定範例\"></a>Jenkins 設定範例</h3><p>新增一個 freeStyle 專案，透過 git 下載 source 完畢後，再新增<strong>執行 Windows 批次命令</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">STEP1</span></span><br><span class=\"line\">cd MyProject</span><br><span class=\"line\">yarn</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">STEP2</span></span><br><span class=\"line\">node MyProject\\test\\copyFiles.js</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">STEP3</span></span><br><span class=\"line\">cd MyProject</span><br><span class=\"line\">yarn build</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">STEP4</span></span><br><span class=\"line\">node MyProject\\test\\compareFiles.js</span><br></pre></td></tr></table></figure>\n\n<p>之所以分開四個步驟，是因為放在同一個 shell script 區塊，執行 yarn 就會卡住後面的指令。</p>\n","categories":["devOps"],"tags":["jenkins","node.js"]},{"title":"NPOI-ASP.net網站匯出Excel範例","url":"/artblog//npoi-asp-net-export-excel/","content":"<p>這篇文章主要是為了記錄使用 NPOI 的方法及踩坑經驗，更細節還是請移步<a href=\"https://github.com/tonyqus/npoi\">官網</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"NPOI-的安裝\"><a href=\"#NPOI-的安裝\" class=\"headerlink\" title=\"NPOI 的安裝\"></a>NPOI 的安裝</h2><p>使用<code>nuget</code>搜尋<code>NPOI</code>套件並安裝即可，做完這件事情後查看專案檔，可以看到他一共安裝三個套件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--package.config--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;NPOI&quot;</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;2.5.1&quot;</span> <span class=\"attr\">targetFramework</span>=<span class=\"string\">&quot;net452&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Portable.BouncyCastle&quot;</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;1.8.6&quot;</span> <span class=\"attr\">targetFramework</span>=<span class=\"string\">&quot;net452&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;SharpZipLib&quot;</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;1.2.0&quot;</span> <span class=\"attr\">targetFramework</span>=<span class=\"string\">&quot;net452&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何開始-Quick-Start\"><a href=\"#如何開始-Quick-Start\" class=\"headerlink\" title=\"如何開始 Quick Start\"></a>如何開始 Quick Start</h2><p>通常我們使用 NPOI 的步驟大概會是這個樣子</p>\n<ol>\n<li>建立 EXCEL 檔案：從概念上講就是先建立一個工作本(WorkBook)</li>\n<li>建立工作表：這個就是工作本裡面的某一頁(Sheet)</li>\n<li>設定儲存格資料：沒甚麼好講的，就是每一頁面底下的儲存格</li>\n</ol>\n<h3 id=\"建立-EXCEL-檔案\"><a href=\"#建立-EXCEL-檔案\" class=\"headerlink\" title=\"建立 EXCEL 檔案\"></a>建立 EXCEL 檔案</h3><p>因為 EXCEL 版本的關係，官方提供兩個類別來建立工作表</p>\n<table>\n<thead>\n<tr>\n<th>版本</th>\n<th>副檔名</th>\n<th>類別</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Excel 2003</td>\n<td>xls</td>\n<td>HSSFWorkBook</td>\n</tr>\n<tr>\n<td>Excel 2007</td>\n<td>xlsx</td>\n<td>XSSFWorkbook</td>\n</tr>\n</tbody></table>\n<p><img src=\"/artblog/npoi-asp-net-export-excel/2020-07-22_101801.png\"><br>從 IDE 的提示可以看到建構式允許輸入串流、FileInfo 或是檔案路徑等等，當然也可以不輸入，就是新建一個 EXCEL 檔案</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">IWorkbook target = <span class=\"keyword\">new</span> XSSFWorkbook();</span><br></pre></td></tr></table></figure>\n\n<p>在搜尋<code>NPOI</code>用法的時候，有看到另外一個工廠方法，但是最終我並沒有使用這個方法，而是直接寫死，用<code>XSSFWorkbook</code>，因為需求僅需要使用<code>xlsx</code><br><img src=\"/artblog/npoi-asp-net-export-excel/2020-07-22_102338.png\"></p>\n<h3 id=\"建立工作表\"><a href=\"#建立工作表\" class=\"headerlink\" title=\"建立工作表\"></a>建立工作表</h3><p>應該說這個步驟，要看檔案當下有沒有工作表，沒有的話需要建立；有的話只需要取得，然後存到變數供後續流程使用<br><img src=\"/artblog/npoi-asp-net-export-excel/2020-07-22-102901.png\"><br><img src=\"/artblog/npoi-asp-net-export-excel/2020-07-22_102954.png\"></p>\n<h3 id=\"設定儲存格\"><a href=\"#設定儲存格\" class=\"headerlink\" title=\"設定儲存格\"></a>設定儲存格</h3><p>遵循著工作表的概念，此處也是需要新建或是取得的概念，使用列(ROW)及儲存格(Cell)<br>具體的做法請參看下列程式碼</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">IWorkbook workbook = <span class=\"keyword\">new</span> XSSFWorkbook();</span><br><span class=\"line\">ISheet workSheet = workbook.CreateSheet(<span class=\"string\">&quot;工作表1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">IRow row = workSheet.CreateRow(<span class=\"number\">0</span>);</span><br><span class=\"line\">ICell cell1 = row.CreateCell(<span class=\"number\">0</span>);</span><br><span class=\"line\">cell1.SetCellValue(<span class=\"string\">&quot;column 1&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下載檔案\"><a href=\"#下載檔案\" class=\"headerlink\" title=\"下載檔案\"></a>下載檔案</h3><p>當我們準備好一個 EXCEL 檔案要匯出，給網站使用者下載，我們可以透過<code>memoryStream</code>將 EXCEL 放到裡面，網路上的做法很多都是用<code>Response.BinaryWrite(exportData.GetBuffer());</code>這樣的方法去做，但是在<code>MVC</code>裡面我們可以直接使用<code>FileResult</code>回傳即可</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> File(ms.ToArray(), System.Net.Mime.MediaTypeNames.Application.Octet, fileName);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意事項\"><a href=\"#注意事項\" class=\"headerlink\" title=\"注意事項\"></a>注意事項</h3><p>在<code>NPOI</code>裡面可以發現是沒有日期型態的，從實際的 EXCEL 檔案讀取，它的型態會被判斷為數字，必須再透過<code>DateUtil.IsCellDateFormatted</code>方法來判斷是否為日期</p>\n<h2 id=\"應用範例：網站下載-Excel\"><a href=\"#應用範例：網站下載-Excel\" class=\"headerlink\" title=\"應用範例：網站下載 Excel\"></a>應用範例：網站下載 Excel</h2><h3 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h3><p>前端的部分核心代碼大概就是下面這段了，透過<code>ajax</code>送出請求，接收到結果之後再建立一個 a 標籤，模擬使用者點擊達到自動下載的效果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 匯出 Excel */</span></span><br><span class=\"line\"><span class=\"title function_\">downloadExcel</span>(<span class=\"params\">sendData</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> $.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">`/Demo/DownloadExcel`</span>,</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&quot;POST&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: sendData,</span><br><span class=\"line\">    <span class=\"attr\">xhrFields</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">responseType</span>: <span class=\"string\">&quot;blob&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">downloadHandler</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"title function_\">downloadExcel</span>(condition).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">response, status, hr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> $a = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> url = <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">createObjectURL</span>(response);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileName = xhr.<span class=\"title function_\">getResponseHeader</span>(<span class=\"string\">&#x27;Content-Disposition&#x27;</span>).<span class=\"title function_\">split</span>(<span class=\"string\">&quot;=&quot;</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> currentFileName = fileName.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/&quot;(.*)&quot;/</span>, <span class=\"string\">&quot;$1&quot;</span>);</span><br><span class=\"line\">    $a.<span class=\"property\">download</span> = <span class=\"built_in\">decodeURI</span>(currentFileName);</span><br><span class=\"line\">    $a.<span class=\"property\">href</span> = url;</span><br><span class=\"line\">    $a.<span class=\"title function_\">click</span>();</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">revokeObjectURL</span>(url), <span class=\"number\">5000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"後端\"><a href=\"#後端\" class=\"headerlink\" title=\"後端\"></a>後端</h3><p>核心代碼是改寫自<a href=\"https://dotblogs.azurewebsites.net/stanley14/2018/01/24/npoi_template_print_header\">[.NET][C#]NPOI 產生 Excel 報表(一)列印表頭資訊(xlsx)</a>，這份程式的優點是允許接受泛型輸入來產生 EXCEL 檔案，所以 <strong>EXCEL 欄位的順序會與輸入的泛型屬性順序相關</strong>，但是若直接依照原文的方法產生出來的 EXCEL，再開啟的時候會提示錯誤**NPOI 已移除的記錄: &#x2F;xl&#x2F;workbook.xml 部分的 文件佈景主題 (活頁簿)**，研究了很久始終沒有頭緒，最終的解決方案是參考官網範例：<a href=\"https://github.com/tonyqus/npoi/blob/master/examples/xssf/CopySheet/Program.cs\">CopySheet(複製工作表)</a>，改寫後就正常了。</p>\n<blockquote>\n<p>順便查到其實<code>xlsx</code>檔案就是<code>zip</code>檔案，可以解壓，修改內容後再壓回<code>zip</code>也行，不過正常人還是不要用這招，因為後續你也不能做什麼有用的事情</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DemoController</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> FileResult <span class=\"title\">DownloadExcel</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 取得匯出資料</span></span><br><span class=\"line\">    List&lt;ExcelInfo&gt; excelData = GetMyExcelData();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 匯出資料 -&gt; EXCEL</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> templatePath = Server.MapPath(<span class=\"string\">&quot;~/App_Data/templateOrderQA.xlsx&quot;</span>);</span><br><span class=\"line\">    IWorkbook workbook = <span class=\"keyword\">new</span> ExcelModule().GenerateExcel(templatePath, excelData, <span class=\"number\">1</span>);</span><br><span class=\"line\">    MemoryStream ms = <span class=\"keyword\">new</span> MemoryStream();</span><br><span class=\"line\">    workbook.Write(ms);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// EXCEL -&gt; Download</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> fileName =</span><br><span class=\"line\">        HttpUtility.UrlEncode(<span class=\"string\">$&quot;匯出資料<span class=\"subst\">&#123;DateTime.Now:yyyy-MM-dd_HHmmss&#125;</span>.xlsx&quot;</span>, System.Text.Encoding.UTF8);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> File(ms.ToArray(), System.Net.Mime.MediaTypeNames.Application.Octet, fileName);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ExcelModule</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ExcelModule</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> IWorkbook <span class=\"title\">GenerateExcel</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\"><span class=\"built_in\">string</span> templatePath, List&lt;T&gt; entities, <span class=\"built_in\">int</span> offset</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            IWorkbook target = <span class=\"keyword\">new</span> XSSFWorkbook();</span><br><span class=\"line\">            IWorkbook source =</span><br><span class=\"line\">                <span class=\"keyword\">new</span> XSSFWorkbook(<span class=\"keyword\">new</span> FileStream(templatePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite));</span><br><span class=\"line\"></span><br><span class=\"line\">            ISheet sourceSheet = source.GetSheetAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            sourceSheet.CopyTo(target, sourceSheet.SheetName, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            ISheet targetSheet = target.GetSheetAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            List&lt;ICell&gt; templateCells = targetSheet.GetRow(offset).Cells;</span><br><span class=\"line\"></span><br><span class=\"line\">            PropertyInfo[] properties = <span class=\"keyword\">typeof</span>(T).GetProperties();</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> entity <span class=\"keyword\">in</span> entities)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                targetSheet.CreateRow(offset);</span><br><span class=\"line\">                <span class=\"built_in\">int</span> cellInRow = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> property <span class=\"keyword\">in</span> properties)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ICell cell = targetSheet.GetRow(offset).CreateCell(cellInRow);</span><br><span class=\"line\">                    cell.CellStyle = templateCells[cellInRow].CellStyle;</span><br><span class=\"line\">                    cell.SetCellType(templateCells[cellInRow].CellType);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> currentValue = property.GetValue(entity, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">switch</span> (templateCells[cellInRow].CellType)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> CellType.Numeric:</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (currentValue == <span class=\"literal\">null</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (DateUtil.IsCellDateFormatted(templateCells[cellInRow]))</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                cell.SetCellValue(Convert.ToDateTime(currentValue));</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"keyword\">else</span></span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                cell.SetCellValue(Convert.ToDouble(currentValue));</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">case</span> CellType.String:</span><br><span class=\"line\">                            cell.SetCellValue(Convert.ToString(currentValue));</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        <span class=\"literal\">default</span>:</span><br><span class=\"line\">                            cell.SetCellValue(Convert.ToString(currentValue));</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    cellInRow++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                offset++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"測試\"><a href=\"#測試\" class=\"headerlink\" title=\"測試\"></a>測試</h3><p>這裡的測試一樣是改寫自<a href=\"https://dotblogs.azurewebsites.net/stanley14/2018/01/24/npoi_template_print_header\">[.NET][C#]NPOI 產生 Excel 報表(一)列印表頭資訊(xlsx)</a>，但這個測試應該不算是單元測試，充其量只能是用來測試看看我們的模組是否可以順利產生 Excel 檔案，所以測試功能正常後，應該還是把它砍掉，專案會比較乾淨</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">TestClass</span>]</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ExcelModuleTests</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       [<span class=\"meta\">TestMethod</span>]</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">GenerateExcelFileTest</span>()</span></span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           <span class=\"comment\">//(1)製造測試資料</span></span><br><span class=\"line\">           List&lt;Poker&gt; pokers = <span class=\"keyword\">new</span> List&lt;Poker&gt;();</span><br><span class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               pokers.Add(<span class=\"keyword\">new</span> Poker &#123;Id = <span class=\"number\">1</span>, Name = <span class=\"string\">&quot;David&quot;</span>, Title = <span class=\"string\">&quot;King&quot;</span>, Color = <span class=\"string\">&quot;Spades&quot;</span>, Balance = <span class=\"number\">1000</span>&#125;);</span><br><span class=\"line\">               pokers.Add(<span class=\"keyword\">new</span> Poker &#123;Id = <span class=\"number\">2</span>, Name = <span class=\"string\">&quot;Charlemagne&quot;</span>, Title = <span class=\"string\">&quot;King&quot;</span>, Color = <span class=\"string\">&quot;Hearts&quot;</span>, Balance = <span class=\"number\">2000</span>&#125;);</span><br><span class=\"line\">               pokers.Add(<span class=\"keyword\">new</span> Poker &#123;Id = <span class=\"number\">3</span>, Name = <span class=\"string\">&quot;Caesar&quot;</span>, Title = <span class=\"string\">&quot;King&quot;</span>, Color = <span class=\"string\">&quot;Diamonds&quot;</span>, Balance = <span class=\"number\">3000</span>&#125;);</span><br><span class=\"line\">               pokers.Add(<span class=\"keyword\">new</span> Poker &#123;Id = <span class=\"number\">4</span>, Name = <span class=\"string\">&quot;Alexander&quot;</span>, Title = <span class=\"string\">&quot;King&quot;</span>, Color = <span class=\"string\">&quot;Clubs&quot;</span>, Balance = <span class=\"number\">4000</span>&#125;);</span><br><span class=\"line\">               pokers.Add(<span class=\"keyword\">new</span> Poker &#123;Id = <span class=\"number\">5</span>, Name = <span class=\"string\">&quot;Athena&quot;</span>, Title = <span class=\"string\">&quot;Queen&quot;</span>, Color = <span class=\"string\">&quot;Spades&quot;</span>, Balance = <span class=\"number\">5000</span>&#125;);</span><br><span class=\"line\">               pokers.Add(<span class=\"keyword\">new</span> Poker &#123;Id = <span class=\"number\">6</span>, Name = <span class=\"string\">&quot;Judith&quot;</span>, Title = <span class=\"string\">&quot;Queen&quot;</span>, Color = <span class=\"string\">&quot;Hearts&quot;</span>, Balance = <span class=\"number\">6000</span>&#125;);</span><br><span class=\"line\">               pokers.Add(<span class=\"keyword\">new</span> Poker &#123;Id = <span class=\"number\">7</span>, Name = <span class=\"string\">&quot;Rachel&quot;</span>, Title = <span class=\"string\">&quot;Queen&quot;</span>, Color = <span class=\"string\">&quot;Diamonds&quot;</span>, Balance = <span class=\"number\">7000</span>&#125;);</span><br><span class=\"line\">               pokers.Add(<span class=\"keyword\">new</span> Poker &#123;Id = <span class=\"number\">8</span>, Name = <span class=\"string\">&quot;Argine&quot;</span>, Title = <span class=\"string\">&quot;Queen&quot;</span>, Color = <span class=\"string\">&quot;Clubs&quot;</span>, Balance = <span class=\"number\">8000</span>&#125;);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">//(2)產生報表</span></span><br><span class=\"line\">           <span class=\"built_in\">string</span> templateFile = <span class=\"string\">@&quot;TestHelper\\myTemplate.xlsx&quot;</span>;</span><br><span class=\"line\">           <span class=\"built_in\">string</span> ReportPath = <span class=\"string\">@&quot;D:\\temp\\output.xlsx&quot;</span>;</span><br><span class=\"line\">           <span class=\"keyword\">var</span> sut = <span class=\"keyword\">new</span> ExcelModule();</span><br><span class=\"line\">           IWorkbook workbook = sut.GenerateExcel(templateFile, pokers, <span class=\"number\">1</span>);</span><br><span class=\"line\">           <span class=\"keyword\">using</span> (FileStream fileOut = <span class=\"keyword\">new</span> FileStream(ReportPath, FileMode.Create))</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               workbook.Write(fileOut);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           Assert.AreEqual(<span class=\"literal\">true</span>, File.Exists(ReportPath));</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Poker</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Title &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Color &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> Decimal Balance &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p><code>NPOI</code> 的使用其實沒有想像中困難，只是麻煩一點而已，而儲存格的樣式設定則是另外一個討人厭的事情，透過 Template 的方式可以省去很多工，但如果要客製許多樣式還是需要慢慢手刻，不過若以基本的檔案匯出功能來看，到這邊應該就差不多了</p>\n","categories":["NPOI"],"tags":["excel"]},{"title":"Rider 使用 quokka.js 提升開發體驗","url":"/artblog//rider-quokka-js/","content":"<p>通常在撰寫 js 的時候，會希望能夠即時看到程式的執行結果，這時候就可以安裝外掛套件<code>quokka.js</code>來體驗一下</p>\n<span id=\"more\"></span>\n\n<h2 id=\"quokka-js-介紹\"><a href=\"#quokka-js-介紹\" class=\"headerlink\" title=\"quokka.js 介紹\"></a>quokka.js 介紹</h2><p><code>quokka.js</code>主要的功能就是讓你在開發 js&#x2F;ts 的時候，能夠在 IDE 中即時看到程式的執行結果，很佛心的是，他的社群版是免費使用的；而專業版則額外提供一些功能</p>\n<p>詳細的功能差異就請自己上去官網看看，它們官網現在做的還不錯：<a href=\"https://quokkajs.com/pro/\">Quokka.js Editions</a></p>\n<h2 id=\"如何在-Rider-安裝-quokka-js\"><a href=\"#如何在-Rider-安裝-quokka-js\" class=\"headerlink\" title=\"如何在 Rider 安裝 quokka.js\"></a>如何在 Rider 安裝 quokka.js</h2><p><code>Alt</code>+<code>Ctrl</code>+<code>S</code>叫出設定視窗，並搜尋<code>quokka</code>，即可找到外掛，選擇安裝即可<br><img src=\"/artblog/rider-quokka-js/2020-08-11_145703.png\"></p>\n<p>在程式碼編輯的時候，只需要按下快速鍵<code>Alt</code>+<code>Ctrl</code>+<code>Shift</code>+<code>Insert</code>，就會跳出視窗詢問你，要新增哪一種語言的 Scratch File<br><img src=\"/artblog/rider-quokka-js/2020-08-11_145917.png\"></p>\n<p>之後就會出現新的一支 js 程式，可以在這個地方輸入 js 程式碼<br><img src=\"/artblog/rider-quokka-js/2020-08-11_150128.png\"></p>\n<p>直接就可以在畫面上看到該程式行段是否執行，執行結果<br><img src=\"/artblog/rider-quokka-js/2020-08-11_150336.png\"></p>\n<h2 id=\"在原有的程式碼執行-quokka-js\"><a href=\"#在原有的程式碼執行-quokka-js\" class=\"headerlink\" title=\"在原有的程式碼執行 quokka.js\"></a>在原有的程式碼執行 quokka.js</h2><p><img src=\"/artblog/rider-quokka-js/2020-08-11_150632.png\"><br>透過右鍵選單，看到<code>quokka</code>的那三個選項，執行就可以了，但是</p>\n<h2 id=\"使用其他-npm-套件\"><a href=\"#使用其他-npm-套件\" class=\"headerlink\" title=\"使用其他 npm 套件\"></a>使用其他 npm 套件</h2><p><img src=\"/artblog/rider-quokka-js/2020-08-11_151301.png\"><br>如果我想透過<code>moment</code>去對日期做運算，這樣輸入會失敗，在<a href=\"https://quokkajs.com/docs/#modules\">官網</a>也有提到，我們可以利用<code>Quick Package Install</code> 這個功能來安裝，也就是上圖左下方的那個 Install 點下去他就會幫你裝好套件了</p>\n<p><img src=\"/artblog/rider-quokka-js/2020-08-11_151650.png\"></p>\n<p>有沒有很神奇，我剛剛選擇的是安裝到 <code>current quokka file</code>， 那實際上安裝到哪裡去了呢？</p>\n<p>再說這個之前，我們需要先了解一下<code>quokka</code>的<a href=\"https://quokkajs.com/docs/configuration.html\">組態設定</a>，其實重點也就只有一個，讓你知道可以透過系統的使用者目錄底下的<code>quokka</code>設定當作 global 的設定值</p>\n<blockquote>\n<p>On Windows: %USERPROFILE%.quokka</p>\n</blockquote>\n<p>而剛剛的自動安裝，就會在這邊的 data 目錄下產生一個專案的 quokka 設定檔，如果你想要直接把<code>moment</code>安裝在 global 的設定，省去每次在個別專案都需要安裝套件，就可以直接在上面的位置安裝即可</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install moment</span><br></pre></td></tr></table></figure>\n\n<p>實際測試了好幾次，data 底下的目錄應該只是 cache，等到停掉 quokka 的時候就會被清掉，但我後面也懶得去測試了，就這樣囉</p>\n","categories":["rider"],"tags":["quokka.js"]},{"title":"Rider-利用檔案監控來編譯scss","url":"/artblog//rider-file-watchers-for-scss/","content":"<p>這篇文章在介紹如何在 Rider 中將 Sass、Less、SCSS 編譯為 css 的實際做法</p>\n<span id=\"more\"></span>\n\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>Rider 監控檔案變更，呼叫 node.js 的套件執行編譯工作</p>\n<h2 id=\"準備工作\"><a href=\"#準備工作\" class=\"headerlink\" title=\"準備工作\"></a>準備工作</h2><p>需要安裝 node.js 及相關的套件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安裝sass</span></span><br><span class=\"line\">npm install -g sass</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安裝less</span></span><br><span class=\"line\">npm install -g less</span><br></pre></td></tr></table></figure>\n\n<p>確保 Rider 的外掛已經安裝好相關的套件，透過快捷鍵 Ctrl + Alt + S 叫出設定視窗，並於 Plugins 頁籤中，選擇已安裝的套件並查看是否已經包含 <code>File Watchers</code>、<code>Less</code>、<code>Sass</code>。<br><img src=\"/artblog/rider-file-watchers-for-scss/2020-07-16_110256.png\"><br><img src=\"/artblog/rider-file-watchers-for-scss/2020-07-16_110358.png\"></p>\n<h2 id=\"自動編譯\"><a href=\"#自動編譯\" class=\"headerlink\" title=\"自動編譯\"></a>自動編譯</h2><p>首先開啟設定( Ctrl + Alt + S)，找到<code>File Wachers</code><br><img src=\"/artblog/rider-file-watchers-for-scss/2020-07-16_111022.png\"></p>\n<p>接著新增一個新的監控設定，並選擇我們要監控的對象，此處我選擇 scss<br><img src=\"/artblog/rider-file-watchers-for-scss/2020-07-16_111127.png\"></p>\n<p>預設的設定像這樣<br><img src=\"/artblog/rider-file-watchers-for-scss/2020-07-16_113728.png\"></p>\n<p>首先我們需要先指定要監控的範圍(scope)，選擇…出現設定視窗，可以在此處設定好 Scope，此處我選擇硬碟的某個目錄，選擇該目錄及底下的子目錄，符合條件的目錄會變色<br><img src=\"/artblog/rider-file-watchers-for-scss/2020-07-16_111650.png\"></p>\n<p>之後的幾個設定，包含了</p>\n<h3 id=\"Program-要執行的指令\"><a href=\"#Program-要執行的指令\" class=\"headerlink\" title=\"Program 要執行的指令\"></a>Program 要執行的指令</h3><p>因為我們剛才有安裝了 node.js 的套件 sass，所以在指令列輸入 sass 就可以執行<br><img src=\"/artblog/rider-file-watchers-for-scss/2020-07-16_112021.png\"></p>\n<h3 id=\"Arguments-指令的參數\"><a href=\"#Arguments-指令的參數\" class=\"headerlink\" title=\"Arguments 指令的參數\"></a>Arguments 指令的參數</h3><p>如果你的輸出檔案跟原始檔案想要不同的路徑，這邊就需要做一些調整</p>\n<h3 id=\"Output-paths-to-refresh\"><a href=\"#Output-paths-to-refresh\" class=\"headerlink\" title=\"Output paths to refresh\"></a>Output paths to refresh</h3><p>預設的設定也會一起輸出 map 檔案，不需要的話刪除即可</p>\n<h3 id=\"Working-directory-工作目錄\"><a href=\"#Working-directory-工作目錄\" class=\"headerlink\" title=\"Working directory 工作目錄\"></a>Working directory 工作目錄</h3><p>預設的 FileDir 指的是該 sass 檔案的路徑，也就是說在這一個地方去呼叫 Program 並給予 Arguments</p>\n<h3 id=\"Advenced-Options\"><a href=\"#Advenced-Options\" class=\"headerlink\" title=\"Advenced Options\"></a>Advenced Options</h3><p>依照英文應該都不太需要解釋，但是 File Watcher 會監控檔案的改變，此時如果是外部的程式異動了檔案的話，例如 Git 切換分支造成檔案變更，在這樣的情況下如果不要觸發，就把<code>Trigger the watcher on external changes</code>拿掉</p>\n<p>而<code>Show console</code>的部分在剛開始建立設定，測試的時候我都會開啟<code>always</code>，只要設定正常之後我通常會關閉</p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>上述就是透過 Rider 即時編譯的方式，當然也可以不要透過檔案監控，而是透過外部指令的方式去做，這一套流程不只可以用在編譯，當然也可以配合其他需要監控檔案處理事情的需求來做</p>\n<p>順便備份一下自己在用的設定</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">File type: SCSS style sheet</span><br><span class=\"line\">Scope: &lt;myScope&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Program: sass</span><br><span class=\"line\">Arguments: $FileName$:$SolutionDir$\\MyProject\\Content\\CSS\\$FileNameWithoutExtension$.css --embed-source-map --quiet</span><br><span class=\"line\">Output paths to refresh: $FileNameWithoutExtension$.css:$FileNameWithoutExtension$.css.map</span><br><span class=\"line\">Working directory: $FileDir$</span><br></pre></td></tr></table></figure>\n\n<p>這樣在專案目錄下，例如 <code>D:\\MySolution\\MyWeb\\SCSS</code> 修改檔案後，就會將該檔案產生的 css 及 map 放到 <code>D:\\MySolution\\MyWeb\\CSS</code> 目錄下</p>\n","categories":["rider"],"tags":["file watchers"]},{"title":"Rider-快速撰寫程式的小技巧","url":"/artblog//rider-tips-for-fast-coding/","content":"<p>透過這些技巧可以在開發程式的時候少打一些字，讓整個開發體驗更為順暢，一個好的 IDE 就應該能夠支援這樣的功能，讓開發人員的想法快速變成程式碼，這些技巧都是 Rider 提供的教學中提到的，如果有空的話直接開啟教學專案來自己嘗試一下應該是比較有效率的</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Prefix-Templates\"><a href=\"#Prefix-Templates\" class=\"headerlink\" title=\"Prefix Templates\"></a>Prefix Templates</h2><h3 id=\"null-判斷式\"><a href=\"#null-判斷式\" class=\"headerlink\" title=\"null 判斷式\"></a>null 判斷式</h3><p>於變數後方打<code>.</code><br><img src=\"/artblog/rider-tips-for-fast-coding/null.jpg\"></p>\n<p>選擇<code>null</code>或是<code>notnull</code><br><img src=\"/artblog/rider-tips-for-fast-coding/null2.jpg\"></p>\n<h3 id=\"迭代集合\"><a href=\"#迭代集合\" class=\"headerlink\" title=\"迭代集合\"></a>迭代集合</h3><p>於變數後方打<code>.</code><br><img src=\"/artblog/rider-tips-for-fast-coding/foreach.jpg\"></p>\n<p>輸入<code>foreach</code>的過程中，看到已經有提示，就可以按下<code>Enter</code>或是<code>Tab</code><br><img src=\"/artblog/rider-tips-for-fast-coding/foreach2.jpg\"></p>\n<h2 id=\"Surround-Templates\"><a href=\"#Surround-Templates\" class=\"headerlink\" title=\"Surround Templates\"></a>Surround Templates</h2><p>如果你有一段程式碼，想要放到<code>if</code>或是<code>using</code>區塊內，就可以利用<code>Surround Templates</code>做到這件事情</p>\n<h3 id=\"加入判斷式-if\"><a href=\"#加入判斷式-if\" class=\"headerlink\" title=\"加入判斷式 if\"></a>加入判斷式 if</h3><p>選取要包起來的程式碼區塊<br><img src=\"/artblog/rider-tips-for-fast-coding/if.jpg\"></p>\n<p>輸入<code>if</code>會出現<code>template</code><br><img src=\"/artblog/rider-tips-for-fast-coding/if2.jpg\"></p>\n<p>按下<code>Enter</code>或是<code>Tab</code><br><img src=\"/artblog/rider-tips-for-fast-coding/if3.jpg\"></p>\n<p>再將判斷式完成即可<br><img src=\"/artblog/rider-tips-for-fast-coding/if4.jpg\"></p>\n<h2 id=\"Statement-body-assist\"><a href=\"#Statement-body-assist\" class=\"headerlink\" title=\"Statement body assist\"></a>Statement body assist</h2><p>其實就是幫忙把<code>=&gt;</code>這種寫法改回原先的<code>get</code>寫法</p>\n<p>將游標放在<code>=&gt;</code>的地方<br><img src=\"/artblog/rider-tips-for-fast-coding/st.jpg\"></p>\n<p>按下<code>&#123;</code>即可<br><img src=\"/artblog/rider-tips-for-fast-coding/st2.jpg\"></p>\n<h2 id=\"Smart-behaviour-of-dot-and-semicolon\"><a href=\"#Smart-behaviour-of-dot-and-semicolon\" class=\"headerlink\" title=\"Smart behaviour of dot and semicolon\"></a>Smart behaviour of dot and semicolon</h2><p>這個功能不起眼，但真的真的超級好用，讓你可以很順暢地一路打程式碼，而不用去計較現在應該要先往前一格還是往後一格，透過下面的範例就知道了</p>\n<p>一開始我們將變數打出來，等等對它操作<br><img src=\"/artblog/rider-tips-for-fast-coding/dot1.jpg\"></p>\n<p>先打<code>.</code>，然後<code>AppendLine</code>，注意此時的游標是在括號中<br><img src=\"/artblog/rider-tips-for-fast-coding/dot2.jpg\"></p>\n<p>後面還想要操作，於是又打了<code>.</code>，注意 Rider 的 Focus 自動幫你放在括號外面了<br><img src=\"/artblog/rider-tips-for-fast-coding/dot3.jpg\"></p>\n<p>接著再打<code>ToString</code>並自動完成它，此時游標一樣在括號中<br><img src=\"/artblog/rider-tips-for-fast-coding/dot4.jpg\"></p>\n<p>接著打<code>;</code>結束，Rider 又自動幫忙把分號放在括號外面了<br><img src=\"/artblog/rider-tips-for-fast-coding/dot5.jpg\"></p>\n<p>但是我們還需要將結果回傳，於是又輸入了<code>.</code>，Rider 再次自動變更游標位置到括號外面<br><img src=\"/artblog/rider-tips-for-fast-coding/dot6.jpg\"></p>\n<p>輸入<code>return</code>之後可以看到有一個<code>template</code>可用，選擇它<br><img src=\"/artblog/rider-tips-for-fast-coding/dot7.jpg\"></p>\n<p>最終成果<br><img src=\"/artblog/rider-tips-for-fast-coding/dot8.jpg\"></p>\n<h2 id=\"摺疊代碼\"><a href=\"#摺疊代碼\" class=\"headerlink\" title=\"摺疊代碼\"></a>摺疊代碼</h2><p>參考 Rider 提供的<a href=\"https://www.jetbrains.com/help/rider/2017.1/Code_Folding.html\">說明</a>，列出來摺疊代碼相關的快速鍵</p>\n<p>如果手都不想要碰滑鼠，搭配 Vim 外掛應該會很好用，大概就記得<code>Ctrl</code>+<code>Alt</code>+<code>+</code>，跟<code>Ctrl</code>+<code>Alt</code>+<code>-</code>就好了，如果會需要用到階層的快捷鍵，我其實會考慮用大綱來看，但因為我沒有用<code>Vim</code>，都會用滑鼠，所以可能其他的快捷鍵會很有用吧</p>\n","categories":["rider"]},{"title":"SonarQube-分析JavaScript專案","url":"/artblog//sonarqube-analyze-javascript/","content":"<p>原本以為在 C#專案中指定了 js 的報告就可以看到覆蓋率，但事實好像不是這麼一回事，稍微測試了幾次皆以失敗告終，於是我想還是單獨建立一個 js 的專案，來分析 C#裡面的 js 部分</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>關於 sonarQube 的部分，請參考:<a href=\"https://partypeopleland.github.io/artblog/2022/06/15/sonarqube-analyze-2022/\">SonarQube 程式碼分析工具 - 2022</a></p>\n</blockquote>\n<h2 id=\"建立-SonarQube-專案\"><a href=\"#建立-SonarQube-專案\" class=\"headerlink\" title=\"建立 SonarQube 專案\"></a>建立 SonarQube 專案</h2><p>先建立<code>sonarQube</code>專案，Token 不管是用舊的或是重新產生一個都可以</p>\n<h2 id=\"選擇單元測試的工具\"><a href=\"#選擇單元測試的工具\" class=\"headerlink\" title=\"選擇單元測試的工具\"></a>選擇單元測試的工具</h2><p>有之前的經驗，所以這裡摸索的時間就比較少，照慣例我們在分析之前需要將報告產生完畢，然後跟 <code>sonar-scanner</code> 說我們的報告在哪裡，因為採用<code>jest</code>作為單元測試的工具，整合<code>sonarQube</code>會比較簡單，所以我比較推薦這種；當然如果<code>mocha</code>、<code>chai</code>、<code>nyc</code>、<code>karma</code>這些東西對你很簡單就另當別論了；最終目的是為了要產生 lcov 格式的報告，以及通用格式的報告，這兩份報告一個是給覆蓋率使用，一個是計算測試數量</p>\n<h3 id=\"產生測試報告-使用-mocha\"><a href=\"#產生測試報告-使用-mocha\" class=\"headerlink\" title=\"產生測試報告(使用 mocha)\"></a>產生測試報告(使用 mocha)</h3><p>因為這邊用的是<code>mocha</code>，所以需要安裝<code>nyc</code>套件；後續如果還要產生通用格式報告給<code>sonarQube</code>，似乎還要安裝別的套件去用，所以這一個部份我就只有研究到這邊了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install mocha chai nyc --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>設置專案<code>package.json</code>的<code>scripts</code>如下</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;mocha&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;coverage&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;nyc --reporter=lcov --reporter=text-lcov npm test&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>這樣就可以直接執行 <code>npm run coverage</code> 產生<code>lcov.info</code>了</p>\n<h3 id=\"產生單元測試報告-使用-jest\"><a href=\"#產生單元測試報告-使用-jest\" class=\"headerlink\" title=\"產生單元測試報告(使用 jest)\"></a>產生單元測試報告(使用 jest)</h3><p>首先安裝套件，如果已經在全域有安裝就可以省略這個步驟</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install jest --save-dev</span><br><span class=\"line\">npm install jest-sonar-reporter --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>直接下指令<code>npx jest --coverage</code>即可，會自動產生<code>coverage</code>目錄，底下就有<code>lcov.info</code>檔案</p>\n<p>在<code>package.json</code>當中加入下列區段</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;jest&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;testResultsProcessor&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;jest-sonar-reporter&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>這樣子就會在目錄產生<code>test-report.xml</code>的通用格式報告，這個格式直接就可以指定給<code>sonar-scanner</code>了，如果要自訂報告的檔名、路徑，可以參考一下<a href=\"https://www.npmjs.com/package/jest-sonar-reporter\">jest-sonar-reporter</a></p>\n<p>如果想要用 ES6 的語法來撰寫單元測試，測試程式要使用<code>import</code>語法的話，要讓<code>jest</code>支援還需要安裝一下<code>babel</code>相關套件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-jest @babel/core @babel/preset-env</span><br></pre></td></tr></table></figure>\n\n<p>並且建立一個<code>babel.config.js</code>設定檔</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// babel.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">presets</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">&quot;@babel/preset-env&quot;</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">targets</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">node</span>: <span class=\"string\">&quot;current&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"下載-sonar-scanner-分析工具\"><a href=\"#下載-sonar-scanner-分析工具\" class=\"headerlink\" title=\"下載 sonar-scanner 分析工具\"></a>下載 sonar-scanner 分析工具</h2><p><a href=\"https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/\">SonarScanner</a>目前版本到 4.4，我這邊下載的是<code>Windows 64-bit</code>版本， 下載下來是一個 Zip 檔案。解壓縮之後，在系統的環境變數將目錄下的&#x2F;Bin 加入，執行分析的時候就可以不需要完整路徑</p>\n<h2 id=\"執行-sonar-scanner\"><a href=\"#執行-sonar-scanner\" class=\"headerlink\" title=\"執行 sonar-scanner\"></a>執行 sonar-scanner</h2><table>\n<thead>\n<tr>\n<th>指令</th>\n<th>參數</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sonar.projectKey</td>\n<td>myProjectJs</td>\n<td>專案名稱，可隨意</td>\n</tr>\n<tr>\n<td>sonar.javascript.lcov.reportPaths</td>\n<td>coverage&#x2F;lcov.info</td>\n<td>覆蓋率報告，透過 <code>npm run coverage</code>產生</td>\n</tr>\n<tr>\n<td>sonar.testExecutionReportPaths</td>\n<td>test-report.xml</td>\n<td>單元測試數量通用格式報告，安裝<a href=\"https://www.npmjs.com/package/jest-sonar-reporter\">jest-sonar-reporter</a>後執行測試自動產生</td>\n</tr>\n<tr>\n<td>sonar.tests</td>\n<td>Test</td>\n<td>指定單元測試檔案的目錄位置</td>\n</tr>\n<tr>\n<td>sonar.sources</td>\n<td>Scripts</td>\n<td>指定需要分析的原始程式碼目錄位置</td>\n</tr>\n<tr>\n<td>sonar.exclusions</td>\n<td><code>node_modules/**,Scripts/Plugins/**,Content/**</code></td>\n<td>要排除分析的檔案</td>\n</tr>\n<tr>\n<td>sonar.host.url</td>\n<td><a href=\"http://127.0.0.1:9090/\">http://127.0.0.1:9090</a></td>\n<td>sonarQube 的網址</td>\n</tr>\n<tr>\n<td>sonar.login</td>\n<td>32aafa7ac56a55dae90d0891487e7af98506ed33</td>\n<td>Token，從 sonarQube 取得，可重新產生</td>\n</tr>\n</tbody></table>\n<h3 id=\"完整指令-sample\"><a href=\"#完整指令-sample\" class=\"headerlink\" title=\"完整指令 sample\"></a>完整指令 sample</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sonar-scanner.bat -D&quot;sonar.projectKey=myProjectJs&quot; -D&quot;sonar.javascript.lcov.reportPaths=coverage/lcov.info&quot; -D&quot;sonar.testExecutionReportPaths=test-report.xml&quot; -D&quot;sonar.tests=Test&quot; -D&quot;sonar.sources=Scripts&quot; -D&quot;sonar.exclusions=node_modules/**,Scripts/Plugins/**,Content/**&quot; -D&quot;sonar.host.url=http://127.0.0.1:9090&quot; -D&quot;sonar.login=32aafa7ac56a55dae90d0891487e7af98506ed33&quot;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>執行指令之前需要先產生測試報告，也就是<code>npm run coverage</code></li>\n<li>指令請放同一行</li>\n</ol>\n<p>可以看到覆蓋率以及測試數量的地方已經有數據了<br><img src=\"/artblog/sonarqube-analyze-javascript/2020-09-02_122726.png\"></p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>雖然好像目前並沒有辦法統整前後端的測試數據，但其實現在大多都屬於前後端分離開發，專案的數據分開來看應該也是可以接受的一個選項</p>\n","categories":["devOps"],"tags":["sonarQube"]},{"title":"SonarQube-測試報告的產生","url":"/artblog//sonarqube-test-coverage-report/","content":"<p>關於 sonarQube 裡面的測試覆蓋率是需要先建立測試報告，並指定路徑提供給 sonarQube 進行分析，這樣才會顯示正確的數據，這一篇文章將會介紹一下個人的使用經驗</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>關於 sonarQube 的部分，請參考:<a href=\"https://partypeopleland.github.io/artblog/2022/06/15/sonarqube-analyze-2022/\">SonarQube 程式碼分析工具 - 2022</a></p>\n</blockquote>\n<h2 id=\"導入-net-測試報告\"><a href=\"#導入-net-測試報告\" class=\"headerlink\" title=\"導入 .net 測試報告\"></a>導入 .net 測試報告</h2><p>如果要導入.net 的測試報告，必須經由下列的四個步驟來完成</p>\n<ol>\n<li>執行 <code>SonarScanner.MSBuild.exe begin</code>指令開始分析專案</li>\n<li>執行 <code>msbuild</code>開始建構專案</li>\n<li>執行測試工具，並將報告產生於步驟 1 的指定路徑</li>\n<li>執行 <code>SonarScanner.MSBuild.exe end</code>指令結束分析</li>\n</ol>\n<p>之所以會有第三個步驟，原因是<code>SonarScanner</code>其實並不會針對專案執行測試，或者是產生報告，它只是引用報告的數據而已</p>\n<p><code>SonarScanner</code>針對不同的語言有不同的報告導入參數需要設定，完整的清單可以到官網查看<a href=\"https://docs.sonarqube.org/latest/analysis/coverage/\">Test Coverage &amp; Execution</a></p>\n<blockquote>\n<p>官網可能改版連結也會失效，但是它們的文件的確是越寫越好，直接進官網文件搜尋關鍵字也是不錯的方式</p>\n</blockquote>\n<h3 id=\"SonarScanner-for-MSBuild\"><a href=\"#SonarScanner-for-MSBuild\" class=\"headerlink\" title=\"SonarScanner for MSBuild\"></a>SonarScanner for MSBuild</h3><p>msbuild 有自己的 scanner，可以到<a href=\"https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-msbuild/\">這邊</a>查看詳細資訊</p>\n<p>若採用 dotnet framework，直接下載他們的<a href=\"https://github.com/SonarSource/sonar-scanner-msbuild/releases/download/4.10.0.19059/sonar-scanner-msbuild-4.10.0.19059-net46.zip\">.NET framework 4.6+</a> 工具下載解壓縮後就可執行<code>SonarScanner.MSBuild.exe</code>；若採用 dotnet core，可以考慮直接使用 <a href=\"https://www.nuget.org/packages/dotnet-sonarscanner\">dotnet tool</a>比較方便</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 安裝 dotnet tool</span><br><span class=\"line\">dotnet tool install --global dotnet-sonarscanner --version 4.10.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Test-Coverage\"><a href=\"#Test-Coverage\" class=\"headerlink\" title=\"Test Coverage\"></a>Test Coverage</h3><table>\n<thead>\n<tr>\n<th>Language</th>\n<th>Property</th>\n<th>Remarks</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Any</td>\n<td><code>sonar.coverageReportPaths</code></td>\n<td><a href=\"https://docs.sonarqube.org/latest/analysis/generic-test/\">通用的報告格式</a></td>\n</tr>\n<tr>\n<td>c#</td>\n<td><code>sonar.cs.vscoveragexml.reportsPaths</code></td>\n<td>針對 Visual Studio Code Coverage Report 格式的報告。多個報告以逗號分隔；也可採用萬用字元</td>\n</tr>\n<tr>\n<td>c#</td>\n<td><code>sonar.cs.dotcover.reportsPaths</code></td>\n<td>針對 dotCover 產生的報告所使用的參數</td>\n</tr>\n<tr>\n<td>c#</td>\n<td><code>sonar.cs.opencover.reportsPaths</code></td>\n<td>針對 openCover 產生的報告所使用的參數</td>\n</tr>\n<tr>\n<td>javaScript<br>TypeScript</td>\n<td><code>sonar.javascript.lcov.reportPaths</code></td>\n<td>LCOV coverage report，支援以逗號分隔的絕對&#x2F;虛擬路徑</td>\n</tr>\n</tbody></table>\n<h3 id=\"Test-Execution\"><a href=\"#Test-Execution\" class=\"headerlink\" title=\"Test Execution\"></a>Test Execution</h3><table>\n<thead>\n<tr>\n<th>Language</th>\n<th>Property</th>\n<th>Remarks</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Any</td>\n<td><code>sonar.testExecutionReportPaths</code></td>\n<td><a href=\"https://docs.sonarqube.org/latest/analysis/generic-test/\">通用的報告格式</a></td>\n</tr>\n<tr>\n<td>c#</td>\n<td><code>sonar.cs.vstest.reportsPaths</code></td>\n<td>VSTest reports，多個報告以逗號分隔；也可採用萬用字元</td>\n</tr>\n<tr>\n<td>c#</td>\n<td><code>sonar.cs.nunit.reportsPaths</code></td>\n<td>NUnit execution reports，同上</td>\n</tr>\n<tr>\n<td>c#</td>\n<td><code>sonar.cs.xunit.reportsPaths</code></td>\n<td>xUnit execution reports，同上</td>\n</tr>\n<tr>\n<td>javaScript<br>TypeScript</td>\n<td>–</td>\n<td>透過<a href=\"https://www.npmjs.com/package/jest-sonar-reporter\">jest-sonar-reporter</a>或是<a href=\"https://github.com/tornaia/karma-sonarqube-unit-reporter\">karma-sonarqube-unit-reporter</a>產生通用的報告格式</td>\n</tr>\n</tbody></table>\n<h2 id=\"實際範例\"><a href=\"#實際範例\" class=\"headerlink\" title=\"實際範例\"></a>實際範例</h2><p>所以重點就在於如何產生報告放在指定路徑，並透過參數告知<code>sonarScanner</code></p>\n<h3 id=\"net-framework\"><a href=\"#net-framework\" class=\"headerlink\" title=\".net framework\"></a>.net framework</h3><p>下面這個範例專案採用的是.net framework，所以測試針對 dll 執行，產生多個 dcvr 後合併並轉為 html 報告，指定給 sonarScanner</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">開始分析</span></span><br><span class=\"line\">SonarScanner.MSBuild.exe begin</span><br><span class=\"line\">/k:&quot;myTestProject&quot;</span><br><span class=\"line\">/d:sonar.host.url=&quot;http://127.0.0.1:9090&quot;</span><br><span class=\"line\">/d:sonar.login=&quot;32aafa7ac56a55dae90d0891487e7af98506ed33&quot;</span><br><span class=\"line\">/d:sonar.cs.dotcover.reportsPaths=&quot;report.html&quot;</span><br><span class=\"line\">/d:sonar.cs.vstest.reportsPaths=&quot;TestResults/*.trx&quot;</span><br><span class=\"line\">/d:sonar.exclusions=myTestProject/Scripts/Plugins/**,myTestProject/Content/**</span><br><span class=\"line\">/d:sonar.verbose=true</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">建置專案</span></span><br><span class=\"line\">msbuild myTestProject.Web\\\\myTestProject.Web.csproj /p:OutputPath=&quot;D:\\\\MSBuildOut\\\\myTestProject.Web&quot; /p:Configuration=Debug /t:Rebuild</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">產生多個測試報告並合併結果</span></span><br><span class=\"line\">&quot;D:\\art\\programs\\JetBrains.dotCover.CommandLineTools.2019.3.1\\dotCover.exe&quot; cover /TargetExecutable=&quot;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\TestWindow\\vstest.console.exe&quot; /TargetArguments=&quot;myTestProject.Adapter.Test.dll&quot; /TargetWorkingDir=&quot;myTestProject.Adapter.Test\\bin\\debug&quot; /Output=&quot;myTestProject.Adapter.Test.dcvr&quot; /Filters=-:module=Dapper;-:module=myTestProject.Adapter.Test</span><br><span class=\"line\">&quot;D:\\art\\programs\\JetBrains.dotCover.CommandLineTools.2019.3.1\\dotCover.exe&quot; cover /TargetExecutable=&quot;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\TestWindow\\vstest.console.exe&quot; /TargetArguments=&quot;myTestProject.Core.Test.dll&quot; /TargetWorkingDir=&quot;myTestProject.Core.Test\\bin\\debug&quot; /Output=&quot;myTestProject.Core.Test.dcvr&quot; /Filters=-:module=Dapper;-:module=myTestProject.Core.Test;-:module=StackExchange.Redis</span><br><span class=\"line\">&quot;D:\\art\\programs\\JetBrains.dotCover.CommandLineTools.2019.3.1\\dotCover.exe&quot; cover /TargetExecutable=&quot;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\TestWindow\\vstest.console.exe&quot; /TargetArguments=&quot;myTestProject.DataService.Test.dll&quot; /TargetWorkingDir=&quot;myTestProject.DataService.Test\\bin\\debug&quot; /Output=&quot;myTestProject.DataService.Test.dcvr&quot; /Filters=-:module=Dapper;-:module=myTestProject.DataService.Test</span><br><span class=\"line\">&quot;D:\\art\\programs\\JetBrains.dotCover.CommandLineTools.2019.3.1\\dotCover.exe&quot; merge --Source=myTestProject.Adapter.Test.dcvr;myTestProject.Core.Test.dcvr;myTestProject.DataService.Test.dcvr --Output=Merged.dcvr</span><br><span class=\"line\">&quot;D:\\art\\programs\\JetBrains.dotCover.CommandLineTools.2019.3.1\\dotCover.exe&quot; report --source=merged.dcvr --output=report.html --reportType=html</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">vstest.console.exe /Logger:trx;LogFileName=myTestProject.Adapter.trx &quot;myTestProject.Adapter.Test\\bin\\Debug\\myTestProject.Adapter.Test.dll&quot;</span><br><span class=\"line\">vstest.console.exe /Logger:trx;LogFileName=myTestProject.Core.trx &quot;myTestProject.Core.Test\\bin\\Debug\\myTestProject.Core.Test.dll&quot;</span><br><span class=\"line\">vstest.console.exe /Logger:trx;LogFileName=myTestProject.DataService.trx &quot;myTestProject.DataService.Test\\bin\\Debug\\myTestProject.DataService.Test.dll&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">結束分析</span></span><br><span class=\"line\">SonarScanner.MSBuild.exe end /d:sonar.login=&quot;32aafa7ac56a55dae90d0891487e7af98506ed33&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"netCore-2\"><a href=\"#netCore-2\" class=\"headerlink\" title=\".netCore 2\"></a>.netCore 2</h3><p>這個範例是 .netCore，scanner 就不一樣了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">開始分析</span></span><br><span class=\"line\">dotnet sonarscanner begin</span><br><span class=\"line\">/k:&quot;TestProject&quot;</span><br><span class=\"line\">/d:sonar.host.url=&quot;http://127.0.0.1:9090&quot;</span><br><span class=\"line\">/d:sonar.login=&quot;2c244539263ac8b5c4b4414b2b8c190a8ca873d9&quot;</span><br><span class=\"line\">/d:sonar.cs.dotcover.reportsPaths=&quot;AppCoverageReport.html&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">建置專案</span></span><br><span class=\"line\">dotnet build TestProject.sln</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">產生報告</span></span><br><span class=\"line\">dotCover cover</span><br><span class=\"line\">--TargetExecutable=&quot;C:\\Program Files\\dotnet\\dotnet.exe&quot;</span><br><span class=\"line\">--TargetWorkingDir=&quot;TestProject.Tests&quot;</span><br><span class=\"line\">--TargetArguments=&quot;test \\&quot;TestProject.Tests.csproj\\&quot;&quot;</span><br><span class=\"line\">--Filters=-:TestProject.Tests</span><br><span class=\"line\">--output=AppCoverageReport.html</span><br><span class=\"line\">--reportType=HTML</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">結束分析</span></span><br><span class=\"line\">dotnet sonarscanner end /d:sonar.login=&quot;2c244539263ac8b5c4b4414b2b8c190a8ca873d9&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"參考連結\"><a href=\"#參考連結\" class=\"headerlink\" title=\"參考連結\"></a>參考連結</h2><p><a href=\"https://community.sonarsource.com/t/coverage-test-data-generate-reports-for-c-vb-net/9871\">[Coverage &amp; Test Data] Generate Reports for C#, VB.net</a></p>\n<blockquote>\n<p>這一篇文章提供了產生報告的範例指令</p>\n</blockquote>\n<p><a href=\"https://docs.sonarqube.org/latest/analysis/coverage/\">Test Coverage &amp; Execution</a></p>\n<blockquote>\n<p>官網文件</p>\n</blockquote>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>這邊的測試報告我都採用 dotCover 來做，但是它並不是免費使用的；但仍舊有替代方案可選擇，不過我就不另外贅述了<br>關於測試報告的部分我覺得對於 sonarQube 是很重要的一個環節，因為主打的是軟體品質管理，少了測試報告的部分就差很多</p>\n<blockquote>\n<p>2022-06-15:上述是有錯誤的，其實 dotCover Cli Command 是可以免費使用的，需要購買使用的是 dotCover GUI 版本</p>\n</blockquote>\n","categories":["devOps"],"tags":["sonarQube"]},{"title":"VSCode 好用套件","url":"/artblog//vscode-useful-extensions/","content":"<p>羅列出部分目前較喜歡用的 VSCode 套件，套件的細節請自行參考官網</p>\n<span id=\"more\"></span>\n\n<h1 id=\"生產力套件\"><a href=\"#生產力套件\" class=\"headerlink\" title=\"生產力套件\"></a>生產力套件</h1><h2 id=\"Code-Spell-Checker\"><a href=\"#Code-Spell-Checker\" class=\"headerlink\" title=\"Code Spell Checker\"></a><a href=\"https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker\">Code Spell Checker</a></h2><p>英文拼字檢查套件，用這個套件的原因就是為了避免人工輸入錯誤，造成 debug 的問題，至少不會再出現你以為你打對了，結果卻因為拼寫錯誤然後 debug 半小時的蠢事</p>\n<h2 id=\"ASP-NET-Core-Switcher\"><a href=\"#ASP-NET-Core-Switcher\" class=\"headerlink\" title=\"ASP.NET Core Switcher\"></a><a href=\"https://marketplace.visualstudio.com/items?itemName=adrianwilczynski.asp-net-core-switcher\">ASP.NET Core Switcher</a></h2><p>在 View 與 Controller 之間快速切換，這功能大概就是 VisualStudio 系列的快捷鍵 Ctrl+G 的功能，現在在 <code>VSCode</code> 只要按下 <code>Alt+O</code> 就可以快速切換，省去在檔案列表中尋找檔案的麻煩，當然如果已經用習慣 <code>Ctrl+P</code> 再 keyIn 檔案名稱搜尋的人，也可以參考一下這個快捷鍵來加速你的開發</p>\n<blockquote>\n<p>這個快捷鍵如果是在 Razor Page，是切換到 PageModel 去；如果是 MVC，會切換到 View，且在 MVC 的話還可以用 <code>Alt+I</code> 也是可以的</p>\n</blockquote>\n<p>另外也可以快速建立 View，透過 <code>Alt+P</code> 直接建立相對應的 View 檔案，這功能也是非常實用的，只是建立之後要再按下 <code>Alt+O</code> 跳過去，我還以為他會自動幫我跳過去，有點不習慣。</p>\n<h2 id=\"HexDump-for-VSCode\"><a href=\"#HexDump-for-VSCode\" class=\"headerlink\" title=\"HexDump for VSCode\"></a><a href=\"https://marketplace.visualstudio.com/items?itemName=slevesque.vscode-hexdump\">HexDump for VSCode</a></h2><p>平常用不到，但需要的時候會感謝有這套外掛，他能夠將檔案轉為 16 進制的格式呈現，看起來有點像是 dos 時代<code>pctools 9.0</code>的工具；一般來說我用的到的機會就是檢查文字檔的開頭編碼屬於哪一種檔案，用來判斷是不是 UTF-8，又或是拿來查文字檔某段文字的實際編碼，後來使用了<code>Gremlins tracker for Visual Studio Code</code>之後，也不再需要用這套了</p>\n<h2 id=\"Settings-Sync\"><a href=\"#Settings-Sync\" class=\"headerlink\" title=\"Settings Sync\"></a><a href=\"https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync\">Settings Sync</a></h2><p>同步 VSCode IDE 設定、套件的工具，以前有寫過一篇介紹：<a href=\"https://partypeopleland.github.io/artblog/2018/04/10/VSCode%E8%A8%AD%E5%AE%9A%E5%90%8C%E6%AD%A5%E5%8F%8A%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%89%87%E6%AE%B5/\">VSCode 設定同步及程式碼片段</a></p>\n<h1 id=\"開發工具套件\"><a href=\"#開發工具套件\" class=\"headerlink\" title=\"開發工具套件\"></a>開發工具套件</h1><h2 id=\"cdnjs\"><a href=\"#cdnjs\" class=\"headerlink\" title=\"cdnjs\"></a><a href=\"https://marketplace.visualstudio.com/items?itemName=JakeWilson.vscode-cdnjs\">cdnjs</a></h2><p>在編輯器內就可以引用 lib，不需要再到處找套件的 cdn</p>\n<h2 id=\"ESLint\"><a href=\"#ESLint\" class=\"headerlink\" title=\"ESLint\"></a><a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\">ESLint</a></h2><p>ESLint 的介紹先前有寫過一篇介紹文：<a href=\"https://partypeopleland.github.io/artblog/2020/04/16/%E5%A6%82%E4%BD%95%E5%9C%A8IDE%E4%B8%AD%E4%BD%BF%E7%94%A8ESLint%E8%87%AA%E5%8B%95%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%96%87%E4%BB%B6/\">如何在 IDE 中使用 ESLint 自動格式化文件</a>，有興趣可以參考一下；這邊提一下 VSCode 在存檔時自動依照 ESlint 格式化並自動修正錯誤的設定</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;eslint.alwaysShowStatus&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"comment\">// 使用ESLint作為Formatter，需禁用其他的Formatter</span></span><br><span class=\"line\"><span class=\"attr\">&quot;eslint.format.enable&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"comment\">// 不使用formatOnSave，採用codeActionsOnSave，因為可以設定的更細緻</span></span><br><span class=\"line\"><span class=\"attr\">&quot;editor.formatOnSave&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;editor.codeActionsOnSave&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;source.fixAll.eslint&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"comment\">// js 預設的 formatter</span></span><br><span class=\"line\"><span class=\"attr\">&quot;[javascript]&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;editor.defaultFormatter&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;dbaeumer.vscode-eslint&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Gremlins-tracker-for-Visual-Studio-Code\"><a href=\"#Gremlins-tracker-for-Visual-Studio-Code\" class=\"headerlink\" title=\"Gremlins tracker for Visual Studio Code\"></a><a href=\"https://marketplace.visualstudio.com/items?itemName=nhoizey.gremlins\">Gremlins tracker for Visual Studio Code</a></h2><p>這個套件能夠提醒你，程式碼如果有看起來像是合法字元，或是不可見的字元出現，在很多時候，程式碼中若包含了這些東西，很可能會引發預期之外的錯誤，通常發生這些問題會很難追查</p>\n<p>可以搭配外掛 <code>Unicode code point of current character</code>，就能夠在狀態列顯示當前游標的字碼是多少</p>\n<h2 id=\"Quokka-js\"><a href=\"#Quokka-js\" class=\"headerlink\" title=\"Quokka.js\"></a><a href=\"https://quokkajs.com/\">Quokka.js</a></h2><p>這一套可以即時取得程式碼的執行結果，而另外一套<a href=\"https://wallabyjs.com/\">wallaby.js</a>則是適用於 TDD 開發流程的套件，這兩個套件好用是好用，但是比較痛苦的是設定；好在官網也盡量提供了各式各樣環境的 sample，放在 Github，或多或少有幫助</p>\n<h2 id=\"Regex-Previewer\"><a href=\"#Regex-Previewer\" class=\"headerlink\" title=\"Regex Previewer\"></a><a href=\"https://marketplace.visualstudio.com/items?itemName=chrmarti.regex\">Regex Previewer</a></h2><p>一套簡單易用的 regex 測試工具，只要按下 Ctrl+Alt+M，就會開啟一個編輯區塊，這時候只要你開啟的檔案是<code>javascript</code>，在 regex pattern 上面會出現一個<code>Test Regex</code>的按鈕，按下去就可以看到有哪些是 match 的</p>\n<h1 id=\"視覺套件\"><a href=\"#視覺套件\" class=\"headerlink\" title=\"視覺套件\"></a>視覺套件</h1><ol>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer\">Bracket Pair Colorizer</a>：括號的顏色顯示外掛，可以更顯著的 將對應的括號顯示出來</li>\n</ol>\n<h1 id=\"自動補完相關套件\"><a href=\"#自動補完相關套件\" class=\"headerlink\" title=\"自動補完相關套件\"></a>自動補完相關套件</h1><ol>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-complete-tag\">Auto Complete Tag</a>：結合了兩個套件<code>Auto Close Tag</code>、<code>Auto Rename Tag</code>的功能；自動幫你補上關閉標籤，更改 Tag 名稱的時候，關閉標籤的名字也會一起改</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=JerryHong.autofilename\">AutoFileName</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=ionutvmi.path-autocomplete\">Path Autocomplete</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense\">Path Intellisense</a></li>\n</ol>\n<h1 id=\"Git-相關套件\"><a href=\"#Git-相關套件\" class=\"headerlink\" title=\"Git 相關套件\"></a>Git 相關套件</h1><ol>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=piotrpalarz.vscode-gitignore-generator\">.gitignore Generator</a>：git ignore 檔案產生器，使用簡單</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=shyykoserhiy.git-autoconfig\">git-autoconfig</a>：用這個套件可以在專案打開的時候先確認要用哪一個帳號做 commit</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens\">GitLens — Git supercharged</a>：Git 的很多功能都補強了，細節還是參照官網介紹吧</li>\n</ol>\n","categories":["工具"],"tags":["vscode"]},{"title":"dotnet core appSetting","url":"/artblog//dotnet-core-appSetting/","content":"<p>在程式裡面調用應用程式設定值的方法</p>\n<span id=\"more\"></span>\n\n<h2 id=\"透過-POCO-類別調用設定值\"><a href=\"#透過-POCO-類別調用設定值\" class=\"headerlink\" title=\"透過 POCO 類別調用設定值\"></a>透過 POCO 類別調用設定值</h2><p>一般來說我們的應用程式設定值都放在<code>appsettings.json</code>，這支 Json 檔案還可以利用<a href=\"https://marketplace.visualstudio.com/items?itemName=GolanAvraham.ConfigurationTransform\">Configuration Transform</a>這一套工具，在 Visual Studio IDE 裡面直接設定各種環境的設定檔，這一個部分就不在這次討論之中，有興趣的自行再研究</p>\n<p>為了要能夠在程式中強型別的使用設定，通常會透過建立一個 POCO 類別，假設有兩個設定值 A 跟 B，則類別可以這樣撰寫</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AppSettingConfig</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> A &#123;<span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> B &#123;<span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>將應用程式設定值檔案，從預設的<code>appsettings.json</code>，調整為<code>_config/app.config.json</code></p>\n<blockquote>\n<p>要不要變更應用程式設定值的 json 檔案路徑，看個人習慣，也可直接使用預設即可</p>\n</blockquote>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Program.cs</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IWebHostBuilder <span class=\"title\">CreateWebHostBuilder</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span> =&gt;</span><br><span class=\"line\">    WebHost.CreateDefaultBuilder(args)</span><br><span class=\"line\">        .ConfigureAppConfiguration((hostContext, config) =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> env = hostContext.HostingEnvironment;</span><br><span class=\"line\">            config.SetBasePath(Path.Combine(env.ContentRootPath, <span class=\"string\">&quot;_config&quot;</span>))</span><br><span class=\"line\">                .AddJsonFile(path: <span class=\"string\">&quot;app.config.json&quot;</span>, optional: <span class=\"literal\">true</span>, reloadOnChange: <span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .UseStartup&lt;Startup&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// StartUp.cs</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 將設定值與POCO類別mapping</span></span><br><span class=\"line\">    services.Configure&lt;AppSettingConfig&gt;(Configuration);</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"IOptions\"><a href=\"#IOptions\" class=\"headerlink\" title=\"IOptions\"></a>IOptions</h2><p>接下來就是在 Controller 的建構式中注入並使用</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DemoController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AppSettingConfig _config;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DemoController</span>(<span class=\"params\">IOptions&lt;AppSettingConfig&gt; config</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _config = config.Value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ViewBag.A = _config.A;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> View();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"IOptionMonitor\"><a href=\"#IOptionMonitor\" class=\"headerlink\" title=\"IOptionMonitor\"></a>IOptionMonitor</h2><p>改用 IOptionMonitor 的話，建構式注入的方法如下，跟 IOption 的差別就在於，重新讀取頁面的時候，設定值有沒有跟著實際設定改動</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DemoController</span>(<span class=\"params\">IOptionsMonitor&lt;AppSettingConfig&gt; config</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _config = config.CurrentValue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可是一般應用程式設定值比較不常變動吧，常常會變動的話我們應該都是會放在資料庫裏面，而不是透過實際的文字檔案更動</p>\n<h2 id=\"於-Controller-直接注入-POCO\"><a href=\"#於-Controller-直接注入-POCO\" class=\"headerlink\" title=\"於 Controller 直接注入 POCO\"></a>於 Controller 直接注入 POCO</h2><p>在上面的兩種方式，POCO 始終都透過 IOption 一起使用，POCO 都不 POCO 了，所以就有人希望直接在 Controller 裡面注入 POCO 類別，而不需要在 using 額外的命名空間來使用 IOptions</p>\n<p>所以為 ServiceCollection 加上擴充方法，就可以直接注入了，<a href=\"https://www.strathweb.com/2016/09/strongly-typed-configuration-in-asp-net-core-without-ioptionst/\">原文</a>在此，程式碼如下</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">ServiceCollectionExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> TConfig <span class=\"title\">ConfigurePOCO</span>&lt;<span class=\"title\">TConfig</span>&gt;(<span class=\"params\"><span class=\"keyword\">this</span> IServiceCollection services, IConfiguration configuration</span>) <span class=\"keyword\">where</span> TConfig : <span class=\"keyword\">class</span>, <span class=\"keyword\">new</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (services == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(services));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (configuration == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(configuration));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> config = <span class=\"keyword\">new</span> TConfig();</span><br><span class=\"line\">        configuration.Bind(config);</span><br><span class=\"line\">        services.AddSingleton(config);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這樣的話，在<code>StartUp.cs</code>也就只需要加入下面這行</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    services.ConfigurePOCO&lt;AppSettingConfig&gt;(Configuration);</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>就可以直接在 <code>Controller</code> 使用</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DemoController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AppSettingConfig _config;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DemoController</span>(<span class=\"params\">AppSettingConfig config</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _config = config;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ViewBag.A = _config.A;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> View();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"現在實務上的用法\"><a href=\"#現在實務上的用法\" class=\"headerlink\" title=\"現在實務上的用法\"></a>現在實務上的用法</h2><p>因為上面的方法，如果在很多地方都需要用，不可避免的就是每個地方都要給它注入一下，用起來感覺就不是那麼的方便。</p>\n<h3 id=\"appSetting-json\"><a href=\"#appSetting-json\" class=\"headerlink\" title=\"appSetting.json\"></a>appSetting.json</h3><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;MyCompanyName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;我的公司名稱&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AppSettingConfig-cs\"><a href=\"#AppSettingConfig-cs\" class=\"headerlink\" title=\"AppSettingConfig.cs\"></a>AppSettingConfig.cs</h3><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AppSettingConfig</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">AppSettingConfig</span>()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> Lazy&lt;AppSettingConfig&gt; _instance = <span class=\"keyword\">new</span> Lazy&lt;AppSettingConfig&gt;(<span class=\"keyword\">new</span> AppSettingConfig());</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AppSettingConfig Instance =&gt; _instance.Value;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IConfiguration _config;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Init</span>(<span class=\"params\">IConfiguration config</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _config = config;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">string</span> <span class=\"title\">GetValue</span>(<span class=\"params\"><span class=\"built_in\">string</span> key, <span class=\"built_in\">string</span> defaultValue = <span class=\"string\">&quot;&quot;</span></span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _config.GetSection(key).Value ?? defaultValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 公司名稱</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> MyCompanyName =&gt; GetValue(<span class=\"string\">&quot;MyCompanyName&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//...略...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"startup-cs\"><a href=\"#startup-cs\" class=\"headerlink\" title=\"startup.cs\"></a>startup.cs</h3><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Startup</span>(<span class=\"params\">Iconfiguration configuration</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Configuration = configuration;</span><br><span class=\"line\">        AppSettingConfig.Instance.Init(configuration);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//...略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他人的作法\"><a href=\"#其他人的作法\" class=\"headerlink\" title=\"其他人的作法\"></a>其他人的作法</h2><p>目前專案上的用法是這樣的，一樣的用法可以參考這一篇<a href=\"https://stackoverflow.com/questions/45885615/asp-net-core-access-configuration-from-static-class\">ASP.NET Core—access Configuration from static class</a>，這篇文章中很多回答都很棒，包含了他們回答的評論，我沒有辦法一一舉例說明，有興趣的可以去閱讀一下</p>\n<h2 id=\"參考連結\"><a href=\"#參考連結\" class=\"headerlink\" title=\"參考連結\"></a>參考連結</h2><ol>\n<li><a href=\"https://docs.microsoft.com/zh-tw/aspnet/core/fundamentals/configuration/options?view=aspnetcore-3.1\">ASP.NET Core 中的選項模式</a></li>\n<li><a href=\"https://www.strathweb.com/2016/09/strongly-typed-configuration-in-asp-net-core-without-ioptionst/\">Strongly typed configuration in ASP.NET Core without IOptions<T></a></li>\n<li><a href=\"https://stackoverflow.com/questions/45885615/asp-net-core-access-configuration-from-static-class\">ASP.NET Core—access Configuration from static class</a></li>\n</ol>\n","categories":["dotnet"],"tags":["appSetting"]},{"title":"dotnet core identity","url":"/artblog//dotnet-core-identity/","content":"<p>透過.net Core identity 實作身份認證</p>\n<span id=\"more\"></span>\n\n<p>透過身分認證機制，我們可以讓沒有認證過的人拒絕訪問我們的網站，下面的練習是參考<a href=\"https://code-maze.com/authentication-aspnet-core-identity/\">Authentication with ASP.NET Core Identity</a>實作，有興趣的人可以觀看原文</p>\n<h2 id=\"設定-net-core-app\"><a href=\"#設定-net-core-app\" class=\"headerlink\" title=\"設定.net core app\"></a>設定.net core app</h2><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//StartUp.cs</span></span><br><span class=\"line\">services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme).AddCookie();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//StartUp.cs</span></span><br><span class=\"line\">app.UseAuthentication();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"禁止未經授權的用戶訪問\"><a href=\"#禁止未經授權的用戶訪問\" class=\"headerlink\" title=\"禁止未經授權的用戶訪問\"></a>禁止未經授權的用戶訪問</h2><p>建立一個資訊頁，顯示登入人員的基本資料，這個頁面如果沒有登入系統是不允許訪問的，套用<code>[Authorize]</code>即可</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 測試頁面，顯示登入者資訊</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">[<span class=\"meta\">Authorize</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ActionResult <span class=\"title\">Secret</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> View();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xhtml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Claim details<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">\t@foreach (var claim in User.Claims) &#123;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>@claim.Type<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span>: @claim.Value<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"建立登入頁面\"><a href=\"#建立登入頁面\" class=\"headerlink\" title=\"建立登入頁面\"></a>建立登入頁面</h2><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 登入頁面</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">[<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Login</span>(<span class=\"params\"><span class=\"built_in\">string</span> returnUrl = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ViewData[<span class=\"string\">&quot;ReturnUrl&quot;</span>] = returnUrl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> View();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 登入頁面(post)</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;loginForm&quot;&gt;</span>登入表單<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">[<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IActionResult&gt; <span class=\"title\">Login</span>(<span class=\"params\">LoginFormViewModel loginForm</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> View();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>登入表單 ViewModel</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 登入表單 viewModel</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">LoginFormViewModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 帳號</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">MaxLength(100, ErrorMessage = <span class=\"string\">&quot;帳號長度不可多於100字元&quot;</span>)</span>]</span><br><span class=\"line\">    [<span class=\"meta\">Required(ErrorMessage = <span class=\"string\">&quot;請輸入帳號&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> LoginID &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 密碼</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">Required(ErrorMessage = <span class=\"string\">&quot;請輸入密碼&quot;</span>)</span>]</span><br><span class=\"line\">    [<span class=\"meta\">DataType(DataType.Password)</span>]</span><br><span class=\"line\">    [<span class=\"meta\">JsonIgnore</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Password &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 導頁網址</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> ReturnUrl &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>登入頁面 Html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">asp-action</span>=<span class=\"string\">&quot;Login&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">asp-route-returnUrl</span>=<span class=\"string\">&quot;@ViewData[&quot;</span><span class=\"attr\">ReturnUrl</span>&quot;]&quot;&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>JoPE Member Login Page<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;loginId&quot;</span>&gt;</span>帳號<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;loginId&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;loginId&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;請輸入帳號&quot;</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">&quot;off&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;password&quot;</span>&gt;</span>密碼<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;請輸入密碼&quot;</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">&quot;off&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;登入&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"登入邏輯\"><a href=\"#登入邏輯\" class=\"headerlink\" title=\"登入邏輯\"></a>登入邏輯</h2><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 登入頁面(post)</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;form&quot;&gt;</span>登入表單<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">[<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IActionResult&gt; <span class=\"title\">Login</span>(<span class=\"params\">LoginFormViewModel form</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ModelState.IsValid)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> View(loginForm);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> user = <span class=\"keyword\">await</span> MemberModule.FindByLoginId(form.LoginID);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (user != <span class=\"literal\">null</span> &amp;&amp; <span class=\"keyword\">await</span> MemberModule.CheckPassword(user, form.Password))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> identity = <span class=\"keyword\">new</span> ClaimsIdentity(CookieAuthenticationDefaults.AuthenticationScheme);</span><br><span class=\"line\">        identity.AddClaim(<span class=\"keyword\">new</span> Claim(ClaimTypes.NameIdentifier, user.Id.ToString()));</span><br><span class=\"line\">        identity.AddClaim(<span class=\"keyword\">new</span> Claim(ClaimTypes.Name, user.Name));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> authProperties = <span class=\"keyword\">new</span> AuthenticationProperties</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            AllowRefresh = <span class=\"literal\">true</span>,</span><br><span class=\"line\">            ExpiresUtc = DateTimeOffset.UtcNow.AddMinutes(<span class=\"number\">15</span>),</span><br><span class=\"line\">            IsPersistent = <span class=\"literal\">true</span>,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> HttpContext.SignInAsync(</span><br><span class=\"line\">            CookieAuthenticationDefaults.AuthenticationScheme,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> ClaimsPrincipal(identity),</span><br><span class=\"line\">            authProperties);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> RedirectToLocal(form.ReturnUrl);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> View(loginForm);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> IActionResult <span class=\"title\">RedirectToLocal</span>(<span class=\"params\"><span class=\"built_in\">string</span> returnUrl</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Url.IsLocalUrl(returnUrl))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Redirect(returnUrl);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> RedirectToAction(<span class=\"keyword\">nameof</span>(HomeController.Index), <span class=\"string\">&quot;Home&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Cookie-過期\"><a href=\"#Cookie-過期\" class=\"headerlink\" title=\"Cookie 過期\"></a>Cookie 過期</h2><p>透過上述的機制，進行使用者登入動作的話，會在 Client 端產生一個名稱為<code>.AspNetCore.Cookies</code>的 cookie，內容經過編碼，透過瀏覽器開發者工具可以看到，有一欄是 Cookie 的 Expires &#x2F; max-age，可以理解為，超過這個時間，這份資料就沒有用了</p>\n<p>關於 Cookie 的更多資訊，可以參考 MDN 的<a href=\"https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Cookies\">說明</a></p>\n<p>這邊要測試的是 Cookie Expires 的這件事情，在上一段使用者登入呼叫的程式片段中，可以看到我們設定了 Cookie 的過期時間為 15 分鐘，此處為了測試，我將它設定為，登入之後 20 秒，沒有其他的操作行為就會自動移除 Cookie</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> authProperties = <span class=\"keyword\">new</span> AuthenticationProperties</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    AllowRefresh = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    ExpiresUtc = DateTimeOffset.UtcNow.AddSeconds(<span class=\"number\">20</span>),</span><br><span class=\"line\">    IsPersistent = <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> HttpContext.SignInAsync(</span><br><span class=\"line\">    CookieAuthenticationDefaults.AuthenticationScheme,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> ClaimsPrincipal(identity),</span><br><span class=\"line\">    authProperties);</span><br></pre></td></tr></table></figure>\n\n<p>然後我在後端取得<code>DateTime.now</code>送給前端顯示，所以可以看到系統登入的時間，從後端取得的時間，再加上 20 秒，就等於我們看到 Cookie 資訊的 Expires 的值</p>\n<p><img src=\"/artblog/dotnet-core-identity/2020-05-26_14-41-38.png\"></p>\n<blockquote>\n<p>此處 cookie 的時間是 GMT time , 所以要自行轉為 UTC+8 來比較</p>\n</blockquote>\n<p>在這 20 秒當中都沒有跟網站後端溝通的話，那麼 Cookie 就會自動被清掉，這表示 client 端已經沒有使用者的資訊了，所以也就代表著將使用者登出系統了<br><img src=\"/artblog/dotnet-core-identity/2020-05-26_14-46-46.png\"></p>\n<h2 id=\"CookieAuthenticationOptions-ExpireTimeSpan\"><a href=\"#CookieAuthenticationOptions-ExpireTimeSpan\" class=\"headerlink\" title=\"CookieAuthenticationOptions.ExpireTimeSpan\"></a>CookieAuthenticationOptions.ExpireTimeSpan</h2><p>如果有注意到的話，我們在<code>startup.cs</code>也可以設定這個參數</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...略</span></span><br><span class=\"line\">    services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme).AddCookie(option =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        option.ExpireTimeSpan = TimeSpan.FromMinutes(<span class=\"number\">60</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//...略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>大概可以想成<strong>我希望用戶最少在一個月之內重新登錄一次</strong>，嗯，這就是這個屬性可以拿來利用的情境，這個參數的<a href=\"https://docs.microsoft.com/zh-tw/dotnet/api/microsoft.aspnetcore.authentication.cookies.cookieauthenticationoptions?view=aspnetcore-3.1\">解釋</a>我看的不是很懂，於是我搜尋了一下，發現了一篇文章:<a href=\"https://stackoverflow.com/questions/37086645/how-to-set-asp-net-identity-cookies-expires-time\">How to set asp.net Identity cookies expires time</a>來解釋這個屬性</p>\n<p>這篇文章的解答如下</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">async</span> Task <span class=\"title\">SignInAsync</span>(<span class=\"params\">ApplicationUser user, <span class=\"built_in\">bool</span> isPersistent, <span class=\"built_in\">bool</span> rememberBrowser</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> userIdentity = <span class=\"keyword\">await</span> CreateUserIdentityAsync(user).WithCurrentCulture();</span><br><span class=\"line\">    <span class=\"comment\">// Clear any partial cookies from external or two factor partial sign ins</span></span><br><span class=\"line\">    AuthenticationManager.SignOut(DefaultAuthenticationTypes.ExternalCookie, DefaultAuthenticationTypes.TwoFactorCookie);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rememberBrowser)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> rememberBrowserIdentity = AuthenticationManager.CreateTwoFactorRememberBrowserIdentity(ConvertIdToString(user.Id));</span><br><span class=\"line\">        AuthenticationManager.SignIn(<span class=\"keyword\">new</span> AuthenticationProperties &#123; IsPersistent = isPersistent &#125;, userIdentity, rememberBrowserIdentity);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//AuthenticationManager.SignIn(new AuthenticationProperties &#123; IsPersistent = isPersistent &#125;, userIdentity);</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isPersistent)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            AuthenticationManager.SignIn(<span class=\"keyword\">new</span> AuthenticationProperties &#123; IsPersistent = <span class=\"literal\">true</span> &#125;, userIdentity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            AuthenticationManager.SignIn(<span class=\"keyword\">new</span> AuthenticationProperties &#123; IsPersistent = <span class=\"literal\">true</span>, ExpiresUtc = DateTimeOffset.UtcNow.AddMinutes(<span class=\"number\">30</span>) &#125;, userIdentity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這篇文章提供了一個很好的解決方案，但我們要關注的重點其實是：在預設情況下程式會使用<code>startup.cs</code>裡面設定的<code>ExpireTimeSpan</code>；但如果我們自行設定了<code>ExpiresUtc</code>，就會以我們設定的值為主。</p>\n<blockquote>\n<p>換句話說，如果情境較簡單，你可以只考慮 <code>ExpiresUtc</code> 屬性這件事情就好，然後在登入的 SignInAsync 的判斷就直接用本文提到的方式處理即可</p>\n</blockquote>\n","categories":["dotnet"],"tags":["identity"]},{"title":"dotnet core shared cookie by redis","url":"/artblog//dotnet-core-shared-cookie-by-redis/","content":"<p>此範例是為了練習透過 docker 佈署，並於更版當下，利用 shared-cookie 避免網站的使用者被登出系統</p>\n<span id=\"more\"></span>\n\n<p>首先我們先建立一個新的 demo 專案，環境為.netCore 2.1，為了方便示範，使用了預設的 MVC 範本，這邊我是透過 visual Studio 2019 建立的，似乎透過 cli 建立的範本會有點不同，但不影響示範</p>\n<h2 id=\"加入-identity\"><a href=\"#加入-identity\" class=\"headerlink\" title=\"加入 identity\"></a>加入 identity</h2><p>第一件事情就是將網站的登入機制建立起來</p>\n<p>正常來說我們會讓使用者輸入帳號、密碼，並且經過後端驗證，一般會去資料庫查詢並回傳結果，如果沒問題的話，我們就會從資料庫中取得該會員的資料並設定在身份聲明中，這些聲明在網站的程式碼中可以隨時被調用</p>\n<h3 id=\"AccountController-cs\"><a href=\"#AccountController-cs\" class=\"headerlink\" title=\"AccountController.cs\"></a>AccountController.cs</h3><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// LoginRequest 只是一個單純的 DTO 物件，只有 LoginId 與 Password 兩個屬性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;JsonResult&gt; <span class=\"title\">Login</span>(<span class=\"params\">LoginRequest form</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 一開始都先將使用者登出系統</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> AuthorizeManagement.SignOutAsync();</span><br><span class=\"line\">    <span class=\"comment\">// 如果帳號密碼不符合，回傳前端 json 為 false</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (form.LoginId != <span class=\"string\">&quot;test&quot;</span> || form.Password != <span class=\"string\">&quot;1234&quot;</span>) <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123;result = <span class=\"literal\">false</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 符合的話就進行登入系統的行為，此處由我們自己撰寫的類別來處理登入這件事情</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> AuthorizeManagement.SignInAsync(form.LoginId);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Json(<span class=\"keyword\">new</span> &#123;result = <span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AuthorizeManagement-cs\"><a href=\"#AuthorizeManagement-cs\" class=\"headerlink\" title=\"AuthorizeManagement.cs\"></a>AuthorizeManagement.cs</h3><blockquote>\n<p>HttpContext 透過建構式注入取得，於 startup.cs 中設定</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task <span class=\"title\">SignInAsync</span>(<span class=\"params\"><span class=\"built_in\">string</span> loginId</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 身份聲明</span></span><br><span class=\"line\">    ClaimsIdentity identity = <span class=\"keyword\">new</span> ClaimsIdentity(</span><br><span class=\"line\">        <span class=\"keyword\">new</span>[]</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Claim(ClaimTypes.NameIdentifier, loginId),</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        CookieAuthenticationDefaults.AuthenticationScheme);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 此處設定大概的意思是，如果15分鐘內使用者沒有跟網站互動的話，時間到就把客戶端的cookie資料清除 (藉由expires由瀏覽器處理)</span></span><br><span class=\"line\">    AuthenticationProperties authProperties = <span class=\"keyword\">new</span> AuthenticationProperties</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        AllowRefresh = <span class=\"literal\">true</span>,</span><br><span class=\"line\">        ExpiresUtc = DateTimeOffset.UtcNow.AddMinutes(<span class=\"number\">15</span>),</span><br><span class=\"line\">        IsPersistent = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">await</span> HttpContext.SignInAsync(</span><br><span class=\"line\">        CookieAuthenticationDefaults.AuthenticationScheme,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> ClaimsPrincipal(identity),</span><br><span class=\"line\">        authProperties);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"startup-cs\"><a href=\"#startup-cs\" class=\"headerlink\" title=\"startup.cs\"></a>startup.cs</h3><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// startup.cs</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//..略</span></span><br><span class=\"line\">    services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme).AddCookie()</span><br><span class=\"line\"></span><br><span class=\"line\">    services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IHostingEnvironment env</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    AuthorizeManagement.Configure(app.ApplicationServices.GetRequiredService&lt;IHttpContextAccessor&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (env.IsDevelopment())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseDeveloperExceptionPage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseExceptionHandler(<span class=\"string\">&quot;/Home/Error&quot;</span>);</span><br><span class=\"line\">        app.UseHsts();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseHttpsRedirection();</span><br><span class=\"line\">    app.UseStaticFiles();</span><br><span class=\"line\">    app.UseCookiePolicy();</span><br><span class=\"line\">    app.UseAuthentication();    <span class=\"comment\">// 需要加入這一行</span></span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseMvc(routes =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        routes.MapRoute(</span><br><span class=\"line\">            name: <span class=\"string\">&quot;default&quot;</span>,</span><br><span class=\"line\">            template: <span class=\"string\">&quot;&#123;controller=Account&#125;/&#123;action=Index&#125;/&#123;id?&#125;&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"other-files\"><a href=\"#other-files\" class=\"headerlink\" title=\"other files\"></a>other files</h3><p>其他的檔案細節請自行參考 github</p>\n<h2 id=\"測試網站\"><a href=\"#測試網站\" class=\"headerlink\" title=\"測試網站\"></a>測試網站</h2><p>首頁已經改成<code>/Account/Index</code>，所以一開網站應該就會看到下面這畫面<br><img src=\"/artblog/dotnet-core-shared-cookie-by-redis/2020-05-29_10-27-05.png\"></p>\n<p>將開發者工具開啟，可以看到 cookie 是沒東西的<br><img src=\"/artblog/dotnet-core-shared-cookie-by-redis/2020-05-29_10-30-32.png\"></p>\n<p>點選 Login 之後，看到 Cookie 就產生出來了，注意到 Expires 的時間，正好是我截圖時候再加 15 分鐘</p>\n<blockquote>\n<p>Cookie 的時間是 GMT 時間</p>\n</blockquote>\n<p><img src=\"/artblog/dotnet-core-shared-cookie-by-redis/2020-05-29_10-33-39.png\"></p>\n<h2 id=\"測試-docker-images-佈署\"><a href=\"#測試-docker-images-佈署\" class=\"headerlink\" title=\"測試 docker images 佈署\"></a>測試 docker images 佈署</h2><p>登入機制看起來動作很正常，一般情況下也沒問題，但是 cookie 的產生與 machine key 有關，所以很可能在 load balance 環境、或者是透過 docker 佈署的環境下會有問題，因此我們先來測試一下，若是透過 docker 佈署、更版，網站使用者是否會被登出</p>\n<h3 id=\"dockerfile\"><a href=\"#dockerfile\" class=\"headerlink\" title=\"dockerfile\"></a>dockerfile</h3><figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> microsoft/dotnet:<span class=\"number\">2.1</span>-sdk AS build</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /src</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> . .</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> dotnet publish -c Release -o /out</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> microsoft/dotnet:<span class=\"number\">2.1</span>-aspnetcore-runtime AS runtime</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=build /out .</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;dotnet&quot;</span>, <span class=\"string\">&quot;shared-cookie-redis.dll&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"建立-docker-image\"><a href=\"#建立-docker-image\" class=\"headerlink\" title=\"建立 docker image\"></a>建立 docker image</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -t demo .</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"建立-container\"><a href=\"#建立-container\" class=\"headerlink\" title=\"建立 container\"></a>建立 container</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --rm --name=mysite -p 7000:80 demo</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"測試步驟\"><a href=\"#測試步驟\" class=\"headerlink\" title=\"測試步驟\"></a>測試步驟</h3><p>先將網站透過 docker run 起來，並於網站登入，產生 cookie<br><img src=\"/artblog/dotnet-core-shared-cookie-by-redis/2020-05-29_10-44-00.png\"><br>將網站 container 停止，並重新 run 一個新的 container<br><img src=\"/artblog/dotnet-core-shared-cookie-by-redis/2020-05-29_10-43-29.png\"><br>瀏覽器直接重新整理，觀察 cookie 與頁面<br><img src=\"/artblog/dotnet-core-shared-cookie-by-redis/2020-05-29_10-44-50.png\"></p>\n<p>所以我們可以合理的猜測，因為 cookie 加密 base on machine key，但是因為在 container 重新建立的情況下，machine key 不同，所以原先產生的 cookie 也隨著失效了</p>\n<p>那麼，如果 machine key 是一樣的，是否就可以解決這個問題？</p>\n<h2 id=\"設定-asp-net-core-資料保護\"><a href=\"#設定-asp-net-core-資料保護\" class=\"headerlink\" title=\"設定 asp.net core 資料保護\"></a>設定 asp.net core 資料保護</h2><p>最多的資料大概就是<a href=\"https://docs.microsoft.com/zh-tw/aspnet/core/security/data-protection/configuration/overview?view=aspnetcore-3.1\">官網</a>了，這裡提到很多種方法，大致上講一下</p>\n<p>就我理解的部分來說，整個 cookie 的產生很大一部分取決 machine key，他是一種資料保護的機制，原本 windows 主機上都會有這東西，時間到了它會自動產生一個，通常的路徑會是在<code>%LOCALAPPDATA%\\ASP.NET\\DataProtection-Keys</code>，如果我們要變更程式取得 machine key 的位置的話，可以透過<code>PersistKeysToFileSystem</code>來做，而你一但變更了這個位置，這個 key 就會是沒有就會是沒有加密過的，如果你還想要加密，那就要透過<code>ProtectKeysWith</code>，並給予一個符合 x.509 的憑證來加密資料，這裡有一個<a href=\"https://github.com/tillig/DataProtection/blob/master/test/DataProtectionExtensions.Test/TestCertificate.cs\">範例</a>可以看一下</p>\n<p>如果想要測試的話，可以直接用下面的方式就好，這樣子專案目錄下的 keys 在 runtime 的時候就會產生 key，此處可以將 key 的 expires 時間設置長一點，然後將這個產生出來的 key 加入到專案內，並且設定編譯時候的動作永遠複製，這樣就都會用同一個 key，但是因為我沒辦法驗證 expires 是否真的有效，加上一些因素，最終沒有在朝這個解決方案下去研究</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">services.AddDataProtection().PersistKeysToFileSystem(<span class=\"keyword\">new</span> DirectoryInfo(<span class=\"string\">&quot;keys&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安裝-Redis-相關套件\"><a href=\"#安裝-Redis-相關套件\" class=\"headerlink\" title=\"安裝 Redis 相關套件\"></a>安裝 Redis 相關套件</h3><ol>\n<li><code>StackExchange.Redis</code></li>\n<li><code>Microsoft.AspNetCore.DataProtection.Redis</code></li>\n</ol>\n<p>這版本很怪，.netCore 2.2 以上才能裝<code>Microsoft.AspNetCore.DataProtection.StackExchangeRedis</code>，但 2.1 以下的只能裝<code>Microsoft.AspNetCore.DataProtection.Redis</code>，在 Rider 的介面裡我又找不到，最後直接用 cli 下指令安裝</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">dotnet add package Microsoft.AspNetCore.DataProtection.Redis --version 0.4.1</span><br></pre></td></tr></table></figure>\n\n<p>接著在<code>startup.cs</code>，設定資料保護，當然 <code>redis</code> 要先啟動起來</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//startup.cs</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// DI</span></span><br><span class=\"line\">    services.AddSingleton&lt;IHttpContextAccessor, HttpContextAccessor&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    services.Configure&lt;CookiePolicyOptions&gt;(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// This lambda determines whether user consent for non-essential cookies is needed for a given request.</span></span><br><span class=\"line\">        options.CheckConsentNeeded = context =&gt; <span class=\"literal\">true</span>;</span><br><span class=\"line\">        options.MinimumSameSitePolicy = SameSiteMode.None;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> redisConnStr = <span class=\"string\">&quot;127.0.0.1,abortConnect=false,syncTimeout=10000&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> redis = ConnectionMultiplexer.Connect(redisConnStr);</span><br><span class=\"line\">    services.AddDataProtection();</span><br><span class=\"line\">    services.Configure&lt;KeyManagementOptions&gt;(o =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        o.XmlRepository = <span class=\"keyword\">new</span> RedisXmlRepository(() =&gt; redis.GetDatabase(), <span class=\"string\">&quot;DataProtection-Keys&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme).AddCookie(option =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        option.ExpireTimeSpan = TimeSpan.FromMinutes(<span class=\"number\">60</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>把網站跑起來，接著再去查詢 Redis 可以看到已經有 key 存入了</p>\n<p><img src=\"/artblog/dotnet-core-shared-cookie-by-redis/2020-05-29_11-35-30.png\"></p>\n<h3 id=\"重新打包-image\"><a href=\"#重新打包-image\" class=\"headerlink\" title=\"重新打包 image\"></a>重新打包 image</h3><p>網站停掉，原先的 image 刪除，重新再做一個 image<br><img src=\"/artblog/dotnet-core-shared-cookie-by-redis/2020-05-29_11-40-51.png\"></p>\n<p>docker run 網站之後，進行登入並觀察 cookie 資訊</p>\n<p><img src=\"/artblog/dotnet-core-shared-cookie-by-redis/2020-05-29_11-56-03.png\"></p>\n<p>將 container 刪除再重新 run 一個<br><img src=\"/artblog/dotnet-core-shared-cookie-by-redis/2020-05-29_11-57-20.png\"></p>\n<p>瀏覽器重新整理，查看是否為登入狀態<br><img src=\"/artblog/dotnet-core-shared-cookie-by-redis/2020-05-29_11-57-53.png\"></p>\n<p>這邊要注意的事情是因為我們用了 redis，原先在程式內寫死<code>127.0.0.1:6379</code>如果包成 docker，會不能用。因為 docker container 要連 redis 應該要連 redis container 的 name，所以這邊為了 redis 的連線字串，將他放在<code>Properties/lanuchSettings.json</code>的<code>environmentVariables</code>區段</p>\n<p>並且在 docker image 打包的時候，透過<code>ENV ASPNETCORE_ENVIRONMENT=&quot;Lab&quot;</code>去指定系統環境變數為<code>Lab</code>，然後，在專案<code>Program.cs</code>加了下面這一段，讓程式在 Lab 環境下可以讀取不同的連線字串供測試使用</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    SetEnvironmentVariable();</span><br><span class=\"line\">    CreateWebHostBuilder(args).Build().Run();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SetEnvironmentVariable</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> env = Environment.GetEnvironmentVariable(<span class=\"string\">&quot;ASPNETCORE_ENVIRONMENT&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (env == <span class=\"string\">&quot;Lab&quot;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Environment.SetEnvironmentVariable(<span class=\"string\">&quot;redis&quot;</span>, <span class=\"string\">&quot;myredis,abortConnect=false,syncTimeout=10000&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h3><p>至此，整個 POC 已經完成，相關程式碼已放置於 <a href=\"https://github.com/art-Blog/SharedCookieRedis\">Github</a></p>\n","categories":["dotnet"],"tags":["docker","identity"]},{"title":"javascript 顯示金額","url":"/artblog//javascript-display-number/","content":"<p>因為很簡單的一個金額顯示的問題，查詢了一下發現有很多東西需要紀錄阿…</p>\n<span id=\"more\"></span>\n\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>需要作金額顯示的話，直接透過下列兩種方式之一處理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> number = <span class=\"number\">1314520</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ans1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Intl</span>.<span class=\"title class_\">NumberFormat</span>(<span class=\"literal\">undefined</span>, &#123; <span class=\"attr\">style</span>: <span class=\"string\">&#x27;decimal&#x27;</span> &#125;).<span class=\"title function_\">format</span>(number);</span><br><span class=\"line\"><span class=\"keyword\">let</span> ans2 = number.<span class=\"title function_\">toLocaleString</span>(<span class=\"literal\">undefined</span>, &#123; <span class=\"attr\">style</span>: <span class=\"string\">&#x27;decimal&#x27;</span> &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ans1);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ans2);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/javascript-display-number/2020-08-31_122450.png\"></p>\n<p><code>number.toLocaleString</code>，還有<code>Intl.NumberFormat</code> 這兩個東西的參數其實都一樣，所以就挑一個說了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">numObj.toLocaleString([locales [, options]])</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"locales\"><a href=\"#locales\" class=\"headerlink\" title=\"locales\"></a>locales</h3><p>請參考 RFC-5646 的 BCP-47 文件 (語言標籤)</p>\n<ol>\n<li><a href=\"https://zh.wikipedia.org/wiki/IETF%E8%AA%9E%E8%A8%80%E6%A8%99%E7%B1%A4\">https://zh.wikipedia.org/wiki/IETF%E8%AA%9E%E8%A8%80%E6%A8%99%E7%B1%A4</a></li>\n<li><a href=\"https://tools.ietf.org/html/bcp47\">https://tools.ietf.org/html/bcp47</a></li>\n</ol>\n<p>基本上如果只是要用三位一撇，這個給<code>undefined</code>就好了</p>\n<h3 id=\"options\"><a href=\"#options\" class=\"headerlink\" title=\"options\"></a>options</h3><ol>\n<li>style: 貨幣 currency &#x2F; 數字 decimal</li>\n<li>currency: 貨幣字串，如 JPY 或 TWD，採用 ISO 4217 格式 ( <a href=\"https://baike.baidu.com/item/ISO%204217\">https://baike.baidu.com/item/ISO%204217</a> )</li>\n<li>currencyDisplay: 預設顯示 symbol &#x2F; 直接顯示貨幣代碼 code &#x2F; 當地貨幣名稱 name</li>\n<li>userGrouping: 是否將金額做三位一撇，預設 true</li>\n<li>minimumFractionDigits: 最小小數位</li>\n<li>minimumIntegerDigits: 最小整數位 (通常用在 補 0)</li>\n</ol>\n<p>大概就是這樣了，看圖吧</p>\n<p><img src=\"/artblog/javascript-display-number/2020-08-31_122925.png\"></p>\n","categories":["javascript"]},{"title":"selenium-E2E測試","url":"/artblog//selenium-e2e-testing/","content":"<p>本篇記錄透過 CSharp，使用 selenium 進行 e2e 測試的一些心得，因此會比較雜亂，未來可能會、也可能不會再整理</p>\n<span id=\"more\"></span>\n\n<h2 id=\"使用-selenium-2-進行-e2e-測試\"><a href=\"#使用-selenium-2-進行-e2e-測試\" class=\"headerlink\" title=\"使用 selenium 2 進行 e2e 測試\"></a>使用 selenium 2 進行 e2e 測試</h2><p>主要是基於 selenium 2 進行自動化測試；關於 selenium 1、selenium 2，這兩種都可以拿來寫自動化測試；他們的差別最簡單的就是 selenium 1 主要是提供一堆 API 讓你去操作；而 selenium 2 則是提供物件，讓你用物件的方法去撰寫測試。</p>\n<h2 id=\"Selenium-WebDriver-for-Chrome-過時的作法\"><a href=\"#Selenium-WebDriver-for-Chrome-過時的作法\" class=\"headerlink\" title=\"Selenium WebDriver for Chrome , 過時的作法\"></a>Selenium WebDriver for Chrome , 過時的作法</h2><p>先到<a href=\"https://chromedriver.chromium.org/downloads\">ChromeDriver - WebDriver for Chrome</a>下載跟你電腦上版本一樣的 Driver，下載後解壓縮到自訂目錄，最好該目錄有設定進去<code>path</code>環境變數</p>\n<p>然後在專案內初始化 webDriver 的時候就可以用</p>\n<h3 id=\"Sample-Code-for-Create-ChromeDriver\"><a href=\"#Sample-Code-for-Create-ChromeDriver\" class=\"headerlink\" title=\"Sample Code for Create ChromeDriver\"></a>Sample Code for Create ChromeDriver</h3><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">string</span> seleniumExePath = ConfigurationManager.AppSettings[<span class=\"string\">&quot;SeleniumExePath&quot;</span>];</span><br><span class=\"line\"><span class=\"built_in\">int</span> waitSec = ConfigurationManager.AppSettings[<span class=\"string\">&quot;SeleniumWaitSec&quot;</span>].ToInt();</span><br><span class=\"line\"></span><br><span class=\"line\">_driver = <span class=\"keyword\">new</span> ChromeDriver(ChromeDriverService.CreateDefaultService(seleniumExePath));</span><br><span class=\"line\"><span class=\"comment\">// 全螢幕</span></span><br><span class=\"line\">_driver.Manage().Window.Maximize();</span><br><span class=\"line\"><span class=\"comment\">// 等待秒數</span></span><br><span class=\"line\">_driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(waitSec);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"app-config\"><a href=\"#app-config\" class=\"headerlink\" title=\"app.config\"></a>app.config</h3><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appSettings</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;SeleniumWaitSec&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;20&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;SeleniumExePath&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;c:\\Tools&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appSettings</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"關於-Selenium-WebDriver-for-Chrome-目前的作法\"><a href=\"#關於-Selenium-WebDriver-for-Chrome-目前的作法\" class=\"headerlink\" title=\"關於 Selenium WebDriver for Chrome , 目前的作法\"></a>關於 Selenium WebDriver for Chrome , 目前的作法</h2><p>後來才發現原來可以用<code>nuget</code>套件去安裝<code>chromedriver</code>就夠了，且初始化 Driver 的部分也很簡單，所以特別在這邊補充一下，先貼給大家看我目前使用的<code>nuget</code>套件</p>\n<p>一切直接都用 nuget 安裝就搞定，不需要在自己下載 exe 執行，方便許多</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">packages</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;DotNetSeleniumExtras.PageObjects&quot;</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;3.11.0&quot;</span> <span class=\"attr\">targetFramework</span>=<span class=\"string\">&quot;net452&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;DotNetSeleniumExtras.PageObjects.Core&quot;</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;3.12.0&quot;</span> <span class=\"attr\">targetFramework</span>=<span class=\"string\">&quot;net452&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;DotNetSeleniumExtras.WaitHelpers&quot;</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;3.11.0&quot;</span> <span class=\"attr\">targetFramework</span>=<span class=\"string\">&quot;net452&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Selenium.Support&quot;</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;3.141.0&quot;</span> <span class=\"attr\">targetFramework</span>=<span class=\"string\">&quot;net452&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Selenium.WebDriver&quot;</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;3.141.0&quot;</span> <span class=\"attr\">targetFramework</span>=<span class=\"string\">&quot;net452&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Selenium.WebDriver.ChromeDriver&quot;</span> <span class=\"attr\">version</span>=<span class=\"string\">&quot;86.0.4240.2200&quot;</span> <span class=\"attr\">targetFramework</span>=<span class=\"string\">&quot;net452&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">packages</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>如此一來，初始化 webDriver 就只需要<code>using OpenQA.Selenium.Chrome;</code>，然後<code>new ChromeDriver();</code>就好了</p>\n<h2 id=\"安裝-nuGet-套件\"><a href=\"#安裝-nuGet-套件\" class=\"headerlink\" title=\"安裝 nuGet 套件\"></a>安裝 nuGet 套件</h2><ol>\n<li><code>Selenium.Support</code></li>\n<li><code>Selenium.WebDriver</code></li>\n</ol>\n<p>第一個套件是因為有用到<code>SelectElement</code>這個類別所以安裝；主要是第二個套件</p>\n<p>使用上也很簡單，下面的例子就是一個抓頁面 DOM 然後輸入帳號密碼並送出的範例</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">Driver.FindElement(By.Id(<span class=\"string\">&quot;account&quot;</span>)).SendKeys(account);</span><br><span class=\"line\">Driver.FindElement(By.Id(<span class=\"string\">&quot;password&quot;</span>)).SendKeys(password);</span><br><span class=\"line\">Driver.FindElement(By.Id(<span class=\"string\">&quot;submit&quot;</span>)).Click();</span><br></pre></td></tr></table></figure>\n\n<p>語法應該不難理解，細節就請自行查閱 API 語法囉</p>\n<h2 id=\"好用的輔助開發工具-XPath-Helper\"><a href=\"#好用的輔助開發工具-XPath-Helper\" class=\"headerlink\" title=\"好用的輔助開發工具 XPath Helper\"></a>好用的輔助開發工具 XPath Helper</h2><p>既然是 e2e 測試，選取畫面上的元素是很重要的事情，相信沒有多少人會去自己寫<code>xpath</code>這種東西<br>大部分的人應該都是透過開發者工具(F12)叫出來，然後透過<code>Ctrl+Shift+C</code>選取畫面上的元素<br><img src=\"/artblog/selenium-e2e-testing/2020-09-30_100453.png\"></p>\n<p>選取後在開發者工具上會反白出來，再將滑鼠移過去，右鍵選擇複製 XPATH<br><img src=\"/artblog/selenium-e2e-testing/2020-09-30_100630.png\"></p>\n<p>但是，要如何驗證呢？</p>\n<p>安裝這一套<a href=\"https://chrome.google.com/webstore/detail/xpath-helper/hgimnogjllphhhkhlmebbmlgjoejdpjl\">XPath Helper</a>就可以了，裝好後點 ICON 會出現一個半透明的輸入框，將 XPATH 於此處貼上，符合的元素在畫面上會顯著的顯示出來<br><img src=\"/artblog/selenium-e2e-testing/2020-09-30_100850.png\"></p>\n<h2 id=\"產生單元測試報告\"><a href=\"#產生單元測試報告\" class=\"headerlink\" title=\"產生單元測試報告\"></a>產生單元測試報告</h2><h3 id=\"0-事前準備\"><a href=\"#0-事前準備\" class=\"headerlink\" title=\"0. 事前準備\"></a>0. 事前準備</h3><p>設定環境變數 Path，方便在指令列直接打指令，可參考：<a href=\"https://www.google.com/search?q=%E8%A8%AD%E5%AE%9A%E7%92%B0%E5%A2%83%E8%AE%8A%E6%95%B8\">設定環境變數</a></p>\n<table>\n<thead>\n<tr>\n<th>執行檔案</th>\n<th>實際路徑</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>msbuild.exe</td>\n<td>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\Bin\\MSBuild.exe</td>\n</tr>\n<tr>\n<td>vstest.console.exe</td>\n<td>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\TestWindow\\vstest.console.exe</td>\n</tr>\n<tr>\n<td>TrxerConsole.exe</td>\n<td>自行 <a href=\"https://github.com/NivNavick/trxer/releases\">下載</a> 後找地方放</td>\n</tr>\n</tbody></table>\n<p><code>trxerConsole.exe</code>執行若有錯誤，需要下載原始碼自己修改，如下圖的地方，將它替換掉，重新編譯後即可</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">RemoveAssemblyName</span>(<span class=\"params\"><span class=\"built_in\">string</span> asm</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(asm.IndexOf(<span class=\"string\">&#x27;,&#x27;</span>)&gt;<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> asm.Substring(<span class=\"number\">0</span>,asm.IndexOf(<span class=\"string\">&#x27;,&#x27;</span>));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> asm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/selenium-e2e-testing/trxerFix.png\"></p>\n<p>REF:<a href=\"https://github.com/NivNavick/trxer/issues/11\">Unhandled Exception: System.ArgumentOutOfRangeException: Length cannot be less than zero</a></p>\n<h3 id=\"1-產生-dll-檔案\"><a href=\"#1-產生-dll-檔案\" class=\"headerlink\" title=\"1. 產生 dll 檔案\"></a>1. 產生 dll 檔案</h3><p>測試專案先建置，產生測試的 dll 檔案</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 進入專案目錄</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> D:\\code\\Github\\Repos\\SeleniumSpecflow\\SeleniumSpecflow</span><br><span class=\"line\"><span class=\"comment\">## 重新建置測試專案</span></span><br><span class=\"line\">msbuild /p:Configuration=Debug /t:Rebuild SeleniumSpecflow.csproj</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-產生-trx-報告\"><a href=\"#2-產生-trx-報告\" class=\"headerlink\" title=\"2. 產生 trx 報告\"></a>2. 產生 trx 報告</h3><p>使用<code>vstest.console.exe</code>執行測試並產生<code>trx</code>格式的報告檔案，產生路徑在專案根目錄下<code>TestResults</code>的這個子目錄內</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 進入專案目錄</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> D:\\code\\Github\\Repos\\SeleniumSpecflow</span><br><span class=\"line\"><span class=\"comment\">## 執行測試</span></span><br><span class=\"line\">vstest.console.exe /Logger:trx;LogFileName=e2e.trx <span class=\"string\">&quot;SeleniumSpecflow\\bin\\Debug\\SeleniumSpecflow.dll&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>因為希望測試目錄的階層是在專案根目錄下，因此在這個目錄下執行測試，它會自動建立一個子目錄<code>TestResults</code>用來存放測試結果<code>trx</code>檔案</p>\n</blockquote>\n<h3 id=\"3-產生-html-報告\"><a href=\"#3-產生-html-報告\" class=\"headerlink\" title=\"3. 產生 html 報告\"></a>3. 產生 html 報告</h3><p>使用<code>TrxerConsole.exe</code>將測試報告轉為<code>html</code>格式</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">trxerConsole.exe D:\\code\\Github\\Repos\\SeleniumSpecflow\\TestResults\\e2e.trx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-檢視報告內容\"><a href=\"#4-檢視報告內容\" class=\"headerlink\" title=\"4. 檢視報告內容\"></a>4. 檢視報告內容</h3><p>透過指令列自動開啟<code>html</code>報告</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">start</span> chrome.exe  D:\\code\\Github\\Repos\\SeleniumSpecflow\\TestResults\\E2E.trx.html</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-specflow-套件撰寫-BDD-風格的-cucumber-測試文件\"><a href=\"#使用-specflow-套件撰寫-BDD-風格的-cucumber-測試文件\" class=\"headerlink\" title=\"使用 specflow 套件撰寫 BDD 風格的 cucumber 測試文件\"></a>使用 specflow 套件撰寫 BDD 風格的 cucumber 測試文件</h2><p><img src=\"/artblog/selenium-e2e-testing/feature.png\"></p>\n<p>像上面這樣的測試案例，是可以直接被執行的，首先需要安裝 VS2019 支援的 SpecFlow 擴充套件，可以從這邊<a href=\"https://marketplace.visualstudio.com/items?itemName=TechTalkSpecFlowTeam.SpecFlowForVisualStudio\">SpecFlow for Visual Studio 2019</a>下載；另外，在專案內也需要安裝<code>SpecFlow</code>套件，最好是裝新版本；在 IDE 的部分因為在 Rider 內還沒有支援 C# 的 SpecFlow，所以比較友善的開發環境還是在 Visual Studio 2019 之內</p>\n<p>在 VS2019 內若採用<code>MSTEST</code>的測試框架，那麼最好還是安裝一下</p>\n<ol>\n<li><code>SpecFlow.MsTest</code></li>\n<li><code>SpecFlow.Tools.MsBuild.Generation</code></li>\n</ol>\n<p><img src=\"/artblog/selenium-e2e-testing/specflow.png\"></p>\n<p>specFlow 的 Feature 檔其實只是一個純文字的格式，透過套件當你在 Build 的時候，自動產生一個對應的 cs 檔，自動產生出來的檔案不需要加入專案，在測試總管可以看到產生出來的測試案例<br><img src=\"/artblog/selenium-e2e-testing/featureFile.png\"></p>\n<h3 id=\"如何開始自動產生步驟定義\"><a href=\"#如何開始自動產生步驟定義\" class=\"headerlink\" title=\"如何開始自動產生步驟定義\"></a>如何開始自動產生步驟定義</h3><p><img src=\"/artblog/selenium-e2e-testing/2020-09-30_143144.png\"><br>直接開啟<code>feature</code>檔，無法找到定義的部分會以紫色顯示，可以右鍵選單執行<code>Generate Step Definitions</code></p>\n<p><img src=\"/artblog/selenium-e2e-testing/2020-09-30_143316.png\"><br>如果是第一次執行，可以選擇<code>Generate</code>之後會產生一個檔案存放相關的定義，需要你自行選擇儲存位置；若是補足案例的定義，建議是選擇旁邊的複製到剪貼簿，自己找到程式碼的地方貼上修改</p>\n<p>如果沒有步驟定義的產生選項可以選，應該就是專案沒有參考到正確的<code>dll</code>檔案<br><img src=\"/artblog/selenium-e2e-testing/2020-09-30_143642.png\"><br>自行手動加入參考之後，應該可以看到右鍵選單出現產生定義的指令可用了</p>\n<blockquote>\n<p>在.netFramework 4.6.1 上面是這個樣子，更高的版本似乎不會在專案目錄下有<code>packages</code>，而是在使用者目錄下面共用，這部分就沒有再去研究</p>\n</blockquote>\n<h3 id=\"注入-ScenarioContext\"><a href=\"#注入-ScenarioContext\" class=\"headerlink\" title=\"注入 ScenarioContext\"></a>注入 ScenarioContext</h3><p>使用新版本的<code>SpecFlow</code>需要用注入的方式取得<code>ScenarioContext</code>，但是透過產生的語法是直接給<code>ScenarioContext.Current.Pending()</code>類似這樣的方式。其實就只需要在 Steps 定義檔案的建構式，直接注入<code>ScenarioContext</code>即可<br><img src=\"/artblog/selenium-e2e-testing/2020-09-30_144828.png\"></p>\n<h3 id=\"透過-page-object-model-撰寫測試\"><a href=\"#透過-page-object-model-撰寫測試\" class=\"headerlink\" title=\"透過 page object model 撰寫測試\"></a>透過 page object model 撰寫測試</h3><p>我們為頁面新增加一個 model，稱之為 page object，在這個物件內新增一些屬性，讓我們可以直接呼叫使用，而不必每一次都重新抓，當然也可以將一些頁面的操作行為封裝起來，讓我們在使用上更加方便、直觀</p>\n<p>安裝這四個 nuget 套件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Install-Package DotNetSeleniumExtras</span><br><span class=\"line\">Install-Package DotNetSeleniumExtras.PageObjects</span><br><span class=\"line\">Install-Package DotNetSeleniumExtras.PageObjects.Core</span><br><span class=\"line\">Install-Package DotNetSeleniumExtras.WaitHelpers</span><br></pre></td></tr></table></figure>\n\n<p>在程式內 using 正確的命名空間</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// For supporting Page Object Model</span></span><br><span class=\"line\"><span class=\"comment\">// Obsolete - using OpenQA.Selenium.Support.PageObjects;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> SeleniumExtras.PageObjects;</span><br></pre></td></tr></table></figure>\n\n<p>在物件內就可以這樣宣告，意思是透過 By.Id 的方式去尋找”loginID”，找到的東西放到 TxtAccount 內</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">FindsBy(How = How.Id, Using = <span class=\"string\">&quot;loginID&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> IWebElement TxtAccount &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>當然也可以將 Login 行為封裝在 pageObj 裡面的方法，在這裡會造成頁面切換跳轉的部分，則是返回另外一個<code>pageObj</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> HomePage <span class=\"title\">Login</span>(<span class=\"params\"><span class=\"built_in\">string</span> account, <span class=\"built_in\">string</span> password</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    TxtAccount.SendKeys(account);</span><br><span class=\"line\">    TxtPassword.SendKeys(password);</span><br><span class=\"line\">    BtnSubmit.Submit();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HomePage();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是在使用這樣的方法之前必須要先經過 Init 的步驟，否則所有去抓頁面的東西都會是 null<br>在這裡我採用的方式是在 Base 的建構式內初始化</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">PropertiesCollection</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IWebDriver Driver &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">PageBase</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">PageBase</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        PageFactory.InitElements(PropertiesCollection.Driver, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">LoginPage</span> : <span class=\"title\">PageBase</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">FindsBy(How = How.Id, Using = <span class=\"string\">&quot;loginID&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> IWebElement TxtAccount &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">FindsBy(How = How.Id, Using = <span class=\"string\">&quot;password&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> IWebElement TxtPassword &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">FindsBy(How = How.Id, Using = <span class=\"string\">&quot;login&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> IWebElement BtnSubmit &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HomePage <span class=\"title\">Login</span>(<span class=\"params\"><span class=\"built_in\">string</span> account, <span class=\"built_in\">string</span> password</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        TxtAccount.SendKeys(account);</span><br><span class=\"line\">        TxtPassword.SendKeys(password);</span><br><span class=\"line\">        BtnSubmit.Submit();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HomePage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>而 <code>PropertiesCollection.Driver</code>這個東西則是在 Hook 內測試開始後初始化</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Hooks.cs</span></span><br><span class=\"line\">[<span class=\"meta\">BeforeScenario</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Initialize</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    PropertiesCollection.Driver = <span class=\"keyword\">new</span> ChromeDriver();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>REF</strong></p>\n<ol>\n<li><a href=\"https://www.lambdatest.com/blog/page-object-model-tutorial-selenium-csharp/\">Selenium C#: Page Object Model Tutorial With Examples</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=mluLgBywW0Y&list=PL6tu16kXT9PqKSouJUV6sRVgmcKs-VCqo\">Execute Automation - Selenium with C# - Youtube</a></li>\n<li><a href=\"https://github.com/SeleniumHQ/selenium/wiki/PageFactory\">Selenium: PageFactory - Github</a></li>\n</ol>\n<h2 id=\"產生-cucumber-的測試報告\"><a href=\"#產生-cucumber-的測試報告\" class=\"headerlink\" title=\"產生 cucumber 的測試報告\"></a>產生 cucumber 的測試報告</h2><h3 id=\"LivingDoc\"><a href=\"#LivingDoc\" class=\"headerlink\" title=\"LivingDoc\"></a>LivingDoc</h3><p>專案如果有安裝了<code>SpecFlow.Plus.LivingDocPlugin</code>，會在 Bin 目錄下產生一個測試結果的 json 檔案，所以我們只要透過官方提供的另外一個工具<code>livingdoc.exe</code>，將 json 轉為 Html 報告即可</p>\n<h4 id=\"更新-Specflow-套件至-3-4-3-以上\"><a href=\"#更新-Specflow-套件至-3-4-3-以上\" class=\"headerlink\" title=\"更新 Specflow 套件至 3.4.3 以上\"></a>更新 Specflow 套件至 3.4.3 以上</h4><h4 id=\"安裝-SpecFlow-Plus-LivingDoc-CLI\"><a href=\"#安裝-SpecFlow-Plus-LivingDoc-CLI\" class=\"headerlink\" title=\"安裝 SpecFlow.Plus.LivingDoc.CLI\"></a>安裝 SpecFlow.Plus.LivingDoc.CLI</h4><p><code>SpecFlow.Plus.LivingDoc.CLI</code>需要安裝<code>.NET Core SDK 3.1</code>或更高版本。可以在 Microsoft 官方指南中找到有關設置.NET Core SDK 的信息。雖然產生報告是透過 dotnet core 的工具，但是這個工具只是為了將 json 檔案轉為 html，實際上跟你專案採用.netFramework 或是.net core 無關</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">dotnet tool install <span class=\"literal\">--global</span> SpecFlow.Plus.LivingDoc.CLI</span><br></pre></td></tr></table></figure>\n\n<p>REF:<a href=\"https://docs.specflow.org/projects/specflow-livingdoc/en/latest/LivingDocGenerator/Installing-the-command-line-tool.html\">Installing the command line tool</a></p>\n<p>在安裝了套件之後，執行測試也會一併產生<code>FeatureData.json</code>供後續產生報告使用，如此一來，就可以直接輸入 <code>livingdoc &lt;Path to FeatureData.json&gt;</code>這樣的指令在執行目錄下產生報告</p>\n<h4 id=\"設定-Visual-Studio-2019-外部工具執行產生報告\"><a href=\"#設定-Visual-Studio-2019-外部工具執行產生報告\" class=\"headerlink\" title=\"設定 Visual Studio 2019 外部工具執行產生報告\"></a>設定 Visual Studio 2019 外部工具執行產生報告</h4><p>使用<code>TrxerConsole.exe</code>將測試報告轉為<code>html</code>格式</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">livingdoc D:\\code\\Github\\Repos\\SeleniumSpecflow\\SeleniumSpecflow\\bin\\Debug\\FeatureData.json</span><br></pre></td></tr></table></figure>\n\n<p>為了方便使用，將產生報告的指令撰寫成批次檔案，存放在某個路徑下，並透過 VS2019 的<code>外部工具</code>去呼叫該批次檔，同時傳入參數</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">livingdoc.exe %1</span><br><span class=\"line\">START Chrome LivingDoc.html</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/selenium-e2e-testing/tools.png\"></p>\n<p>如此一來就可以直接在 Menu 選擇外部工具，並產生報告觀看了</p>\n<p><img src=\"/artblog/selenium-e2e-testing/calltools.png\"></p>\n<p><img src=\"/artblog/selenium-e2e-testing/report.png\"></p>\n<p>REF:<a href=\"https://specflow.org/blog/introducing-the-specflow-plus-livingdoc-generator/\">Introducing the SpecFlow+ LivingDoc Generator</a></p>\n<h3 id=\"ExtentReport\"><a href=\"#ExtentReport\" class=\"headerlink\" title=\"ExtentReport\"></a>ExtentReport</h3><p>雖然比較好看，但是實際用了之後感覺好像沒有比較好，有興趣的人還是可以自行比較看看，我覺得優點的部分也是缺點，他的報告內容其實是需要自己去建立的，所以喜歡客製的人或許可以塞很多自己要看的內容？不過我沒有那麼勤勞，報告有看到我要看到的指標就好了；另外這個方法需要用到<code>mongoDB</code>，所以再測試的時候也是自己先把它用 docker 建起來；這個報告我沒有花很多時間查，主要是看人家的 sample code 直接抓來用，所以也不會特別說甚麼，直接貼相關 Code 就好了；有興趣的人再自行研究囉</p>\n<p>REF:<a href=\"https://github.com/executeautomation/SeleniumWithSpecflow\">SeleniumWithSpecflow</a></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Globalization;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.IO;</span><br><span class=\"line\"><span class=\"keyword\">using</span> AventStack.ExtentReports;</span><br><span class=\"line\"><span class=\"keyword\">using</span> AventStack.ExtentReports.Gherkin.Model;</span><br><span class=\"line\"><span class=\"keyword\">using</span> AventStack.ExtentReports.Reporter;</span><br><span class=\"line\"><span class=\"keyword\">using</span> BoDi;</span><br><span class=\"line\"><span class=\"keyword\">using</span> OpenQA.Selenium;</span><br><span class=\"line\"><span class=\"keyword\">using</span> OpenQA.Selenium.Chrome;</span><br><span class=\"line\"><span class=\"keyword\">using</span> OpenQA.Selenium.Remote;</span><br><span class=\"line\"><span class=\"keyword\">using</span> TechTalk.SpecFlow;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">SeleniumSpecflow</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Binding</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Hooks</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Global Variable for Extend report</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ExtentTest _featureName;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ExtentTest _scenario;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ExtentReports _extent;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> KlovReporter _klov;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> RemoteWebDriver _driver;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IObjectContainer _objectContainer;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Hooks</span>(<span class=\"params\">IObjectContainer objectContainer</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _objectContainer = objectContainer;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">BeforeTestRun</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">InitializeReport</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">string</span> reportPath = GetReportPath();</span><br><span class=\"line\">            <span class=\"comment\">//Initialize Extent report before test starts</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> htmlReporter = <span class=\"keyword\">new</span> ExtentHtmlReporter(reportPath);</span><br><span class=\"line\">            htmlReporter.Configuration().Theme = AventStack.ExtentReports.Reporter.Configuration.Theme.Dark;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//Attach report to reporter</span></span><br><span class=\"line\">            _extent = <span class=\"keyword\">new</span> ExtentReports();</span><br><span class=\"line\">            _klov = <span class=\"keyword\">new</span> KlovReporter();</span><br><span class=\"line\"></span><br><span class=\"line\">            _klov.InitMongoDbConnection(<span class=\"string\">&quot;localhost&quot;</span>, <span class=\"number\">27017</span>);</span><br><span class=\"line\">            _klov.ProjectName = <span class=\"string\">&quot;ExecuteAutomation Test&quot;</span>;</span><br><span class=\"line\">            <span class=\"comment\">// URL of the KLOV server</span></span><br><span class=\"line\">            _klov.KlovUrl = <span class=\"string\">&quot;http://localhost:5689&quot;</span>;</span><br><span class=\"line\">            _klov.ReportName = <span class=\"string\">&quot;Karthik KK&quot;</span> + DateTime.Now.ToString(CultureInfo.InvariantCulture);</span><br><span class=\"line\"></span><br><span class=\"line\">            _extent.AttachReporter(htmlReporter, _klov);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">GetReportPath</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// project/bin/debug</span></span><br><span class=\"line\">            <span class=\"built_in\">string</span> binDir = Directory.GetCurrentDirectory();</span><br><span class=\"line\">            <span class=\"comment\">// project</span></span><br><span class=\"line\">            <span class=\"built_in\">string</span> projectDirectory = Directory.GetParent(binDir).Parent?.Parent?.FullName;</span><br><span class=\"line\">            <span class=\"comment\">// project/ExtentReport.html</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Path.Combine(projectDirectory, <span class=\"string\">&quot;ExtentReport.html&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">AfterTestRun</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">TearDownReport</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//Flush report once test completes</span></span><br><span class=\"line\">            _extent.Flush();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">BeforeFeature</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">BeforeFeature</span>(<span class=\"params\">FeatureContext featureContext</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//Create dynamic feature name</span></span><br><span class=\"line\">            _featureName = _extent.CreateTest&lt;Feature&gt;(featureContext.FeatureInfo.Title);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">AfterStep</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">InsertReportingSteps</span>(<span class=\"params\">ScenarioContext context</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//Pending Status</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (context.ScenarioExecutionStatus == ScenarioExecutionStatus.StepDefinitionPending)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (context.CurrentScenarioBlock)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> ScenarioBlock.Given:</span><br><span class=\"line\">                        _scenario.CreateNode&lt;Given&gt;(ScenarioStepContext.Current.StepInfo.Text).Skip(<span class=\"string\">&quot;Step Definition Pending&quot;</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> ScenarioBlock.When:</span><br><span class=\"line\">                        _scenario.CreateNode&lt;When&gt;(ScenarioStepContext.Current.StepInfo.Text).Skip(<span class=\"string\">&quot;Step Definition Pending&quot;</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> ScenarioBlock.Then:</span><br><span class=\"line\">                        _scenario.CreateNode&lt;Then&gt;(ScenarioStepContext.Current.StepInfo.Text).Skip(<span class=\"string\">&quot;Step Definition Pending&quot;</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// step success</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (context.TestError == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (context.CurrentScenarioBlock)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> ScenarioBlock.None:</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> ScenarioBlock.Given:</span><br><span class=\"line\">                        _scenario.CreateNode&lt;Given&gt;(ScenarioStepContext.Current.StepInfo.Text);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> ScenarioBlock.When:</span><br><span class=\"line\">                        _scenario.CreateNode&lt;When&gt;(ScenarioStepContext.Current.StepInfo.Text);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> ScenarioBlock.Then:</span><br><span class=\"line\">                        _scenario.CreateNode&lt;Then&gt;(ScenarioStepContext.Current.StepInfo.Text);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// step fail</span></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (context.CurrentScenarioBlock)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> ScenarioBlock.Given:</span><br><span class=\"line\">                    _scenario.CreateNode&lt;Given&gt;(ScenarioStepContext.Current.StepInfo.Text).Fail(context.TestError.InnerException);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> ScenarioBlock.When:</span><br><span class=\"line\">                    _scenario.CreateNode&lt;When&gt;(ScenarioStepContext.Current.StepInfo.Text).Fail(context.TestError.InnerException);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> ScenarioBlock.Then:</span><br><span class=\"line\">                    _scenario.CreateNode&lt;Then&gt;(ScenarioStepContext.Current.StepInfo.Text).Fail(context.TestError.Message);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">BeforeScenario(Order = 0)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Initialize</span>(<span class=\"params\">ScenarioContext context</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            InitBrowser();</span><br><span class=\"line\">            <span class=\"comment\">//Create dynamic scenario name</span></span><br><span class=\"line\">            _scenario = _featureName.CreateNode&lt;Scenario&gt;(context.ScenarioInfo.Title);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        [<span class=\"meta\">AfterScenario(Order = 1000)</span>]</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CleanUp</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _driver.Quit();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">internal</span> <span class=\"keyword\">void</span> <span class=\"title\">InitBrowser</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">string</span> seleniumExePath = ConfigurationManager.AppSettings[<span class=\"string\">&quot;SeleniumExePath&quot;</span>];</span><br><span class=\"line\">            <span class=\"built_in\">int</span> waitSec = ConfigurationManager.AppSettings[<span class=\"string\">&quot;SeleniumWaitSec&quot;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            _driver = <span class=\"keyword\">new</span> ChromeDriver(ChromeDriverService.CreateDefaultService(seleniumExePath));</span><br><span class=\"line\">            _driver.Manage().Window.Maximize();</span><br><span class=\"line\">            _driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(waitSec);</span><br><span class=\"line\"></span><br><span class=\"line\">            _objectContainer.RegisterInstanceAs&lt;IWebDriver&gt;(_driver);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SpecRun-Report\"><a href=\"#SpecRun-Report\" class=\"headerlink\" title=\"SpecRun Report\"></a>SpecRun Report</h3><p>更新到 SpecFlow + Runner</p>\n<ol>\n<li>Remove the SpecFlow.MsTest NuGet package from your project</li>\n<li>Add the SpecRun.SpecFlow NuGet package to your project</li>\n<li>Build your project</li>\n</ol>\n<p>REF:<a href=\"https://docs.specflow.org/projects/specflow-runner/en/latest/Installation/Migrating-to-SpecFlow-Runner.html\">Migration to SpecFlow+ Runner</a></p>\n<p>做完上面的步驟你在 IDE 裏面是看不到任何測試的，也不知道怎麼一回事，後來到【輸出】視窗去看才知道必須要先註冊免費的帳號<br><img src=\"/artblog/selenium-e2e-testing/notice.png\"></p>\n<p>點連結，透過 Microsoft 登入並註冊 specflow 帳號，完畢之後會說可以用了<br><img src=\"/artblog/selenium-e2e-testing/regok.png\"></p>\n<p>不得不提，他的報告真的很醜，但是資訊跟功能著實讓我驚豔，原本的測試失敗了就是失敗了，我需要手動執行，但是他居然會失敗後幫你 retry<br><img src=\"/artblog/selenium-e2e-testing/autoretry.png\"></p>\n<p>做完這些動作後我的測試總管似乎壞掉了，經由 StackOverFlow 的<a href=\"https://stackoverflow.com/questions/35103781/why-is-the-visual-studio-2015-2017-2019-test-runner-not-discovering-my-xunit-v2?page=1&tab=oldest#tab-top\">這篇討論</a>，我想嘗試照著做，發現沒有該暫存目錄，最後我關閉 VS2019 所有實體後，重新開啟專案，重新建置後順利看到所有測試案例</p>\n<p>它會在專案的目錄下建立一個<code>runtests.cmd</code>，需要測試的時候直接跑這個 command 就可以了，報告會在跑完測試的時候一併產生，連結可以從 VS2019 的輸出視窗看到，直接點擊就可以看到<br><img src=\"/artblog/selenium-e2e-testing/2020-10-05_093104.png\"></p>\n<h4 id=\"如何設定測試\"><a href=\"#如何設定測試\" class=\"headerlink\" title=\"如何設定測試\"></a>如何設定測試</h4><p>參閱<a href=\"https://docs.specflow.org/projects/specflow-runner/en/latest/Profile/Profiles.html\">官方網站的說明</a>，在使用 SpecFlow + Runner version 3.0.284 以後的版本，預設如下</p>\n<ol>\n<li>Search for tests in the base folder (i.e. <code>bin/Debug</code> or <code>bin/Debug/&lt;Framework&gt;</code>) when using SpecRun.exe for test execution</li>\n<li>Execution configuration element:<ul>\n<li>testThreadCount is 1</li>\n<li>stopAfterFailures is 3</li>\n<li>testSchedulingMode is Sequential</li>\n</ul>\n</li>\n</ol>\n<p>如果要變更設定，需要新增<code>.srprofile</code>設定檔進行設置</p>\n<h4 id=\"自行編輯報告-Template\"><a href=\"#自行編輯報告-Template\" class=\"headerlink\" title=\"自行編輯報告 Template\"></a>自行編輯報告 Template</h4><p>請參閱官方的<a href=\"https://docs.specflow.org/projects/specflow-runner/en/latest/Usage/Tutorial-Customising-Reports.html\">Tutorial: Customizing Reports</a>文件</p>\n<p>要使用自訂的 Template，必須要先將報告的 template cshtml 文件，從 nuget 目錄下面 copy 到專案目錄並加入專案，然後在專案的屬性視窗，選擇一律複製<br><img src=\"/artblog/selenium-e2e-testing/2020-10-05_111702.png\"></p>\n<p>接著依照官網的建議設定，如果只需要產一份報告的，就利用<a href=\"https://docs.specflow.org/projects/specflow-runner/en/latest/Profile/Settings.html\">Setting</a>提到的<code>reportTemplate</code>；如果要產多份報告的，就利用<a href=\"https://docs.specflow.org/projects/specflow-runner/en/latest/Profile/Report.html\">Report</a>裡面的<code>Template</code>標籤，文件內都有範例可參考</p>\n","categories":["selenium"],"tags":["e2e"]},{"title":"Stub, Mock是甚麼？","url":"/artblog//what-is-stub-and-mock/","content":"<p>Test Double, Dummy, Fake, Stubs, Spies, Mocks，第一次接觸這些英文名詞的時候，通常也就是剛接觸到測試相關技術的時候，一些文章，或者是課程、說明，或多或少都會帶到這幾個測試領域常見的名詞，之所以會為此專門寫一篇文章，其實除了在鞏固自己記憶之外，也順便備忘一下</p>\n<span id=\"more\"></span>\n\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>先說結論，概括性的稱呼 Test Double 就是測試替身，想像成替身演員的概念就是了。</p>\n<ol>\n<li>stub: 可以<code>模擬</code>回傳值、或是<code>模擬</code>物件狀態。為了取代、替換掉原有的程式</li>\n<li>mock: 可以用來<code>驗證</code>物件與其他物件的互動(包含次數、參數)</li>\n<li>fake: 實作一個輕量化的物件可用來取代原有的 SUT 依賴物件，該物件僅專心滿足於物件本身的功能，並不關心與其他物件的互動</li>\n<li>dummy: 跑龍套湊數的，哈哈哈</li>\n</ol>\n<h2 id=\"Gerard-Meszaros-的定義\"><a href=\"#Gerard-Meszaros-的定義\" class=\"headerlink\" title=\"Gerard Meszaros 的定義\"></a>Gerard Meszaros 的定義</h2><p>根據<code>Martin Fowler</code>在<a href=\"https://martinfowler.com/articles/mocksArentStubs.html\">Mocks Aren’t Stubs</a>一文，節錄文章中提到的幾個名詞，出自<a href=\"https://www.tenlong.com.tw/products/9780131495050\">XUnit Test Patterns: Refactoring Test Code</a>的作者<code>Gerard Meszaros</code>，有鑑於我的英文程度實在不好，節錄原文讓大家自己感受一下….</p>\n<p>Meszaros uses the term Test Double as the generic term for any kind of pretend object used in place of a real object for testing purposes. The name comes from the notion of a Stunt Double in movies. (One of his aims was to avoid using any name that was already widely used.) Meszaros then defined five particular kinds of double:</p>\n<ul>\n<li>Dummy objects are passed around but never actually used. Usually they are just used to fill parameter lists.</li>\n<li>Fake objects actually have working implementations, but usually take some shortcut which makes them not suitable for production (an in memory database is a good example).</li>\n<li>Stubs provide canned answers to calls made during the test, usually not responding at all to anything outside what’s programmed in for the test.</li>\n<li>Spies are stubs that also record some information based on how they were called. One form of this might be an email service that records how many messages it was sent.</li>\n<li>Mocks are what we are talking about here: objects pre-programmed with expectations which form a specification of the calls they are expected to receive.</li>\n</ul>\n<p>於是我們直接到這本書的<a href=\"http://xunitpatterns.com/Test%20Double%20Patterns.html\">網站</a>去看看它怎麼解釋的，基本上這網站的圖就已經超級清楚的了，所以我也不打算畫蛇添足的解釋了</p>\n<p><img src=\"/artblog/what-is-stub-and-mock/2020-09-08_171435.png\"><br><img src=\"/artblog/what-is-stub-and-mock/2020-09-08_171707.png\"></p>\n<h3 id=\"Dummy\"><a href=\"#Dummy\" class=\"headerlink\" title=\"Dummy\"></a>Dummy</h3><p>SUT 的某一些測試方法可能需要一些參數，但是這些參數其實沒用，但為了符合簽章方法，所以我們弄了一個測試替身，這就叫做 Dummy Object</p>\n<h3 id=\"Fake\"><a href=\"#Fake\" class=\"headerlink\" title=\"Fake\"></a>Fake</h3><p>Replace a component that the system under test (SUT) depends on with a much lighter-weight implementation.<br><img src=\"/artblog/what-is-stub-and-mock/testFake.png\"></p>\n<h3 id=\"Stubs\"><a href=\"#Stubs\" class=\"headerlink\" title=\"Stubs\"></a>Stubs</h3><p>We replace a real object with a test-specific object that feeds the desired indirect inputs into the system under test.<br><img src=\"/artblog/what-is-stub-and-mock/testStub.png\"></p>\n<h3 id=\"Spies\"><a href=\"#Spies\" class=\"headerlink\" title=\"Spies\"></a>Spies</h3><p>Use a Test Double to capture the indirect output calls made to another component by the system under test (SUT) for later verification by the test.<br><img src=\"/artblog/what-is-stub-and-mock/testSpy.png\"></p>\n<h3 id=\"Mocks\"><a href=\"#Mocks\" class=\"headerlink\" title=\"Mocks\"></a>Mocks</h3><p>Replace an object the system under test (SUT) depends on with a test-specific object that verifies it is being used correctly by the SUT.<br><img src=\"/artblog/what-is-stub-and-mock/testMock.png\"></p>\n<h2 id=\"江湖人稱-91-的解釋\"><a href=\"#江湖人稱-91-的解釋\" class=\"headerlink\" title=\"江湖人稱 91 的解釋\"></a>江湖人稱 91 的解釋</h2><p>非常的精闢，也是我第一次接觸到的解釋</p>\n<ul>\n<li>Stub：通常使用在驗證目標回傳值，以及驗證目標物件狀態的改變。</li>\n<li>Mock：驗證目標物件與外部相依介面的互動方式</li>\n</ul>\n<blockquote>\n<p><a href=\"https://ithelp.ithome.com.tw/articles/10103969\">30 天快速上手 TDD Day7 - Stub, Mock, Fake 簡介 by 91</a></p>\n</blockquote>\n","categories":["測試"],"tags":["stub","mock"]},{"title":"webpack-編譯vue single file component","url":"/artblog//webpack-compile-vue-single-file-component/","content":"<p>之前的專案採用<code>ASP.NET MVC5</code>的方式建立，當時沒有採用<code>webpack</code>編譯前端程式碼，使用的方式是透過<code>script</code> tag 載入<code>vue.js</code>使用，在 component 的部分則是利用字串模板的方式，以<code>Vue.component()</code>的方式全域註冊，嘗試透過<code>webpack</code>將前端程式編譯，並改用 single file component 的方式撰寫 vue 元件</p>\n<span id=\"more\"></span>\n\n<h2 id=\"目錄架構\"><a href=\"#目錄架構\" class=\"headerlink\" title=\"目錄架構\"></a>目錄架構</h2><table>\n<thead>\n<tr>\n<th>目錄</th>\n<th>版控</th>\n<th>加入專案</th>\n<th>備註</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>/Scripts/Page/**/*.js</code></td>\n<td>Y</td>\n<td>Y</td>\n<td>global</td>\n<td>放置各個頁面的主要 js 程式</td>\n</tr>\n<tr>\n<td><code>/Source/Page/**/*.js</code></td>\n<td>Y</td>\n<td>N</td>\n<td>ESModule</td>\n<td>同上，但是是 ESModule 版本</td>\n</tr>\n<tr>\n<td><code>/Source/Component/**/*.vue</code></td>\n<td>Y</td>\n<td>N</td>\n<td>ESModule</td>\n<td>各功能所用到的 Vue Single File Component</td>\n</tr>\n<tr>\n<td><code>/Source/Enums/**.js</code></td>\n<td>Y</td>\n<td>N</td>\n<td>ESModule</td>\n<td>放置相關的列舉</td>\n</tr>\n<tr>\n<td><code>/Views/Bundle/Page/**/*.cshtml</code></td>\n<td>Y</td>\n<td>Y</td>\n<td>webpack 產出</td>\n<td>用來取代<code>cshtml</code>檔案內的 script 標籤</td>\n</tr>\n<tr>\n<td><code>/Views/BundleTemp/_Js_Bundle.cshtml</code></td>\n<td>Y</td>\n<td>N</td>\n<td>ejs</td>\n<td>產生<code>partial view</code>的<code>template</code>檔案</td>\n</tr>\n</tbody></table>\n<p>改寫原有功能的步驟，以首頁<code>/Home/Index</code>的範例來解說，流程大概就是</p>\n<ol>\n<li><code>/Views/Home/Index.cshtml</code>：將後端 Bundle 的 script 移除，替換為<code>@Html.Partial(&quot;~/Views/Bundle/Page/Home/Index_Js.cshtml&quot;)</code></li>\n<li><code>/Scripts/Page/Home/Index.js</code>：將檔案複製到<code>/Source/Page/Home/Index.js</code>，並針對內容改寫為<code>ESModule</code>寫法，用到的外部檔案比照辦理，複製後改寫</li>\n<li>將用到的<code>Vue Component</code>改寫為<code>SFC</code>，並放置於<code>/Source/Component</code>目錄下，依照元件功能分類</li>\n<li>移除<code>BundleConfig.cs</code>未使用的 bundle 設定</li>\n<li><code>webpack.common.js</code>：修改進入點 pattern：<code>Source/Page/&#123;Home&#125;/*.js</code>，代表會抓<code>/Source/Page/Home/*.js</code>作為 entry</li>\n</ol>\n<h2 id=\"安裝相關套件\"><a href=\"#安裝相關套件\" class=\"headerlink\" title=\"安裝相關套件\"></a>安裝相關套件</h2><p>直接列出<code>package.json</code>依賴套件，直接看比較快，需要注意的是<code>vue</code>的版本需要與<code>vue-template-compiler</code>一致，因為之前的文章用的是<code>webpack@3 + html-webpack-plugin@3.2.0</code>，已經有點久了，現在都到<code>webpack5</code>了，所以重新更新了一下內容</p>\n<blockquote>\n<ol>\n<li>HMR 指令不用再呼叫<code>webpack-dev-server</code>，直接用<code>webpack serve</code>呼叫</li>\n<li>因為用了<code>webpack5</code>，所以 <code>html-webpack-plugin</code>也要重新調整<code>template</code>的 ejs 語法</li>\n</ol>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;start&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack serve --config webpack.dev.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;watch&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack --config webpack.dev.js --watch&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;build:prod&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack --config webpack.prod.js&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;build:dev&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack --config webpack.dev.js&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;keywords&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;author&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;license&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ISC&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;devDependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;@babel/core&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^7.13.10&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;babel-eslint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^10.1.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;babel-loader&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^8.2.2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;clean-webpack-plugin&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^3.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;css-loader&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^5.1.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;eslint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^7.21.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;eslint-plugin-vue&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^7.7.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;glob&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^7.1.6&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;html-webpack-plugin&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^5.3.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;less-loader&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^8.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;sass-loader&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^11.0.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;style-loader&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^2.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;terser-webpack-plugin&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^5.1.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;url-loader&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^4.1.1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;vue-hot-reload-api&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^2.3.4&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;vue-loader&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^15.9.6&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;vue-template-compiler&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^2.5.22&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;webpack&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^5.24.4&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;webpack-cli&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^4.5.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;webpack-dev-server&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^3.11.2&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;webpack-merge&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^5.7.3&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;dependencies&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;vue&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;^2.5.22&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"webpack-設定\"><a href=\"#webpack-設定\" class=\"headerlink\" title=\"webpack 設定\"></a>webpack 設定</h2><p>因為希望編譯的時候可以選擇開發環境或是正式環境，參考官網採用<code>webpack-merge</code>的方式，並透過指令列給予設定檔參數，藉此決定執行哪一份設定；具體的步驟是將設定區分為共用(webpack.common.js)、開發環境(webpack.dev.js)、正式環境(webpack.prod.js)，細節請直接參考設定檔案內容。</p>\n<p>因為是 ASP.NET MVC 專案，前提條件是將進入點 js 檔案的路徑，都是這個 pattern：<code>/Scripts/Page/&#123;Controller&#125;/&#123;Action&#125;.js</code>，取得進入點的部分為了可以漸進的調整各個頁面，因此採用 glob 的方式去產生進入點的 js 路徑，透過<code>getEntry()</code>將每一隻程式的進入點變成一對 key-value-pair，這樣也可以在隨後的<code>output</code>設定處，利用<code>[name].js</code>的方式輸出檔名；配合 output.path 的設定，將輸出目錄定義在<code>Dist</code>路徑下，所以在<code>.cshtml</code>頁面裡面，載入的 Pattern 也會是<code>Dist/Page/&#123;Controller&#125;/&#123;Action&#125;.js</code></p>\n<h3 id=\"webpack-common-js\"><a href=\"#webpack-common-js\" class=\"headerlink\" title=\"webpack.common.js\"></a>webpack.common.js</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//webpack.common.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">VueLoaderPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-loader/lib/plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;glob&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getEntryFiles</span> = (<span class=\"params\"></span>) =&gt; glob.<span class=\"title function_\">sync</span>(path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;Source/Page/&#123;Home&#125;/*.js&#x27;</span>));</span><br><span class=\"line\"><span class=\"keyword\">const</span> getEntry = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title class_\">Entries</span> = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"title function_\">getEntryFiles</span>().<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">f</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> bundleName = <span class=\"regexp\">/.*\\/(Page\\/.*?)\\.js/</span>.<span class=\"title function_\">exec</span>(f)[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"title class_\">Entries</span>[bundleName] ? <span class=\"title class_\">Entries</span>[bundleName].<span class=\"title function_\">push</span>(f) : (<span class=\"title class_\">Entries</span>[bundleName] = [f]);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Entries</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">CommonConfig</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"title function_\">getEntry</span>(),</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;Dist&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">publicPath</span>: <span class=\"string\">&#x27;/Dist&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">&#x27;babel-loader&#x27;</span>, <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.vue$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">&#x27;vue-loader&#x27;</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>, <span class=\"attr\">use</span>: [<span class=\"string\">&#x27;style-loader&#x27;</span>, <span class=\"string\">&#x27;css-loader&#x27;</span>]&#125;, =</span><br><span class=\"line\">            &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/</span>, <span class=\"attr\">use</span>: [<span class=\"string\">&#x27;style-loader&#x27;</span>, <span class=\"string\">&#x27;css-loader&#x27;</span>, <span class=\"string\">&#x27;less-loader&#x27;</span>]&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.scss$/</span>, <span class=\"attr\">use</span>: [<span class=\"string\">&#x27;style-loader&#x27;</span>, <span class=\"string\">&#x27;css-loader&#x27;</span>, <span class=\"string\">&#x27;sass-loader&#x27;</span>]&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(jpg|png|gif|bmp|jpeg)$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">&#x27;url-loader?limit=8000&#x27;</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(tff|eot|svg|woff|woff2)$/</span>, <span class=\"attr\">use</span>: <span class=\"string\">&#x27;url-loader&#x27;</span>&#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">vue</span>: <span class=\"string\">&#x27;vue/dist/vue.js&#x27;</span>, <span class=\"comment\">//指定 vue 對應使用的真實 js 檔案</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.js&#x27;</span>, <span class=\"string\">&#x27;.vue&#x27;</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">VueLoaderPlugin</span>()</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title class_\">CommonConfig</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"webpack-dev-js\"><a href=\"#webpack-dev-js\" class=\"headerlink\" title=\"webpack.dev.js\"></a>webpack.dev.js</h3><p>開發環境設定主要多了<code>devServer</code>區段的設定，可以參考<a href=\"https://webpack.docschina.org/configuration/dev-server/\">开发服务器(DevServer)</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; merge &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;webpack-merge&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> common = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./webpack.common.js&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title function_\">merge</span>(common, &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;development&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devtool</span>: <span class=\"string\">&quot;inline-source-map&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">target</span>: <span class=\"string\">&quot;web&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">hot</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">inline</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">8888</span>,</span><br><span class=\"line\">    <span class=\"attr\">open</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">proxy</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">context</span>: <span class=\"function\">() =&gt;</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">target</span>: <span class=\"string\">&quot;http://localhost:8898&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"webpack-prod-js\"><a href=\"#webpack-prod-js\" class=\"headerlink\" title=\"webpack.prod.js\"></a>webpack.prod.js</h3><p>正式環境設定相對地較為簡單，主要多了一個輸出目錄清空的動作，至於套件<code>terser-webpack-plugin</code>，則是為了<code>production</code>的時候，不要產生版權的文字檔</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//webpack.prod.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; merge &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;webpack-merge&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">CleanWebpackPlugin</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">TerserPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;terser-webpack-plugin&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> common = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./webpack.common.js&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title function_\">merge</span>(common, &#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;production&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">CleanWebpackPlugin</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">cleanAfterEveryBuildPatterns</span>: [<span class=\"string\">&quot;Dist&quot;</span>],</span><br><span class=\"line\">      <span class=\"attr\">verbose</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">minimize</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">minimizer</span>: [</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">TerserPlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">terserOptions</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">format</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">comments</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">extractComments</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"範例頁面\"><a href=\"#範例頁面\" class=\"headerlink\" title=\"範例頁面\"></a>範例頁面</h2><h3 id=\"CSHTML\"><a href=\"#CSHTML\" class=\"headerlink\" title=\"CSHTML\"></a>CSHTML</h3><p>範例頁面原本採用<code>script</code>標籤載入其他的第三方套件，還有自己撰寫的 js 程式，原本的第三方程式碼一樣用 script 載入，自己撰寫的程式改用<code>webpack</code>打包，包含<code>.vue</code> file</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-list</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-list</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">@section scripts&#123;</span><br><span class=\"line\"><span class=\"comment\">&lt;!--ckeditor 5 basic editor and ckeditor vue support--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;~/Scripts/Plugins/ckeditor5/build/ckeditor.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;~/Scripts/Plugins/CKEditor/ckeditor.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;~/Scripts/Plugins/Vue-Table-2/vue-tables-2.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- my own code --&gt;</span></span><br><span class=\"line\">@Html.Partial(&quot;~/Views/Bundle/Page/Home/Index_Js.cshtml&quot;) &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h3><p>這裡的目錄結構可以自己定義好，也有人會用<code>webpack</code>設定裡面的<code>resolve.alias</code>區段去 mapping 實際的路徑，像是下面這樣在<code>webpack</code>設定</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">alias</span>:&#123;</span><br><span class=\"line\">          <span class=\"string\">&#x27;@Enums&#x27;</span>: path.<span class=\"title function_\">join</span>(__dirname,<span class=\"string\">&#x27;Source/Enums&#x27;</span>),</span><br><span class=\"line\">          <span class=\"string\">&#x27;@Page&#x27;</span>: path.<span class=\"title function_\">join</span>(__dirname,<span class=\"string\">&#x27;Source/Page&#x27;</span>),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">extensions</span>: [<span class=\"string\">&#x27;.js&#x27;</span>, <span class=\"string\">&#x27;.vue&#x27;</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而要讓<code>Rider</code>支援，只要指定好設定檔案就好<br><img src=\"/artblog/webpack-compile-vue-single-file-component/2021-11-09-142259.jpg\"></p>\n<p>下面的則是進入點的範例程式碼</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// /Source/Page/Home/Index.js sample code</span></span><br><span class=\"line\"><span class=\"comment\">/* global CKEditor, VueTables */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">MyList</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../Component/MyList&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">CKEditor</span>);</span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">VueTables</span>.<span class=\"property\">ServerTable</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">components</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;my-list&quot;</span>: <span class=\"title class_\">MyList</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>另外要注意的是，如果要讓<code>jest</code>也看的懂<code>alias</code>，也需要另外在<code>jest</code>的設定或<code>package.json</code>內設定相關路由</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;jest&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;testResultsProcessor&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;jest-junit&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;moduleNameMapper&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;^@Enums(.*)$&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&lt;rootDir&gt;/Source/Enums$1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;^@Page(.*)$&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&lt;rootDir&gt;/Source/Page$1&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;moduleFileExtensions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;js&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;vue&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;transform&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;.*\\\\.(vue)$&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vue-jest&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;.*\\\\.(js)$&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;babel-jest&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"split-Chunks\"><a href=\"#split-Chunks\" class=\"headerlink\" title=\"split Chunks\"></a>split Chunks</h2><p>所有的程式都打包在同一個檔案，無疑會造成一個大檔案，為了網頁速度通常會將這些東西切割出來，通常會將自己寫的東西包一包，引用的套件切出來，下列的設定會將 vue 都打包，放在<code>Dist/libs/vue.js</code>內，所以記得也要在有用到的<code>cshtml</code>頁面載入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.common.js</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;Dist&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">clean</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">publicPath</span>: <span class=\"string\">&#x27;/Dist&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">cacheGroups</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">vue</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;libs/vue&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">test</span>: <span class=\"function\"><span class=\"params\">module</span> =&gt;</span> <span class=\"regexp\">/vue/</span>.<span class=\"title function_\">test</span>(<span class=\"variable language_\">module</span>.<span class=\"property\">context</span>),</span><br><span class=\"line\">                    <span class=\"attr\">chunks</span>: <span class=\"string\">&#x27;initial&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">priority</span>: <span class=\"number\">10</span></span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                <span class=\"attr\">vendors</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;libs/all&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">test</span>: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">                    <span class=\"attr\">priority</span>: -<span class=\"number\">10</span>,</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重複的-vendors\"><a href=\"#重複的-vendors\" class=\"headerlink\" title=\"重複的 vendors\"></a>重複的 vendors</h2><p>實際運作後，發現在打包出來的檔案內，包含了重複的<code>vue.js</code>，一開始我以為是版本不一樣的關係，vueTables 依賴<code>2.6.12</code>，我使用的是<code>2.5.22</code>，所以調整<code>package.json</code>到<code>2.6.12</code>，再編譯一次仍舊重複打包。最終我透過一個工具網頁:<a href=\"https://www.npmjs.com/package/inspectpack\">inspectpack</a>上面的解決方案<a href=\"https://github.com/FormidableLabs/inspectpack/#fixing-bundle-duplicates\">Fixing bundle duplicates</a>，改用<code>yarn</code>管理專案，並且加入<code>package.json</code>的設定，接著再透過指令<code>yarn build:dev</code>，打包的結果就沒有重複了</p>\n<p>後來又重複測試了幾次，似乎用哪一套管理工具並沒有差別，重點只是在<code>node_modules</code>目錄底下是否為扁平化或是傳統的樹狀結構，只要是扁平化的我自己測試用<code>npm</code>或是<code>yarn</code>都可以</p>\n<h2 id=\"動態注入-js-給-cshtml\"><a href=\"#動態注入-js-給-cshtml\" class=\"headerlink\" title=\"動態注入 js 給 cshtml\"></a>動態注入 js 給 cshtml</h2><p>webpack 編譯的時候，自動產生相關片段，並且在 cshtml 當中直接引用，如下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">@section scripts&#123; @Html.Partial(&quot;~/Views/Bundle/Page/Home/Index_Js.cshtml&quot;) &#125;</span><br></pre></td></tr></table></figure>\n\n<p>因此我們需要讓 webpack 依據 entry 自動產生相關檔案，透過<code>HtmlWebpackPlugin</code>套件，給予一個<code>template</code>讓他自動產生 partial view</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setHtmlTemplates = <span class=\"keyword\">function</span> (<span class=\"params\">entryFiles</span>) &#123;</span><br><span class=\"line\">  entryFiles.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">filePath</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> path = <span class=\"regexp\">/.*\\/(Source\\/Page\\/.*?)\\.js/</span>.<span class=\"title function_\">exec</span>(filePath)[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title class_\">BundleName</span> = path.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;/&quot;</span>).<span class=\"title function_\">splice</span>(<span class=\"number\">1</span>).<span class=\"title function_\">join</span>(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">    <span class=\"title class_\">CommonConfig</span>.<span class=\"property\">plugins</span>.<span class=\"title function_\">push</span>(</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">template</span>: <span class=\"string\">&quot;Views/BundleTemp/_Js_Bundle.cshtml&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">`./../Views/Bundle/<span class=\"subst\">$&#123;BundleName&#125;</span>_Js.cshtml`</span>,</span><br><span class=\"line\">        <span class=\"attr\">chunks</span>: [<span class=\"string\">&quot;libs/vue&quot;</span>, <span class=\"title class_\">BundleName</span>],</span><br><span class=\"line\">        <span class=\"attr\">inject</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">setHtmlTemplates</span>(<span class=\"title function_\">getEntryFiles</span>());</span><br></pre></td></tr></table></figure>\n\n<p>將進入點丟給 function，讓 fn 對每個進入點都處理一次 html 的 partial view，這些東西主要都是針對 <code>CommonConfig</code> 操作，而<code>CommonConfig</code>就是我們 webpack 的設定物件；也就是說，我們其實就是在 webpack 設定的<code>plugin</code>節點，重複的加入了很多個<code>HtmlWebpackPlugin</code>的設定</p>\n<p>拿來當作<code>template</code>的 partiview 內容如下</p>\n<p>Views&#x2F;BundleTemp&#x2F;_Js_Bundle.cshtml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;% for (var chunk in htmlWebpackPlugin.options.chunks) &#123; %&gt;</span><br><span class=\"line\">&lt;script src=&quot;~/Dist/&lt;%=htmlWebpackPlugin.options.chunks[chunk] %&gt;.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;%&#125;%&gt;</span><br></pre></td></tr></table></figure>\n\n<p>內容是用 ejs 語法寫成，產出的結果會是這樣</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;script src=&quot;~/Dist/libs/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script src=&quot;~/Dist/Page/Home/index.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"動態注入-js-給-cshtml-更新作法\"><a href=\"#動態注入-js-給-cshtml-更新作法\" class=\"headerlink\" title=\"動態注入 js 給 cshtml 更新作法\"></a>動態注入 js 給 cshtml 更新作法</h2><p>後來因為想要在瀏覽器 cache 上有比較好的體驗，所以希望在 js 的 querystring 後面加上 hash，又研究了一下，發現以我的需求，其實不需要用到 ejs 的 template，直接透過設定即可，在下面的部分重點就在於<code>inject</code>我改為<code>body</code>，讓外掛幫我把 script 注入，然後我給的範本是空字串，所以它直接在空字串內注入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setHtmlTemplates = <span class=\"keyword\">function</span> (<span class=\"params\">entryFiles</span>) &#123;</span><br><span class=\"line\">  entryFiles.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">filePath</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> path = <span class=\"regexp\">/.*\\/(Source\\/Page\\/.*?)\\.js/</span>.<span class=\"title function_\">exec</span>(filePath)[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title class_\">BundleName</span> = path.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;/&quot;</span>).<span class=\"title function_\">splice</span>(<span class=\"number\">1</span>).<span class=\"title function_\">join</span>(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\">    <span class=\"title class_\">CommonConfig</span>.<span class=\"property\">plugins</span>.<span class=\"title function_\">push</span>(</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">templateContent</span>: <span class=\"string\">``</span>,</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">`./../Views/Bundle/<span class=\"subst\">$&#123;BundleName&#125;</span>_Js.cshtml`</span>,</span><br><span class=\"line\">        <span class=\"attr\">chunks</span>: [<span class=\"title class_\">BundleName</span>],</span><br><span class=\"line\">        <span class=\"attr\">inject</span>: <span class=\"string\">&quot;body&quot;</span>,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">setHtmlTemplates</span>(<span class=\"title function_\">getEntryFiles</span>());</span><br></pre></td></tr></table></figure>\n\n<p>另外在 <code>webpack</code> 的 <code>output</code> 設定，調整使用 <code>hashcontent</code> 即可根據內容變動產出 hash 在檔案路徑後方</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">output: &#123;</span><br><span class=\"line\">     path: path.join(__dirname, &#x27;Dist&#x27;, &#x27;Scripts&#x27;),</span><br><span class=\"line\">     filename: &#x27;[name].js?v=[contenthash]&#x27;,</span><br><span class=\"line\">     chunkFilename: &#x27;[name].js?v=[contenthash]&#x27;,</span><br><span class=\"line\">     clean: true,</span><br><span class=\"line\">     publicPath: &#x27;/Dist/Scripts&#x27;</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n","categories":["webpack"],"tags":["vue"]},{"title":"使用 jest 及 wallaby.js  撰寫測試","url":"/artblog//unittest-with-jest-and-wallabyjs/","content":"<p>透過 wallaby.js 進行 javascript TDD , 利用 jest 作為測試框架則可以省掉<code>wallaby.js</code>的設定檔</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Sample-Code\"><a href=\"#Sample-Code\" class=\"headerlink\" title=\"Sample Code\"></a>Sample Code</h2><p>可執行的範例檔案放在<a href=\"https://github.com/art-Blog/lab-jest-wallaby\">Github</a>，有需要請自取</p>\n<h2 id=\"建立專案\"><a href=\"#建立專案\" class=\"headerlink\" title=\"建立專案\"></a>建立專案</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir lab-jest-wallaby</span><br><span class=\"line\">cd lab-jest-wallaby\\</span><br><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安裝套件\"><a href=\"#安裝套件\" class=\"headerlink\" title=\"安裝套件\"></a>安裝套件</h2><p>因為要使用 ES6 語法來撰寫測試，所以需要額外加裝<code>babel-jest</code>、<code>@babel/preset-env</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install jest babel-jest @babel/preset-env --save-dev</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"設定-Jest\"><a href=\"#設定-Jest\" class=\"headerlink\" title=\"設定 Jest\"></a>設定 Jest</h2><p>在 jest 的部分可以透過指令建立預設的設定檔，所有的設定都用預設直接 Enter，再去修改即可，設定的部分可以參考<a href=\"https://jestjs.io/docs/en/configuration#testmatch-arraystring\">Jest 官網說明</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">jest --init</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/unittest-with-jest-and-wallabyjs/2020-11-30_121650.png\"></p>\n<h2 id=\"設定-babel\"><a href=\"#設定-babel\" class=\"headerlink\" title=\"設定 babel\"></a>設定 babel</h2><p>建立<code>babel.config.js</code>內容如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// babel.config.js</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">\t<span class=\"attr\">presets</span>: [</span><br><span class=\"line\">\t\t[</span><br><span class=\"line\">\t\t\t<span class=\"string\">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">targets</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">node</span>: <span class=\"string\">&#x27;current&#x27;</span>,</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Test-Code-Sample\"><a href=\"#Test-Code-Sample\" class=\"headerlink\" title=\"Test Code Sample\"></a>Test Code Sample</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">DateUtility</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../src/DateUtility&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;DateUtility&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> sut = <span class=\"keyword\">new</span> <span class=\"title class_\">DateUtility</span>();</span><br><span class=\"line\">\t<span class=\"title function_\">it</span>(<span class=\"string\">&#x27;GetBasePath&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> today = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2020</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> actual = sut.<span class=\"title class_\">GetBasePath</span>(today);</span><br><span class=\"line\">\t\t<span class=\"title function_\">expect</span>(actual).<span class=\"title function_\">toBe</span>(<span class=\"string\">&#x27;./2020/202011&#x27;</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title function_\">it</span>(<span class=\"string\">&#x27;GetMMDD&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> today = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2020</span>, <span class=\"number\">10</span>, <span class=\"number\">25</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> actual = sut.<span class=\"title class_\">GetMMDD</span>(today);</span><br><span class=\"line\">\t\t<span class=\"title function_\">expect</span>(actual).<span class=\"title function_\">toBe</span>(<span class=\"string\">&#x27;1125&#x27;</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title function_\">it</span>(<span class=\"string\">&#x27;GetWeekBegin&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> today = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2020</span>, <span class=\"number\">10</span>, <span class=\"number\">24</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> actual = sut.<span class=\"title class_\">GetWeekBegin</span>(today);</span><br><span class=\"line\">\t\t<span class=\"title function_\">expect</span>(actual).<span class=\"title function_\">toBe</span>(<span class=\"string\">&#x27;1123&#x27;</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title function_\">it</span>(<span class=\"string\">&#x27;GetWeekEnd&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> today = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2020</span>, <span class=\"number\">10</span>, <span class=\"number\">24</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> actual = sut.<span class=\"title class_\">GetWeekEnd</span>(today);</span><br><span class=\"line\">\t\t<span class=\"title function_\">expect</span>(actual).<span class=\"title function_\">toBe</span>(<span class=\"string\">&#x27;1127&#x27;</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title function_\">it</span>(<span class=\"string\">&#x27;GetWeeklyFileName&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> today = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2020</span>, <span class=\"number\">10</span>, <span class=\"number\">24</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> actual = sut.<span class=\"title class_\">GetWeeklyFileName</span>(today);</span><br><span class=\"line\">\t\t<span class=\"title function_\">expect</span>(actual).<span class=\"title function_\">toBe</span>(<span class=\"string\">&#x27;1123-1127&#x27;</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title function_\">it</span>(<span class=\"string\">&#x27;GetWeeklyReportPath&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> today = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2020</span>, <span class=\"number\">10</span>, <span class=\"number\">24</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> actual = sut.<span class=\"title class_\">GetWeeklyReportPath</span>(today);</span><br><span class=\"line\">\t\t<span class=\"title function_\">expect</span>(actual).<span class=\"title function_\">toBe</span>(<span class=\"string\">&#x27;./2020/202011/1123-1127.md&#x27;</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title function_\">it</span>(<span class=\"string\">&#x27;GetMonthlyReportPath&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> today = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2020</span>, <span class=\"number\">10</span>, <span class=\"number\">24</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> actual = sut.<span class=\"title class_\">GetMonthlyReportPath</span>(today);</span><br><span class=\"line\">\t\t<span class=\"title function_\">expect</span>(actual).<span class=\"title function_\">toBe</span>(<span class=\"string\">&#x27;./2020/202011/readme.md&#x27;</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Production-Code-Sample\"><a href=\"#Production-Code-Sample\" class=\"headerlink\" title=\"Production Code Sample\"></a>Production Code Sample</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/DateUtility.js</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DateUtility</span> &#123;</span><br><span class=\"line\">\t<span class=\"title class_\">GetBasePath</span>(today) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> yyyy = today.<span class=\"title function_\">getFullYear</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> mm = <span class=\"variable language_\">this</span>.<span class=\"title class_\">GetMonth</span>(today);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">`./<span class=\"subst\">$&#123;yyyy&#125;</span>/<span class=\"subst\">$&#123;yyyy&#125;</span><span class=\"subst\">$&#123;mm&#125;</span>`</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title class_\">GetMMDD</span>(currentDate) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.GetMonth(currentDate)&#125;</span><span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.GetDate(currentDate)&#125;</span>`</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title class_\">GetWeekBegin</span>(today) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> beginDate = <span class=\"variable language_\">this</span>.<span class=\"title class_\">AddDays</span>(today, <span class=\"number\">1</span> - today.<span class=\"title function_\">getDay</span>());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title class_\">GetMMDD</span>(beginDate);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title class_\">GetWeekEnd</span>(today) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> beginDate = <span class=\"variable language_\">this</span>.<span class=\"title class_\">AddDays</span>(today, <span class=\"number\">1</span> - today.<span class=\"title function_\">getDay</span>());</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> endDate = <span class=\"variable language_\">this</span>.<span class=\"title class_\">AddDays</span>(beginDate, <span class=\"number\">4</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title class_\">GetMMDD</span>(endDate);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title class_\">AddDays</span>(date, days) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(date.<span class=\"title function_\">getFullYear</span>(), date.<span class=\"title function_\">getMonth</span>(), date.<span class=\"title function_\">getDate</span>() + days);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title class_\">GetWeeklyFileName</span>(today) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.GetWeekBegin(today)&#125;</span>-<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.GetWeekEnd(today)&#125;</span>`</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title class_\">GetReportPath</span>(today, type) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;month&#x27;</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title class_\">GetMonthlyReportPath</span>(today);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;week&#x27;</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title class_\">GetWeeklyReportPath</span>(today);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title class_\">GetWeeklyReportPath</span>(today) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.GetBasePath(today)&#125;</span>/<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.GetWeeklyFileName(today)&#125;</span>.md`</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title class_\">GetMonthlyReportPath</span>(today) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.GetBasePath(today)&#125;</span>/readme.md`</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title class_\">GetMonth</span>(today) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title class_\">Left</span>(<span class=\"string\">`0<span class=\"subst\">$&#123;today.getMonth() + <span class=\"number\">1</span>&#125;</span>`</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"title class_\">GetDate</span>(today) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title class_\">Left</span>(<span class=\"string\">`0<span class=\"subst\">$&#123;today.getDate()&#125;</span>`</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"title class_\">Left</span>(str, num) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> str.<span class=\"title function_\">substring</span>(str.<span class=\"property\">length</span> - num, str.<span class=\"property\">length</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">DateUtility</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"手動執行測試\"><a href=\"#手動執行測試\" class=\"headerlink\" title=\"手動執行測試\"></a>手動執行測試</h2><p>將<code>package.json</code>的 test 指令改成呼叫 jest</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;jest&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>就可以利用<code>npm</code>或是<code>yarn</code>執行測試，當然這只是方便的做法，你可以選擇打完整指令<code>npx jest</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm run test</span><br><span class=\"line\">yarn test</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/unittest-with-jest-and-wallabyjs/2020-11-30_122551.png\"></p>\n<h2 id=\"使用-wallaby-js\"><a href=\"#使用-wallaby-js\" class=\"headerlink\" title=\"使用 wallaby.js\"></a>使用 wallaby.js</h2><p>透過 F1 執行 <code>wallaby.js</code><br><img src=\"/artblog/unittest-with-jest-and-wallabyjs/2020-11-30_122700.png\"></p>\n<p><img src=\"/artblog/unittest-with-jest-and-wallabyjs/2020-11-30_122757.png\"></p>\n","categories":["javascript"],"tags":["unittest","wallaby.js"]},{"title":"利用反射取代if判斷","url":"/artblog//use-reflection-instead-of-if-else/","content":"<p>日常開發很常碰到一個情況，就是需要依據傳入的參數，決定 new 不一樣的 instance 出來，所以在數量少的時候，我們可以透過<code>if...else...</code>的方式直衝，再多一些些，可以用<code>switch...case...</code>的方式來做，但如果這個分支已經有 5~7 個以上，再接著用上述的兩種做法就有點<code>bad smell</code>的感覺了</p>\n<span id=\"more\"></span>\n\n<p>這裡用反射+<code>Attribute</code>的方式來解這個問題，其實並不算完美的作法，因為相對的<code>best practice</code>可能每個人的觀念及想法都不同，我只是將我覺得好維護的方法紀錄一下，底下的 Code 都是先 Copy 過來後手打編輯，刪掉很多不能出現的東西，所以不要直接拿去用喔</p>\n<h2 id=\"情境\"><a href=\"#情境\" class=\"headerlink\" title=\"情境\"></a>情境</h2><p>假設現在的情況是做一個搜尋引擎，前端傳來的部分包含了實際搜尋的 keyword，還有搜尋類型 type，前端透過下拉選單去變更這個搜尋類型，希望後端可以依據不同的搜尋類型，有不一樣的邏輯。<br>case 大概就是這樣，初版的 Code，在後端是直接用<code>if...else...</code>去處理的 legacy code，我的目標是重構這一段程式碼，希望達到幾個目的</p>\n<ol>\n<li>我希望各種邏輯可以各自獨立維護</li>\n<li>我不喜歡程式複雜度太高</li>\n<li>我希望以後如果下拉選單又多了一個新的類別，可以很容易添加新邏輯</li>\n</ol>\n<h2 id=\"反射與-Attribute\"><a href=\"#反射與-Attribute\" class=\"headerlink\" title=\"反射與 Attribute\"></a>反射與 Attribute</h2><p>在這之前，當然要先將各種搜尋類型的邏輯，拆分到各自的類別，並且給它們一個共同的抽象介面，後續的操作就都是針對介面來設計</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ISearch</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">List&lt;SearchResult&gt; <span class=\"title\">Search</span>(<span class=\"params\">SearchRequest request</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>這裡的 Search 就是我們要暴露出去的搜尋 Method，裡面的邏輯直接先取得 Instance 後，再透過約定好的介面 Search 方法來搜尋資料</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;SearchResult&gt; <span class=\"title\">Search</span>(<span class=\"params\">SearchRequest request, SearchType type</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ISearch instance = SearchFactory.GetInstance(type);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> instance.Search(request).ToList();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>GetInstance 原本是一個依據傳入的列舉透過 switch case 的方式取得 Instance，就像這樣</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IOrderQASearchModule <span class=\"title\">GetInstance</span>(<span class=\"params\">SearchType type</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (type)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SearchType.Id:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SearchIdModule();</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SearchType.Name:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SearchNameModule();</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SearchType.Age:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SearchAgeModule();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>實際上搜尋的類別長這樣，這邊要稍微說的是，SearchRequest 是所有 Search 方法的傳入參數，實際上要使用，會再 new 自己的 DTO，這裡我想要改善，但暫時沒想到好的法子</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SearchIdModule</span> : <span class=\"title\">ISearch</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ISearchDAO _searchDAO_;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> ISearchDAO SearchDAO</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> =&gt; <span class=\"keyword\">this</span>._searchDAO_ ?? (<span class=\"keyword\">this</span>._searchDAO_ = Factory.GetSearchDAO());</span><br><span class=\"line\">        <span class=\"keyword\">set</span> =&gt; <span class=\"keyword\">this</span>._searchDAO_ = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;SearchResult&gt; <span class=\"title\">Search</span>(<span class=\"params\">SearchRequest request</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> SearchDAO.SearchById(<span class=\"keyword\">new</span> SearchByIdRequest()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Page = request.Page,</span><br><span class=\"line\">            Limit = request.Limit,</span><br><span class=\"line\">            Id = request.Id,</span><br><span class=\"line\">        &#125;).ToList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>資料到了 DAO 之後，接著就是 adapter 去呼叫資料庫預儲程序，每一種 type 都有自己的 sp，這裡不是今天的重點，略過不提</p>\n<p>我希望列舉可以直接與<code>instance</code>類別關聯起來，這樣就不需要<code>switch case</code>，而反射可以給予類別產生實體，兩個兜起來就是我要的</p>\n<p>所以先弄一個 Attribute</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">SearchModuleAttribute</span> : <span class=\"title\">Attribute</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> Type SearchModuleType &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SearchModuleAttribute</span>(<span class=\"params\">Type searchModuleType</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        SearchModuleType = searchModuleType;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Enum 這邊就可以掛上屬性</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">enum</span> SearchType</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">SearchModule(typeof(SearchIdModule))</span>]</span><br><span class=\"line\">    Id,</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">SearchModule(typeof(SearchNameModule))</span>]</span><br><span class=\"line\">    Name,</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">SearchModule(typeof(SearchAgeModule))</span>]</span><br><span class=\"line\">    Age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>最後改寫原先的 GetInstance 方法，從 Enum 取得對應的 Attriubte，接著拿到我們設定好的 Type，然後用<code>Activator.CreateInstance(type)</code>去產生 Instance</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IOrderQASearchModule <span class=\"title\">GetInstance</span>(<span class=\"params\">SearchType searchType</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    SearchModuleAttribute valueattribute = GetSearchModuleAttribute(searchType);</span><br><span class=\"line\">    Type type = valueattribute.SearchModuleType;</span><br><span class=\"line\"></span><br><span class=\"line\">    IOrderQASearchModule searchModule = (IOrderQASearchModule) Activator.CreateInstance(type);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> searchModule;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">internal</span> <span class=\"keyword\">static</span> SearchModuleAttribute <span class=\"title\">GetSearchModuleAttribute</span>(<span class=\"params\">SearchType searchType</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FieldInfo data = <span class=\"keyword\">typeof</span>(SearchType).GetField(searchType.ToString());</span><br><span class=\"line\">    Attribute attribute = Attribute.GetCustomAttribute(data, <span class=\"keyword\">typeof</span>(SearchModuleAttribute));</span><br><span class=\"line\">    SearchModuleAttribute valueattribute = (SearchModuleAttribute) attribute;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> valueattribute;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-Dictionary\"><a href=\"#使用-Dictionary\" class=\"headerlink\" title=\"使用 Dictionary\"></a>使用 Dictionary</h2><p>上一個方法是把類別的關係放在 Enum 上面，實際上動作是有比較繁瑣一點點，新手一點的可能會比較喜歡這個方法，也就是把這個關係，放在我們自己建立的<code>Dictionary</code>裡面</p>\n<p>要把這個關係自己獨立一個類別，叫做<code>Resource</code>也可以，或者是要直接放在<code>Factory</code>裡面也可以，就是看自己怎樣比較好理解，好維護，下面這個是一個範例，程式碼不算太難，感受一下就行了</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 解決方案列舉</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">enum</span> SolutionType</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 第一種解決方案</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    First,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 第二種解決方案</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    Second,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 第三種解決方案</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    Third,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 未實作的解決方案</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    NotExist</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">SolutionFactory</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Dictionary&lt;SolutionType, Type&gt; _resources;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Dictionary&lt;SolutionType, Type&gt; Resources</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span> =&gt; _resources ?? GetResources();</span><br><span class=\"line\">            <span class=\"keyword\">set</span> =&gt; _resources = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Dictionary&lt;SolutionType, Type&gt; <span class=\"title\">GetResources</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Dictionary&lt;SolutionType, Type&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                [<span class=\"meta\">SolutionType.First</span>] = <span class=\"keyword\">typeof</span>(SolutionOne),</span><br><span class=\"line\">                [<span class=\"meta\">SolutionType.Second</span>] = <span class=\"keyword\">typeof</span>(SolutionTwo),</span><br><span class=\"line\">                [<span class=\"meta\">SolutionType.Third</span>] = <span class=\"keyword\">typeof</span>(SolutionThree)</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Type <span class=\"title\">GetInstanceType</span>(<span class=\"params\">SolutionType type</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Resources.ContainsKey(type)) <span class=\"keyword\">return</span> Resources[type];</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">&quot;No Solution&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> 取得解決方案實體</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;type&quot;&gt;</span>The type.<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IHammingSolution <span class=\"title\">GetInstance</span>(<span class=\"params\">SolutionType type</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Type tp = GetInstanceType(type);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (IHammingSolution) Activator.CreateInstance(tp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>我覺得實務上我會比較想要用第一種，因為在使用上畢竟比較直覺，但是在程式碼那邊，可能就要多一些理解；但如果對這個還不是很熟悉，那就還是用第二種會比較容易理解</p>\n","categories":["csharp"],"tags":["refactor"]},{"title":"如何在IDE中使用ESLint自動格式化文件","url":"/artblog//auto-format-file-with-eslint-in-ide/","content":"<p>這一篇主要在示範如何在 整合開發環境(Integrated Development Environment) 中，依據 ESLint 的規則設定，自動修復及格式化文件；並且於簽入 Git 版控之前，預先檢查 ESLINT 規則</p>\n<span id=\"more\"></span>\n\n<h2 id=\"ESLINT-簡介\"><a href=\"#ESLINT-簡介\" class=\"headerlink\" title=\"ESLINT 簡介\"></a>ESLINT 簡介</h2><p>關於 ESLint 的介紹可以直接瀏覽<a href=\"https://cn.eslint.org/\">網站說明</a><br>大致上就是能夠在開發程式的時候，提示你一些語法上的錯誤、或者是怎麼寫會比較好</p>\n<p>規則的設定，在官網就直接分成幾個區塊說明</p>\n<ol>\n<li>Possible Errors</li>\n<li>Best Practices</li>\n<li>Variables</li>\n<li>Node.js and CommonJS</li>\n<li>Stylistic Issues</li>\n<li>ECMAScript 6</li>\n</ol>\n<p>這些都可以自行定義是否啟用，整體來說就是一個協助你維持程式碼品質的工具</p>\n<p>所以第一步，要使用 ESLINT，就需要先在專案目錄安裝並進行設定</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">install eslint</span></span><br><span class=\"line\">npm install eslint --save-dev</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">generate eslint config</span></span><br><span class=\"line\">npx eslint --init</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ESLint-設定範例及各-IDE-測試\"><a href=\"#ESLint-設定範例及各-IDE-測試\" class=\"headerlink\" title=\"ESLint 設定範例及各 IDE 測試\"></a>ESLint 設定範例及各 IDE 測試</h2><p>範例使用到的規則可參考</p>\n<ol>\n<li><a href=\"https://cn.eslint.org/docs/rules/\">ESLint</a></li>\n<li><a href=\"https://www.npmjs.com/package/eslint-plugin-react\">eslint-plugin-react</a></li>\n<li><a href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\">eslint-plugin-react-hooks</a></li>\n</ol>\n<h2 id=\"ESLint-設定範例\"><a href=\"#ESLint-設定範例\" class=\"headerlink\" title=\"ESLint 設定範例\"></a>ESLint 設定範例</h2><p>在專案根目錄的<code>.eslintrc</code>檔案進行設定如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;env&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;browser&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;amd&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;es6&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;node&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;extends&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;eslint:recommended&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;plugin:react/recommended&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;plugins&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;react&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;react-hooks&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;parserOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;ecmaVersion&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">7</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;sourceType&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;module&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;ecmaFeatures&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;jsx&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;modules&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span> <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;parser&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;babel-eslint&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;globals&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;React&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;ReactDOM&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;moment&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;$&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;_&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;rules&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;no-extra-parens&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;error&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;react/jsx-filename-extension&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"number\">1</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;extensions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;.js&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;.jsx&quot;</span><span class=\"punctuation\">]</span> <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;react-hooks/rules-of-hooks&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;error&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;react-hooks/exhaustive-deps&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;warn&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Environments-env\"><a href=\"#Environments-env\" class=\"headerlink\" title=\"Environments (env)\"></a>Environments (env)</h3><p>表示程式碼運行的環境，通常這些環境都會有對應的一組全域變數；例如在<code>browser</code>環境下，預設就會有<code>window</code>、<code>document</code>可以用；而<code>jest</code>，也會預設該測是套件的一些全域變數是允許使用的，詳細清單可參考官網<a href=\"https://cn.eslint.org/docs/user-guide/configuring#specifying-environments\">說明</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;env&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;browser&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;amd&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;es6&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;node&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"extends\"><a href=\"#extends\" class=\"headerlink\" title=\"extends\"></a>extends</h3><p>撰寫 React 的 ESlint 設定，還需要安裝依賴的套件<code>ESLint-plugin-React</code>，再加上 ESLint 本身，所以就需要安裝下面這兩個套件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install eslint --save-dev</span><br><span class=\"line\">npm install eslint-plugin-react --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>因為要使用預設的官方推薦設定，以及開發 React，因此在 ESLint 設定要加上這一段來繼承這些設定</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;extends&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;eslint:recommended&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;plugin:react/recommended&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ol>\n<li><code>eslint:recommended</code>源自於<code>ESLint</code>套件</li>\n<li><code>plugin:react/recommended</code>源自於<code>eslint-plugin-react</code>套件</li>\n</ol>\n<p>至於<code>react-hook</code>，這裡沒有繼承<code>plugin:react-hooks/recommended</code>，而是在<code>rule</code>區段直接宣告 hook 的兩個規則</p>\n</blockquote>\n<h3 id=\"plugins\"><a href=\"#plugins\" class=\"headerlink\" title=\"plugins\"></a>plugins</h3><p>ESLint 所使用的外掛，可省略<code>eslint-plugin-</code>的前綴</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;plugins&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;react&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;react-hooks&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<p>因此實際上專案的 ESLint 設定，使用了這兩個套件</p>\n<ol>\n<li><a href=\"https://www.npmjs.com/package/eslint-plugin-react\">eslint-plugin-react</a></li>\n<li><a href=\"https://www.npmjs.com/package/eslint-plugin-react-hooks\">eslint-plugin-react-hooks</a></li>\n</ol>\n<p>之所以要用這兩個套件，就是因為我們需要擴充 ESLint 的規則，讓他支援 React、還有 React Hook 的開發</p>\n<h3 id=\"parserOptions\"><a href=\"#parserOptions\" class=\"headerlink\" title=\"parserOptions\"></a>parserOptions</h3><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;parserOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;ecmaVersion&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">7</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;sourceType&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;module&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;ecmaFeatures&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"attr\">&quot;jsx&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"attr\">&quot;modules&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span> <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<p>這一段的意思是說</p>\n<ol>\n<li>使用 EMCAScript 7 版本</li>\n<li>使用 module</li>\n<li>啟用<code>jsx</code></li>\n</ol>\n<h3 id=\"parser\"><a href=\"#parser\" class=\"headerlink\" title=\"parser\"></a>parser</h3><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;parser&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;babel-eslint&quot;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<p>ESLint 經由這個解析器，來分析我們的程式與法；如果有使用<code>babel</code>，解析器就使用<code>babel-eslint</code></p>\n<h3 id=\"globals\"><a href=\"#globals\" class=\"headerlink\" title=\"globals\"></a>globals</h3><p>這個區段代表的是全域變數的部分，如果想要在程式碼中調用全域變數，就可以加在這裡。後方參數參照官網說明，因為歷史因素，採用 true 等價於<code>writable</code>；false 則是等價於<code>readonly</code>；這表示的是該全域變數是否允許被重新設定。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;globals&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;React&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;ReactDOM&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;moment&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;$&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;_&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"rules\"><a href=\"#rules\" class=\"headerlink\" title=\"rules\"></a>rules</h3><p>規則區段，族繁不及備載，僅節錄部分示範</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;rules&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;react-hooks/rules-of-hooks&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;error&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;react-hooks/exhaustive-deps&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;warn&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>針對<code>react-hooks/rules-of-hooks</code>這一條規則，如果發生的時候，提示為<code>error</code>；另一條則提示<code>warn</code><br>可選的值為</p>\n<ol>\n<li>error：錯誤</li>\n<li>warn：警告</li>\n<li>off：忽略</li>\n</ol>\n<h2 id=\"ESLint-規則設定\"><a href=\"#ESLint-規則設定\" class=\"headerlink\" title=\"ESLint 規則設定\"></a>ESLint 規則設定</h2><p>因為我們的 Rule 設定是</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;no-extra-parens&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;error&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;react-hooks/rules-of-hooks&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;error&quot;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<p>所以故意在下列的程式碼埋入不合規則的語法，預期ＩＤＥ應該會提示我們發生錯誤</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 這裡的括號是可以省略的</span></span><br><span class=\"line\">a = (b * c);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在React Hook的規則裡面，不建議將useEffect放在判斷式裡面執行</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"number\">1</span>===<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// some code here ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>先透過指令測試一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">eslint step1.js</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/auto-format-file-with-eslint-in-ide/00.png\"></p>\n<h2 id=\"ESLint-IDE-Support\"><a href=\"#ESLint-IDE-Support\" class=\"headerlink\" title=\"ESLint IDE Support\"></a>ESLint IDE Support</h2><p>在目前 IDE 裡面，個人最喜歡的順序如下</p>\n<ol>\n<li>Rider (需收費)</li>\n<li>VSCode (免費)</li>\n<li>VS2019 (社群版免費)</li>\n</ol>\n<p>一開始學習<code>ASP.Net</code>都是使用 VS2019 來開發 C#程式，或多或少都會碰到 javascript 檔案的開發需求，但 Visual Studio 系列其實用起來很難用，因此我都是以 VS2019 開發 C#、js 及 HTML 都是由 VSCode 處理，後來買了 Rider 授權，直接使用 Rider 作為日常開發主力，不論是 C#或是 js 都好用，除了個別功能還不熟悉、或是 Rider 尚不支援的，還是會開 VS2019 去做，大部分時間已經沒有在開 VS2019 了</p>\n<p>在這三種 IDE 裡面，都可以支援 ESLint 的設定，而且也可以透過設定讓 ESLint 自動修復不符合規則的程式碼</p>\n<h3 id=\"Rider\"><a href=\"#Rider\" class=\"headerlink\" title=\"Rider\"></a>Rider</h3><p>在 Rider 的部份也可正確顯示，即使是調整設定檔，ＩＤＥ也會即時變更顯示結果<br><img src=\"/artblog/auto-format-file-with-eslint-in-ide/05.png\"></p>\n<p>關於設定的部分可參考官網<a href=\"https://www.jetbrains.com/help/rider/Settings_JavaScript_Code_Quality_Tools_ESLint.html\">說明</a></p>\n<p>在自動格式化的部份，好像沒有直接支援 ESLint 的文件格式化、修復，但是我們可以利用外部工具擴展來作到這件事情</p>\n<p>原理就是在 IDE 透過外部呼叫，執行<code>node.js</code>下的 eslint，並正確給予參數即可，因此需要確定 ESLint 安裝於全域、或者是專案內，這邊的範例採用專案內安裝，且為 Windows 系統，因此路徑直接指向專案底下的<code>/node_modules/.bin/eslint.cmd</code></p>\n<p>參數則是帶入<code>--fix &lt;檔案路徑名稱&gt;</code>，這邊有 Rider 提供的變數可供使用，點選旁邊的 Icon 可查看及預覽</p>\n<blockquote>\n<p>注意這邊檔案路徑要用雙引號包住</p>\n</blockquote>\n<p>最後工作目錄就以專案目錄為準，因此使用<code>$ContainRoot$</code></p>\n<p><img src=\"/artblog/auto-format-file-with-eslint-in-ide/2020-04-21_17-37-50.png\"></p>\n<p>在使用上僅需要輸入熱鍵<code>Ctrl</code>+<code>Shift</code>+<code>A</code>，並輸入剛才設定的外部工具指令名稱<code>eslint</code>就可以在 Action 視窗中找到，執行該工具即可<br><img src=\"/artblog/auto-format-file-with-eslint-in-ide/2020-04-21_17-39-22.png\"></p>\n<h3 id=\"VSCode\"><a href=\"#VSCode\" class=\"headerlink\" title=\"VSCode\"></a>VSCode</h3><p>於 VSCode 使用 ESLint 是最方便的，僅需要在 VSCode 安裝支援的套件即可<br><img src=\"/artblog/auto-format-file-with-eslint-in-ide/01.png\"></p>\n<p>需要先安裝 VSCode 的套件 <code>ESLint</code>，然後就是設定儲存時自動格式化，或者是指定格式化的熱鍵<br>另外在外掛的設定中，有一項是儲存檔案時自動修正錯誤，一些比較簡單的錯誤可以直接幫你修掉<br><img src=\"/artblog/auto-format-file-with-eslint-in-ide/01-2.png\"></p>\n<blockquote>\n<p>要注意的是如果有安裝多個 Formatter 外掛，如<code>prettier</code>，記得停用，然後重新將格式器選擇為 ESLint</p>\n</blockquote>\n<p>如此一來就可以即時在ＩＤＥ中看見 ESLINT 的規則已經生效，同時在輸出視窗也可以看到詳細的錯誤說明</p>\n<p><img src=\"/artblog/auto-format-file-with-eslint-in-ide/02.png\"></p>\n<h3 id=\"Visual-Studio-2019\"><a href=\"#Visual-Studio-2019\" class=\"headerlink\" title=\"Visual Studio 2019\"></a>Visual Studio 2019</h3><p><img src=\"/artblog/auto-format-file-with-eslint-in-ide/03.png\"><br>VS2019 的部份也可正確顯示錯誤，但實際測試卻發現，隨著我們變更<code>.eslintrc</code>檔案內的規則，IDE 並不會跟著即時變動，必須要整個關閉 VS2019 再重新開啟後，ＩＤＥ才能夠抓到最新的規則設定，目前暫不清楚是否有別的方式可即時更新</p>\n<p>另外 VS2019 中啟用&#x2F;關閉 ESLINT 功能，需要從 工具-&gt;選項，搜尋 ESLINT 即可</p>\n<p><img src=\"/artblog/auto-format-file-with-eslint-in-ide/04.png\"></p>\n<p>預設情況之下，VS2019 吃的設定是全域的，在使用者目錄下的<code>.eslintrc</code>檔案，但如果專案目錄下有設定檔，他會優先吃專案目錄內的設定</p>\n<p>詳情可參考微軟 Github 頁面的<a href=\"https://github.com/microsoft/JSTSdocs/blob/master/articles/editor/linting.md\">說明</a></p>\n<p>VS2019 跟 Rider 一樣，也是透過外部工具的方式去呼叫，設定方式也大同小異</p>\n<p>透過<code>工具</code>-&gt;<code>外部工具</code>去設定<br><img src=\"/artblog/auto-format-file-with-eslint-in-ide/2020-04-21_18-04-23.png\"></p>\n<p>要調用的話也是從 Menu 選擇，不清楚這邊有沒有更方便的執行方式，例如熱鍵什麼的。執行結果如下</p>\n<p><img src=\"/artblog/auto-format-file-with-eslint-in-ide/2020-04-21_18-01-42.png\"></p>\n<h2 id=\"與-Git-Hook-整合\"><a href=\"#與-Git-Hook-整合\" class=\"headerlink\" title=\"與 Git Hook 整合\"></a>與 Git Hook 整合</h2><p>在使用 Git Commit 指令之前，透過 Git Hooks 的<code>Pre-Commit</code>來預先檢查是否通過<code>eslint</code>規則的檢查，如果通過才允許 Commit。</p>\n<h3 id=\"修改-pre-commit-sample\"><a href=\"#修改-pre-commit-sample\" class=\"headerlink\" title=\"修改 pre-commit.sample\"></a>修改 pre-commit.sample</h3><p>在專案目錄<code>.git/hooks</code>有預設的各種 hooks，將<code>pre-commit.sample</code>重新命名為<code>pre-commit</code>，並修改內容如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">STAGE_FILES=$(git diff --cached --name-only --diff-filter=ACM -- &#x27;*.js&#x27;)</span><br><span class=\"line\">if test $&#123;#STAGE_FILES&#125; -gt 0</span><br><span class=\"line\">then</span><br><span class=\"line\">\techo &#x27;開始eslint檢查&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">\twhich eslint &amp;&gt; /dev/null</span><br><span class=\"line\">\tif [[ &quot;$?&quot; == 1 ]]; then</span><br><span class=\"line\">\t\techo &#x27;沒安裝eslint&#x27;</span><br><span class=\"line\">\t\texit 1</span><br><span class=\"line\">\tfi</span><br><span class=\"line\"></span><br><span class=\"line\">\tPASS=true</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor FILE in $STAGE_FILES</span><br><span class=\"line\">\tdo</span><br><span class=\"line\">\t\teslint $FILE</span><br><span class=\"line\">\t\tif [[ &quot;$?&quot; == 1 ]]; then</span><br><span class=\"line\">  \t  PASS=false</span><br><span class=\"line\">  \tfi</span><br><span class=\"line\">  done</span><br><span class=\"line\"></span><br><span class=\"line\">  if ! $PASS; then</span><br><span class=\"line\">\t  echo &quot;eslint檢查沒通過！&quot;</span><br><span class=\"line\">\t  exit 1</span><br><span class=\"line\">  else</span><br><span class=\"line\">\t  echo &quot;eslint檢查完畢&quot;</span><br><span class=\"line\">  fi</span><br><span class=\"line\"></span><br><span class=\"line\">else</span><br><span class=\"line\">\techo &#x27;沒有js檔案需要檢查&#x27;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">exit 0</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>hooks 程式碼取自：<a href=\"https://juejin.im/post/5addeb48518825672a028a3b\">git hooks 之——pre-commit</a></p>\n</blockquote>\n<p>如果出現錯誤，可參考<a href=\"https://stackoverflow.com/questions/20609816/git-pre-commit-hook-not-running-on-windows/31872301\">Git pre-commit hook not running on windows</a></p>\n<ol>\n<li>第一行加上宣告<code>#!/bin/bash</code></li>\n<li>修改<code>pre-commit</code>權限：於 Git bash 介面下於 hooks 目錄執行<code>chmod +x pre-commit</code></li>\n</ol>\n<p>透過上述的步驟，可以在<code>Git Commit</code>指令的時候，觸發 pre-commit，進行<code>eslint</code>檢查<br><img src=\"/artblog/auto-format-file-with-eslint-in-ide/2020-05-12_10-19-16.png\"></p>\n<p>但是通過<code>pre-commit</code>來檢查的這個動作，我們是沒有辦法強制其他人在他們自己的 repository 做這件事情的，因為 git 的觀念就是分散式版控，大家都有自己的 repository，自己的 repository 其實不應該受到別人的 Hook 影響。</p>\n<p>所以如果要團隊使用，建議還是另外建立一個新目錄，並請團隊成員手動執行 copy 的動作，或者是將複製指令寫在 package.json，直接執行也可以</p>\n<p>GitHub：<a href=\"https://github.com/art-Blog/git-hook-pre-commit\">Git Hook Sample</a></p>\n<h3 id=\"使用-husky-工具來處理-git-hooks\"><a href=\"#使用-husky-工具來處理-git-hooks\" class=\"headerlink\" title=\"使用 husky 工具來處理 git hooks\"></a>使用 husky 工具來處理 git hooks</h3><p>雖然上述的方法可以滿足需求，但是對於團隊開發的確是蠻不友善的，而且還要把 Git Hooks 的檔案放到 respoitory 裡面，感覺是有點怪怪的</p>\n<p>透過 husky 這個工具可以很好的幫我們處理掉這件事情，安裝套件的時候，他會在 git hooks 目錄下建立檔案，如果已經存在的 hook 會略過<br>設定方式也很簡單，只要先定義好各個 hook 要做的指令，在建立好<code>husky</code>的設定區段即可，參考下面範例，在 Git Commit 的時候他會先執行我們設定的<code>npm run lint</code>，如果有錯誤的話就會拒絕 commit 了</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;lint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;eslint src&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;husky&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;hooks&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;pre-commit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;npm run lint&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/auto-format-file-with-eslint-in-ide/2020-05-13_09-27-51.png\"></p>\n<p>GitHub：<a href=\"https://github.com/art-Blog/git-hook-pre-commit/tree/husky\">Git Hook Sample Husky Branch</a></p>\n<h3 id=\"透過-lint-staged-只檢查-staged-的內容\"><a href=\"#透過-lint-staged-只檢查-staged-的內容\" class=\"headerlink\" title=\"透過 lint-staged 只檢查 staged 的內容\"></a>透過 lint-staged 只檢查 staged 的內容</h3><p>上面的作法每一次都會檢查我們指定的所有的檔案，但我其實只想要檢查有修改的檔案就好；那麼<a href=\"https://github.com/okonet/lint-staged\">lint-staged</a>就可以幫我們做到這件事情</p>\n<p>在專案根目錄下執行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">npx mrm lint-staged</span><br></pre></td></tr></table></figure>\n\n<p>他會幫我們安裝好套件，並修改好 package.json 的設定</p>\n<p><img src=\"/artblog/auto-format-file-with-eslint-in-ide/2020-05-13_09-55-05.png\"></p>\n<h3 id=\"Git-GUI\"><a href=\"#Git-GUI\" class=\"headerlink\" title=\"Git GUI\"></a>Git GUI</h3><p>因為<code>Husky</code>基本上也是基於<code>Git Hooks</code>的機制來處理，所以只要是一般的 Git GUI 軟體應該都支援才是。<br>這邊就只有測試<code>Fork</code>這套軟體了，其他的軟體就不再測試囉<br><img src=\"/artblog/auto-format-file-with-eslint-in-ide/2020-05-14_14-20-09.png\"></p>\n","categories":["工具"],"tags":["ESLint"]},{"title":"如何套用 CKEditor5 上傳圖片","url":"/artblog//ckeditor5-upload-image/","content":"<p>大概所見即所得的編輯器，應該都是採用 CKEditor 的解決方案了，因為它真的還蠻好用的，CKEditor 已經來到版本 5，提供的編輯器也有很多種</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><p>官方有提供 vue.js 框架整合 CKEditor，可透過 npm 安裝套件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save @ckeditor/ckeditor5-vue @ckeditor/ckeditor5-build-classic</span><br></pre></td></tr></table></figure>\n\n<p>或者是利用 inline script 引用，相較於一般的版本，整合 vue.js 的 ckeditor 還需要額外載入一個<code>ckeditor5-vue</code>的<code>ckeditor.js</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ckeditor</span> <span class=\"attr\">:editor</span>=<span class=\"string\">&quot;editor&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;editorData&quot;</span> <span class=\"attr\">:config</span>=<span class=\"string\">&quot;editorConfig&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ckeditor</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&#x27;https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.12/vue.min.js&#x27;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./node_modules/@ckeditor/ckeditor5-build-classic/build/ckeditor.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./node_modules/@ckeditor/ckeditor5-vue/dist/ckeditor.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">CKEditor</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">editor</span>: <span class=\"title class_\">ClassicEditor</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">editorData</span>: <span class=\"string\">&quot;&lt;p&gt;Content of the editor.&lt;/p&gt;&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">editorConfig</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"comment\">// The configuration of the editor.</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CKEditor5-Editor-type\"><a href=\"#CKEditor5-Editor-type\" class=\"headerlink\" title=\"CKEditor5 Editor type\"></a>CKEditor5 Editor type</h2><p>其實用第一個就夠了，如果想多了解一下這幾種編輯器的差異，可以直接瀏覽官方的範例會更清楚</p>\n<ol>\n<li><a href=\"https://ckeditor.com/docs/ckeditor5/latest/examples/builds/classic-editor.html\">Classic Editor</a></li>\n<li><a href=\"https://ckeditor.com/docs/ckeditor5/latest/examples/builds/inline-editor.html\">Inline Editor</a></li>\n<li><a href=\"https://ckeditor.com/docs/ckeditor5/latest/examples/builds/balloon-block-editor.html\">Ballon block Editor</a></li>\n<li><a href=\"https://ckeditor.com/docs/ckeditor5/latest/examples/builds/balloon-editor.html\">Ballon Editor</a></li>\n<li><a href=\"https://ckeditor.com/docs/ckeditor5/latest/examples/builds/document-editor.html\">Document Editor</a></li>\n</ol>\n<h2 id=\"CKEditor5-Editor-Config\"><a href=\"#CKEditor5-Editor-Config\" class=\"headerlink\" title=\"CKEditor5 Editor Config\"></a>CKEditor5 Editor Config</h2><p><a href=\"https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editorconfig-EditorConfig.html\">EditorConfig</a>可以設定要用的功能、外掛，但其實如果不需要用的話，在一開始就不要打包那個版本，透過線上自訂工具取得 Lib 即可，這也是官方比較推薦的方式，畢竟你不需要的話，不要打包那些內容，速度也比較快</p>\n<h2 id=\"CKEditor5-Online-Builder\"><a href=\"#CKEditor5-Online-Builder\" class=\"headerlink\" title=\"CKEditor5 Online Builder\"></a>CKEditor5 Online Builder</h2><p>可以在線自訂需要的 plugin 並下載 lib<br><a href=\"https://ckeditor.com/ckeditor-5/online-builder/\">Online Builder</a></p>\n<h2 id=\"上傳圖片-by-simple-upload-adapter\"><a href=\"#上傳圖片-by-simple-upload-adapter\" class=\"headerlink\" title=\"上傳圖片 by simple upload adapter\"></a>上傳圖片 by simple upload adapter</h2><p>上傳圖片官方有提供數種做法</p>\n<ol>\n<li>使用 Easy Image (官方提供的雲端服務)</li>\n<li>透過 CKFinder (官方提供的另外一套解決方案)</li>\n<li>simple upload adapter</li>\n<li>base64 upload adapter</li>\n</ol>\n<p>這邊我們採用 simple upload adapter，在 online build lib 的時候，選擇 simple upload adapter 外掛，此一外掛可以透過設定，讓 CKEditor 加入圖片的時候，向指定 URI 發送 POST 請求將圖片上傳到後端</p>\n<blockquote>\n<p>base64 upload adapter 並不需要圖片處理的後端，因為她是將圖片先轉為 base64 格式，與文章一起儲存，缺點是對於資料庫效能會有影響</p>\n</blockquote>\n<p><strong>simple upload adapter 設定</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t...editorConfig,</span><br><span class=\"line\">\t<span class=\"attr\">simpleUpload</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// The URL that the images are uploaded to.</span></span><br><span class=\"line\">        <span class=\"attr\">uploadUrl</span>: <span class=\"string\">&#x27;/Upload/Image&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// // Headers sent along with the XMLHttpRequest to the upload server.</span></span><br><span class=\"line\">        <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;X-CSRF-TOKEN&#x27;</span>: <span class=\"string\">&#x27;CSFR-Token&#x27;</span>,</span><br><span class=\"line\">            <span class=\"title class_\">Authorization</span>: <span class=\"string\">&#x27;Bearer &lt;JSON Web Token&gt;&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>後端回傳格式</strong></p>\n<p>正確會回傳一個 url，前端會依照此 url 的內容，將其內崁於<code>img src</code>之內，所以如果最終回傳的 url 內容是 base64 字串，也可以直接顯示圖片</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost/xxxxxx&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>錯誤需要回傳一個 error message ，結構如下，此錯誤訊息會直接在前端透過 alert 顯示</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;error&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;message&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;錯誤訊息&quot;</span></span><br><span class=\"line\">\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"上傳圖片-自定義-upload-adapter\"><a href=\"#上傳圖片-自定義-upload-adapter\" class=\"headerlink\" title=\"上傳圖片 自定義 upload adapter\"></a>上傳圖片 自定義 upload adapter</h2><p>採用 simple upload adapter 還是會有沒有辦法做到的事情，這個時候就需要自定義 adapter 了，官方也有提供完整的程式碼範例，可以直接修改拿來用即可</p>\n<p>更詳細的東西還是參考一下<a href=\"https://ckeditor.com/docs/ckeditor5/latest/framework/guides/deep-dive/upload-adapter.html\">官方文件</a>吧</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyUploadAdapter</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">constructor</span>(<span class=\"params\">loader</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// The file loader instance to use during the upload.</span></span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">loader</span> = loader;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Starts the upload process.</span></span><br><span class=\"line\">\t<span class=\"title function_\">upload</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">loader</span>.<span class=\"property\">file</span>.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"params\">file</span> =&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"variable language_\">this</span>.<span class=\"title function_\">_initRequest</span>();</span><br><span class=\"line\">\t\t\t\t\t<span class=\"variable language_\">this</span>.<span class=\"title function_\">_initListeners</span>(resolve, reject, file);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"variable language_\">this</span>.<span class=\"title function_\">_sendRequest</span>(file);</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Aborts the upload process.</span></span><br><span class=\"line\">\t<span class=\"title function_\">abort</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">xhr</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">xhr</span>.<span class=\"title function_\">abort</span>();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Initializes the XMLHttpRequest object using the URL passed to the constructor.</span></span><br><span class=\"line\">\t<span class=\"title function_\">_initRequest</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> xhr = (<span class=\"variable language_\">this</span>.<span class=\"property\">xhr</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Note that your request may look different. It is up to you and your editor</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// integration to choose the right communication channel. This example uses</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// a POST request with JSON as a data structure but your configuration</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// could be different.</span></span><br><span class=\"line\">\t\txhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;POST&quot;</span>, <span class=\"string\">&quot;http://example.com/image/upload/path&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\txhr.<span class=\"property\">responseType</span> = <span class=\"string\">&quot;json&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Initializes XMLHttpRequest listeners.</span></span><br><span class=\"line\">\t<span class=\"title function_\">_initListeners</span>(<span class=\"params\">resolve, reject, file</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> xhr = <span class=\"variable language_\">this</span>.<span class=\"property\">xhr</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> loader = <span class=\"variable language_\">this</span>.<span class=\"property\">loader</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> genericErrorText = <span class=\"string\">`Couldn&#x27;t upload file: <span class=\"subst\">$&#123;file.name&#125;</span>.`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\txhr.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;error&quot;</span>, <span class=\"function\">() =&gt;</span> <span class=\"title function_\">reject</span>(genericErrorText));</span><br><span class=\"line\">\t\txhr.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;abort&quot;</span>, <span class=\"function\">() =&gt;</span> <span class=\"title function_\">reject</span>());</span><br><span class=\"line\">\t\txhr.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;load&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> response = xhr.<span class=\"property\">response</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// This example assumes the XHR server&#x27;s &quot;response&quot; object will come with</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// an &quot;error&quot; which has its own &quot;message&quot; that can be passed to reject()</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// in the upload promise.</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Your integration may handle upload errors in a different way so make sure</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// it is done properly. The reject() function must be called when the upload fails.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!response || response.<span class=\"property\">error</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(response &amp;&amp; response.<span class=\"property\">error</span> ? response.<span class=\"property\">error</span>.<span class=\"property\">message</span> : genericErrorText);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// If the upload is successful, resolve the upload promise with an object containing</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// at least the &quot;default&quot; URL, pointing to the image on the server.</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// This URL will be used to display the image in the content. Learn more in the</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// UploadAdapter#upload documentation.</span></span><br><span class=\"line\">\t\t\t<span class=\"title function_\">resolve</span>(&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">default</span>: response.<span class=\"property\">url</span>,</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// properties which are used e.g. to display the upload progress bar in the editor</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// user interface.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (xhr.<span class=\"property\">upload</span>) &#123;</span><br><span class=\"line\">\t\t\txhr.<span class=\"property\">upload</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;progress&quot;</span>, <span class=\"function\"><span class=\"params\">evt</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (evt.<span class=\"property\">lengthComputable</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tloader.<span class=\"property\">uploadTotal</span> = evt.<span class=\"property\">total</span>;</span><br><span class=\"line\">\t\t\t\t\tloader.<span class=\"property\">uploaded</span> = evt.<span class=\"property\">loaded</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Prepares the data and sends the request.</span></span><br><span class=\"line\">\t<span class=\"title function_\">_sendRequest</span>(<span class=\"params\">file</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Prepare the form data.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> data = <span class=\"keyword\">new</span> <span class=\"title class_\">FormData</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tdata.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;upload&quot;</span>, file);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Important note: This is the right place to implement security mechanisms</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// like authentication and CSRF protection. For instance, you can use</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// XMLHttpRequest.setRequestHeader() to set the request headers containing</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// the CSRF token generated earlier by your application.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Send the request.</span></span><br><span class=\"line\">\t\t<span class=\"variable language_\">this</span>.<span class=\"property\">xhr</span>.<span class=\"title function_\">send</span>(data);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyCustomUploadAdapterPlugin</span>(<span class=\"params\">editor</span>) &#123;</span><br><span class=\"line\">\teditor.<span class=\"property\">plugins</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;FileRepository&quot;</span>).<span class=\"property\">createUploadAdapter</span> = <span class=\"function\"><span class=\"params\">loader</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Configure the URL to the upload script in your back-end here!</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyUploadAdapter</span>(loader);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ClassicEditor</span>.<span class=\"title function_\">create</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#editor&quot;</span>), &#123;</span><br><span class=\"line\">\t<span class=\"attr\">extraPlugins</span>: [<span class=\"title class_\">MyCustomUploadAdapterPlugin</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ol>\n<li><a href=\"https://cdn.ckeditor.com/#ckeditor5\">CKEditor5 CDN</a></li>\n<li><a href=\"https://www.itread01.com/content/1545018850.html\">vue+CKEditor5 入門</a></li>\n<li><a href=\"https://ckeditor.com/docs/ckeditor5/latest/builds/guides/integration/frameworks/vuejs.html\">Vue Component CKEditor</a></li>\n<li><a href=\"https://ckeditor.com/docs/ckeditor5/latest/features/ui-language.html\">Setting the UI language</a></li>\n<li><a href=\"https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editorconfig-EditorConfig.html\">EditorConfig</a></li>\n<li><a href=\"https://ckeditor.com/ckfinder/download/\">CKFinder 3 下載網頁</a></li>\n</ol>\n","categories":["javascript"],"tags":["CKEditor"]},{"title":"如何建立Jenkins Pipeline 專案","url":"/artblog//jenkins-pipeline-project/","content":"<p>這次想要練習的是 Jenkins 的 Pipeline 專案，所以就先在 local 裝 jenkins windows 版本囉，安裝過程很簡單就不贅述</p>\n<span id=\"more\"></span>\n\n<h2 id=\"準備設置環境變數\"><a href=\"#準備設置環境變數\" class=\"headerlink\" title=\"準備設置環境變數\"></a>準備設置環境變數</h2><p>在這個步驟主要是為了將在 command line 環境下所使用到的指令，都放在 path 內，讓系統可以自行尋找，而不需要每次執行都打上完整路徑<br>在檔案總管-&gt;電腦-&gt;右鍵內容，接著如下圖即可設定<br><img src=\"/artblog/jenkins-pipeline-project/2020-01-13_16-05-27.png\"></p>\n<p>以我自己的電腦為例，路徑如下</p>\n<table>\n<thead>\n<tr>\n<th>command</th>\n<th>path</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>msbuild.exe</td>\n<td>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\Bin\\MSBuild.exe</td>\n</tr>\n<tr>\n<td>vstest.console.exe</td>\n<td>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\TestWindow\\vstest.console.exe</td>\n</tr>\n<tr>\n<td>nuget.exe</td>\n<td>D:\\art\\developTools\\software\\nuget.exe</td>\n</tr>\n</tbody></table>\n<blockquote>\n<ol>\n<li>nuget 可於此處下載:<a href=\"https://docs.microsoft.com/zh-tw/nuget/install-nuget-client-tools\">安裝 NuGet 用戶端工具</a></li>\n<li>推薦好用的小工具<a href=\"https://www.voidtools.com/\">everyThing</a>，可幫助快速找到檔案的絕對路徑</li>\n</ol>\n</blockquote>\n<h2 id=\"新增-pipeline-專案\"><a href=\"#新增-pipeline-專案\" class=\"headerlink\" title=\"新增 pipeline 專案\"></a>新增 pipeline 專案</h2><h3 id=\"groovy-範例\"><a href=\"#groovy-範例\" class=\"headerlink\" title=\"groovy 範例\"></a>groovy 範例</h3><p>透過最簡單的 hello world 範例來認識 pipeline，在下面的指令共有一個 stage，這個 stage 的動作就只有一個，顯示 hello world</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">   agent any</span><br><span class=\"line\"></span><br><span class=\"line\">   stages &#123;</span><br><span class=\"line\">      stage(<span class=\"string\">&#x27;Hello&#x27;</span>) &#123;</span><br><span class=\"line\">         steps &#123;</span><br><span class=\"line\">            echo <span class=\"string\">&#x27;Hello World&#x27;</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/jenkins-pipeline-project/2020-01-13_15-31-45.png\"></p>\n<h3 id=\"取得原始檔案-Git\"><a href=\"#取得原始檔案-Git\" class=\"headerlink\" title=\"取得原始檔案 (Git)\"></a>取得原始檔案 (Git)</h3><p>使用 Pipeline Syntax 的產生器來撰寫指令<br><img src=\"/artblog/jenkins-pipeline-project/2020-01-13_15-38-44.png\"></p>\n<p>因為要從 Git 抓資料，所以選擇下拉選單項目：<code>checkout: Check Out from version control</code>；需要先自行建立憑證，此處利用 ssh key<br><img src=\"/artblog/jenkins-pipeline-project/2020-01-14_17-58-39.png\"></p>\n<p>private Key 就拿<code>%userprofile%/.ssh/id_rsa</code>的內容<br><img src=\"/artblog/jenkins-pipeline-project/2020-01-13_15-37-13.png\"></p>\n<p>點選下方的<code>Generate Pipeline Script</code>就會依照上方選擇的內容產生真正的指令碼<br><img src=\"/artblog/jenkins-pipeline-project/2020-01-13_15-41-50.png\"></p>\n<p>注意下方指令</p>\n<ol>\n<li>deleteDir()是另外加上去的，用來確保資料夾一開始都是空的</li>\n<li>checkout 指令的分支，目前這邊是寫死<code>origin/develop</code>，也可事後利用參數化建置，用變數取代掉</li>\n<li><code>credentialsId</code>會因為 jenkins 主機上建立而不同，需要依照自己的情況帶入識別碼</li>\n</ol>\n<blockquote>\n<p>範例的 repos 原本是公司的，所以儲存庫我改成隨便亂抓的一個網址</p>\n</blockquote>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">stages &#123;</span><br><span class=\"line\">   stage(<span class=\"string\">&#x27;git&#x27;</span>) &#123;</span><br><span class=\"line\">      steps &#123;</span><br><span class=\"line\">         deleteDir()</span><br><span class=\"line\">         checkout([<span class=\"attr\">$class:</span> <span class=\"string\">&#x27;GitSCM&#x27;</span>, <span class=\"attr\">branches:</span> [[<span class=\"attr\">name:</span> <span class=\"string\">&#x27;origin/develop&#x27;</span>]], <span class=\"attr\">doGenerateSubmoduleConfigurations:</span> <span class=\"literal\">false</span>, <span class=\"attr\">extensions:</span> [], <span class=\"attr\">submoduleCfg:</span> [], <span class=\"attr\">userRemoteConfigs:</span> [[<span class=\"attr\">credentialsId:</span> <span class=\"string\">&#x27;44ac570d-74df-471f-ac39-62f07b16b3be&#x27;</span>, <span class=\"attr\">url:</span> <span class=\"string\">&#x27;git@github.com:art-Tests/MsgBoard.git&#x27;</span>]]])</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"還原套件-nuget\"><a href=\"#還原套件-nuget\" class=\"headerlink\" title=\"還原套件 (nuget)\"></a>還原套件 (nuget)</h3><p>透過 nuget restore 指令還原套件，還需要指定公司自己的 nuget server 才可以順利還原，透過指定參數 source 宣告 nuget server</p>\n<p>添加<code>-source https://api.nuget.org/v3/index.json;http://nuget01.mynuget.art/nuget</code></p>\n<blockquote>\n<p>這邊的範例是因為有自訂的 nuget server，沒有的話可以省略</p>\n</blockquote>\n<blockquote>\n<p>ref:<a href=\"https://docs.microsoft.com/zh-tw/nuget/reference/cli-reference/cli-ref-restore#examples\">restore 命令（NuGet CLI）</a></p>\n</blockquote>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">stage(<span class=\"string\">&#x27;nuget&#x27;</span>) &#123;</span><br><span class=\"line\">   steps &#123;</span><br><span class=\"line\">      bat <span class=\"attr\">label:</span> <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">script:</span> <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">      nuget restore -source &quot;https://api.nuget.org/v3/index.json;http://nuget01.mynuget.art/nuget&quot;</span></span><br><span class=\"line\"><span class=\"string\">      exit 0</span></span><br><span class=\"line\"><span class=\"string\">      &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"建置專案-MoneyIn-Build\"><a href=\"#建置專案-MoneyIn-Build\" class=\"headerlink\" title=\"建置專案 (MoneyIn Build)\"></a>建置專案 (MoneyIn Build)</h3><p>在建置專案的環節僅須透過 msbuild.exe 即可完成</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">stage(<span class=\"string\">&#x27;build&#x27;</span>) &#123;</span><br><span class=\"line\">   steps &#123;</span><br><span class=\"line\">      bat <span class=\"attr\">label:</span> <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">script:</span> <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">      msbuild Web\\\\Web.csproj /p:OutputPath=&quot;D:\\\\MSBuildOut\\\\Web&quot; /p:Configuration=Debug</span></span><br><span class=\"line\"><span class=\"string\">      exit 0</span></span><br><span class=\"line\"><span class=\"string\">      &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"移除不須上板檔案-config\"><a href=\"#移除不須上板檔案-config\" class=\"headerlink\" title=\"移除不須上板檔案 (config)\"></a>移除不須上板檔案 (config)</h3><p>原本公司的專案是將設定值放在<code>_config</code>目錄下，因此為了日常維護主機上的設定值，不要被每一次的發行設定覆蓋掉，所以在建置完畢之後，我們需要執行</p>\n<ol>\n<li>刪除網站根目錄下的<code>*.config</code></li>\n<li>刪除網站路徑：<code>_config/*.config</code></li>\n</ol>\n<p>接著還需要將編譯出來的設定檔，複製到<code>_config</code>目錄，為了讓根目錄的 <code>web.config</code> 能夠指向<code>_config/*.config</code>，所以根目錄下的 web.config 我們需要先手動複製過去 IIS 目錄</p>\n<blockquote>\n<p>如果只是一般的專案不想被覆蓋設定，其實就只需要刪除<code>web.config</code>就好了</p>\n</blockquote>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">stage(<span class=\"string\">&#x27;移除不需上版檔案&#x27;</span>) &#123;</span><br><span class=\"line\">   steps &#123;</span><br><span class=\"line\">      bat <span class=\"attr\">returnStdout:</span> <span class=\"literal\">true</span>, <span class=\"attr\">script:</span> <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">      chcp 65001</span></span><br><span class=\"line\"><span class=\"string\">      del D:\\\\MSBuildOut\\\\Web\\\\_PublishedWebsites\\\\Web\\\\*.config /q</span></span><br><span class=\"line\"><span class=\"string\">      del D:\\\\MSBuildOut\\\\Web\\\\_PublishedWebsites\\\\Web\\\\_config\\\\ /q</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">      robocopy Web\\\\_config D:\\\\MSBuildOut\\\\Web\\\\_PublishedWebsites\\\\Web\\\\_config *.* /E</span></span><br><span class=\"line\"><span class=\"string\">      exit 0</span></span><br><span class=\"line\"><span class=\"string\">      &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"上板\"><a href=\"#上板\" class=\"headerlink\" title=\"上板\"></a>上板</h3><p>透過<code>robocopy</code>指令將檔案複製到 IIS 的網站目錄下</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">stage(<span class=\"string\">&#x27;deploy&#x27;</span>) &#123;</span><br><span class=\"line\">   steps &#123;</span><br><span class=\"line\">      bat <span class=\"attr\">returnStdout:</span> <span class=\"literal\">true</span>, <span class=\"attr\">script:</span> <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">      robocopy D:\\\\MSBuildOut\\\\Web\\\\_PublishedWebsites\\\\Web\\\\ D:\\\\PublishSite\\\\Web\\\\ *.* /E</span></span><br><span class=\"line\"><span class=\"string\">      exit 0</span></span><br><span class=\"line\"><span class=\"string\">      &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Final-Setting\"><a href=\"#Final-Setting\" class=\"headerlink\" title=\"Final Setting\"></a>Final Setting</h2><p>在此處調整了專案設定，改用參數化建置，利用參數來設定要發行的分支，底下是最終的設定指令，參數很多都改掉了，因為都跟公司有關，大致上參考用就好</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">   agent any</span><br><span class=\"line\"></span><br><span class=\"line\">   stages &#123;</span><br><span class=\"line\">      stage(<span class=\"string\">&#x27;git&#x27;</span>) &#123;</span><br><span class=\"line\">         steps &#123;</span><br><span class=\"line\">            deleteDir()</span><br><span class=\"line\">            checkout([<span class=\"attr\">$class:</span> <span class=\"string\">&#x27;GitSCM&#x27;</span>, <span class=\"attr\">branches:</span> [[<span class=\"attr\">name:</span> <span class=\"string\">&#x27;$Branch&#x27;</span>]], <span class=\"attr\">doGenerateSubmoduleConfigurations:</span> <span class=\"literal\">false</span>, <span class=\"attr\">extensions:</span> [], <span class=\"attr\">submoduleCfg:</span> [], <span class=\"attr\">userRemoteConfigs:</span> [[<span class=\"attr\">credentialsId:</span> <span class=\"string\">&#x27;44ac570d-74df-471f-ac39-62f07b16b3be&#x27;</span>, <span class=\"attr\">url:</span> <span class=\"string\">&#x27;git@github.com:art-Tests/MsgBoard.git&#x27;</span>]]])</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      stage(<span class=\"string\">&#x27;nuget&#x27;</span>) &#123;</span><br><span class=\"line\">         steps &#123;</span><br><span class=\"line\">            bat <span class=\"attr\">label:</span> <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">script:</span> <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">            nuget restore -source &quot;https://api.nuget.org/v3/index.json;http://nuget01.mynuget.art/nuget&quot;</span></span><br><span class=\"line\"><span class=\"string\">            exit 0</span></span><br><span class=\"line\"><span class=\"string\">            &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      stage(<span class=\"string\">&#x27;build&#x27;</span>) &#123;</span><br><span class=\"line\">         steps &#123;</span><br><span class=\"line\">            bat <span class=\"attr\">label:</span> <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">script:</span> <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">            msbuild Web\\\\Web.csproj /p:OutputPath=&quot;D:\\\\MSBuildOut\\\\Web&quot; /p:Configuration=Lab</span></span><br><span class=\"line\"><span class=\"string\">            exit 0</span></span><br><span class=\"line\"><span class=\"string\">            &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      stage(<span class=\"string\">&#x27;移除不需上版檔案&#x27;</span>) &#123;</span><br><span class=\"line\">         steps &#123;</span><br><span class=\"line\">            bat <span class=\"attr\">returnStdout:</span> <span class=\"literal\">true</span>, <span class=\"attr\">script:</span> <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">            chcp 65001</span></span><br><span class=\"line\"><span class=\"string\">            del D:\\\\MSBuildOut\\\\Web\\\\_PublishedWebsites\\\\Web\\\\*.config /q</span></span><br><span class=\"line\"><span class=\"string\">            del D:\\\\MSBuildOut\\\\Web\\\\_PublishedWebsites\\\\Web\\\\_config\\\\ /q</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            robocopy D:\\\\MSBuildOut\\\\Web\\\\_config D:\\\\MSBuildOut\\\\Web\\\\_PublishedWebsites\\\\Web\\\\_config *.* /E</span></span><br><span class=\"line\"><span class=\"string\">            exit 0</span></span><br><span class=\"line\"><span class=\"string\">            &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      stage(<span class=\"string\">&#x27;deploy&#x27;</span>) &#123;</span><br><span class=\"line\">         steps &#123;</span><br><span class=\"line\">            bat <span class=\"attr\">returnStdout:</span> <span class=\"literal\">true</span>, <span class=\"attr\">script:</span> <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">            robocopy D:\\\\MSBuildOut\\\\Web\\\\_PublishedWebsites\\\\Web\\\\ D:\\\\PublishSite\\\\Web\\\\ *.* /E</span></span><br><span class=\"line\"><span class=\"string\">            exit 0</span></span><br><span class=\"line\"><span class=\"string\">            &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":["devOps"],"tags":["jenkins"]},{"title":"如何建立自己的 docker registry","url":"/artblog//docker-registry/","content":"<p>要自己建立一個 private 的 docker registry，只需要從<a href=\"https://hub.docker.com/_/registry\">官方</a>下載已經做好的 image，掛載起來即可</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -v C:/DockerRegistry/storage:/var/lib/registry -p 5000:5000 --name registry-srv --restart always registry:2</span><br></pre></td></tr></table></figure>\n\n<p>registry 架起來後，就可以透過<code>http://localhost:5000/v2/_catalog</code>的方式查詢到有哪些 image，具體的文件說明請參考<a href=\"https://docs.docker.com/registry/spec/api/#detail\">官網</a>。</p>\n<p>可透過下列指令測試</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">docker pull ubuntu</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">docker tag ubuntu localhost:5000/ubuntu</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">docker push localhost:5000/ubuntu</span></span><br></pre></td></tr></table></figure>\n","categories":["devOps"],"tags":["docker","registry"]},{"title":"如何於Jenkins Pipeline專案整合sonarQube","url":"/artblog//jenkins-pipeline-sonarqube/","content":"<p>繼上一篇文章:<a href=\"https://partypeopleland.github.io/artblog/2020/01/14/%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8BJenkins-Pipeline-%E5%B0%88%E6%A1%88/\">如何建立 Jenkins Pipeline 專案 </a>，於 Jenkins Pipeline 專案內，加入 sonarQube 程式碼分析</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>關於 sonarQube 的部分，請參考:<a href=\"https://partypeopleland.github.io/artblog/2022/06/15/sonarqube-analyze-2022/\">SonarQube 程式碼分析工具 - 2022</a></p>\n</blockquote>\n<h2 id=\"安裝-SonarQube-服務\"><a href=\"#安裝-SonarQube-服務\" class=\"headerlink\" title=\"安裝 SonarQube 服務\"></a>安裝 SonarQube 服務</h2><p>透過 docker-compose 安裝服務<br>REF:<a href=\"https://gist.github.com/Warchant/0d0f0104fe7adf3b310937d2db67b512\">sonarQube-docker-compose.yml</a></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">sonarqube:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">sonarqube</span></span><br><span class=\"line\">    <span class=\"attr\">expose:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">9000</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;127.0.0.1:9000:9000&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">sonarnet</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">SONARQUBE_JDBC_URL=jdbc:postgresql://db:5432/sonar</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">SONARQUBE_JDBC_USERNAME=sonar</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">SONARQUBE_JDBC_PASSWORD=sonar</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">sonarqube_conf:/opt/sonarqube/conf</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">sonarqube_data:/opt/sonarqube/data</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">sonarqube_extensions:/opt/sonarqube/extensions</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">sonarqube_bundled-plugins:/opt/sonarqube/lib/bundled-plugins</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">db:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">postgres</span></span><br><span class=\"line\">    <span class=\"attr\">networks:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">sonarnet</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">POSTGRES_USER=sonar</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">POSTGRES_PASSWORD=sonar</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">postgresql:/var/lib/postgresql</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">postgresql_data:/var/lib/postgresql/data</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\">  <span class=\"attr\">sonarnet:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"attr\">sonarqube_conf:</span></span><br><span class=\"line\">  <span class=\"attr\">sonarqube_data:</span></span><br><span class=\"line\">  <span class=\"attr\">sonarqube_extensions:</span></span><br><span class=\"line\">  <span class=\"attr\">sonarqube_bundled-plugins:</span></span><br><span class=\"line\">  <span class=\"attr\">postgresql:</span></span><br><span class=\"line\">  <span class=\"attr\">postgresql_data:</span></span><br></pre></td></tr></table></figure>\n\n<p>執行即可，sonarQube 網站將會在<code>http://127.0.0.1:9000</code>，帳密預設皆為<code>admin</code></p>\n<h2 id=\"新建-sonarqube-專案\"><a href=\"#新建-sonarqube-專案\" class=\"headerlink\" title=\"新建 sonarqube 專案\"></a>新建 sonarqube 專案</h2><p>於網站右上角點選新增專案的按鈕，並指定好專案名稱<br><img src=\"/artblog/jenkins-pipeline-sonarqube/2020-01-15_14-15-23.png\"></p>\n<p>這邊需要產生一個 token 讓後續步驟使用，指定一個名稱即可，token 內容會被產生出來<br><img src=\"/artblog/jenkins-pipeline-sonarqube/2020-01-15_14-17-58.png\"></p>\n<p>這個密碼只會出現一次，但是如果之後忘記了，可以在個人的帳號底下管理 token<br><img src=\"/artblog/jenkins-pipeline-sonarqube/2020-01-15_14-19-26.png\"></p>\n<p>這邊因為我的範例項目是 c-sharp，所以當然就選 c-sharp，其他語言的話，點選也會有指示<br><img src=\"/artblog/jenkins-pipeline-sonarqube/2020-01-15_14-20-31.png\"></p>\n<p>下面的步驟就照著做<br><img src=\"/artblog/jenkins-pipeline-sonarqube/2020-01-15_14-21-20.png\"></p>\n<p>在<a href=\"https://sonarcloud.io/documentation/analysis/scan/sonarscanner-for-msbuild/\">這個頁面</a>下載合適的版本<br>解壓縮後將目錄加入系統環境變數 Path 之內，省的每次都要打完整路徑執行</p>\n<p>畫面的指令碼有三段，其實就是做三件事情</p>\n<ol>\n<li>準備蒐集資訊，這裡需要告訴 scanner 要分析的專案名稱、還有剛剛的 token，另外也跟 sacnner 說，我們所建立的 sonarqube 網站在哪裡</li>\n<li>透過 msbuild 重建專案，讓 scanner 蒐集資訊</li>\n<li>分析剛剛所蒐集到的資訊並傳送給 sonarqube</li>\n</ol>\n<blockquote>\n<p>因為我在截圖的時候沒有把 token 複製下來，所以下面的指令是我產生新的 token</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 啟動SonarScanner</span></span></span><br><span class=\"line\">SonarScanner.MSBuild.exe begin /k:&quot;taskproject&quot; /d:sonar.host.url=&quot;http://127.0.0.1:9000&quot; /d:sonar.login=&quot;9ef26bd5d79f1893a0bfe91d572a04a04b12908a&quot; /d:sonar.cs.dotcover.reportsPaths=&quot;report.html&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># Msbuild</span></span></span><br><span class=\"line\">MSBuild.exe /t:Rebuild</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 結束分析</span></span></span><br><span class=\"line\">SonarScanner.MSBuild.exe end /d:sonar.login=&quot;9ef26bd5d79f1893a0bfe91d572a04a04b12908a&quot;</span><br></pre></td></tr></table></figure>\n\n<p>執行完上述步驟，應該可以在網站上面看到分析結果<br><img src=\"/artblog/jenkins-pipeline-sonarqube/2020-01-15_14-39-52.png\"></p>\n<p>但是，測試覆蓋率的地方是不是有點問題？怎麼都是 0 呢？</p>\n<h3 id=\"讓-SonarQube-正確顯示單元測試覆蓋率\"><a href=\"#讓-SonarQube-正確顯示單元測試覆蓋率\" class=\"headerlink\" title=\"讓 SonarQube 正確顯示單元測試覆蓋率\"></a>讓 SonarQube 正確顯示單元測試覆蓋率</h3><p>依照先前的步驟，應該可以看到一些指標數據，但是在單元測試的覆蓋率應該都是看不到的，因為 sonarQube 還必須要經過其他的方式取得單元測試的數據才能正確顯示，更詳細一點的文件可以參考<a href=\"https://docs.sonarqube.org/display/SONARQUBE45/Unit+Tests%2C+Integration+Tests+and+Code+Coverage\">官方文章</a>、<a href=\"https://docs.sonarqube.org/display/SONARQUBE45/C%23+Plugin\">C# Plugin</a>，這兩篇文章的內容大致上就是說明了一下官方建議的做法，有興趣可以研究一下</p>\n<p>官方文件的重點有</p>\n<ol>\n<li>需要用工具產生報告，工具可以選擇 dotCover, NCover, OpenCover, PartCover 其中一個</li>\n<li>每一種工具所支援的報告格式不太一樣，使用前須詳閱說明書，以 dotCover 為例，需要給 html 格式報告，並透過<code>sonar.cs.dotcover.reportsPaths</code>參數指定</li>\n</ol>\n<p>因為 sonar 支援的三種工具，我已經有購買了 dotCover，所以當然首選使用它作為覆蓋率的工具，在使用上需要注意的是，從官方下載記得要選<a href=\"https://www.jetbrains.com/dotcover/download/#section=commandline\">Command Line Tools</a>，因為已經有授權，所以我也不是很清楚沒有授權的話會發生甚麼事情，但應該也可以用<a href=\"https://archive.codeplex.com/?p=opencover\">OpenCover</a>代替</p>\n<p>查閱了 dotCover 的文件，產生單一單元測試專案的報告可透過指令，當然指令也支援設定檔(xml)</p>\n<p>可透過<code>dotCover.exe help analyse cover.xml</code> 指令產生一個範例設定檔，將正確設定填入即可<br><img src=\"/artblog/jenkins-pipeline-sonarqube/2020-01-15_14-42-39.png\"></p>\n<p>將設定檔設定如下<br><img src=\"/artblog/jenkins-pipeline-sonarqube/2020-01-15_14-43-44.png\"></p>\n<p>這樣子就可以直接透過指令進行分析、並產生報告<br><img src=\"/artblog/jenkins-pipeline-sonarqube/2020-01-15_14-45-17.png\"></p>\n<p>如果想要用指令列參數替代上面這個設定檔，可改寫成下列型式</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">dotCover cover /TargetExecutable=&quot;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\TestWindow\\vstest.console.exe&quot; /TargetArguments=&quot;TaskProjectTests.dll&quot; /TargetWorkingDir=&quot;TaskProjectTests\\bin\\debug&quot; /Output=&quot;report.html&quot; /ReportType=&quot;HTML&quot;</span><br></pre></td></tr></table></figure>\n\n<p>產生完畢報告之後，可以透過瀏覽器觀看<br><img src=\"/artblog/jenkins-pipeline-sonarqube/2020-01-15_14-48-35.png\"></p>\n<p>但是分析居然連測試專案都一起顯示了，我希望能夠聚焦在我的 lib，而不要顯示測試專案的數據</p>\n<p>這當然也是可以透過排除的方式來設定；而如果有多個專案要合併測試結果，則需要為每一個測試專案先產生報告的快照，再將這些快照合併，最終將合併的結果轉換為 Html 格式的報告才可以用</p>\n<p>更多細節就請參考文件<a href=\"https://www.jetbrains.com/help/dotcover/Running_Coverage_Analysis_from_the_Command_LIne.html\">Coverage Analysis from the Command Line</a></p>\n<p>將專案根目錄下的<code>coverage.xml</code>加入 Filter 區段的設置如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">CoverageParams</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TargetExecutable</span>&gt;</span>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\TestWindow\\vstest.console.exe<span class=\"tag\">&lt;/<span class=\"name\">TargetExecutable</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TargetArguments</span>&gt;</span>TaskProjectTests.dll<span class=\"tag\">&lt;/<span class=\"name\">TargetArguments</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">TargetWorkingDir</span>&gt;</span>TaskProjectTests\\bin\\debug<span class=\"tag\">&lt;/<span class=\"name\">TargetWorkingDir</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Output</span>&gt;</span>report.html<span class=\"tag\">&lt;/<span class=\"name\">Output</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ReportType</span>&gt;</span>HTML<span class=\"tag\">&lt;/<span class=\"name\">ReportType</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">InheritConsole</span>&gt;</span>True<span class=\"tag\">&lt;/<span class=\"name\">InheritConsole</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">AnalyzeTargetArguments</span>&gt;</span>True<span class=\"tag\">&lt;/<span class=\"name\">AnalyzeTargetArguments</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Filters</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ExcludeFilters</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">FilterEntry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ModuleMask</span>&gt;</span>TaskProjectTests<span class=\"tag\">&lt;/<span class=\"name\">ModuleMask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ClassMask</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">ClassMask</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">FunctionMask</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">FunctionMask</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">FilterEntry</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ExcludeFilters</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Filters</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">CoverageParams</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>這次就只有 lib 的數據了<br><img src=\"/artblog/jenkins-pipeline-sonarqube/2020-01-15_14-53-00.png\"></p>\n<h3 id=\"將報告結果加入-sonarqube-顯示\"><a href=\"#將報告結果加入-sonarqube-顯示\" class=\"headerlink\" title=\"將報告結果加入 sonarqube 顯示\"></a>將報告結果加入 sonarqube 顯示</h3><p>依照官方的說法，我們必須將 dotCover 的 HTML 格式報告，透過參數指定讓 sonarScanner 取得，加入參數<code>/d:sonar.cs.dotcover.reportsPaths=&quot;report.html&quot;</code><br>之後的語法如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 啟動SonarScanner</span></span></span><br><span class=\"line\">SonarScanner.MSBuild.exe begin /k:&quot;taskproject&quot; /d:sonar.host.url=&quot;http://127.0.0.1:9000&quot; /d:sonar.login=&quot;9ef26bd5d79f1893a0bfe91d572a04a04b12908a&quot; /d:sonar.cs.dotcover.reportsPaths=&quot;report.html&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># Msbuild</span></span></span><br><span class=\"line\">MSBuild.exe /t:Rebuild</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 結束分析</span></span></span><br><span class=\"line\">SonarScanner.MSBuild.exe end /d:sonar.login=&quot;9ef26bd5d79f1893a0bfe91d572a04a04b12908a&quot;</span><br></pre></td></tr></table></figure>\n\n<p>測試覆蓋率已經能正確顯示了<br><img src=\"/artblog/jenkins-pipeline-sonarqube/2020-01-15_15-14-51.png\"></p>\n<h3 id=\"實際範例\"><a href=\"#實際範例\" class=\"headerlink\" title=\"實際範例\"></a>實際範例</h3><p>下面這個是我實際的執行指令，專案是<code>.netCore 2.1</code>的</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">產生測試報告</span></span><br><span class=\"line\">dotCover cover --TargetExecutable=&quot;C:\\\\Program Files\\\\dotnet\\\\dotnet.exe&quot; --TargetWorkingDir=&quot;myproject.Tests&quot; --TargetArguments=&quot;test \\\\&quot;myproject.Tests.csproj\\\\&quot;&quot; --Filters=-:myproject.Tests --output=AppCoverageReport.html --reportType=HTML</span><br></pre></td></tr></table></figure>\n\n<p>利用<code>dotnet tool install --global dotnet-sonarscanner</code>的指令安裝 dotnet 外掛</p>\n<p><img src=\"/artblog/jenkins-pipeline-sonarqube/2020-08-10_112158.png\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">dotnet sonarscanner begin /d:sonar.host.url=&quot;http://127.0.0.1:9090&quot; /k:&quot;myproject&quot; /d:sonar.login=&quot;2c244539263ac8b5c4b4414b2b8c190a8ca873d9&quot; /d:sonar.cs.dotcover.reportsPaths=&quot;AppCoverageReport.html&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">dotnet build project.sln</span><br><span class=\"line\"></span><br><span class=\"line\">dotnet sonarscanner end /d:sonar.login=&quot;2c244539263ac8b5c4b4414b2b8c190a8ca873d9&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"於-Pipeline-專案當中設定\"><a href=\"#於-Pipeline-專案當中設定\" class=\"headerlink\" title=\"於 Pipeline 專案當中設定\"></a>於 Pipeline 專案當中設定</h2><p>手動執行成功後，將其透過 jenkins 的 pipeline syntax 的幫助，我們可以將需要執行的指令透過 groovy 語法寫出來</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">stage(<span class=\"string\">&#x27;build + SonarQube&#x27;</span>) &#123;</span><br><span class=\"line\">   steps &#123;</span><br><span class=\"line\">      bat <span class=\"attr\">label:</span> <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">script:</span> <span class=\"string\">&#x27;D:\\\\art\\\\programs\\\\sonar-scanner-msbuild-4.7.1.2311-net46\\\\SonarScanner.MSBuild.exe begin /k:&quot;taskproject&quot; /d:sonar.host.url=&quot;http://127.0.0.1:9000&quot; /d:sonar.login=&quot;9ef26bd5d79f1893a0bfe91d572a04a04b12908a&quot; /d:sonar.cs.dotcover.reportsPaths=&quot;report.html&quot;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      bat <span class=\"attr\">label:</span> <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">script:</span> <span class=\"string\">&#x27;MSBuild.exe /t:Rebuild&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      bat <span class=\"attr\">label:</span> <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">script:</span> <span class=\"string\">&#x27;D:\\\\art\\\\programs\\\\sonar-scanner-msbuild-4.7.1.2311-net46\\\\SonarScanner.MSBuild.exe end /d:sonar.login=&quot;9ef26bd5d79f1893a0bfe91d572a04a04b12908a&quot;&#x27;</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而整個 pipeline 需要執行的動作分別是</p>\n<ol>\n<li>取得原始檔案</li>\n<li>nuget 還原套件</li>\n<li>先建置第一次產生測試專案的 dll 給 dotCover 產生報告用</li>\n<li>呼叫 dotCover 產生報告</li>\n<li>啟用 sonarScanner 準備蒐集資訊，同時給予測試報告</li>\n<li>專案重新建置</li>\n<li>關閉 sonarScanner，分析資訊</li>\n</ol>\n<p>所以整體的<code>jenkinsFile</code>設定如下</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent any</span><br><span class=\"line\"></span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;git&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                git <span class=\"attr\">credentialsId:</span> <span class=\"string\">&#x27;e3b7e18a-ea0f-48be-8d8f-a1d214c3c351&#x27;</span>, <span class=\"attr\">url:</span> <span class=\"string\">&#x27;https://github.com/partypeopleland/TaskProject&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;nuget&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                bat <span class=\"attr\">label:</span> <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">script:</span> <span class=\"string\">&#x27;nuget restore TaskProject.sln&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;build for testDLL&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                bat <span class=\"attr\">label:</span> <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">script:</span> <span class=\"string\">&#x27;msbuild /p:Configuration=Debug&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;analyse + unittest&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                bat <span class=\"attr\">label:</span> <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">script:</span> <span class=\"string\">&#x27;&quot;D:\\\\art\\\\programs\\\\JetBrains.dotCover.CommandLineTools.2019.3.1\\\\dotCover.exe&quot; analyse coverage.xml&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;build + SonarQube&#x27;</span>) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                bat <span class=\"attr\">label:</span> <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">script:</span> <span class=\"string\">&#x27;D:\\\\art\\\\programs\\\\sonar-scanner-msbuild-4.7.1.2311-net46\\\\SonarScanner.MSBuild.exe begin /k:&quot;taskproject&quot; /d:sonar.host.url=&quot;http://127.0.0.1:9000&quot; /d:sonar.login=&quot;9ef26bd5d79f1893a0bfe91d572a04a04b12908a&quot; /d:sonar.cs.dotcover.reportsPaths=&quot;report.html&quot;&#x27;</span></span><br><span class=\"line\">                bat <span class=\"attr\">label:</span> <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">script:</span> <span class=\"string\">&#x27;MSBuild.exe /t:Rebuild&#x27;</span></span><br><span class=\"line\">                bat <span class=\"attr\">label:</span> <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">script:</span> <span class=\"string\">&#x27;D:\\\\art\\\\programs\\\\sonar-scanner-msbuild-4.7.1.2311-net46\\\\SonarScanner.MSBuild.exe end /d:sonar.login=&quot;9ef26bd5d79f1893a0bfe91d572a04a04b12908a&quot;&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/jenkins-pipeline-sonarqube/2020-01-15_15-32-24.png\"><br><img src=\"/artblog/jenkins-pipeline-sonarqube/2020-01-15_15-33-37.png\"></p>\n<h3 id=\"Jenkins-Console-亂碼\"><a href=\"#Jenkins-Console-亂碼\" class=\"headerlink\" title=\"Jenkins Console 亂碼\"></a>Jenkins Console 亂碼</h3><p>參考保哥的文章<a href=\"https://blog.miniasp.com/post/2015/12/24/Jenkins-on-Windows-03-Avoid-messy-words-in-log-messages\">Jenkins on Windows 心得分享 (03)：有效避免記錄檔或訊息出現亂碼的方法</a></p>\n<ol>\n<li>將 Java 的預設字集修改為 UTF-8 編碼：<code>SETX /M JAVA_TOOL_OPTIONS -Dfile.encoding=UTF8</code></li>\n<li>將自訂的「執行 Windows 批次指令」的第一行都加上以下命令：<code>chcp 65001</code></li>\n</ol>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">stage(<span class=\"string\">&#x27;sonar end&#x27;</span>) &#123;</span><br><span class=\"line\">    steps &#123;</span><br><span class=\"line\">        bat <span class=\"attr\">label:</span> <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">script:</span> <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        chcp 65001</span></span><br><span class=\"line\"><span class=\"string\">        SonarScanner.MSBuild.exe end /d:sonar.login=&quot;32aafa7ac56a55dae90d0891487e7af98506ed33&quot;</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["devOps"],"tags":["jenkins","sonarQube"]},{"title":"讀書心得-JavaScript測試驅動開發","url":"/artblog//javascript-tdd/","content":"<p>紀錄一下讀書心得，這本書因為是在說 Javascript 的 TDD，我對於這個還挺有興趣的，雖然是簡體中文書，但翻閱了一下就決定買回家閱讀了，主要是因為翻閱到異步測試這個章節，寫得還蠻不錯的，不過我應該會略過 AngularJS 的部份，畢竟沒研究過也不打算深入。</p>\n<span id=\"more\"></span>\n\n<p>基於偷懶的大原則，以及本人技能樹的加點與後續章節不太符合，後面的幾個章節直接被我略過了<br>原因如下：</p>\n<ol>\n<li>暫時不會接觸 node.js 更深入的東西</li>\n<li>前端的東西未來如果會使用到測試，也應該會採用框架的方式去做，屆時再研究<code>vue.js</code>或是<code>react.js</code>等其他前端框架的測試</li>\n<li>AngularJS，因技能點、工作上都用不到，基本上不考慮使用此框架</li>\n<li>本人打內生態系</li>\n</ol>\n<p>先說感想吧：技術很多、有些你用的上，有些你用不上，<strong>絕對絕對不要學起來放著</strong>，這只是再浪費時間、精力；沒有在實務上持續運用的技術，並不能為你自己帶來價值。<br>或許可以借鑑，但現在資訊取得較十幾二十年前方便許多，那些時間可以讓你直接去找相關的資訊還比較有效益</p>\n<p>軟體設計師最重要的是時間，不會在實務上用到的技術上不要花太多時間，就像是<code>node.js</code>那一章節，我也不用 node.js 啊，但我仍舊收穫良多，因為我看的是它解題的流程，思考的過程，而且…<code>node.js</code>那章節我看得懂，(笑)</p>\n<p>我沒有太多美國時間去浪費，把時間花在家人、生活、讓自己快樂的事情上都比這些有效益。這很重要！</p>\n<h3 id=\"第-1-章-自動化測試讓你重獲自由\"><a href=\"#第-1-章-自動化測試讓你重獲自由\" class=\"headerlink\" title=\"第 1 章 - 自動化測試讓你重獲自由\"></a>第 1 章 - 自動化測試讓你重獲自由</h3><p>大概論述了一下測試的重要性，因為很多書都有類似的東西，闡述為甚麼要測試的緣由等等，大致翻閱了一下，這個章節學到的東西是一個專有名詞：spike 解決方案，這名詞我拿去 google 找到的都是翻譯，譯者給出的解釋是：如果在設計中碰到困難，那麼就立刻為這個部分建立一次性的可執行原型</p>\n<p>如果與第四章搭配起來閱讀，我就把他理解為，一個能夠完成需求，但是沒有經過重構設計的原始解決方案，簡單來說就是<strong>爛 CODE，但有效</strong>。</p>\n<h2 id=\"第一部分-創建自動化測試\"><a href=\"#第一部分-創建自動化測試\" class=\"headerlink\" title=\"第一部分 創建自動化測試\"></a>第一部分 創建自動化測試</h2><h3 id=\"第-2-章-測試驅動設計\"><a href=\"#第-2-章-測試驅動設計\" class=\"headerlink\" title=\"第 2 章 - 測試驅動設計\"></a>第 2 章 - 測試驅動設計</h3><p>一般的軟體安裝、套件說明後，這邊提到了金絲雀測試，大概就是確認測試框架是否可以正確運行的測試，這個步驟其實在做測試的時候一定會先做一次，但通常我是將它當成準備工作，這個可以快速驗證開發環境是否正確安裝安裝，步驟其實也很簡單，就是撰寫一個很單純的測試，內容就是直接<code>expect(true).to.be.eql(true)</code>這樣的東西</p>\n<p>這個測試雖然只要確保一開始正確運作之後就沒有價值了，但保留他也有好處；如果變更了測試框架、或是在別的電腦執行，或是變更了環境變數，那麼仍舊需要重新驗證最基本的測試是否可運作，以確保測試環境是正常的。</p>\n<p>另外也以範例、一步步地展示 TDD 的開發過程，將正向測試、反向測試、異常測試的觀念帶入；這裡也特別提醒了，我們需要關注的是行為，而不是狀態，用我的理解其實就是我們在撰寫測試的時候，不太需要去為了單純的 getter、setter 撰寫測試，我們應該將目光放在那些包含了邏輯的行為，那才是我們要測試的部分</p>\n<p>接著讓我覺得很棒的是，書中用同一個問題，撰寫回文的 function，以 TDD 的方式在 server 端、client 端都實作一次；在 client 端透過 karma 的部份，是我很薄弱的地方，經由這個範例讓我學習了在 client 端的程式碼，透過 tdd 開發測試的方式，雖然還只是很基本的範例，還沒有牽涉到 babel,webpack 等實務應用，但是起碼知道是怎麼一回事了</p>\n<h3 id=\"第-3-章-異步測試\"><a href=\"#第-3-章-異步測試\" class=\"headerlink\" title=\"第 3 章 - 異步測試\"></a>第 3 章 - 異步測試</h3><p>很久以前曾經上過小風的測試課程，當中有一段是 promise，記得當時就像是聽天書一樣，這個章節其實讓我很清楚地明白了為甚麼會有非同步測試這件事情，並且應該如何測試，測試過程的手法及演進，最後透過額外的第三方套件讓測試撰寫的更優雅，更語意化，這個章節給我的最大感觸是，上完課後要好好溫習，不懂得要趕緊查資料，如果是因為程度只有入門，卻上了進階班導致跟不上，那就…要有心理準備，去長見識的。學習還是先把基礎補起來吧。</p>\n<p>不過還是沒有後悔去上課啦，因為沒有時間就是花錢買人家的經驗，吸收不了細節其實觀念還是有學到，在努力的方向上就跟別人有區別了，還是很值得。</p>\n<h3 id=\"第-4-章-巧妙處理依賴\"><a href=\"#第-4-章-巧妙處理依賴\" class=\"headerlink\" title=\"第 4 章 - 巧妙處理依賴\"></a>第 4 章 - 巧妙處理依賴</h3><p>我們都知道測試最困難的，是解依賴，這個章節的範例其實我覺得很經典，功能簡單，很容易理解，但是又依賴很多東西，透過這個例子可以學到怎麼把爛 Code 分離職責，逐一擊破，並為這些程式撰寫測試。<br>這裡有一個很棒的部分是，範例程式碼給了兩份，一份是 spike 解決方案，然後書中解析這份 spike 方案，分離職責給出一個模組化設計的圖，而在另外一個範例程式碼，將這些模組化都預先建立了一個 test 程式。這意味著，我只要能夠學習這套方法，能夠<strong>將 spike 解決方案轉化為模組化設計的圖</strong>，就可以撰寫測試了</p>\n<p>這章節在解釋知識點的時機也很不錯，依據情境撰寫測試，發現要做的事情缺少某些知識，這時候再進行補充，這樣做少了教科書式的條列式重點，但只要是認真看過作筆記，倒是能吸收的不錯。<br>關於測試替身的定義我倒是第一次看到 martin fowler 的解釋版本，可能是簡體中文的關係看不是很懂他的意思，但是看範例程式碼自己理解再對照一下，還是能夠懂的，就是累了點。</p>\n<blockquote>\n<p>這一章節含金量很高，每一段的說明、解釋、範例都很重要，值得細心研讀</p>\n</blockquote>\n<h2 id=\"第二部分-真實的自動化測試\"><a href=\"#第二部分-真實的自動化測試\" class=\"headerlink\" title=\"第二部分 真實的自動化測試\"></a>第二部分 真實的自動化測試</h2><h3 id=\"第-5-章-Node-js-測試驅動開發\"><a href=\"#第-5-章-Node-js-測試驅動開發\" class=\"headerlink\" title=\"第 5 章 - Node.js 測試驅動開發\"></a>第 5 章 - Node.js 測試驅動開發</h3><p>這一個章節大概就遵循著常見的開發流程，給出了一個示範</p>\n<ol>\n<li>需求說明：簡單的介紹了一下當前遇到的需求是甚麼，我們需要完成甚麼</li>\n<li>概念設計：基於需求而提出的一個解決方案概念，將問題拆解成一個個較小的環節，並明確各自的職責</li>\n<li>測試開發：針對各步驟進行測試驅動開發</li>\n</ol>\n<p>這一章節一開始就說我們要來做一點東西，先介紹了目標，接著將程式的整體邏輯做一個概念性的設計，歸納程式流程的同時，也明確界定了職責，產生出來的圖就像是上一章節的模組化設計的圖一樣。<br>在這個圖裡面，可以看到問題再次被分解成一個個小步驟，並且明確的定義了各自的職責，其實也就是輸入、輸出。</p>\n<p>到了測試驅動開發的這個階段，首先要做的是先將想到的測試記錄下來，而暫時先不要考慮是否正確，畢竟隨著時間經過，這些東西很有可能會隨著改變</p>\n<blockquote>\n<p>隨著 TDD 的開發，第一個測試的目的是為了釐清我們會用到的介面、簽章方法，暫時不需要去實作他，後續的測試才是幫助我們實現 production code。</p>\n</blockquote>\n<p>這章的重點應該在於如何在 TDD 的開發流程中，逐漸完善測試案例；其次，在面對較為複雜的步驟，為它單獨建立一個 spike 去實現概念，獲得較為具體的想法之後，再將 spike 拋棄，回歸到 TDD 開發流程。<br>簡單的說就是當你發現某個步驟太複雜，做不出來、無從下手的時候，先不要管什麼 TDD 了，直接用最髒的方式去完成它，然後，再根據你做出來的程式碼去分析、釐清裡面的邏輯、依賴關係，最後幫它加上測試案例。</p>\n<p>再往後就是一個完整的思考、撰寫、實現 TDD 的過程範例，直到這一章節結束，在最後面有最終的設計圖，與一開始的概念設計相比較，應該會有一些感覺</p>\n<h3 id=\"第-6-章-Express-測試驅動開發\"><a href=\"#第-6-章-Express-測試驅動開發\" class=\"headerlink\" title=\"第 6 章 - Express 測試驅動開發\"></a>第 6 章 - Express 測試驅動開發</h3><p>略</p>\n<h3 id=\"第-7-章-與-DOM-和-jQuery-協作\"><a href=\"#第-7-章-與-DOM-和-jQuery-協作\" class=\"headerlink\" title=\"第 7 章 - 與 DOM 和 jQuery 協作\"></a>第 7 章 - 與 DOM 和 jQuery 協作</h3><p>略</p>\n<h3 id=\"第-8-章-使用-AngularJS\"><a href=\"#第-8-章-使用-AngularJS\" class=\"headerlink\" title=\"第 8 章 - 使用 AngularJS\"></a>第 8 章 - 使用 AngularJS</h3><p>略</p>\n<h3 id=\"第-9-章-Angular-2-測試驅動開發\"><a href=\"#第-9-章-Angular-2-測試驅動開發\" class=\"headerlink\" title=\"第 9 章 - Angular 2 測試驅動開發\"></a>第 9 章 - Angular 2 測試驅動開發</h3><p>略</p>\n<h3 id=\"第-10-章-集成測試和端到端測試\"><a href=\"#第-10-章-集成測試和端到端測試\" class=\"headerlink\" title=\"第 10 章 - 集成測試和端到端測試\"></a>第 10 章 - 集成測試和端到端測試</h3><p>e2e 測試這一塊我個人偏好的是<code>testcafe.js</code>，對於其他工具就沒什麼了解了，雖說 e2e 測試在工作上其實也用不到，純粹是個人興趣所以研究，所以其實了解也很粗淺</p>\n<blockquote>\n<p>現在偏好的則是<code>cypress.io</code>，<code>testcafe.js</code>已經成舊愛了</p>\n</blockquote>\n<p>但就書中的範例來看，除了基本的測試撰寫範例，還著重的提了一下啟動服務器的部分，書裡面的範例是透過 mocha 的 hook 在測試開始前，啟動<code>express</code>，應該是想要更方便的測試，而不需要讓人手動的開這開那準備測試環境吧</p>\n<p>這些方法對於.net 生態系的我完全用不上，往後應該也沒什麼機會去搞懂，基本上這個章節我只有快速翻閱過去，談不上甚麼心得</p>\n<p>不過這邊有提到一個觀念很重要：盡量減少 e2e 測試的數量，最好是僅撰寫沒有被其他測試覆蓋到的部分。這是一個易懂難精的東西，程式還好說，花時間學應該能會；但這個就有點玄了，大概就跟怎麼寫好測試案例這個東西是一樣層級的東西，應該也是可以專門弄一本書來說的</p>\n<p>而且 e2e 很花時間，能少最好是少一點</p>\n<p>這邊也特別提到了<code>page-object</code>的概念，這概念其實在 e2e 測試一直被提到，<code>testcafe.js</code> 官網記得也有寫過 page-object 的範例教學，大概就是一個中間層，讓程式碼及測試程式都依賴它，這樣未來 UI 有改，ID 有改，透過 page-object 就可以很快速地調整了，不懂就看<a href=\"https://devexpress.github.io/testcafe/documentation/recipes/extract-reusable-test-code/use-page-model.html\">參考連結</a>吧</p>\n<blockquote>\n<p>現在寫 e2e test 的新歡是 cypress.io，不再是 testcafe.js 了</p>\n</blockquote>\n<h3 id=\"第-11-章-測試驅動你自己的應用\"><a href=\"#第-11-章-測試驅動你自己的應用\" class=\"headerlink\" title=\"第 11 章 - 測試驅動你自己的應用\"></a>第 11 章 - 測試驅動你自己的應用</h3><p>最後這章節大概就是總結這本書的一些重要概念了，其實大部分都還是在說一些老生常談的知識點，如果你也很喜歡探討觀念、這章節應該可以滿足你。</p>\n<p>我基本上只看標題就直接略過了….簡體中文版的另外一個壞處是，標題都可以翻得很難懂</p>\n","categories":["心得"]},{"title":"讀書心得-依賴注入：原理、實作與設計模式","url":"/artblog//dependency-injection-principles-practices-patterns/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>基本上我的讀書心得大概都是看到哪裡寫到哪裡，也很有可能看到一半就忘了這件事情</p>\n<span id=\"more\"></span>\n\n<ol>\n<li><a href=\"https://www.manning.com/books/dependency-injection-principles-practices-patterns\">依賴注入 原理、實作與設計模式</a></li>\n</ol>\n<blockquote>\n<p>Source Code download 可於上述網址中找到連結</p>\n</blockquote>\n<h1 id=\"PART-1-朝著依賴注入邁進\"><a href=\"#PART-1-朝著依賴注入邁進\" class=\"headerlink\" title=\"PART 1 朝著依賴注入邁進\"></a>PART 1 朝著依賴注入邁進</h1><h2 id=\"CH1-依賴注入的基礎：定義、理由與實作方法\"><a href=\"#CH1-依賴注入的基礎：定義、理由與實作方法\" class=\"headerlink\" title=\"CH1 依賴注入的基礎：定義、理由與實作方法\"></a>CH1 依賴注入的基礎：定義、理由與實作方法</h2><blockquote>\n<ol>\n<li>破解對依賴注入的常見誤解</li>\n<li>為何要實作依賴注入</li>\n<li>依賴注入帶來了哪些好處</li>\n<li>何時需要依賴注入</li>\n</ol>\n</blockquote>\n<p>這一章節的學習重點如上，主要是定義了一些名詞，並闡述了一些關於依賴注入的正確觀念，了解這一章的東西我覺得最重要的事情是：<code>獲得正確的概念，讓你在瀏覽別人文章、或是查詢相關知識，都有一個正確的切入點</code>；而對於剛接觸依賴注入的人，也透過一些簡單的例子，試圖用這些日常生活中常見的東西，解釋一些設計模式，並且將依賴注入的觀念帶進來</p>\n<p>我在這一個章節中補充了一些以往不足的基礎觀念；雖然不是這章節的重點，但這本書引用別本書的重點：制式回應(Stub)、模擬器(Mock)或是簡化替身(Fake)等等…這些反而讓我先前很容易混淆的名詞、概念，有更簡單的記憶方法。</p>\n<h2 id=\"CH2-緊耦合架構\"><a href=\"#CH2-緊耦合架構\" class=\"headerlink\" title=\"CH2 緊耦合架構\"></a>CH2 緊耦合架構</h2><blockquote>\n<ol>\n<li>先編寫一份緊耦合架構的應用程式</li>\n<li>評估該應用程式的可重組性程度</li>\n<li>分析該應用程式的組合性缺陷問題</li>\n</ol>\n</blockquote>\n<p>這章節透過情境，引導我們從需求到程式碼，一步一步的見證在每個階段的程式碼，最後，再回過頭來審視這份 Code 有甚麼問題，不得不說，後半段很精采</p>\n<p>有一些東西是已經知道，還有一些東西是沒想過的觀念及問題，他提出的問題包含了幾個面向，並解釋原因：晚期繫結、可擴展性、可維護性、平行開發、可測試性。我覺得再多看幾次這種東西，能夠大幅提升自己<code>Code Review</code>的功力吧，在 CH2 再次提到了幾次<code>不穩定依賴</code>，這個在 CH1 介紹過的名詞，有著他自己的定義，如果不熟悉，最好還是回去溫習一下；而這個章節最後也再次提醒，盡量避免對<code>不穩定依賴</code>的對象緊耦合在一起</p>\n<h2 id=\"CH3-鬆耦合架構\"><a href=\"#CH3-鬆耦合架構\" class=\"headerlink\" title=\"CH3 鬆耦合架構\"></a>CH3 鬆耦合架構</h2><ol>\n<li>以鬆耦合架構重新打造 Mary 的電商網站應用程式</li>\n<li>評估鬆耦合架構應用程式</li>\n<li>對鬆耦合應用程式的剖析</li>\n</ol>\n<p>相較於 CH2，這一章示範了相同的需求，以<code>YAGNI</code>的精神從前端開始，所以一步步的開發都是依據需求，有點<code>TDD</code>的概念，接著一直到<code>Controller</code>裡面先做個假的資料，並讓客戶確認是否合乎需求</p>\n<blockquote>\n<p>關於這個觀念，其實可以發現近年來很多人都提倡這樣的方式在專案中，避免最終開發誠品與客戶需求有落差；不管是前端、後端，都可以運用這樣的方式快速取得回饋。說得明白一點就是我先趕緊弄一版出來，給你看看是不是你要的，如果不行，告訴我哪邊有問題，我趕緊修給你。</p>\n</blockquote>\n<p>在這一章節提到了<code>組合根(Composition Root)</code>，其實就是在程式的最外層，負責建立各個實體類別的地方，以 MVC 網站來說是<code>controller</code>；以<code>Console app</code>來說是<code>Main()</code>之內，在後續的程式碼需要使用的話，就透過方法注入，一層層的給進去</p>\n<p>這章節的範例程式又呼應了<code>CH1</code>提到的重點：<strong>針對介面設計程式，而非實作</strong>，後面的部分都是撰寫程式的一些細節，對於不是很理解的人也可以選擇下載對應的程式碼直接看，這也是我很喜歡的一個部分，因為下載下來的程式碼，他真的可以執行，甚麼都不用在設定，對於需要這份程式碼來學習的人是很有幫助的</p>\n<blockquote>\n<p>就是不會才要看 Code 怎麼實作的，如果連跑都跑不起來，還需要相關知識才能夠排除障礙，就失去了<code>sample code</code>的意義了吧<br>CH3 範例位於<code>DIPPP_source-code\\MarysECommerce</code></p>\n</blockquote>\n<p>下載 Code 執行還有個好處，原本書中的範例我看的總是有點彆扭，因為不符合自己的開發習慣，以下面這個例子來看，我花了很久的時間還是抓不到脈絡</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ViewResult <span class=\"title\">Index</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    IEnumerable&lt;DiscountedProduct&gt; featuredProducts =</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.productService.GetFeaturedProducts();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> FeaturedProductsViewModel(</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">from</span> product <span class=\"keyword\">in</span> featuredProducts</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">select</span> <span class=\"keyword\">new</span> <span class=\"title\">ProductViewModel</span>(<span class=\"params\">product</span>))</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.View(vm);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>改成下面這樣之後，秒懂，所以<code>code style</code>還是很重要的</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ViewResult <span class=\"title\">Index</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    IEnumerable&lt;DiscountedProduct&gt; featuredProducts = <span class=\"keyword\">this</span>.productService.GetFeaturedProducts();</span><br><span class=\"line\">    IEnumerable&lt;ProductViewModel&gt; products = featuredProducts.Select(product =&gt; <span class=\"keyword\">new</span> ProductViewModel(product));</span><br><span class=\"line\">    FeaturedProductsViewModel vm = <span class=\"keyword\">new</span> FeaturedProductsViewModel(products);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> View(vm);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"PART-2-分門別類\"><a href=\"#PART-2-分門別類\" class=\"headerlink\" title=\"PART 2 分門別類\"></a>PART 2 分門別類</h1><h2 id=\"CH4-DI-設計模式\"><a href=\"#CH4-DI-設計模式\" class=\"headerlink\" title=\"CH4 DI 設計模式\"></a>CH4 DI 設計模式</h2><ol>\n<li>利用組合根來組合物件關聯</li>\n<li>利用建構子注入來靜態定義對依賴關係的需求</li>\n<li>利用方法注入在組合根之外的地方滿足依賴關係</li>\n<li>利用屬性注入來定義額外的依賴需求</li>\n<li>如何選擇設計模式</li>\n</ol>\n<p>從這一章節開始會將一些名詞定義出來，並針對這些東西做一個比較深入的解釋，算是非常重要的基本功吧；而且每個部分都講得蠻詳細的，將可能犯的錯誤，為什麼這樣是不好的，以及應該怎麼處理都有提供範例解釋，只是要耐著性子仔細閱讀。這邊的選擇設計模式，其實就是教你如何在各種情境下，選擇注入方式的判斷依據</p>\n<blockquote>\n<p>採用建構子注入的建構子，內容應該只有防衛性語句、保存依賴對象這兩種作業<br>如果有一些依賴是可有可無的，最好可以在組合根提供 null object，避免在程式中判斷這些可有可無的依賴關係而增加複雜度</p>\n</blockquote>\n<p>這一章如果沒有抓到重點，直接看它的小結吧，字字珠璣</p>\n<h2 id=\"CH5-DI-反模式\"><a href=\"#CH5-DI-反模式\" class=\"headerlink\" title=\"CH5 DI 反模式\"></a>CH5 DI 反模式</h2><ol>\n<li>造成程式碼緊耦合的控制狂</li>\n<li>索要依賴對象的服務定位</li>\n<li>把不穩定依賴搞的到處都是的環境物件</li>\n<li>非得用某種識別定義建構子的限制性建構</li>\n</ol>\n<p>這章節提出了四種不是很好，卻又常見的錯誤，單單看名詞是很難理解的，而這個章節會將各種不好的做法都給予範例解釋，而且範例其實都很簡單，原本以為這些東西很難理解，因為用文字解釋的確是很難懂；用程式碼解釋搭配一些簡單的敘述，反而很好理解；但是可能翻譯的關係，一些名詞還是要自己在心裡替換掉才能看懂，總體來說，這一章節雖然有料，也能看懂，但其實後面的部分因為翻譯以及充斥著 IT 的專業名詞，可能會需要多看幾次才能稍微理解，如果真的看不懂或是沒耐心看，我是覺得可以略過</p>\n<blockquote>\n<p>第五章介紹的這幾種<code>anti pattern</code>，實際上都可以透過第四章的某種注入方式取代</p>\n</blockquote>\n<h2 id=\"CH6-程式異樣\"><a href=\"#CH6-程式異樣\" class=\"headerlink\" title=\"CH6 程式異樣\"></a>CH6 程式異樣</h2><ol>\n<li>如何處理建構子過度注入的程式異樣</li>\n<li>辨認並預防抽象工廠模式的濫用</li>\n<li>修正循環依賴的程式異樣</li>\n</ol>\n<p>我個人是把<code>程式異樣(code smell)</code>與<code>程式碼壞味道(bad smell)</code>當作是同樣的事情，意思是程式碼可能有一些問題，或者是可能未來會發生哪些問題的前兆，這個徵兆就是<code>bad smell</code></p>\n<h3 id=\"建構子過度注入\"><a href=\"#建構子過度注入\" class=\"headerlink\" title=\"建構子過度注入\"></a>建構子過度注入</h3><p>第一個部分在解釋建構子過度注入的問題以及解決方案，可以透過<code>facade pattern</code>或是<code>domain event</code>的方式重構，解說的很清楚，圖也畫的很容易理解，但是<code>domain event</code>的概念還沒有很懂，很棒的是，它的範例經過設計，與<code>facade pattern</code>重構結果比對來看，程式碼都是一樣的，就只是依賴的介面不同，兩者交互著看，就比較容易理解，可能要多看幾次才會比較好內化，衝這一波不虧，找時間多看吧</p>\n<h3 id=\"抽象工廠的濫用\"><a href=\"#抽象工廠的濫用\" class=\"headerlink\" title=\"抽象工廠的濫用\"></a>抽象工廠的濫用</h3><p>第二個部分老實說我完全看不懂它中文在說甚麼，直到它給出了錯誤與正確的程式碼範例，其實這也是我在看這種字很多的書的實際閱讀過程：看字看不懂，解釋聽不懂，直接看 Source 比對，哪些是不好的？哪些是好的？差異為何？回過頭去看文字說明，看它是怎麼解釋程式碼的差異部分，接著，如何歸納成自己能理解的文字。再重新看一次書中怎麼描述這件事情的，這會讓我下一次看到這些東西能夠更好的理解成我自己的文字</p>\n<p>書中有一些解釋落於文字，就勢必要寫的很饒舌，很官方；但其實意思用口語說出來，反而很容易理解</p>\n<p>看這一章開始懷疑之前所學的東西，一些我們常在用的開發習慣居然都是<code>bad smell</code>，但其實就跟重構一樣，很多時候它只是一種選擇，只是當時的最佳解，不代表所有的專案都可以這樣子用，具體的還是要看時空環境，學到這些東西，至少讓我再下次遇到的時候，有多一種選擇可以用。</p>\n<h3 id=\"循環依賴\"><a href=\"#循環依賴\" class=\"headerlink\" title=\"循環依賴\"></a>循環依賴</h3><p>這一段的程式碼跟故事有點多，其實我直接看圖而已，循環依賴是我已經理解的東西，所以我在這一部分就略過的比較多，不過如果對於這點不清楚的人，動手照著做一遍範例，應該是能夠理解問題癥結點的，不過後續的幾種解決方案倒是整理的不錯</p>\n<blockquote>\n<p>這一章對於重構的學習有很大幫助，如果可能，我希望這類型的書多出一點</p>\n</blockquote>\n<h1 id=\"PART-3-單純-DI-架構\"><a href=\"#PART-3-單純-DI-架構\" class=\"headerlink\" title=\"PART 3 單純 DI 架構\"></a>PART 3 單純 DI 架構</h1><h2 id=\"CH7-應用程式的物件組合\"><a href=\"#CH7-應用程式的物件組合\" class=\"headerlink\" title=\"CH7 應用程式的物件組合\"></a>CH7 應用程式的物件組合</h2><p>書中為了解釋在應用程式裡面，如何將物件組合起來，特別舉了三個例子</p>\n<ol>\n<li>指令列介面應用程式的物件組合</li>\n<li>通用 Windows 平台應用程式的物件組合</li>\n<li>ASP.NET 核心 MVC 框架應用程式的物件組合</li>\n</ol>\n<p>但是實際上我沒有再寫 UWP，所以是直接略過，只看第一個 Console App 還有最後的.net core 部分；在這兩個部分他都是針對應用程式的起始點開始作為物件組合的地方，在 Console App 裡面想當然就是 program 裡面的 main 方法；而.net core 下，起始點則是在裡面的 main 方法；而 MVC 框架下，起始點則是在 Startup.cs 下。關於這一章節的說明我有點看不懂，反覆看了幾次還是一樣，大概只知道在.net core 下面如何將物件組合起來，反正書中有範例照著做就行了；但也因為目前沒有碰過.net core 實務開發，很多東西又跟 asp.net mvc 不同，所以其實沒什麼感覺也沒什麼想法；我只知道如果未來我想溫習一下.net core 的物件組合方式，可以回來參考一下這一章節，至於 asp.net mvc，希望後面章節會有解決方案，要不然我還是要去 Google 查</p>\n<h2 id=\"CH8-物件生命週期\"><a href=\"#CH8-物件生命週期\" class=\"headerlink\" title=\"CH8 物件生命週期\"></a>CH8 物件生命週期</h2><ol>\n<li>管理依賴對象的生命週期</li>\n<li>處理依賴的廢棄問題</li>\n<li>生命週期型態彙整</li>\n<li>不良生命週期型態</li>\n</ol>\n<p>在吸收這部分的知識之前，要對<a href=\"https://zh.wikipedia.org/wiki/%E4%BD%9C%E7%94%A8%E5%9F%9F\">scope(作用域作用域)</a>、<a href=\"https://docs.microsoft.com/zh-tw/dotnet/standard/garbage-collection/fundamentals\">Garbage Collection(記憶體回收的基本概念)</a>、<code>Reference</code>要有一點基本認識，就能看懂書裡面的解釋。接著就是探討被注入的物件，是共用還是各自獨立？這些都會影響到被注入的物件的生命週期；各自獨立就只需要使用端離開scope就可以回收；共用則是需要等到所有使用端都離開scope才會回收。</p>\n<blockquote>\n<p>但是書裡面會用一些比喻來解釋這件事情，我真心覺得難以理解，可能有人覺得調酒師、餐廳用餐的例子很好懂吧，但我卻是越看越模糊，最後是根本不看他的這些比喻，直接跳過，看他直接解釋技術還比較不容易混淆。</p>\n</blockquote>\n<p>在解釋完<code>生命週期</code>這件事情後，接著要探討的是在單純DI架構下管理生命週期這件事情，這裡用上一章節的code來解釋<code>一次性</code>的生命週期，所以我又回去翻了第七章，其實也很好懂，而且在CH8也為這個範例做了一個物件關聯圖，比對書裡面的解釋更容易理解；這裡有一個重點就是無狀態的類別，可以考慮用<code>singleton</code>來實作；並且在後續的章節也說明了為何在.Net裡面我們通常不自己實作<code>IDisposable</code>介面，但是如果是開發WCF，需要注意的東西就不太一樣了。</p>\n<p>接著後面如何處理依賴的廢棄問題，其實重點就是在組合根的地方來觸發物件關聯的建立與釋放。細節還有anti pattern在書裏面都有提，但我沒看懂，就光記結論了<br>然後就是介紹一下生命週期型態，也就是<code>單例型態</code>、<code>一次性型態</code>、<code>作用域型態</code>這三種，然後給出了一些重點及範例；並且在這章節的最後也介紹了不良的生命週期型態，這幾種都有給出範例。</p>\n<h2 id=\"CH9-介入攔截\"><a href=\"#CH9-介入攔截\" class=\"headerlink\" title=\"CH9 介入攔截\"></a>CH9 介入攔截</h2><p>TBD</p>\n<h2 id=\"CH10-設計面上的剖面導向程式設計\"><a href=\"#CH10-設計面上的剖面導向程式設計\" class=\"headerlink\" title=\"CH10 設計面上的剖面導向程式設計\"></a>CH10 設計面上的剖面導向程式設計</h2><p>TBD</p>\n<h2 id=\"CH11-以工具實作的剖面導向程式設計\"><a href=\"#CH11-以工具實作的剖面導向程式設計\" class=\"headerlink\" title=\"CH11 以工具實作的剖面導向程式設計\"></a>CH11 以工具實作的剖面導向程式設計</h2><p>TBD</p>\n<h1 id=\"PART-4-DI-容器技術\"><a href=\"#PART-4-DI-容器技術\" class=\"headerlink\" title=\"PART 4 DI 容器技術\"></a>PART 4 DI 容器技術</h1><h2 id=\"CH12-DI-容器\"><a href=\"#CH12-DI-容器\" class=\"headerlink\" title=\"CH12 DI 容器\"></a>CH12 DI 容器</h2><p>TBD</p>\n<h2 id=\"CH13-DI-容器介紹：Autofac\"><a href=\"#CH13-DI-容器介紹：Autofac\" class=\"headerlink\" title=\"CH13 DI 容器介紹：Autofac\"></a>CH13 DI 容器介紹：Autofac</h2><p>TBD</p>\n<h2 id=\"CH14-DI-容器介紹：Simple-Injector\"><a href=\"#CH14-DI-容器介紹：Simple-Injector\" class=\"headerlink\" title=\"CH14 DI 容器介紹：Simple Injector\"></a>CH14 DI 容器介紹：Simple Injector</h2><p>TBD</p>\n<h2 id=\"CH15-DI-容器介紹：Microsoft-Extensions-DependencyInjection\"><a href=\"#CH15-DI-容器介紹：Microsoft-Extensions-DependencyInjection\" class=\"headerlink\" title=\"CH15 DI 容器介紹：Microsoft.Extensions.DependencyInjection\"></a>CH15 DI 容器介紹：Microsoft.Extensions.DependencyInjection</h2><p>TBD</p>\n","categories":["心得"],"tags":["DI"]},{"title":"連線字串加密的方式","url":"/artblog//encrypt-connection-string/","content":"<p>通常網站都會與資料庫溝通，也因此在 csharp 的專案設定檔，我們大都會將連線字串寫在這裡，便於程式調用，但資料庫連線字串包含了帳號密碼，直接寫在設定組態檔是一個資安漏洞<br>為了不要讓明碼直接暴露出去，我們這裡最好做一些防護措施，利用演算法將明文加密，等到要用的時候再解密出來。</p>\n<p>當然這樣的做法還是有風險的，因為加解密的 Key、IV 也還是一樣都放在組態檔內，所以這只能說是一個初步的防護方式</p>\n<span id=\"more\"></span>\n\n<h2 id=\"連線字串加密\"><a href=\"#連線字串加密\" class=\"headerlink\" title=\"連線字串加密\"></a>連線字串加密</h2><p>先透過一組金鑰 (public key, private key)來作加密、解密，有興趣的可以透過<a href=\"https://www.devglan.com/online-tools/rsa-encryption-decryption\">Online RSA Encryption, Decryption And Key Generator Tool</a>來測試一下</p>\n<p>需要先將需要保護的連線字串加密，然後將這個加密過後的字串，放到<code>web.config</code>裡面，等到程式需要資料庫連線的時候，取得加密字串後再針對他進行解密即可，搭配上 web.config 的連線字串<code>lockItem</code>設定使用。思路已經有了，所以具體的步驟大概就是要做</p>\n<ol>\n<li>Key、IV</li>\n<li>加解密函式</li>\n<li>判斷是否需要執行解密</li>\n</ol>\n<h3 id=\"Key、IV\"><a href=\"#Key、IV\" class=\"headerlink\" title=\"Key、IV\"></a>Key、IV</h3><p>這邊直接使用網路上的範例，相關知識可以參考一下這兩篇文章</p>\n<ol>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10187947\">Day14 資料使用安全(保護連接字串)上</a></li>\n<li><a href=\"http://vito-note.blogspot.com/2012/05/1.html\">資料的加密與解密(1)-對稱金鑰加密演算法</a></li>\n</ol>\n<p>config 設定</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appSettings</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;hashKey&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;金鑰喔金鑰喔金鑰喔金鑰喔&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;iv&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;加密向量初始資料&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">appSettings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"加解密函式\"><a href=\"#加解密函式\" class=\"headerlink\" title=\"加解密函式\"></a>加解密函式</h3><figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Decryption</span>(<span class=\"params\"><span class=\"built_in\">string</span> CipherText,<span class=\"built_in\">string</span> hashKey,<span class=\"built_in\">string</span> iv</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> (Aes aesAlg = Aes.Create())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        aesAlg.Key = Encoding.Unicode.GetBytes(hashKey);</span><br><span class=\"line\">        aesAlg.IV = Encoding.Unicode.GetBytes(iv);</span><br><span class=\"line\">        ICryptoTransform decrypt = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);</span><br><span class=\"line\">        <span class=\"built_in\">byte</span>[] decrypted = decrypt.TransformFinalBlock(Convert.FromBase64String(CipherText), <span class=\"number\">0</span>, Convert.FromBase64String(CipherText).Length);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Encoding.Unicode.GetString(decrypted);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Encryption</span>(<span class=\"params\"><span class=\"built_in\">string</span> PlainText,<span class=\"built_in\">string</span> hashKey, <span class=\"built_in\">string</span> iv</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> (Aes aesAlg = Aes.Create())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        aesAlg.Key = Encoding.Unicode.GetBytes(hashKey);</span><br><span class=\"line\">        aesAlg.IV = Encoding.Unicode.GetBytes(iv);</span><br><span class=\"line\">        ICryptoTransform encrypt = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);</span><br><span class=\"line\">        <span class=\"built_in\">byte</span>[] encrypted = encrypt.TransformFinalBlock(Encoding.Unicode.GetBytes(PlainText), <span class=\"number\">0</span>,</span><br><span class=\"line\">            Encoding.Unicode.GetBytes(PlainText).Length);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Convert.ToBase64String(encrypted);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"判斷是否需要執行解密\"><a href=\"#判斷是否需要執行解密\" class=\"headerlink\" title=\"判斷是否需要執行解密\"></a>判斷是否需要執行解密</h3><p>直接取得連線字串的 function 當中判斷處理</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">string</span> <span class=\"title\">GetVersion</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> connectionString = GetConnectionString(<span class=\"string\">&quot;db&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> commandText = <span class=\"string\">&quot;select @@version&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> cnn = <span class=\"keyword\">new</span> MySqlConnection(connectionString))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cnn.Query&lt;<span class=\"built_in\">string</span>&gt;(commandText).FirstOrDefault();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">GetConnectionString</span>(<span class=\"params\"><span class=\"built_in\">string</span> name</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> connectionString = ConfigurationManager.ConnectionStrings[name];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> source = connectionString.ConnectionString;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (connectionString.LockItem)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> hashKey = ConfigurationManager.AppSettings[<span class=\"string\">&quot;hashKey&quot;</span>];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> iv = ConfigurationManager.AppSettings[<span class=\"string\">&quot;iv&quot;</span>];</span><br><span class=\"line\">        source = Decryption(source, hashKey, iv);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> source;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Sample-Code\"><a href=\"#Sample-Code\" class=\"headerlink\" title=\"Sample Code\"></a>Sample Code</h3><p><img src=\"/artblog/encrypt-connection-string/2020-03-04_113723.png\"><br><a href=\"https://github.com/art-Blog/CryptoConnStrDemo\">Github</a></p>\n<h2 id=\"組態檔案加密\"><a href=\"#組態檔案加密\" class=\"headerlink\" title=\"組態檔案加密\"></a>組態檔案加密</h2><p>透過 aspnet_regiis.exe 來處理，需要透過管理員權限來執行喔</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">透過 aspnet_regiis將 指定目錄下的 web.config 當中的 appSettings 區段加密</span></span><br><span class=\"line\">aspnet_regiis -pef appSettings D:\\code\\Github\\Repos\\CryptoConnStrDemo\\CryptoConnStrDemo</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">同上，參數改為 pdf 則為解密</span></span><br><span class=\"line\">aspnet_regiis -pdf appSettings D:\\code\\Github\\Repos\\CryptoConnStrDemo\\CryptoConnStrDemo</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/encrypt-connection-string/2020-03-04_121656.png\"></p>\n<p>如果要在本機測試的話，需要先將 Visual Studio 在建置的時候使用 local 的 IIS，而非 IISExpress</p>\n<p>如果需要將本機的 RSA 金鑰容器給別台主機使用，則需要先將金鑰容器匯出，再由別的主機匯入使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">匯出</span></span><br><span class=\"line\">aspnet_regiis -px &quot;NetFrameworkConfigurationKey&quot; D:/RSAkeys.xml -pri</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">匯入</span></span><br><span class=\"line\">aspnet_regiis -pi &quot;NetFrameworkConfigurationKey&quot; D:/RSAkeys.xml</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h3><ol>\n<li><a href=\"https://www.itread01.com/content/1549832402.html\">配置檔案（Web.Config）加密解密詳細說明</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10188072\">Day15 資料使用安全(保護連接字串)下</a></li>\n<li><a href=\"https://dotblogs.com.tw/wasichris/2016/01/01/235040\">ASP.NET 使用相同 RSA 金鑰容器幫 web.config 連線字串加密</a></li>\n</ol>\n","categories":["csharp"],"tags":["web.config"]},{"title":"Jenkins-專案權限管理","url":"/artblog//jenkins-project-permission-management/","content":"<p>jenkins 的專案權限管理練習，之所以會弄這個是因為專案越來越多的話，針對組織內的使用者及專案之間的權限管理，如果還是一個個的設定，不僅容易出錯，也難以整體的確認當前分配的權限概況。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h2><p>專案如果採用的是<code>Matrix Authorization Strategy</code>這個 plugin 所提供的<code>專案型矩陣授權策略</code>的話，應該也很納悶 Role 怎麼設定，據我找到的這篇文章<a href=\"https://www.cnblogs.com/grey-wolf/p/8951796.html\">Jenkins 权限管理之 Matrix Authorization Strategy</a>來看的話，說是要靠 LDAP 或是 Active Directory 來做，這就牽涉到我不熟悉的網管、主機、域名等等的設定，坦白說這東西對我就是天書。我不可能為了吃一碗麵還去研究要怎麼鑽木取火、把麵團發酵吧。</p>\n<p><img src=\"/artblog/jenkins-project-permission-management/2022-11-25-105842.jpg\"></p>\n<blockquote>\n<p>REF:<a href=\"https://stackoverflow.com/questions/11855944/how-to-create-and-add-users-to-a-group-in-jenkins-for-authentication\">How to create and add users to a group in Jenkins for authentication?</a></p>\n</blockquote>\n<p>在該文章得到另外一個關鍵字：<code>Role-based Authorization Strategy</code>，於是就來研究一下怎麼設定這個 plugin</p>\n<h2 id=\"Role-based-Authorization-Strategy\"><a href=\"#Role-based-Authorization-Strategy\" class=\"headerlink\" title=\"Role-based Authorization Strategy\"></a>Role-based Authorization Strategy</h2><p>在<a href=\"https://plugins.jenkins.io/role-strategy/\">Role-based Authorization Strategy</a>的介紹網頁中可以看到基本的用法，大致上的流程就是:安裝-&gt;啟用-&gt;設定角色群組-&gt;設定使用者角色對應</p>\n<h3 id=\"安裝並啟用\"><a href=\"#安裝並啟用\" class=\"headerlink\" title=\"安裝並啟用\"></a>安裝並啟用</h3><p>安裝套件這個沒有什麼好說的，啟用也很簡單，不外乎就是到<code>管理jenkins</code>-&gt;<code>設定全域安全性</code>這邊將<code>授權</code>的下拉選單，從原先的<code>專案型矩陣授權</code>改為<code>Role-Based Strategy</code><br><img src=\"/artblog/jenkins-project-permission-management/2022-11-25-110453.jpg\"></p>\n<p>值得一提的是，當你的授權策略改變的話，原先在各個專案的矩陣授權設定，就會一併隱藏起來，若未來調整回來<code>專案型矩陣授權</code>的話，這些被隱藏的授權設定也會回復，至少這個是我測試出來的經驗啦，這樣的話就比較不害怕改壞掉要切回來，然後設定全部消失的窘境，不過因為軟體版本太多，所以最好在調整的時候自己先測試、備份一下原有的專案設定，以免發生了不可挽回的操作，人生跑馬燈就會出現了。</p>\n<h3 id=\"設定角色群組及角色對應\"><a href=\"#設定角色群組及角色對應\" class=\"headerlink\" title=\"設定角色群組及角色對應\"></a>設定角色群組及角色對應</h3><p>接著到<code>管理jenkins</code>-&gt;<code>Security</code>-&gt;<code>Manage and Assign Roles</code><br><img src=\"/artblog/jenkins-project-permission-management/2022-11-25-111205.jpg\"><br>會看到設定角色群組、指派角色的功能<br><img src=\"/artblog/jenkins-project-permission-management/2022-11-25-111322.jpg\"></p>\n<p>設定有一點點的難懂，但是測試了一下發現的確是挺不錯的，他的設定有三個部分，這邊先關注在<code>Global Roles</code>、<code>Item Roles</code>這兩項就可以了，最後一項<code>Node Rules</code>我還是沒看懂，或許有人可以分享一下？</p>\n<h2 id=\"設定範例\"><a href=\"#設定範例\" class=\"headerlink\" title=\"設定範例\"></a>設定範例</h2><p>我覺得用範例來解釋會比較好懂，假設我有專案叫做</p>\n<ol>\n<li><code>pipeline_job_1</code></li>\n<li><code>pipeline_job_2</code></li>\n<li><code>taskProject</code></li>\n</ol>\n<p>我想要達成的效果是</p>\n<ol>\n<li>沒有特別設定的話，一般的使用者就是只能看到<code>pipeline_job</code>任務，但是不能夠操作</li>\n<li>開發人員(develop)可以執行<code>pipeline_job</code>任務，但是看不到建置設定</li>\n<li>管理人員(manager)針對<code>pipeline_job</code>任務具備所有權限</li>\n<li>所有的人都看不到<code>taskProject</code>，除了 admin</li>\n</ol>\n<p>所以整理完需求，描述大概就是像下面這樣</p>\n<table>\n<thead>\n<tr>\n<th>使用者</th>\n<th>權限</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>art</td>\n<td>最高管理者(admin)阿，全部打開！！</td>\n</tr>\n<tr>\n<td>demouser1</td>\n<td>pipeline_job 專案的管理者(manager)</td>\n</tr>\n<tr>\n<td>demouser2</td>\n<td>pipeline_job 專案的開發人員(develop)</td>\n</tr>\n<tr>\n<td>demouser3</td>\n<td>什麼都看不到</td>\n</tr>\n</tbody></table>\n<p>那麼，我就需要</p>\n<ol>\n<li>針對超級管理者 art 給予全域的超級管理者(admin)權限</li>\n<li>針對管理者 demouser1 作一個管理者(manager)，這個設定對應的專案是 pipeline_job_1 跟 2，且權限都開</li>\n<li>針對開發人員 demouser2 作一個開發人員(develop)，這個設定對應的專案是 pipeline_job_1 跟 2，且權限是 build 跟 read</li>\n<li>最後，針對一般使用者給予全域的什麼都看不到(anyone)的權限</li>\n</ol>\n<p>整理一下就是</p>\n<table>\n<thead>\n<tr>\n<th>scope</th>\n<th>role</th>\n<th>permission</th>\n<th>for who?</th>\n<th>result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>全域</td>\n<td>admin</td>\n<td>全開</td>\n<td>art</td>\n<td>所有權限</td>\n</tr>\n<tr>\n<td>全域</td>\n<td>anyone</td>\n<td>僅給予整體的 read</td>\n<td>沒有特別設定的人</td>\n<td>進來介面什麼都沒有</td>\n</tr>\n<tr>\n<td>pipeline_job_1 跟 2</td>\n<td>Develop</td>\n<td>允許 build , read</td>\n<td>demouser2</td>\n<td>可以執行 pipeline_job_1 跟 2</td>\n</tr>\n<tr>\n<td>pipeline_job_1 跟 2</td>\n<td>Manager</td>\n<td>允許該專案所有操作</td>\n<td>demouser1</td>\n<td>可以執行所有操作</td>\n</tr>\n</tbody></table>\n<p>我們先搞定全域的兩個設定，分別是 admin 跟 anyone<br><img src=\"/artblog/jenkins-project-permission-management/2022-11-25-115715.jpg\"></p>\n<p>接著指派給使用者，因為只有 art 所以只需要指派一個，其他的人就不用特別指派了<br><img src=\"/artblog/jenkins-project-permission-management/2022-11-25-115856.jpg\"></p>\n<p>透過正則表達式去比對我們要符合的<code>pipeline_job_1</code>、<code>pipeline_job_2</code>這兩個專案，所以 <code>pattern</code> 就是 <code>pipeline_job.*</code>，因為這樣很直觀所以我也沒打算寫得很複雜的 pattern，設定的話就像下面這樣<br><img src=\"/artblog/jenkins-project-permission-management/2022-11-25-120152.jpg\"></p>\n<p>可以測試一下 pattern match 哪些專案，點一下就可以看到，如果你屬於 regex 之神的話，可以當我沒說<br><img src=\"/artblog/jenkins-project-permission-management/2022-11-25-120313.jpg\"></p>\n<p>指派使用者，將 demouser1 套用 manager， demouser2 套用 develop<br><img src=\"/artblog/jenkins-project-permission-management/2022-11-25-120418.jpg\"></p>\n<p>這邊的群組名稱可以命名的更清晰一點，方便管理，例如專案叫做 SuperStar，管理者就可以命名為 SuperStarManager，開發人員就可以命名為 SuperStarDevelop；又或者是你們專案有 SuperStar，TravelToday 都是同一組人，這個團隊叫做 TeamA，那其實也可以把群組名稱命名為 TeamA-Manager 之類的，總之就是讓人一看就知道這個群組是誰，責任範疇在哪裡。千萬不要真的傻傻的明明一個團隊要負責十個專案，結果十個專案還都有各自的 Manager 跟 Develop 或是其他一堆有的沒有的權限，然後搞個每次設定那個清單排到 1920 螢幕寬度都還看不完，那就累人了，不過如果真的硬要好像也是可以拉～（笑）</p>\n<p>那麼最後來測試一下每一位使用者登入後的情況，看看是否如我們預期</p>\n<p>art，所有專案功能都開放<br><img src=\"/artblog/jenkins-project-permission-management/2022-11-25-122544.jpg\"></p>\n<p>demo user 1，可以看到 pipeline_job 專案，可以執行且能夠設定建置<br><img src=\"/artblog/jenkins-project-permission-management/2022-11-25-122359.jpg\"><br><img src=\"/artblog/jenkins-project-permission-management/2022-11-25-122243.jpg\"></p>\n<p>demo user 2，可以看到 pipeline_job 專案，可以執行但是不能夠設定建置<br><img src=\"/artblog/jenkins-project-permission-management/2022-11-25-121842.jpg\"><br><img src=\"/artblog/jenkins-project-permission-management/2022-11-25-122443.jpg\"></p>\n<p>demo user 3，應該是什麼都看不到<br><img src=\"/artblog/jenkins-project-permission-management/2022-11-25-121329.jpg\"></p>\n<h2 id=\"補充：切換回『專案型矩陣授權策略』\"><a href=\"#補充：切換回『專案型矩陣授權策略』\" class=\"headerlink\" title=\"補充：切換回『專案型矩陣授權策略』\"></a>補充：切換回『專案型矩陣授權策略』</h2><p>如果設定之後因故，老闆叫你先還原呢？那就直接把一開始提到的<code>管理jenkins</code>-&gt;<code>設定全域安全性</code>這邊將<code>授權</code>的下拉選單，再改回來<code>專案型矩陣授權</code>就好了，以<code>pipeline_job_1</code>為例，我在調整之前有把權限給予好幾個 user，調整回來後，設定也回來了</p>\n<p><img src=\"/artblog/jenkins-project-permission-management/2022-11-25-122852.jpg\"></p>\n<p>當然，這個步驟再次強調，希望還是要在你自己的環境作一下簡單的 POC 測試，但是如果切回來後還想要切過去<code>Role-based</code>，那麼剛剛設定的就會全部清空，需要全部再重新建立了；雖說是全部重新建立，但其實因為設定也就在兩個頁面的地方，其實如果有做好備份、截圖，甚至用 EXCEL 記錄好有哪些權限設定、群組，其實設定也不繁瑣。</p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>作為一個老牌的軟體，jenkins 是真的很多工具可以用，出問題想找資料也很多，這也是我喜歡 jenkins 的原因，好用的東西功能自然複雜，設定自然就困難，瞭解概念再去處理，自然事半功倍。這也是我整理這篇文章的原因，叫我看官方那一串我真的會看半天還是看不懂。自己 RUN 過一次記錄一下，以後我肯定還會碰上這個問題忘記怎麼設定的。也算救救未來的自己了</p>\n","categories":["devOps"],"tags":["jenkins"]},{"title":"NET6 Core distributed tracing","url":"/artblog//NET6-Core-distributed-tracing/","content":"<p><strong>分散式追蹤系統</strong></p>\n<p>系統架構從單體轉變成微服務之後，使用者發出的單次請求往往會涉及到多個服務之間的呼叫，以往採用的日誌服務也較難以窺見全貌，當我們需要追蹤某一次請求中間發生了那些事情，我們期望能獲取的資訊不外乎是這次的請求，總共經過哪些服務，每個服務花費了多久的時間，呼叫的順序等等，這就是分散式追蹤系統能夠幫我們做到的事情。只不過每一家系統的 API 都不太一樣，所以 <code>W3C</code> 也有提供一份<a href=\"https://www.w3.org/TR/trace-context/\">Trace Context - W3C</a>，讓大家都用同一個標準來實現分散式追蹤。</p>\n<p>在這之前看到一堆像是 <code>RequestId</code>, <code>TraceId</code>, <code>SpanId</code>, <code>ParentId</code>, <code>ActionId</code>，可能還有很多我沒有列出來的名詞，真的是有看沒有懂，現在至少可以從 W3C 的建議中明確知道一些名詞與他們的用途，其他的應該就是各家廠商自己的定義了，那就有用到再說囉</p>\n<span id=\"more\"></span>\n\n<h2 id=\"說明\"><a href=\"#說明\" class=\"headerlink\" title=\"說明\"></a>說明</h2><p>依據 <a href=\"https://www.w3.org/TR/trace-context/\">Trace Context - W3C</a>。這份建議提供了一個標準的定義，讓各家廠商可以遵循，使得各家的追蹤系統可以不在各自為政。所以在<code>version</code>為<code>00</code>的情況下，<code>traceparent</code>的格式就是下面這四個東西的組成</p>\n<ol>\n<li>version</li>\n<li>trace-id</li>\n<li>parent-id&#x2F;span-id</li>\n<li>trace-flags</li>\n</ol>\n<p>所以整個概念就像是下面這張圖一樣</p>\n<p><img src=\"/artblog/NET6-Core-distributed-tracing/propagation-fields.jpg\"></p>\n<blockquote>\n<p>圖片取自<a href=\"https://dev.to/luizhlelis/using-w3c-trace-context-standard-in-distributed-tracing-3743\">Using W3C Trace Context standard in distributed tracing</a></p>\n</blockquote>\n<p>這條呼叫鍊上，則是共用同一個 <code>traceId</code>，每一個應用程式自己的 <code>scope</code> 就是用相同的 <code>spanId</code>，在這條呼叫鍊的下一個應用程式則會是另外一個 <code>spanId</code>，前一個應用程式需要將 <code>traceparent</code>、<code>tracestate</code> 這兩個 header 資訊正確的傳遞給下一個應用程式。</p>\n<h2 id=\"事前準備\"><a href=\"#事前準備\" class=\"headerlink\" title=\"事前準備\"></a>事前準備</h2><h3 id=\"日誌服務-Seq\"><a href=\"#日誌服務-Seq\" class=\"headerlink\" title=\"日誌服務:Seq\"></a><a href=\"https://datalust.co/seq\">日誌服務:Seq</a></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># create volume folder</span><br><span class=\"line\">mkdir -p D:\\docker-volumes\\seq</span><br><span class=\"line\"></span><br><span class=\"line\"># docker-cli</span><br><span class=\"line\">docker run --name seq -d --restart unless-stopped -e ACCEPT_EULA=Y -v D:\\docker-volumes\\seq:/data -p 8090:80 -p 5341:5341 datalust/seq</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>REF:<a href=\"https://partypeopleland.github.io/artblog/2022/03/23/logging-using-serilog-and-seq/\">使用 Serilog 和 Seq 紀錄 Log</a></p>\n</blockquote>\n<h3 id=\"分佈式追踪系統-zipkin\"><a href=\"#分佈式追踪系統-zipkin\" class=\"headerlink\" title=\"分佈式追踪系統:zipkin\"></a><a href=\"https://zipkin.io/\">分佈式追踪系統:zipkin</a></h3><p>直接使用下列指令可以透過 docker 執行 zipkin，資料則是暫時儲存於記憶體中不保留，若需要保留資料，<code>zipkin</code>也支援<code>elasticSearch</code>、<code>mySql</code>、<code>cassandra</code></p>\n<blockquote>\n<p>REF:<a href=\"https://github.com/openzipkin/zipkin/blob/master/zipkin-server/README.md#storage\">Storage - zipkin Github</a></p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 9411:9411 openzipkin/zipkin-slim:2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"測試專案\"><a href=\"#測試專案\" class=\"headerlink\" title=\"測試專案\"></a>測試專案</h3><p><strong>測試目標</strong><br>確認當前 .NET6 Web 網站是否有遵循 W3C 的 <a href=\"https://www.w3.org/TR/trace-context/\">traceparent context</a></p>\n<p><strong>測試情境</strong></p>\n<p>測試環境由三個應用程式構成</p>\n<p><code>Web(clientApp) -&gt; Proxy(FrontEndApp) -&gt; WebAPI(BackEndApp)</code></p>\n<p>範例程式碼:<a href=\"https://github.com/partypeopleland/distributed-tracing-demo\">Github:distributed-tracing-demo</a></p>\n<p>使用者透過瀏覽器開啟網頁，<code>Web</code> 從後端呼叫 <code>Proxy</code>，而 <code>Proxy</code> 則轉發請求給 <code>WebAPI</code> 查詢取得資料後回應給使用者</p>\n<p><strong>測試步驟</strong></p>\n<p>開啟 <code>clientApp</code> 之後，透過中斷點檢視 <code>FrontEndApp</code> 跟 <code>BackEndApp</code> 的 request Header</p>\n<p><strong>frontEnd Header</strong></p>\n<p><img src=\"/artblog/NET6-Core-distributed-tracing/header-init-frontapp.jpg\"></p>\n<p><strong>backEnd Header</strong></p>\n<p><img src=\"/artblog/NET6-Core-distributed-tracing/header-init-backend.jpg\"></p>\n<p>可以注意到 header 裡面的 keyValuePair 有一組是<code>traceparent</code> , <code>00-6ef05abe949ce579cc110ab5b289df14-be6d36f4ecc27214-00</code></p>\n<blockquote>\n<p><code>traceparent</code>的格式為 <code>version &quot;-&quot; version-format</code>，而<code>version-format</code>在<code>version</code>為<code>00</code>的定義，又由三個部分組成<code>trace-id &quot;-&quot; parent-id &quot;-&quot; trace-flags</code></p>\n</blockquote>\n<h2 id=\"實作分佈式跟踪\"><a href=\"#實作分佈式跟踪\" class=\"headerlink\" title=\"實作分佈式跟踪\"></a>實作分佈式跟踪</h2><h3 id=\"實作日誌紀錄\"><a href=\"#實作日誌紀錄\" class=\"headerlink\" title=\"實作日誌紀錄\"></a>實作日誌紀錄</h3><p>接下來的就是要將這些資訊放到日誌服務 <code>Seq</code> 之內，此處選擇使用 <code>Serilog</code> 套件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># dotnet Core Serilog 套件</span><br><span class=\"line\">dotnet add package Serilog.AspNetCore</span><br><span class=\"line\"># 讓 Log 可以在 Console 顯示</span><br><span class=\"line\">dotnet add package Serilog.Sinks.Console</span><br><span class=\"line\"># 讓 Log 可以送到 Seq</span><br><span class=\"line\">dotnet add package Serilog.Sinks.Seq</span><br><span class=\"line\"># 使其支援 W3C traceparent</span><br><span class=\"line\">dotnet add package Serilog.Enrichers.Span</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// program.cs</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> Serilog;</span><br><span class=\"line\"></span><br><span class=\"line\">Log.Logger = <span class=\"keyword\">new</span> LoggerConfiguration()</span><br><span class=\"line\">    .MinimumLevel.Debug()</span><br><span class=\"line\">    .MinimumLevel.Override(<span class=\"string\">&quot;Microsoft&quot;</span>, LogEventLevel.Information)</span><br><span class=\"line\">    <span class=\"comment\">// .MinimumLevel.Override(&quot;Microsoft.AspNetCore&quot;, LogEventLevel.Warning)</span></span><br><span class=\"line\">    .Enrich.WithSpan()</span><br><span class=\"line\">    .WriteTo.Console()</span><br><span class=\"line\">    .WriteTo.Seq(<span class=\"string\">&quot;http://localhost:5341&quot;</span>)</span><br><span class=\"line\">    .CreateLogger();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 原先內容</span></span><br><span class=\"line\">    <span class=\"comment\">// ... 略</span></span><br><span class=\"line\">    builder.Host.UseSerilog();</span><br><span class=\"line\">    <span class=\"comment\">// ... 略</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Log.Fatal(ex, <span class=\"string\">&quot;Host terminated unexpectedly&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">finally</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Log.CloseAndFlush();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"確認-Seq-是否有紀錄到正確資訊\"><a href=\"#確認-Seq-是否有紀錄到正確資訊\" class=\"headerlink\" title=\"確認 Seq 是否有紀錄到正確資訊\"></a>確認 Seq 是否有紀錄到正確資訊</h3><p>開啟 frontEndApp 跟 backendApp，並透過中斷點檢視 <code>backendApp</code>所接收到的 <code>traceparent</code><br><img src=\"/artblog/NET6-Core-distributed-tracing/header-trace-backend.jpg\"></p>\n<p>接著到 <code>seq</code> 查看是否有紀錄<code>TraceId</code>及<code>SpanId</code><br><img src=\"/artblog/NET6-Core-distributed-tracing/seq-trace-backend.jpg\"></p>\n<p><img src=\"/artblog/NET6-Core-distributed-tracing/seq-trace-all.jpg\"></p>\n<h3 id=\"使用-zipkin-檢視-tracing-紀錄\"><a href=\"#使用-zipkin-檢視-tracing-紀錄\" class=\"headerlink\" title=\"使用 zipkin 檢視 tracing 紀錄\"></a>使用 zipkin 檢視 tracing 紀錄</h3><p>安裝 nuget 套件(照著套件名稱搜尋，並勾選 <code>prerelease</code>)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">&quot;OpenTelemetry.Exporter.OpenTelemetryProtocol&quot;</span> <span class=\"attr\">Version</span>=<span class=\"string\">&quot;1.2.0-rc5&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">&quot;OpenTelemetry.Exporter.OpenTelemetryProtocol.Logs&quot;</span> <span class=\"attr\">Version</span>=<span class=\"string\">&quot;1.0.0-rc9.2&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">&quot;OpenTelemetry.Exporter.Zipkin&quot;</span> <span class=\"attr\">Version</span>=<span class=\"string\">&quot;1.2.0-rc5&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">&quot;OpenTelemetry.Extensions.Hosting&quot;</span> <span class=\"attr\">Version</span>=<span class=\"string\">&quot;1.0.0-rc9.2&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">&quot;OpenTelemetry.Instrumentation.AspNetCore&quot;</span> <span class=\"attr\">Version</span>=<span class=\"string\">&quot;1.0.0-rc9.2&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">&quot;OpenTelemetry.Instrumentation.Http&quot;</span> <span class=\"attr\">Version</span>=<span class=\"string\">&quot;1.0.0-rc9.2&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>將應用程式的資料直接透過 exporter 傳遞給 zipkin</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// program.cs</span></span><br><span class=\"line\">    <span class=\"comment\">// .略.</span></span><br><span class=\"line\">    builder.Services.AddControllersWithViews();</span><br><span class=\"line\">    builder.Services.AddOpenTelemetryTracing(b =&gt; b</span><br><span class=\"line\">        .SetResourceBuilder(ResourceBuilder.CreateDefault().AddService(builder.Configuration.GetValue&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">&quot;Zipkin:ServiceName&quot;</span>)))</span><br><span class=\"line\">        .AddAspNetCoreInstrumentation()</span><br><span class=\"line\">        .AddZipkinExporter());</span><br></pre></td></tr></table></figure>\n\n<p><code>appsetting.json</code>裡面的<code>ServiceName</code>是提供給 zipkin 顯示的服務名稱</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//appsetting.json</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// .略.</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;Zipkin&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;ServiceName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;frontendApp&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Endpoint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://localhost:9411/api/v2/spans&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/NET6-Core-distributed-tracing/zipkin.jpg\"></p>\n<h2 id=\"REF\"><a href=\"#REF\" class=\"headerlink\" title=\"REF\"></a>REF</h2><ol>\n<li><a href=\"https://www.w3.org/TR/trace-context/#traceparent-header\">3.2 Traceparent Header - W3C</a></li>\n<li><a href=\"https://github.com/RehanSaeed/Serilog.Enrichers.Span\">Serilog.Enrichers.Span - Github</a></li>\n<li><a href=\"https://dev.to/luizhlelis/using-w3c-trace-context-standard-in-distributed-tracing-3743\">Using W3C Trace Context standard in distributed tracing</a></li>\n<li><a href=\"https://devblogs.microsoft.com/dotnet/improvements-in-net-core-3-0-for-troubleshooting-and-monitoring-distributed-apps/\">Improvements in .NET Core 3.0 for troubleshooting and monitoring distributed apps</a></li>\n<li><a href=\"https://github.com/openzipkin/zipkin/tree/master/docker\">zipkin Docker images - Github</a></li>\n<li><a href=\"https://blog.yowko.com/aspdotnet-core-opentelemetry-zipkin/\">使用 OpenTelemetry 來追蹤 ASP.NET Core</a></li>\n</ol>\n"},{"title":"Selenium - FullPage ScreenShot","url":"/artblog//Selenium-FullPage-ScreenShot/","content":"<p>採用 Selenium + ChromeDriver 實作網頁快照功能，雖然 FirefoxDriver 好像有一個可以截完整頁面的方法可以用，但平常沒用 FireFox 也不想安裝，直接使用 Chrome 的 CDP Command 來處理截圖</p>\n<span id=\"more\"></span>\n\n<p>大概就是因為之前的排程有時候會出問題，查了一下原因發現有很多雷，因此最後開始 Survey ScreenShot via Selenium 的技術來重新開發這個功能，說實在的這個功能其實不太困難。但是也有一些值得紀錄的地方，查詢了一下大概可以看到有幾種比較常見的解決方案，在這邊我大概嘗試了幾種，並記錄於下</p>\n<h2 id=\"解決方案\"><a href=\"#解決方案\" class=\"headerlink\" title=\"解決方案\"></a>解決方案</h2><h3 id=\"WebBrowser\"><a href=\"#WebBrowser\" class=\"headerlink\" title=\"WebBrowser\"></a>WebBrowser</h3><p>這個解決方案是原版程式，也就是有時候會出問題的那個版本，說實在的這個解決方案其實我沒有考慮深入研究，依據<a href=\"https://docs.microsoft.com/zh-tw/previous-versions/visualstudio/visual-studio-2010/w290k23d(v=vs.100)?redirectedfrom=MSDN\">MSDN - WebBrowser 控制項概觀</a>說明，它會採用ＩＥ，基本上看到這一句我已經不想用了，其他的問題就不再贅述，總而言之不考慮這個方案</p>\n<h3 id=\"Selenium-3-Noksa-WebDriver-ScreenshotsExtensions\"><a href=\"#Selenium-3-Noksa-WebDriver-ScreenshotsExtensions\" class=\"headerlink\" title=\"Selenium 3 + Noksa.WebDriver.ScreenshotsExtensions\"></a>Selenium 3 + Noksa.WebDriver.ScreenshotsExtensions</h3><p>這個是我一開始嘗試找到的解決方案，最終的成果雖然可以用，但實際上他截圖的概念是模擬使用者捲動 ScrollBar，然後將每一段的畫面拼接起來，最終合併成一個完整的網頁快照，這個方法有很多的弊端，例如畫面捲動的時候，網頁上浮動的元素也會跟著動，最終的快照截圖上面就都是那些浮動元素；此外也因為捲動的關係，快照一個網頁的時間會很久，在快照任務繁重的背景之下，此方案無疑是ＧＧ了</p>\n<p>nuget:<a href=\"https://www.nuget.org/packages/Noksa.WebDriver.ScreenshotsExtensions/\">Noksa.WebDriver.ScreenshotsExtensions</a></p>\n<h3 id=\"html2canvas\"><a href=\"#html2canvas\" class=\"headerlink\" title=\"html2canvas\"></a>html2canvas</h3><p>這個是透過前端套件將畫面產生圖檔的方式，實際原理就是讓 Selenium 瀏覽網頁後，將 script 注入到網頁上並執行一段呼叫該套件的 javascript，最終將結果存放於全域變數 window 下面，然後再經由 selenium 取得圖片，如此就可以透過後端儲存截圖。而這個套件的缺點也非常明顯，他是基於 Virtual DOM 所產生出來的圖而不是瀏覽器畫面截圖，所以會跟實際上的不一樣，針對快照的需求來說，這屬於不可以接受的解決方案</p>\n<p><img src=\"/artblog/html2canvas.png\"></p>\n<p>github:<a href=\"https://github.com/niklasvh/html2canvas\">html2canvas</a></p>\n<h3 id=\"Selenium-4-Chrome-DevTools-Protocol\"><a href=\"#Selenium-4-Chrome-DevTools-Protocol\" class=\"headerlink\" title=\"Selenium 4 + Chrome DevTools Protocol\"></a>Selenium 4 + Chrome DevTools Protocol</h3><p>在搜尋快照的時候，發現了 Chrome DevTool 實際上也可以做截圖。經由 Selenium WebDriver 去呼叫 CDP Command 就可以執行截圖的動作，速度不但快且也與實際畫面相符。最終是採用這個方案</p>\n<h2 id=\"實作細節\"><a href=\"#實作細節\" class=\"headerlink\" title=\"實作細節\"></a>實作細節</h2><p>整個流程大致上會是</p>\n<ol>\n<li>瀏覽目標網頁</li>\n<li>等候網頁載入完成</li>\n<li>進行截圖、添加浮水印、保存圖片</li>\n</ol>\n<h3 id=\"操控-Selenium-瀏覽網頁\"><a href=\"#操控-Selenium-瀏覽網頁\" class=\"headerlink\" title=\"操控 Selenium 瀏覽網頁\"></a>操控 Selenium 瀏覽網頁</h3><p><strong>HeadLess Mode</strong><br>截圖的應用程式執行的時候，希望是採用 HeadLess 模式運作，也因為後續的截圖，CDP 指令是將瀏覽器的可見範圍進行截圖，所以在 HeadLess 模式下偵測網頁高度，並且重新調整可視範圍的寬高就很重要。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// headless 模式</span></span><br><span class=\"line\">ChromeOptions options = <span class=\"keyword\">new</span> ChromeOptions();</span><br><span class=\"line\">options.AddArgument(<span class=\"string\">&quot;headless&quot;</span>);</span><br><span class=\"line\">options.AddArgument(<span class=\"string\">$&quot;--window-size=<span class=\"subst\">&#123;width&#125;</span>x<span class=\"subst\">&#123;height&#125;</span>&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> driver = <span class=\"keyword\">new</span> ChromeDriver(options);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>要使用 <code>HeadLess</code> 模式，可以透過設置 <code>ChromeOptions</code>並經由建構式注入給 <code>ChromeDriver</code>即可</p>\n</blockquote>\n<p><strong>瀏覽網頁</strong></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 瀏覽網頁</span></span><br><span class=\"line\"> driver.Navigate().GoToUrl(<span class=\"string\">&quot;https://www.google.com.tw&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"等候網頁讀取完成\"><a href=\"#等候網頁讀取完成\" class=\"headerlink\" title=\"等候網頁讀取完成\"></a>等候網頁讀取完成</h3><p><strong>等候網頁</strong></p>\n<p>透過 <code>javaScript</code> 的 <code>document.readyState ===&#39;complete&#39;</code>來判斷是否讀取完成，在 Selenium 底下需要執行這一段程式碼，直到回傳的結果為 True，表示網頁已經讀取完畢，可以準備截圖了。</p>\n<p>WebDriver 有實作介面 <code>IJavaScriptExecutor</code>，該介面提供<code>ExecuteScript</code>允許執行<code>javaScript</code>，再透過<code>WebDriverWait</code>所提供的方法來實作，如下範例</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ChromeDriver : ChromiumDriver : WebDriver : IJavaScriptExecutor</span></span><br><span class=\"line\">IJavaScriptExecutor js = driver;</span><br><span class=\"line\"><span class=\"keyword\">var</span> wait = <span class=\"keyword\">new</span> WebDriverWait(driver, TimeSpan.FromSeconds(<span class=\"number\">30</span>));</span><br><span class=\"line\">wait.IgnoreExceptionTypes(<span class=\"keyword\">typeof</span>(InvalidOperationException));</span><br><span class=\"line\"><span class=\"comment\">// wait default 500ms</span></span><br><span class=\"line\">wait.Until(wd =&gt; (<span class=\"built_in\">bool</span>)js.ExecuteScript(<span class=\"string\">&quot;return document.readyState === &#x27;complete&#x27;&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<p>在完成讀取頁面後，一樣是透過<code>javaScript</code>回傳網頁高度，準備等等設置 Selenium 的寬高來截圖</p>\n<p><strong>取得網頁高度</strong></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> docHeight = driver.ExecuteScript(<span class=\"string\">&quot;return Math.max(window.innerHeight,document.body.scrollHeight,document.documentElement.scrollHeight)&quot;</span>).ToString();</span><br><span class=\"line\"><span class=\"built_in\">int</span>.TryParse(docHeight, <span class=\"keyword\">out</span> height);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重新指定網頁寬高</span></span><br><span class=\"line\">driver.Manage().Window.Size = <span class=\"keyword\">new</span> Size(width, height);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"透過-CDP-Command-將瀏覽器可視範圍進行截圖\"><a href=\"#透過-CDP-Command-將瀏覽器可視範圍進行截圖\" class=\"headerlink\" title=\"透過 CDP Command 將瀏覽器可視範圍進行截圖\"></a>透過 CDP Command 將瀏覽器可視範圍進行截圖</h3><p><strong>使用 CDP 指令截圖</strong><br>利用<code>Page.captureScreenshot</code>這個指令做截圖，回傳的結果是圖片的 base64 編碼字串，文件可以參考<a href=\"https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-captureScreenshot\">這邊</a>，在這邊需要給予設定的參數，但是實際上，若照著文件上的 <code>clip</code>這個 ViewPort 物件設置參數會出錯，但直接給予 <code>width</code>、<code>height</code>則是可行的</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> screenshot = driver.ExecuteCdpCommand(<span class=\"string\">&quot;Page.captureScreenshot&quot;</span>, <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">object</span>&gt;()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Image compression format (defaults to png).Allowed Values: jpeg, png, webp</span></span><br><span class=\"line\">    &#123; <span class=\"string\">&quot;format&quot;</span>, <span class=\"string\">&quot;jpeg&quot;</span> &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// Compression quality from range [0..100] (jpeg only).</span></span><br><span class=\"line\">    &#123; <span class=\"string\">&quot;quality&quot;</span>, <span class=\"number\">70</span> &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// Capture the screenshot beyond the viewport. Defaults to false</span></span><br><span class=\"line\">    &#123; <span class=\"string\">&quot;captureBeyondViewport&quot;</span>, <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// Capture the screenshot from the surface, rather than the view. Defaults to true.</span></span><br><span class=\"line\">    &#123; <span class=\"string\">&quot;fromSurface&quot;</span>, <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">&quot;width&quot;</span>, width &#125;,</span><br><span class=\"line\">    &#123; <span class=\"string\">&quot;height&quot;</span>, height &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> base64Str = ((Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">object</span>&gt;)screenshot)[<span class=\"string\">&quot;data&quot;</span>].ToString();</span><br></pre></td></tr></table></figure>\n\n<p><strong>將圖片 base64 轉為 Image</strong></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> img = Base64StringToImage(base64Str);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Bitmap <span class=\"title\">Base64StringToImage</span>(<span class=\"params\"><span class=\"built_in\">string</span> base64String</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">byte</span>[] buffer = Convert.FromBase64String(base64String);</span><br><span class=\"line\"></span><br><span class=\"line\">    MemoryStream stream = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    Bitmap bitmap;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = (<span class=\"built_in\">byte</span>[])buffer.Clone();</span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        stream = <span class=\"keyword\">new</span> MemoryStream(data);</span><br><span class=\"line\">        stream.Position = <span class=\"number\">0</span>;</span><br><span class=\"line\">        bitmap = <span class=\"keyword\">new</span> Bitmap(Image.FromStream(stream));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stream != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            stream.Close();</span><br><span class=\"line\">            stream.Dispose();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bitmap;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>幫圖片添加浮水印</strong></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ApplyWaterMark</span>(<span class=\"params\">Image bmp</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> font = <span class=\"keyword\">new</span> Font(<span class=\"string\">&quot;arial&quot;</span>, <span class=\"number\">16</span>, FontStyle.Bold);</span><br><span class=\"line\">    <span class=\"built_in\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> y = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">using</span> (Graphics graphics = Graphics.FromImage(bmp))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> printStr = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        printStr.AppendLine(<span class=\"string\">$&quot;TIME: <span class=\"subst\">&#123;DateTime.Now:yyyy-MM-dd HH:mm:ss&#125;</span>&quot;</span>);</span><br><span class=\"line\">        printStr.AppendLine(<span class=\"string\">&quot;Order: This is Fake Order Number&quot;</span>);</span><br><span class=\"line\">        printStr.AppendLine(<span class=\"string\">&quot;Product: I am Fake Product Code&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        SizeF measureStr = graphics.MeasureString(printStr.ToString(), font);</span><br><span class=\"line\">        graphics.FillRectangle(Brushes.Black, <span class=\"keyword\">new</span> Rectangle(x, y, (<span class=\"built_in\">int</span>)measureStr.Width, (<span class=\"built_in\">int</span>)measureStr.Height));</span><br><span class=\"line\">        graphics.DrawString(printStr.ToString(), font, Brushes.White, <span class=\"keyword\">new</span> PointF(x, y));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>保存圖片</strong></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\">img.Save(<span class=\"string\">$&quot;D:\\\\Temp\\\\Demo.jpg&quot;</span>, ImageFormat.Jpeg);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>測試的結果速度很不錯，但這只是一個簡單的概念驗證，實務上很有可能會有很多奇奇怪怪的情況需要處理，使用上要特別注意一下，詳細程式碼放在 <a href=\"https://github.com/art-Blog/Snapshot\">Github</a>，有需要請自取</p>\n","categories":["Selenium"],"tags":["ScreenShot"]},{"title":"SonarQube-整合Jenkins Pipeline(使用jenkins套件)","url":"/artblog//sonarQube-analyze-jenkins-pipeline-by-plugin/","content":"<p>先前已經有直接在 pipeline 專案內執行批次指令來分析專案，但這樣做的話其實並沒有辦法在專案分析的時候，判斷分析結果，只能依照原先做好的流程一直走下去，因此這一篇文章主要在解決這一點，透過 Jenkins 套件來處理這件事情</p>\n<span id=\"more\"></span>\n\n<h2 id=\"事前準備\"><a href=\"#事前準備\" class=\"headerlink\" title=\"事前準備\"></a>事前準備</h2><p>整體的流程如下</p>\n<ol>\n<li>專案建置、產生測試報告等等</li>\n<li>執行分析</li>\n<li>等候分析結果<ul>\n<li>通過繼續往下</li>\n<li>失敗中止</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"SonarQube-新增全域-token\"><a href=\"#SonarQube-新增全域-token\" class=\"headerlink\" title=\"SonarQube:新增全域 token\"></a>SonarQube:新增全域 token</h3><p>這裡新增的 token 請選擇 <code>Global</code>，這個是為了要給 Jenkins 後續分析專案、取得結果使用，那行只顯示一次的 token 也要先記起來，等等在 Jenkins 新增認證的時候會需要輸入<br><img src=\"/artblog/sonarQube-analyze-jenkins-pipeline-by-plugin/2022-11-22-114417.jpg\"></p>\n<h3 id=\"SonarQube-新增分析專案-webHook\"><a href=\"#SonarQube-新增分析專案-webHook\" class=\"headerlink\" title=\"SonarQube:新增分析專案 webHook\"></a>SonarQube:新增分析專案 webHook</h3><p>要設定專案的 webHook，從下圖的地方點選進去<br><img src=\"/artblog/sonarQube-analyze-jenkins-pipeline-by-plugin/2022-11-22-115015.jpg\"></p>\n<p>從右上角點新增跳出燈箱，輸入資料，名稱隨意，URL 指的是當分析完成之後 sonarQube 要打的網址，這個就填 Jenkins 主機加上<code>sonarqube-webhook</code>，例如:<code>http://localhost:8080/sonarqube-webhook</code>，最後面密碼指的是剛剛新增的全域 token，例如:<code>sqa_e6a8c5e3a2ce39b60501c5ddc319b3c90442daf1</code><br><img src=\"/artblog/sonarQube-analyze-jenkins-pipeline-by-plugin/2022-11-22-140708.jpg\"></p>\n<blockquote>\n<p>在分析的流程當中所需要的 token 都要用相同的，否則在 Jenkins 請求訪問分析結果的時候，會出現 http 401</p>\n</blockquote>\n<h3 id=\"Jenkins-SonarQube-Scanner-for-Jenkins\"><a href=\"#Jenkins-SonarQube-Scanner-for-Jenkins\" class=\"headerlink\" title=\"Jenkins:SonarQube Scanner for Jenkins\"></a>Jenkins:SonarQube Scanner for Jenkins</h3><p>在這個步驟裡面，我們會需要透過<a href=\"https://plugins.jenkins.io/sonar/\">SonarQube Scanner for Jenkins</a>套件來完成分析、等候的這兩個部分，從<code>管理Jenkins</code>-&gt;<code>外掛總管</code>並選擇可用的，找到套件安裝即可<br><img src=\"/artblog/sonarQube-analyze-jenkins-pipeline-by-plugin/2022-11-22-113317.jpg\"></p>\n<h3 id=\"Jenkins-新增認證\"><a href=\"#Jenkins-新增認證\" class=\"headerlink\" title=\"Jenkins:新增認證\"></a>Jenkins:新增認證</h3><p>在 Jenkins 透過 <code>SonarQube Scanner for Jenkins</code> 互動的時候會需要 sonarQube 的有效 token，因此在 Jenkins Credentials 這邊也需要新增一個 <code>Secret Text</code>。Secret 欄位就輸入上面新增的全域 token<br><img src=\"/artblog/sonarQube-analyze-jenkins-pipeline-by-plugin/2022-11-22-141249.jpg\"></p>\n<h3 id=\"Jenkins-SonarQube-Server-設定\"><a href=\"#Jenkins-SonarQube-Server-設定\" class=\"headerlink\" title=\"Jenkins:SonarQube Server 設定\"></a>Jenkins:SonarQube Server 設定</h3><p>接著是<code>設定系統</code>，在這裡需要將我們的 sonarQube server 資訊設定好，包含</p>\n<ol>\n<li>Name: 填寫一個名稱，後續會用到，我這邊是填寫 <code>local-sonarqube</code></li>\n<li>Server URL: 這邊我的 SonarQube Server 是架在 <code>localhost:9000</code></li>\n<li>Server authentication token: 使用先前建立的 <code>sonarqube-key</code></li>\n<li>Webhook Secret: 使用先前建立的 <code>sonarqube-key</code></li>\n</ol>\n<p><img src=\"/artblog/sonarQube-analyze-jenkins-pipeline-by-plugin/2022-11-22-113904.jpg\"></p>\n<h3 id=\"Jenkins-SonarQube-Scanner-設定\"><a href=\"#Jenkins-SonarQube-Scanner-設定\" class=\"headerlink\" title=\"Jenkins:SonarQube Scanner 設定\"></a>Jenkins:SonarQube Scanner 設定</h3><p>因為先前已經有下載過 scanner，所以我就直接把 scanner 路徑填一填，雖然他有自動安裝的選項但我沒有用過，這樣在隨後的 pipeline 就可以透過套件提供的工具 tool 來呼叫 scanner，如果是非 C# 專案，就要自己再去找找對的 scanner<br><img src=\"/artblog/sonarQube-analyze-jenkins-pipeline-by-plugin/2022-11-22-142838.jpg\"></p>\n<h2 id=\"pipeline-設定\"><a href=\"#pipeline-設定\" class=\"headerlink\" title=\"pipeline 設定\"></a>pipeline 設定</h2><p>執行分析的範例如下，理論上測試報告產生之前要先 build 一次最新的建置，實務上請自行斟酌作法</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">node() &#123;</span><br><span class=\"line\">    ws(<span class=\"string\">&#x27;D:\\\\code\\\\Github\\\\Repos\\\\TaskProject&#x27;</span>) &#123;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;Coverage&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 刪除先前產生的測試覆蓋報告</span></span><br><span class=\"line\">            bat <span class=\"string\">&quot;del *.dcvr&quot;</span></span><br><span class=\"line\">            <span class=\"comment\">// 產生測試覆蓋報告</span></span><br><span class=\"line\">            bat <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;D:\\\\art\\\\programs\\\\JetBrains.dotCover.CommandLineTools.2022.1.2\\\\dotCover.exe&quot; cover /TargetExecutable=&quot;D:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Community\\\\Common7\\\\IDE\\\\Extensions\\\\TestPlatform\\\\vstest.console.exe&quot; /TargetArguments=&quot;TaskProjectTests.dll&quot; /TargetWorkingDir=&quot;TaskProjectTests\\\\bin\\\\debug&quot; /Output=&quot;TaskProjectTests.dcvr&quot;</span></span><br><span class=\"line\"><span class=\"string\">            &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">            <span class=\"comment\">// 將報告轉換格式為 html</span></span><br><span class=\"line\">            bat <span class=\"string\">&#x27;&quot;D:\\\\art\\\\programs\\\\JetBrains.dotCover.CommandLineTools.2022.1.2\\\\dotCover.exe&quot; report --source=TaskProjectTests.dcvr --output=report.html --reportType=html&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;UnitTest&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 刪除先前產生的測試執行報告</span></span><br><span class=\"line\">            bat <span class=\"string\">&quot;del testResults /s /q&quot;</span></span><br><span class=\"line\">            <span class=\"comment\">// 產生測試執行報告</span></span><br><span class=\"line\">            bat <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;D:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Community\\\\Common7\\\\IDE\\\\CommonExtensions\\\\Microsoft\\\\TestWindow\\\\vstest.console.exe&quot; /Logger:trx TaskProjectTests\\\\bin\\\\Debug\\\\TaskProjectTests.dll</span></span><br><span class=\"line\"><span class=\"string\">            &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;SonarQube analysis&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 設定 sonarQube scanner 的名字(這邊的名字要跟先前在【Jenkins:SonarQube Scanner 設定】的一樣)</span></span><br><span class=\"line\">            <span class=\"keyword\">def</span> scanner = tool <span class=\"attr\">name:</span> <span class=\"string\">&#x27;SonarScanner.MSBuild-net46&#x27;</span></span><br><span class=\"line\">            <span class=\"comment\">// 透過 sonarQube 進行分析專案的準備，這裡填寫的值都要跟先前設定的相同</span></span><br><span class=\"line\">            withSonarQubeEnv(<span class=\"attr\">installationName:</span><span class=\"string\">&#x27;local-sonarqube&#x27;</span>,<span class=\"attr\">credentialsId:</span><span class=\"string\">&#x27;sonarqube-key&#x27;</span>) &#123;</span><br><span class=\"line\">              <span class=\"comment\">// 刪除先前分析的暫存資料（如果沒有這個可能會在分析快結束的時候出錯）</span></span><br><span class=\"line\">              bat <span class=\"string\">&quot;del .sonarqube /s /q&quot;</span></span><br><span class=\"line\">              <span class=\"comment\">// 指定測試覆蓋報告、測試執行報告的路徑、sonarQube 位址，專案名稱</span></span><br><span class=\"line\">              bat <span class=\"string\">&quot;$&#123;scanner&#125;\\\\SonarScanner.MSBuild.exe begin /k:taskProject /d:sonar.host.url=http://localhost:9000 /d:sonar.cs.dotcover.reportsPaths=report.html  /d:sonar.cs.vstest.reportsPaths=TestResults/*.trx&quot;</span></span><br><span class=\"line\">              <span class=\"comment\">// 建置專案</span></span><br><span class=\"line\">              bat <span class=\"string\">&quot;msbuild.exe /t:Rebuild&quot;</span></span><br><span class=\"line\">              <span class=\"comment\">// 執行分析</span></span><br><span class=\"line\">              bat <span class=\"string\">&quot;$&#123;scanner&#125;\\\\SonarScanner.MSBuild.exe end&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            script &#123;</span><br><span class=\"line\">              <span class=\"comment\">// 預計最多等候分析一個小時</span></span><br><span class=\"line\">              timeout(<span class=\"attr\">time:</span> <span class=\"number\">1</span>, <span class=\"attr\">unit:</span> <span class=\"string\">&#x27;HOURS&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 等候 sonarQube webHook，並且指定使用的是全域 token</span></span><br><span class=\"line\">                <span class=\"keyword\">def</span> qg = waitForQualityGate(<span class=\"attr\">webhookSecretId:</span><span class=\"string\">&#x27;sonarqube-key&#x27;</span>)</span><br><span class=\"line\">                <span class=\"comment\">// 如果返回狀態不ＯＫ，就丟出錯誤並中斷 pipeline</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (qg.status != <span class=\"string\">&#x27;OK&#x27;</span>) &#123;</span><br><span class=\"line\">                    error <span class=\"string\">&quot;Pipeline aborted due to quality gate failure: $&#123;qg.status&#125;&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 這裡後續就是可以接著在寫自己想要的流程</span></span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;END&#x27;</span>) &#123;</span><br><span class=\"line\">            bat <span class=\"string\">&#x27;@echo OK&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"測試\"><a href=\"#測試\" class=\"headerlink\" title=\"測試\"></a>測試</h2><p>這裡的測試專案我拿了一個 C# 的簡單的單元測試，因為之前有做過很多次這方面的練習了，如何分析專案的細節，怎麼加入測試數量、測試覆蓋率就不再贅述，利用 sonarQube 的 quality gate 設定，我設定了一個新增的程式碼覆蓋率必須要達到 99%才算成功，利用這個東西設定讓 Jenkins 取得分析結果是失敗的，然後看看他能不能中止<br><img src=\"/artblog/sonarQube-analyze-jenkins-pipeline-by-plugin/2022-11-22-142037.jpg\"></p>\n<p>第一次先跑專案，當然先讓他過，第二次隨意加一些沒有用到的 code 並再次分析就會失敗了<br><img src=\"/artblog/sonarQube-analyze-jenkins-pipeline-by-plugin/2022-11-22-142213.jpg\"></p>\n<p>在主畫面也可以看到建置紀錄與左側都有 SonarQube 的超連結，點過去就可以看到分析專案的資料了</p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>ＣＩ流程中若分析失敗，通常需要通知某些人，做某一些事情，而 SonarQube 本身的通知機制我是覺得有點難用，所以流程的事情最好還是交給 Jenkins 來處理，不管是透過 Email 通知，還是要透過 Teams 都很方便。接下來要考慮的就是什麼時間點進行分析的動作，這就看公司資源及需要了。</p>\n<h2 id=\"補充-加入信件通知\"><a href=\"#補充-加入信件通知\" class=\"headerlink\" title=\"補充:加入信件通知\"></a>補充:加入信件通知</h2><p>主要還是依靠外掛套件<a href=\"https://plugins.jenkins.io/email-ext/\">Email Extension</a>來做，測試用的 SMTP 服務可以用 <a href=\"https://github.com/rnwood/smtp4dev\">smtp4dev</a>，寄送 EMAIL 還要去設定一下，這裡就不贅述了，pipeline 範例如下</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 寄送信件</span></span><br><span class=\"line\">emailext <span class=\"attr\">attachLog:</span> <span class=\"literal\">true</span>, <span class=\"attr\">body:</span> <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">recipientProviders:</span> [buildUser(), developers()], <span class=\"attr\">subject:</span> <span class=\"string\">&#x27;[TaskProject] Success&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 完整範例:分析結果，成功或失敗都寄送EMAIL通知</span></span><br><span class=\"line\">node() &#123;</span><br><span class=\"line\">    ws(<span class=\"string\">&#x27;D:\\\\code\\\\Github\\\\Repos\\\\TaskProject&#x27;</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;Coverage&#x27;</span>) &#123;</span><br><span class=\"line\">            bat <span class=\"string\">&quot;del *.dcvr&quot;</span></span><br><span class=\"line\">            bat <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;D:\\\\art\\\\programs\\\\JetBrains.dotCover.CommandLineTools.2022.1.2\\\\dotCover.exe&quot; cover /TargetExecutable=&quot;D:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Community\\\\Common7\\\\IDE\\\\Extensions\\\\TestPlatform\\\\vstest.console.exe&quot; /TargetArguments=&quot;TaskProjectTests.dll&quot; /TargetWorkingDir=&quot;TaskProjectTests\\\\bin\\\\debug&quot; /Output=&quot;TaskProjectTests.dcvr&quot;</span></span><br><span class=\"line\"><span class=\"string\">            &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">            bat <span class=\"string\">&#x27;&quot;D:\\\\art\\\\programs\\\\JetBrains.dotCover.CommandLineTools.2022.1.2\\\\dotCover.exe&quot; report --source=TaskProjectTests.dcvr --output=report.html --reportType=html&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;UnitTest&#x27;</span>) &#123;</span><br><span class=\"line\">            bat <span class=\"string\">&quot;del testResults /s /q&quot;</span></span><br><span class=\"line\">            bat <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">                &quot;D:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Community\\\\Common7\\\\IDE\\\\CommonExtensions\\\\Microsoft\\\\TestWindow\\\\vstest.console.exe&quot; /Logger:trx TaskProjectTests\\\\bin\\\\Debug\\\\TaskProjectTests.dll</span></span><br><span class=\"line\"><span class=\"string\">            &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;SonarQube analysis&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">def</span> scanner = tool <span class=\"attr\">name:</span> <span class=\"string\">&#x27;SonarScanner.MSBuild-net46&#x27;</span></span><br><span class=\"line\">            bat <span class=\"string\">&quot;@echo Scanner Path:$&#123;scanner&#125;&quot;</span></span><br><span class=\"line\">            withSonarQubeEnv(<span class=\"attr\">installationName:</span><span class=\"string\">&#x27;local-sonarqube&#x27;</span>,<span class=\"attr\">credentialsId:</span><span class=\"string\">&#x27;sonarqube-key&#x27;</span>) &#123; <span class=\"comment\">// If you have configured more than one global server connection, you can specify its name</span></span><br><span class=\"line\">              bat <span class=\"string\">&quot;del .sonarqube /s /q&quot;</span></span><br><span class=\"line\">              bat <span class=\"string\">&quot;$&#123;scanner&#125;\\\\SonarScanner.MSBuild.exe begin /k:taskProject /d:sonar.host.url=http://localhost:9000 /d:sonar.cs.dotcover.reportsPaths=report.html  /d:sonar.cs.vstest.reportsPaths=TestResults/*.trx&quot;</span></span><br><span class=\"line\">              bat <span class=\"string\">&quot;msbuild.exe /t:Rebuild&quot;</span></span><br><span class=\"line\">              bat <span class=\"string\">&quot;$&#123;scanner&#125;\\\\SonarScanner.MSBuild.exe end&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            script &#123;</span><br><span class=\"line\">              timeout(<span class=\"attr\">time:</span> <span class=\"number\">1</span>, <span class=\"attr\">unit:</span> <span class=\"string\">&#x27;HOURS&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">def</span> qg = waitForQualityGate(<span class=\"attr\">webhookSecretId:</span><span class=\"string\">&#x27;sonarqube-key&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (qg.status != <span class=\"string\">&#x27;OK&#x27;</span>) &#123;</span><br><span class=\"line\">                    emailext <span class=\"attr\">attachLog:</span> <span class=\"literal\">true</span>, <span class=\"attr\">body:</span> <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">recipientProviders:</span> [buildUser(), developers()], <span class=\"attr\">subject:</span> <span class=\"string\">&#x27;[TaskProject] Failed&#x27;</span></span><br><span class=\"line\">                    error <span class=\"string\">&quot;Pipeline aborted due to quality gate failure: $&#123;qg.status&#125;&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;END&#x27;</span>) &#123;</span><br><span class=\"line\">            bat <span class=\"string\">&#x27;@echo OK&#x27;</span></span><br><span class=\"line\">            emailext <span class=\"attr\">attachLog:</span> <span class=\"literal\">true</span>, <span class=\"attr\">body:</span> <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">recipientProviders:</span> [buildUser(), developers()], <span class=\"attr\">subject:</span> <span class=\"string\">&#x27;[TaskProject] Success&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/sonarQube-analyze-jenkins-pipeline-by-plugin/2022-11-22-153119.jpg\"></p>\n<h2 id=\"補充-執行建置成功後觸發分析-JOB\"><a href=\"#補充-執行建置成功後觸發分析-JOB\" class=\"headerlink\" title=\"補充:執行建置成功後觸發分析 JOB\"></a>補充:執行建置成功後觸發分析 JOB</h2><p>先前的做法是在同一台主機上面執行，如果專案不多，或只是自己練習應該是合適的，但如果能夠拆開各自獨立的任務，應該更容易運用，因此將建置的部分獨立一個任務，在建置成功完畢後觸發分析任務。<br>因為建置任務先前採用的是 <code>pipeline script</code>，所以只需要透過<code>build</code>即可觸發任務，同時將<code>Git Parameter</code>傳遞出去即可，詳請請參照<a href=\"https://partypeopleland.github.io/artblog/2020/02/25/Jenkins%E5%8F%83%E6%95%B8%E5%8C%96%E5%BB%BA%E7%BD%AE%E8%88%87%E4%B8%8A%E4%B8%8B%E6%B8%B8%E5%B0%88%E6%A1%88/\">Jenkins 參數化建置與上下游專案</a>的 【補充:觸發另一個任務並傳遞參數範例】一節</p>\n","categories":["devOps"],"tags":["sonarQube"]},{"title":"SonarQube 程式碼分析工具 - 2022","url":"/artblog//sonarqube-analyze-2022/","content":"<p>先前在 2020 的時候為了練習程式碼分析工具，找到了 <code>sonarQube</code> 也因此撰寫了幾篇練習文章，但 2022 的今天在使用當初文章內的方法已經不適用了。可能是因為軟體更新的關係，所以這次特別紀錄一下重新練習的經過做個紀錄。先前的文章也就不再更新，將相關文章整理在左側選單，有興趣再去看。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Java-版本確認\"><a href=\"#Java-版本確認\" class=\"headerlink\" title=\"Java 版本確認\"></a>Java 版本確認</h2><p>SonarQube Server 只支援 Java 11 版本，所以如果用的是 Java 8，就需要先處理一下升級的問題。詳情請看<a href=\"https://docs.sonarqube.org/latest/requirements/requirements/\">Prerequisites and Overview</a></p>\n<p>不知道版本的話可以透過 <code>java -version</code> 查詢</p>\n<h2 id=\"安裝-SonarQube\"><a href=\"#安裝-SonarQube\" class=\"headerlink\" title=\"安裝 SonarQube\"></a>安裝 SonarQube</h2><p>安裝服務現在來說簡單了很多，可以使用 docker 也可以直接下載，安裝過程都算簡單，照著最新的官網說明 <a href=\"https://docs.sonarqube.org/latest/setup/get-started-2-minutes/\">Try Out SonarQube</a>很容易就將服務建起來了，服務建立起來後，預設透過 <code>http://localhost:9000</code>，使用 <code>admin/admin</code> 就可以登入，第一次登入後自行變更密碼，就算完成了</p>\n<p>但是這個只是方便測試使用，真正要應用還是需要像以前一樣，使用外部的 storage</p>\n<blockquote>\n<p>如果是需要安裝在 linux 的教學，可以參考這一篇文章:<a href=\"https://iter01.com/506286.html\">SonarQube 搭建手記</a></p>\n</blockquote>\n<h3 id=\"From-the-zip-file\"><a href=\"#From-the-zip-file\" class=\"headerlink\" title=\"From the zip file\"></a>From the zip file</h3><ol>\n<li><p><a href=\"https://adoptium.net/releases.html?variant=openjdk11&jvmVariant=hotspot\">Download</a> and install Java 11 on your system.</p>\n</li>\n<li><p><a href=\"https://www.sonarqube.org/downloads/\">Download</a> the SonarQube Community Edition zip file.</p>\n</li>\n<li><p>As a non-root user, unzip it, let’s say in C:\\sonarqube or &#x2F;opt&#x2F;sonarqube.</p>\n</li>\n<li><p>As a non-root user, start the SonarQube Server:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># On Windows, execute:</span><br><span class=\"line\">C:\\sonarqube\\bin\\windows-x86-64\\StartSonar.bat</span><br><span class=\"line\"></span><br><span class=\"line\"># On other operating systems, as a non-root user execute:</span><br><span class=\"line\">/opt/sonarqube/bin/[OS]/sonar.sh console</span><br></pre></td></tr></table></figure>\n\n<p>透過官網提供的壓縮包，解壓執行之後，可以在壓縮包內找到 <code>bin/windows-x86-64/StartSonar.bat</code>，執行後稍微等一下，他會幫你建立 SonarQube Instance，再之後透過預設的帳密 <code>admin/admin</code> 就可以使用了。但是預設內建的資料庫並不提供升級、擴展，要認真使用的話還是需要另外設置資料庫</p>\n</li>\n</ol>\n<blockquote>\n<p>Embedded database should be used for evaluation purposes only</p>\n<p>The embedded database will not scale, it will not support upgrading to newer versions of SonarQube, and there is no support for migrating your data out of it into a different database &gt; engine.</p>\n</blockquote>\n<h4 id=\"安裝-PostgreSQL\"><a href=\"#安裝-PostgreSQL\" class=\"headerlink\" title=\"安裝 PostgreSQL\"></a>安裝 PostgreSQL</h4><p>直接於<a href=\"https://www.enterprisedb.com/downloads/postgres-postgresql-downloads\">此處</a>下載 windows 版本，但直接安裝的話，會在快結束時發生<code>failed to loaded SQL module</code>錯誤，參考下面兩篇文章後照著做就可以了</p>\n<ol>\n<li><a href=\"https://stackoverflow.com/questions/30689251/failed-to-load-sql-modules-into-the-database-cluster-during-postgresql-installat\">Failed to load sql modules into the database cluster during PostgreSQL Installation</a></li>\n<li><a href=\"https://blog.csdn.net/weixin_43672510/article/details/122342729\">windows 安装 Postgresql 记录</a></li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">net user /add postgres root</span><br><span class=\"line\">net localgroup administrators postgres /add</span><br><span class=\"line\">net localgroup &quot;power users&quot; postgres /add</span><br></pre></td></tr></table></figure>\n\n<p>當然新增了這個 <code>postgres</code>使用者之後，還需要去設定他的密碼，在管理介面設定一個就可以了<br><img src=\"/artblog/sonarqube-analyze-2022/2022-10-31-132901.jpg\"></p>\n<p>接下來先新增目錄<code>D:\\PostgreSQL\\</code>並修改 admin , users 的權限都為完全控制，因為又有一次失敗的經驗，所以我新增了一個 NetWork Services 也一併設定完全控制</p>\n<p><img src=\"/artblog/sonarqube-analyze-2022/2022-10-31-133337.jpg\"><br><img src=\"/artblog/sonarqube-analyze-2022/2022-10-31-133403.jpg\"></p>\n<p>然後先重開機</p>\n<blockquote>\n<p>重開機這個步驟，很重要。</p>\n</blockquote>\n<p>重開完畢後用 <code>postgres</code> 執行 cmd , 等等要用這個 CLI 安裝<br><img src=\"/artblog/sonarqube-analyze-2022/2022-10-31-133010.jpg\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">D:\\postgresql-15.0-1-windows-x64.exe</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/sonarqube-analyze-2022/2022-10-31-133519.jpg\"></p>\n<p>並把安裝目錄設定為剛才新增的 <code>D:\\PostgreSQL\\</code><br><img src=\"/artblog/sonarqube-analyze-2022/2022-10-31-133713.jpg\"><br><img src=\"/artblog/sonarqube-analyze-2022/2022-10-31-133820.jpg\"></p>\n<p>安裝過程中應該就不會出現錯誤了，接著就把剛剛新增的 windows 使用者帳號移除就行了</p>\n<h4 id=\"補充-安裝-PostgreSQL\"><a href=\"#補充-安裝-PostgreSQL\" class=\"headerlink\" title=\"補充:安裝 PostgreSQL\"></a>補充:安裝 PostgreSQL</h4><p>另外一個情況是已經安裝好了某版本，但沒有建立資料庫，windows 服務也沒有<br>這邊提供幾個參考連結:</p>\n<ol>\n<li><a href=\"https://stackoverflow.com/questions/36629963/how-can-i-start-postgresql-on-windows\">How can I start PostgreSQL on Windows?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/32013772/how-to-find-out-if-a-directory-is-a-valid-postgresql-cluster\">How to find out if a directory is a valid PostgreSQL cluster</a></li>\n<li><a href=\"https://stackoverflow.com/questions/27566859/how-to-run-postgresql-as-a-service-in-windows\">How to run PostgreSQL as a service in windows?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/22766372/postgresql-pg-ctl-register-error-under-windows-7\">PostgreSQL pg_ctl register error under Windows 7</a></li>\n</ol>\n<p>濃縮以上幾篇重點</p>\n<ol>\n<li>先找到安裝 postgreSQL 目錄，為的是要知道相關工具的路徑，最好是將它設定為環境變數 path 之內</li>\n<li>先確認 services.msc 當中有沒有 postgreSQL 服務，沒有的話就需要自己建一個，建立服務之前會需要新建 DB</li>\n<li>建立資料庫可指定新的目錄，例如: <code>initDB -D &quot;D:\\postgres-data&quot;</code></li>\n<li>建立完成後可透過<code>pg_ctl.exe -D &quot;D:\\postgres-data&quot; start -U sonar -P sonar -S auto</code>測試一下能否運作，可以運作的話就可以接著下一步做成 services (範例的 sonar 需要先建立)</li>\n<li>用管理者權限執行<code>pg_ctl.exe register -N &quot;PostgreSQL&quot; -U &quot;NT AUTHORITY\\NetworkService&quot; -D &quot;D:\\postgres-data&quot; -w</code>，該目錄開啟完全控制給 NETWORK SERVICE</li>\n</ol>\n<p>&#96;</p>\n<h4 id=\"建立-PostgreSQL-使用者及資料庫\"><a href=\"#建立-PostgreSQL-使用者及資料庫\" class=\"headerlink\" title=\"建立 PostgreSQL 使用者及資料庫\"></a>建立 PostgreSQL 使用者及資料庫</h4><p>習慣上會為了服務來建立一個專屬的帳號使用以控管權限，這邊也從善如流，建立一個叫做 sonar 的帳號用它提供給 sonarQube 使用</p>\n<p><img src=\"/artblog/sonarqube-analyze-2022/2022-10-31-141619.jpg\"><br><img src=\"/artblog/sonarqube-analyze-2022/2022-10-31-142613.jpg\"></p>\n<p>這邊我也不知道為什麼第一次建立資料庫沒出現回應，所以又做了一次，重新開 psql 改用 sonar 做登入，測試成功<br><img src=\"/artblog/sonarqube-analyze-2022/2022-10-31-142851.jpg\"></p>\n<p>如果連線有問題，可以考慮調整一下設定，將 local 　都設成允許，但如果放在不同ＩＰ上，就要自己再研究一下怎麼設定了<br><img src=\"/artblog/sonarqube-analyze-2022/2022-10-31-143647.jpg\"><br><img src=\"/artblog/sonarqube-analyze-2022/2022-10-31-143828.jpg\"></p>\n<h4 id=\"修改-sonarQube-storage-為-PostgreSQL\"><a href=\"#修改-sonarQube-storage-為-PostgreSQL\" class=\"headerlink\" title=\"修改 sonarQube storage 為 PostgreSQL\"></a>修改 sonarQube storage 為 PostgreSQL</h4><blockquote>\n<p>REF:<a href=\"https://docs.sonarqube.org/latest/setup/install-server/\">https://docs.sonarqube.org/latest/setup/install-server/</a></p>\n</blockquote>\n<p>設定檔位於剛才的解壓縮目錄下， <code>conf/sonar.properties</code> 這個文字檔，文件中有詳細的註釋可參考，因為打算採用 <code>postgreSQL</code>，我們所需要關心的參數只有下列這三個 (因為它也支援環境變數的設定，只需要把參數名稱變成大寫，且連接符號改為底線，就可以透過環境變數來控制，這一點可以比對參考一下 docker-compose 那邊的設定)</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">sonar.jdbc.username=sonar</span></span><br><span class=\"line\"><span class=\"string\">sonar.jdbc.password=sonar</span></span><br><span class=\"line\"><span class=\"string\">sonar.jdbc.url=jdbc:postgresql://localhost/sonar</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"註冊-sonarQube-服務\"><a href=\"#註冊-sonarQube-服務\" class=\"headerlink\" title=\"註冊 sonarQube 服務\"></a>註冊 sonarQube 服務</h4><p>官方已經有提供 windows 使用者一個方便管理服務的批次檔，相關說明可以參考<a href=\"https://docs.sonarqube.org/latest/setup/operate-server/\">Operate Server</a>，因為怕關聯的網頁又改版 404，所以把指令貼在下面</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安裝、移除服務</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">%SONAR_HOME%\\bin\\windows-x86-64\\SonarService.bat install</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">%SONAR_HOME%\\bin\\windows-x86-64\\SonarService.bat uninstall</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">啟動、停止服務</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">%SONAR_HOME%\\bin\\windows-x86-64\\SonarService.bat start</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">%SONAR_HOME%\\bin\\windows-x86-64\\SonarService.bat stop</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">檢查狀態</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">%SONAR_HOME%\\bin\\windows-x86-64\\SonarService.bat status</span></span><br></pre></td></tr></table></figure>\n\n<p>當然也可以透過 <code>services.msc</code> 管理服務<br><img src=\"/artblog/sonarqube-analyze-2022/2022-10-31-151310.jpg\"></p>\n<p>如果是在 java 8 的環境下要跑 sonarQube server , 請額外設定環境變數<code>SONAR_JAVA_PATH</code>指定 java 11 的路徑即可執行上述相關指令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">set SONAR_JAVA_PATH=D:\\java\\11\\bin\\java.exe</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --name sonarqube -e SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true -p 9090:9000 sonarqube:latest</span><br></pre></td></tr></table></figure>\n\n<p>如果用 docker 只需要一行指令就行了，相較於以往的 docker-compose 還需要另外建立 storage，現在的安裝步驟無疑變得非常單純，但是這只能做為測試開發使用，比較適合用來熟悉這套工具的初學階段，如果是真的要搭配 CI&#x2F;CD 環境，應該還是要使用獨立的資料庫來儲存專案分析資料。</p>\n<blockquote>\n<p>指令加上 restart，可參考<a href=\"https://docs.docker.com/config/containers/start-containers-automatically/\">Start containers automatically</a></p>\n</blockquote>\n<p>我從<a href=\"https://docs.sonarqube.org/latest/setup/install-server/\">官網</a>複製他的範例<code>Docker Compose.yml file example</code>後，調整<code>port</code>改<code>9090</code></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">sonarqube:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">sonarqube:community</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">db</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">SONAR_JDBC_URL:</span> <span class=\"string\">jdbc:postgresql://db:5432/sonar</span></span><br><span class=\"line\">      <span class=\"attr\">SONAR_JDBC_USERNAME:</span> <span class=\"string\">sonar</span></span><br><span class=\"line\">      <span class=\"attr\">SONAR_JDBC_PASSWORD:</span> <span class=\"string\">sonar</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">sonarqube_data:/opt/sonarqube/data</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">sonarqube_extensions:/opt/sonarqube/extensions</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">sonarqube_logs:/opt/sonarqube/logs</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;9090:9000&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">db:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">postgres:14</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">POSTGRES_USER:</span> <span class=\"string\">sonar</span></span><br><span class=\"line\">      <span class=\"attr\">POSTGRES_PASSWORD:</span> <span class=\"string\">sonar</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">postgresql:/var/lib/postgresql</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">postgresql_data:/var/lib/postgresql/data</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">volumes:</span></span><br><span class=\"line\">  <span class=\"attr\">sonarqube_data:</span></span><br><span class=\"line\">  <span class=\"attr\">sonarqube_extensions:</span></span><br><span class=\"line\">  <span class=\"attr\">sonarqube_logs:</span></span><br><span class=\"line\">  <span class=\"attr\">postgresql:</span></span><br><span class=\"line\">  <span class=\"attr\">postgresql_data:</span></span><br></pre></td></tr></table></figure>\n\n<p>如果碰上了 elasticSearch 的錯誤提示 <code>bootstrap check failure [1] of [1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</code>，可以參考下列解法將數值設大一點點</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">wsl -d docker-desktop</span><br><span class=\"line\">sysctl -w vm.max_map_count=262144</span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n\n<p>上述的這個方法在我重開機之後失效，所以又接著查詢了一下，因為我採用的是 windows 環境的 wsl2 版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">wsl -l -v</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/sonarqube-analyze-2022/2022-06-20-100345.jpg\"></p>\n<p>所以我需要設定給 <code>docker-windows</code>的設定檔是要用 <code>.wslconfig</code>，該檔案的存放位置是在 <code>%userProfile%</code></p>\n<p>從 docker-windows 的設定也可以看到這一點<br><img src=\"/artblog/sonarqube-analyze-2022/2022-06-20-100544.jpg\"></p>\n<p>至於其他的設定的部分，想了解的可以參考網站說明:<a href=\"https://docs.microsoft.com/en-us/windows/wsl/wsl-config#configure-global-options-with-wslconfig\">Configuration setting for .wslconfig</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[wsl2]</span><br><span class=\"line\">kernelCommandLine = &quot;sysctl.vm.max_map_count=262144&quot;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>the file path is <code>C:\\Users\\&lt;UserName&gt;\\.wslconfig</code></p>\n</blockquote>\n<p>設定完成之後重開 wsl 以及 docker-windows</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Get-Service LxssManager | Restart-Service</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"建立分析專案\"><a href=\"#建立分析專案\" class=\"headerlink\" title=\"建立分析專案\"></a>建立分析專案</h2><p>分析專案的步驟與先前文章介紹相同，因為社群版只支援手動設置，所以請選擇 <code>Manually</code><br><img src=\"/artblog/sonarqube-analyze-2022/2022-06-15-150119.jpg\"></p>\n<p>設定專案名稱、以及唯一識別碼<br><img src=\"/artblog/sonarqube-analyze-2022/2022-06-15-150218.jpg\"></p>\n<p>接下來詢問如何分析，選擇本地分析 <code>Locally</code><br><img src=\"/artblog/sonarqube-analyze-2022/2022-06-15-150359.jpg\"></p>\n<p>設定 <code>Token</code><br><img src=\"/artblog/sonarqube-analyze-2022/2022-06-15-150523.jpg\"></p>\n<p><code>Token</code> 產生完畢，這個只會顯示一次，請記好，否則就要再重新產生一個新的<br><img src=\"/artblog/sonarqube-analyze-2022/2022-06-15-150643.jpg\"></p>\n<p>接著選擇專案類型，這裡是用 C# .net Framekwork 作範例<br><img src=\"/artblog/sonarqube-analyze-2022/2022-06-15-150753.jpg\"></p>\n<p>屬於 sonarQube 的分析專案設定就到這邊就告一段落，接下來就是依照顯示的</p>\n<ol>\n<li>準備 scanner</li>\n<li>執行分析</li>\n</ol>\n<h2 id=\"SonarQube-Scanner\"><a href=\"#SonarQube-Scanner\" class=\"headerlink\" title=\"SonarQube Scanner\"></a>SonarQube Scanner</h2><p>從上個步驟的連結可以看到文件有提到因應 sonarQube 服務的版本不同，也需要下載不同版本的 <code>scanner</code>，當中也特別說明了，要使用哪一種 <code>scanner</code> 與專案並無關係，因為版本是取決於安裝在電腦上的 .net SDK 版本</p>\n<p>在 .net 的部分可以使用 msbuild 或是 dotnet 其中之一，我這裡選擇的是 msbuild，也就是下面這張圖的語法<br><img src=\"/artblog/sonarqube-analyze-2022/2022-06-15-151449.jpg\"></p>\n<p>因為這份連結文件是 local 的，所以也提供線上的文件<a href=\"https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-msbuild/\">SonarScanner for .NET</a><br><img src=\"/artblog/sonarqube-analyze-2022/2022-06-15-151821.jpg\"></p>\n<p>在這個地方可以看到<a href=\"https://github.com/SonarSource/sonar-scanner-msbuild/releases/download/5.6.0.48455/sonar-scanner-msbuild-5.6.0.48455-net46.zip\">.NET framework 4.6+</a>，將 <code>scanner</code> 下載解壓縮後，將該目錄設置環境變數 path，方便後續執行指令可以不用打完整路徑，環境變數的設定可以在 <code>Windows 設定</code>搜尋<code>編輯環境變數</code><br><img src=\"/artblog/sonarqube-analyze-2022/2022-06-15-152743.jpg\"><br><img src=\"/artblog/sonarqube-analyze-2022/2022-06-15-152622.jpg\"><br><img src=\"/artblog/sonarqube-analyze-2022/2022-06-15-152310.jpg\"></p>\n<blockquote>\n<p>因為 scanner 只支援 java 11 或 17，所以執行之前需要設置環境變數 JAVA_HOME 為 java 11 的路徑，例如</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">set JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF8</span><br><span class=\"line\">set JAVA_HOME=D:\\Java\\11</span><br><span class=\"line\">set SONAR_SCANNER_OPTS=-Xmx512m</span><br><span class=\"line\">&quot;D:\\Tool\\sonar-scanner-msbuild-5.8.0.52797-net46\\SonarScanner.MSBuild.exe&quot; begin /k:&quot;myProject&quot;....</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DotCover-Cli-tools\"><a href=\"#DotCover-Cli-tools\" class=\"headerlink\" title=\"DotCover Cli tools\"></a>DotCover Cli tools</h2><p>sonarQube 沒辦法自己做程式碼覆蓋率，但他可以讀取其他工具的報告來整合在自己的專案分析中，所以這邊使用的是我先前用過的 <code>dotCover cli tools</code><br>在<a href=\"https://www.jetbrains.com/dotcover/download/#section=commandline\">此處</a>下載最新版本<br><img src=\"/artblog/sonarqube-analyze-2022/2022-06-15-153353.jpg\"></p>\n<p>如同剛剛的步驟解壓到自訂路徑，並設置 <code>path</code> 環境變數<br><img src=\"/artblog/sonarqube-analyze-2022/2022-06-15-153502.jpg\"></p>\n<h2 id=\"程式碼覆蓋率\"><a href=\"#程式碼覆蓋率\" class=\"headerlink\" title=\"程式碼覆蓋率\"></a>程式碼覆蓋率</h2><p>如同<a href=\"https://partypeopleland.github.io/artblog/2020/08/12/SonarQube-%E6%B8%AC%E8%A9%A6%E5%A0%B1%E5%91%8A%E7%9A%84%E7%94%A2%E7%94%9F/\">SonarQube-測試報告的產生</a>提過的四個步驟<br>，除了在一開始就要設定好產出報告的檔名，後續透過 <code>dotCover</code> 執行程式碼覆蓋率也需要正確產出 HTML</p>\n<p>下面的指令模擬了解決方案中，有多個測試專案的處理方式，需要個別產生報告，接著合併後，再轉為 HTML</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">dotCover cover /TargetExecutable=&quot;D:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\Extensions\\TestPlatform\\vstest.console.exe&quot; /TargetArguments=&quot;myProject.Adapter.Test.dll&quot; /TargetWorkingDir=&quot;myProject.Adapter.Test\\bin\\debug&quot; /Output=&quot;myProject.Adapter.Test.dcvr&quot; /Filters=&quot;-:module=Dapper;-:module=StackExchange.Redis;-:module=myProject.DataClass;-:module=myProject.*.Test&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">dotCover cover /TargetExecutable=&quot;D:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\Extensions\\TestPlatform\\vstest.console.exe&quot; /TargetArguments=&quot;myProject.Core.Test.dll&quot; /TargetWorkingDir=&quot;myProject.Core.Test\\bin\\debug&quot; /Output=&quot;myProject.Core.Test.dcvr&quot; /Filters=&quot;-:module=Dapper;-:module=StackExchange.Redis;-:module=myProject.DataClass;-:module=myProject.*.Test&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">dotCover cover /TargetExecutable=&quot;D:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\IDE\\Extensions\\TestPlatform\\vstest.console.exe&quot; /TargetArguments=&quot;myProject.DataService.Test.dll&quot; /TargetWorkingDir=&quot;myProject.DataService.Test\\bin\\debug&quot; /Output=&quot;myProject.DataService.Test.dcvr&quot; /Filters=&quot;-:module=Dapper;-:module=StackExchange.Redis;-:module=myProject.DataClass;-:module=myProject.*.Test&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">dotCover merge --Source=&quot;myProject.Adapter.Test.dcvr;myProject.Core.Test.dcvr;myProject.DataService.Test.dcvr&quot; --Output=Merged.dcvr</span><br><span class=\"line\"></span><br><span class=\"line\">dotCover report --source=merged.dcvr --output=report.html --reportType=html</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>REF</strong></p>\n<ol>\n<li><a href=\"https://www.jetbrains.com/help/dotcover/Running_Coverage_Analysis_from_the_Command_LIne.html#covering-multiple-test-projects\">Cover multiple test projects</a></li>\n<li><a href=\"https://www.jetbrains.com/help/dotcover/dotCover__Console_Runner_Commands.html#cover\">dotCover 參數文件</a></li>\n</ol>\n<h2 id=\"單元測試數量\"><a href=\"#單元測試數量\" class=\"headerlink\" title=\"單元測試數量\"></a>單元測試數量</h2><p>C# 單元測試則是透過 <code>vstest.console.exe</code> 來產生報告，範例如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">vstest.console.exe /Logger:trx &quot;myProject.Adapter.Test\\bin\\Debug\\myProject.Adapter.Test.dll&quot;</span><br><span class=\"line\">vstest.console.exe /Logger:trx &quot;myProject.Core.Test\\bin\\Debug\\myProject.Core.Test.dll&quot;</span><br><span class=\"line\">vstest.console.exe /Logger:trx &quot;myProject.DataService.Test\\bin\\Debug\\myProject.DataService.Test.dll&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意事項</strong></p>\n<ol>\n<li><code>javascript</code> 分析需要 <code>node.js</code> 版本大於 <code>12.22</code> 以上</li>\n<li>單元測試產出的報告(<code>TestResults/*.trx</code>)需要每次分析後刪除，否則資料會隨著分析次數一直累加上去</li>\n</ol>\n<h2 id=\"排除檔案\"><a href=\"#排除檔案\" class=\"headerlink\" title=\"排除檔案\"></a>排除檔案</h2><p>建議先稍微看一下<a href=\"https://docs.sonarqube.org/latest/project-administration/narrowing-the-focus/\">Narrowing the Focus</a>，如果有排除的檔案不想被分析，可以透過分析專案的設定來排除</p>\n<p><img src=\"/artblog/sonarqube-analyze-2022/2022-06-15-160746.jpg\"></p>\n<p>或者是使用參數，如下列指令的<code>/d:sonar.exclusions</code>參數</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SonarScanner.MSBuild.exe begin</span><br><span class=\"line\">/k:&quot;myTestProject&quot;</span><br><span class=\"line\">/d:sonar.host.url=&quot;http://127.0.0.1:9090&quot;</span><br><span class=\"line\">/d:sonar.login=&quot;32aafa7ac56a55dae90d0891487e7af98506ed33&quot;</span><br><span class=\"line\">/d:sonar.cs.dotcover.reportsPaths=&quot;report.html&quot;</span><br><span class=\"line\">/d:sonar.cs.vstest.reportsPaths=&quot;TestResults/*.trx&quot;</span><br><span class=\"line\">/d:sonar.exclusions=myTestProject/Scripts/Plugins/**,myTestProject/Content/**</span><br></pre></td></tr></table></figure>\n\n<p>又或者是在<code>sonarQube</code>全域進行設定<br><img src=\"/artblog/sonarqube-analyze-2022/2022-06-15-161009.jpg\"></p>\n<table>\n<thead>\n<tr>\n<th>類型</th>\n<th>排除指令</th>\n<th>範例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>production code</td>\n<td>sonar.exclusions</td>\n<td>sonar.exclusions&#x3D;”myTestProject&#x2F;Scripts&#x2F;Plugins&#x2F;**“,”myTestProject&#x2F;Content&#x2F;**“</td>\n</tr>\n<tr>\n<td>test code</td>\n<td>sonar.test.exclusions</td>\n<td>sonar.test.exclusions&#x3D;”myTestProject.DataService.Test&#x2F;**&#x2F;*“,”myTestProject.Adapter.Test&#x2F;**&#x2F;<em>“,”myTestProject.Core.Test&#x2F;**&#x2F;</em>“</td>\n</tr>\n</tbody></table>\n<p>上面這個表格其實口語化一點就是，你自己寫的 production Code 如果有一些不想要他分析的話，像是第三方前端套件下載下來，如果它還去分析就很不必要了，就可以透過 <code>sonar.exclusions</code>排除掉；如果是自己寫的一些測試程式碼不想要分析，則是用 <code>sonar.test.exclusions</code>。如果有多個 pattern 要比對，用逗號分隔開就行了</p>\n<h2 id=\"問題排除\"><a href=\"#問題排除\" class=\"headerlink\" title=\"問題排除\"></a>問題排除</h2><p><a href=\"https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/\">官網</a>提供的就是這幾個簡單的情況</p>\n<p>但我碰上的情況是跟這一篇相同:<a href=\"https://community.sonarsource.com/t/java-lang-illegalstateexception-line-588-is-out-of-range-in-the-file/734\">java.lang.IllegalStateException: Line 588 is out of range in the file</a>，簡單來說就是明明檔案只有 100 行，但提示錯誤在 101 行，網友回復也很絕，那就把提示的檔案再加一行就行了。往下看也看到有人說是需要把一些檔案清掉。我則是在分析的目錄下，將產生出來的 <code>.sonarqube</code>目錄、跑測試產生的 <code>TestResult</code>目錄都清除</p>\n<p>因為測試跑一次分析有點久，所以這兩種方式我同時採納，嘗試過後的確有效，至於哪個才是關鍵因素，那就不研究了。</p>\n<h2 id=\"成果\"><a href=\"#成果\" class=\"headerlink\" title=\"成果\"></a>成果</h2><p><img src=\"/artblog/sonarqube-analyze-2022/2022-06-15-161305.jpg\"></p>\n<p>每一次執行分析都需要打一堆指令就很煩，對於自己 local 開發測試使用，還是最好將指令做成批次檔，每次想檢查的時候執行比較好，之後如果需要上 CI&#x2F;CD，也可以用 CLI 的方式在略微調整就可以上線，我其實比較不喜歡用包裝起來的 jenkins package 的指令</p>\n<blockquote>\n<p>關於 nvm 的部分則是因為筆電硬碟空間不夠，而用習慣的套件都還在舊版本的 node.js，如果有持續在更新且沒有硬碟空間困擾的人應該是不需要做 nvm 切換</p>\n</blockquote>\n<p><strong>完整分析指令範例</strong></p>\n<figure class=\"highlight bat\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">@REM sonarqube.bat</span></span><br><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [%<span class=\"number\">1</span>]==[] <span class=\"keyword\">goto</span> usage</span><br><span class=\"line\">@<span class=\"built_in\">CHCP</span> <span class=\"number\">65001</span></span><br><span class=\"line\"><span class=\"built_in\">ECHO</span> 變更 node.js 版本 (<span class=\"number\">16</span>.<span class=\"number\">14</span>.<span class=\"number\">2</span>)</span><br><span class=\"line\">nvm use <span class=\"number\">16</span>.<span class=\"number\">14</span>.<span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">ECHO</span> 移除殘留暫存檔案</span><br><span class=\"line\"><span class=\"built_in\">del</span> *.dcvr</span><br><span class=\"line\"><span class=\"built_in\">del</span> report /s /q</span><br><span class=\"line\"><span class=\"built_in\">del</span> .sonarqube /s /q</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">ECHO</span> 分析專案...</span><br><span class=\"line\"><span class=\"built_in\">set</span> SONAR_SCANNER_OPTS=-Xmx512m</span><br><span class=\"line\"><span class=\"comment\">@REM CALL &quot;D:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\Common7\\Tools\\VsDevCmd.bat&quot;</span></span><br><span class=\"line\">SonarScanner.MSBuild.exe begin /version:&quot;%~<span class=\"number\">1</span>&quot; /k:&quot;local-MI&quot; /d:sonar.host.url=&quot;http://localhost:<span class=\"number\">9000</span>&quot; /d:sonar.login=&quot;sqp_7d1aa4c438b3a22d6fb82b3e1bdf94beae33a1d8&quot; /d:sonar.cs.dotcover.reportsPaths=&quot;report.html&quot; /d:sonar.cs.vstest.reportsPaths=&quot;TestResults/*.trx&quot; /d:sonar.exclusions=&quot;MyProject.Web/Scripts/Plugins/**/*&quot;,&quot;MyProject.Web/Dist/**/*&quot;,&quot;MyProject.Web/Content/**/*&quot; /d:sonar.test.exclusions=&quot;MyProject.DataService.Test/**/*&quot;,&quot;MyProject.Adapter.Test/**/*&quot;,&quot;MyProject.Core.Test/**/*&quot;</span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">@REM open debug mode ==&gt; /d:sonar.verbose=true</span></span><br><span class=\"line\"></span><br><span class=\"line\">MsBuild.exe /t:Rebuild</span><br><span class=\"line\"><span class=\"comment\">@REM MSBuild.exe &quot;MyProject.Adapter.Test\\MyProject.Adapter.Test.csproj&quot; /t:Rebuild /p:Configuration=Lab</span></span><br><span class=\"line\"><span class=\"comment\">@REM MSBuild.exe &quot;MyProject.Core.Test\\MyProject.Core.Test.csproj&quot; /t:Rebuild /p:Configuration=Lab</span></span><br><span class=\"line\"><span class=\"comment\">@REM MSBuild.exe &quot;MyProject.DataService.Test\\MyProject.DataService.Test.csproj&quot; /t:Rebuild /p:Configuration=Lab</span></span><br><span class=\"line\"></span><br><span class=\"line\">dotCover cover /TargetExecutable=&quot;D:\\Program Files\\Microsoft Visual Studio\\<span class=\"number\">2022</span>\\Community\\Common7\\IDE\\Extensions\\TestPlatform\\vstest.console.exe&quot; /TargetArguments=&quot;MyProject.Adapter.Test.dll&quot; /TargetWorkingDir=&quot;MyProject.Adapter.Test\\bin\\debug&quot; /Output=&quot;MyProject.Adapter.Test.dcvr&quot; /Filters=&quot;-:module=Dapper;-:module=StackExchange.Redis;-:module=MyProject.DataClass;-:module=MyProject.*.Test&quot;</span><br><span class=\"line\">dotCover cover /TargetExecutable=&quot;D:\\Program Files\\Microsoft Visual Studio\\<span class=\"number\">2022</span>\\Community\\Common7\\IDE\\Extensions\\TestPlatform\\vstest.console.exe&quot; /TargetArguments=&quot;MyProject.Core.Test.dll&quot; /TargetWorkingDir=&quot;MyProject.Core.Test\\bin\\debug&quot; /Output=&quot;MyProject.Core.Test.dcvr&quot; /Filters=&quot;-:module=Dapper;-:module=StackExchange.Redis;-:module=MyProject.DataClass;-:module=MyProject.*.Test&quot;</span><br><span class=\"line\">dotCover cover /TargetExecutable=&quot;D:\\Program Files\\Microsoft Visual Studio\\<span class=\"number\">2022</span>\\Community\\Common7\\IDE\\Extensions\\TestPlatform\\vstest.console.exe&quot; /TargetArguments=&quot;MyProject.DataService.Test.dll&quot; /TargetWorkingDir=&quot;MyProject.DataService.Test\\bin\\debug&quot; /Output=&quot;MyProject.DataService.Test.dcvr&quot; /Filters=&quot;-:module=Dapper;-:module=StackExchange.Redis;-:module=MyProject.DataClass;-:module=MyProject.*.Test&quot;</span><br><span class=\"line\">dotCover merge --Source=&quot;MyProject.Adapter.Test.dcvr;MyProject.Core.Test.dcvr;MyProject.DataService.Test.dcvr&quot; --Output=Merged.dcvr</span><br><span class=\"line\">dotCover report --source=merged.dcvr --output=report.html --reportType=html</span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">@REM Remove-Item –path .\\TestResults\\  -include *.trx –recurse</span></span><br><span class=\"line\"><span class=\"built_in\">del</span> testResults /s /q</span><br><span class=\"line\"></span><br><span class=\"line\">vstest.console.exe /Logger:trx &quot;MyProject.Adapter.Test\\bin\\Debug\\MyProject.Adapter.Test.dll&quot;</span><br><span class=\"line\">vstest.console.exe /Logger:trx &quot;MyProject.Core.Test\\bin\\Debug\\MyProject.Core.Test.dll&quot;</span><br><span class=\"line\">vstest.console.exe /Logger:trx &quot;MyProject.DataService.Test\\bin\\Debug\\MyProject.DataService.Test.dll&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">SonarScanner.MSBuild.exe end /d:sonar.login=&quot;sqp_7d1aa4c438b3a22d6fb82b3e1bdf94beae33a1d8&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">ECHO</span> 變更 node.js 版本 (<span class=\"number\">12</span>.<span class=\"number\">16</span>.<span class=\"number\">1</span>)</span><br><span class=\"line\">nvm use <span class=\"number\">12</span>.<span class=\"number\">16</span>.<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">ECHO</span> Done!</span><br><span class=\"line\"><span class=\"keyword\">goto</span> :eof</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">:usage</span><br><span class=\"line\">@<span class=\"built_in\">echo</span> ERROR: No Version</span><br><span class=\"line\"><span class=\"keyword\">exit</span> /B <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"補充-停用專案分析規則\"><a href=\"#補充-停用專案分析規則\" class=\"headerlink\" title=\"補充:停用專案分析規則\"></a>補充:停用專案分析規則</h2><p>事情是這樣的，分析 <code>vue</code> 檔案的時候，因為先前用的是 rider 右鍵自動產生出來的範本，所以會固定產出 style 區塊標籤，但其實不會每個都需要用到，當初並沒有想太多就這樣簽入了，而現在被分析出來說這是不符合規則:<code>CSS files should not be empty</code>，這邊就用這個例子示範一下怎麼停用這一條分析規則</p>\n<p><img src=\"/artblog/sonarqube-analyze-2022/2022-06-20-175857.jpg\"><br>首先將該規則找到，透過上圖的方式，在左上方搜尋規則名稱，出現的列表中點明細查看資訊，可以看到右上方會出現這個規則是哪一個語言</p>\n<p><img src=\"/artblog/sonarqube-analyze-2022/2022-06-20-180100.jpg\"><br>到品質配置頁籤，將該規則複製一份，這就是我們要修改的對象</p>\n<p><img src=\"/artblog/sonarqube-analyze-2022/2022-06-20-180357.jpg\"><br>複製出來的對象點一下，進到這個頁面，再看自己要修改什麼去點那個超連結就行了</p>\n<p><img src=\"/artblog/sonarqube-analyze-2022/2022-06-20-180246.jpg\"><br><img src=\"/artblog/sonarqube-analyze-2022/2022-06-20-180501.jpg\"><br>找到特定規則可選擇啟用或停用了</p>\n<p><img src=\"/artblog/sonarqube-analyze-2022/2022-06-21-093900.jpg\"><br>在剛剛的地方點右邊修改專案</p>\n<p><img src=\"/artblog/sonarqube-analyze-2022/2022-06-21-094022.jpg\"><br>然後輸入你要配置的設定是給哪個專案用的，找到後勾選就行了</p>\n<p>最後就是重新跑一次分析就可以了</p>\n","categories":["devOps"],"tags":["sonarQube"]},{"title":"azure認知搜尋初學","url":"/artblog//azure-cognitive-search/","content":"<p><code>Azure Search Document</code> 是 <code>Azure Cognitive Search documentation</code>（認知搜尋文件) 這項服務的 Nuget 套件，也就是以前說的 <code>Azure Search</code>，這項服務可以讓使用者的搜尋體驗變得較為友善－透過自動完成、同義字比對、模糊比對、模式比對、篩選和排序</p>\n<p>一般情況下大部分我們自己做的搜尋都還在篩選排序等等，要做到同義字比對與模糊比對就比較複雜，或者說需要付出較高的企業成本，而採用<code>Azure Search</code>就是一個可以考慮的解決方案了，接下來就著重在如何使用的部分，透過一個簡單的範例來說明。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"intro\"><a href=\"#intro\" class=\"headerlink\" title=\"intro\"></a>intro</h2><p>搜尋服務最核心的就是下面的三個東西，我們首先需要先準備資料，放在資料來源當中，並且建立好索引，也就是資料與欄位的對應關係，並確認該欄位的一些屬性，例如是否可搜尋、可排序等等；最後再透過索引子實際執行，將資料來源的資料經過處理後放到索引之內。之後就可以透過 API 去做查詢，也可以透過 <code>Azure Search Document</code>這個 Nuget 套件查詢資料</p>\n<p><img src=\"/artblog/azure-cognitive-search/as01.jpg\"></p>\n<ol>\n<li>索引:透過 SDK 或 REST API 發出請求，針對索引欄位作操作</li>\n<li>索引子:索引＆資料來源中間愛的橋樑</li>\n<li>資料來源:支援 Azure Blob、Azure SQL Database…等等</li>\n</ol>\n<p>詳細的設定及文件還是需要參考官方文件比較清楚，這裡只是稍微說明一下</p>\n<h3 id=\"資料來源\"><a href=\"#資料來源\" class=\"headerlink\" title=\"資料來源\"></a>資料來源</h3><p>能夠作為資料來源的有很多，這邊以 Azure Blob 容器為例子，指定好<code>連接字串</code>、<code>容器名稱</code>就可以使用這裡也有很多設定值可以調整，也要考量到自己的規劃來做設定。像是<code>追蹤刪除</code>就會影響到你索引的定義，還有資料來源上傳的檔案 Schema 要怎麼規劃，在我的使用情境下，我是需要追蹤刪除的，所以我採用了使用一個欄位<code>IsDel</code>來做，只要這個欄位是 1 就代表這筆資料需要被刪除<br><img src=\"/artblog/azure-cognitive-search/as02.jpg\"></p>\n<ol>\n<li><a href=\"https://docs.microsoft.com/zh-tw/azure/search/search-indexer-tutorial\">教學課程：使用 .NET SDK 為 Azure SQL 資料編製索引</a></li>\n<li><a href=\"https://docs.microsoft.com/zh-tw/azure/search/tutorial-multiple-data-sources\">教學課程：使用 .NET SDK 從多個資料來源編製索引</a></li>\n<li><a href=\"https://github.com/Azure-Samples/azure-search-dotnet-samples/blob/master/multiple-data-sources/v11/src/Program.cs\">Sample Code - 1</a></li>\n<li><a href=\"https://github.com/Azure-Samples/azure-search-dotnet-samples/blob/beb243914650fd3eb7355f8a775eb9138df70aa3/tutorial-ai-enrichment/v10/Program.cs\">Sample Code - 2</a></li>\n<li><a href=\"https://docs.microsoft.com/zh-tw/azure/search/samples-dotnet\">適用于 Azure 認知搜尋的 .NET (c # ) 程式碼範例</a></li>\n</ol>\n<h3 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h3><p>在這邊設定的就是定義好每一筆資料的欄位，是否可以被搜尋、篩選、取出、排序等等，比較重要的部分就是要定義那個欄位是<code>Key</code>值，當然也要加上一個虛刪除的欄位<br><img src=\"/artblog/azure-cognitive-search/as03.jpg\"></p>\n<p>假設我要做一個商品查詢，那索引應該要有哪些欄位呢？</p>\n<ul>\n<li>搜尋結果：前端會用到的欄位，如商品標題，價格等等</li>\n<li>篩選條件：商品數量、銷售狀態、分類等等</li>\n<li>關鍵字查詢：商品名稱、商品明細</li>\n<li>統計資訊：分類等等</li>\n<li>排序條件：商品庫存、價格等等</li>\n</ul>\n<p>決定好有哪些欄位之後，依據各欄位用途設定屬性，使其可以被取出、篩選、排序、搜尋、Facet</p>\n<ol>\n<li>可取出：大概的意思就是跟 SQL 的 Select 差不多吧。基本上不需要被取出的欄位也沒必要上傳到資料來源了吧（除非要做篩選排序搜尋等等)</li>\n<li>可排序：就是字面上的意思，該欄位可以用來排序</li>\n<li>可篩選：這個意思就是類似 SQL 的 Where 條件，例如當我設定商品類型可以篩選，那我就可以透過篩選商品類型的值，取得某類型的商品</li>\n<li>可 Facet：假設我有三筆資料，兩筆是 3C 用品，一筆是文具，當我加上了參數要他回傳 Facet，並且搜尋所有商品，他就會額外給我一個統計資料，告訴我 3C 有兩筆，文具有一筆；大概就是這樣的意思；另一種解釋是：用該面向去看你的搜尋結果</li>\n<li>可搜尋：設定為可搜尋的話，後續需要指定要用哪一種分析器，應該是跟語意分析、拆字有關係吧…</li>\n</ol>\n<blockquote>\n<p>在這裡要注意資料庫的欄位定義與索引的欄位定義資料型態的問題，要看一下是否相容</p>\n</blockquote>\n<h3 id=\"索引子\"><a href=\"#索引子\" class=\"headerlink\" title=\"索引子\"></a>索引子</h3><p><img src=\"/artblog/azure-cognitive-search/as04.jpg\"></p>\n<p>索引子的設定相對較為單純，這裡因為我採用的是 json 的資料來源，所以<code>parsingMode</code>設定為 <code>jsonArray</code>，代表的是 Json 檔案內是一個 json 物件的集合</p>\n<h3 id=\"同義詞建立\"><a href=\"#同義詞建立\" class=\"headerlink\" title=\"同義詞建立\"></a>同義詞建立</h3><p>建立、更新和刪除同義字地圖永遠是整份檔的作業，這表示您無法以累加方式更新或刪除同義字地圖的部分。 即使只更新單一規則，也需要重載。</p>\n<ol>\n<li><p>只能每次重新做</p>\n</li>\n<li><p>做完就需要去更新索引有哪些欄位使用到了同義字</p>\n</li>\n<li><p><a href=\"https://docs.microsoft.com/zh-tw/azure/search/search-synonyms\">新增同義字</a></p>\n</li>\n<li><p><a href=\"https://github.com/Azure-Samples/search-dotnet-getting-started/blob/master/DotNetHowToSynonyms/DotNetHowToSynonyms/Program.cs\">Sample Code</a></p>\n</li>\n<li><p><a href=\"https://docs.microsoft.com/zh-tw/azure/search/search-synonyms-tutorial-sdk\">Example: Add synonyms for Azure Cognitive Search in C#</a></p>\n</li>\n</ol>\n<h3 id=\"搜尋建議\"><a href=\"#搜尋建議\" class=\"headerlink\" title=\"搜尋建議\"></a>搜尋建議</h3><ol>\n<li><a href=\"https://docs.microsoft.com/zh-tw/azure/search/index-add-suggesters\">建立建議工具，以在查詢中啟用自動完成和建議的結果</a></li>\n</ol>\n<h2 id=\"範例程式碼\"><a href=\"#範例程式碼\" class=\"headerlink\" title=\"範例程式碼\"></a>範例程式碼</h2><p>基於開發時期常常會需要修改調整，如果都透過手動來建立索引等等動作，會非常的煩人，所以寫個 Console 專案透過參數來做這些事情會比較方便，這邊就節錄我自己寫的一個 Helper，全都是參考官方範例改的。下面的程式碼僅供參考</p>\n<h3 id=\"AppSettingConfig-json\"><a href=\"#AppSettingConfig-json\" class=\"headerlink\" title=\"AppSettingConfig.json\"></a>AppSettingConfig.json</h3><figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;azureSearchConfig&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;ServiceName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;service-name&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;ApiKey&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;api-key&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;IndexName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;index-name&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;DataSourceName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;datasource-name&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;DataSourceConnectionString&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;datasource-conn-str&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;DataSourceContainer&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;container-name&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;DataSourceContainerQuery&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;container-folder&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;IndexerName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;indexer-name&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AzureSearchSettings-cs\"><a href=\"#AzureSearchSettings-cs\" class=\"headerlink\" title=\"AzureSearchSettings.cs\"></a>AzureSearchSettings.cs</h3><figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AzureSearchSettings</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> Position = <span class=\"string\">&quot;AzureSearchConfig&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 同義詞名稱</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> SynonymsName = <span class=\"string\">&quot;kw-synonym&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 採用同義詞的欄位</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span>[] SynonymsFields = &#123; <span class=\"string\">&quot;ProductName&quot;</span>, <span class=\"string\">&quot;Detail&quot;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 搜尋建議來源欄位</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span>[] SuggestFields = &#123; <span class=\"string\">&quot;ProductName&quot;</span>, <span class=\"string\">&quot;Detail&quot;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> service name</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> ServiceName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = <span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> API Key</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> ApiKey &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = <span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 索引名稱</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> IndexName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = <span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> Azure Search Service EndPoint</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Uri ServiceEndPoint =&gt; <span class=\"keyword\">new</span>(<span class=\"string\">$&quot;https://<span class=\"subst\">&#123;ServiceName&#125;</span>.search.windows.net/&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 資料來源名稱</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> DataSourceName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = <span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 資料來源連線字串</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> DataSourceConnectionString &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = <span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 容器名稱</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> DataSourceContainer &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = <span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 容器子目錄名稱</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> DataSourceContainerQuery &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = <span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 索引子名稱</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> IndexerName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = <span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MyProduct-cs\"><a href=\"#MyProduct-cs\" class=\"headerlink\" title=\"MyProduct.cs\"></a>MyProduct.cs</h3><figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MyProduct</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 商品代碼</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">SimpleField(IsKey = true)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> ProductID &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 圖片</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">SimpleField</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Pic &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 售價</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">SimpleField</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">long</span> Price &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 商品數量顯示所需資料</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">SimpleField(IsFilterable = true)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Qty &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 關鍵字商品查詢條件</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">SearchableField(AnalyzerName = LexicalAnalyzerName.Values.StandardLucene, SynonymMapNames = new[</span>] &#123; <span class=\"string\">&quot;kw-synonym&quot;</span> &#125;)]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> ProductName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 關鍵字商品查詢條件</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">SearchableField(AnalyzerName = LexicalAnalyzerName.Values.StandardLucene, SynonymMapNames = new[</span>] &#123; <span class=\"string\">&quot;kw-synonym&quot;</span> &#125;)]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Detail &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 篩選條件：商品分類</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">SimpleField(IsFacetable = true, IsFilterable = true)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> ProductType &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 排序條件：商品排序</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">SimpleField(IsSortable = true)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Sort &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 是否刪除</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">SimpleField</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> IsDel &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AzureSearchHelper-cs\"><a href=\"#AzureSearchHelper-cs\" class=\"headerlink\" title=\"AzureSearchHelper.cs\"></a>AzureSearchHelper.cs</h3><figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AzureSearchHelper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> SearchIndexClient _indexClient;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> SearchIndexerClient _indexerClient;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span> _indexName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> AzureSearchSettings _settings;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AzureSearchHelper</span>(<span class=\"params\">AzureSearchSettings settings</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _settings = settings;</span><br><span class=\"line\">        _indexName = settings.IndexName;</span><br><span class=\"line\">        _indexClient = <span class=\"keyword\">new</span> SearchIndexClient(settings.ServiceEndPoint, <span class=\"keyword\">new</span> AzureKeyCredential(settings.ApiKey));</span><br><span class=\"line\">        _indexerClient = <span class=\"keyword\">new</span> SearchIndexerClient(settings.ServiceEndPoint, <span class=\"keyword\">new</span> AzureKeyCredential(settings.ApiKey));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> SearchIndexerDataSourceConnection <span class=\"title\">PrepareDataSourceConnection</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SearchIndexerDataSourceConnection(</span><br><span class=\"line\">            _settings.DataSourceName,</span><br><span class=\"line\">            SearchIndexerDataSourceType.AzureBlob,</span><br><span class=\"line\">            _settings.DataSourceConnectionString,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> SearchIndexerDataContainer(_settings.DataSourceContainer) &#123; Query = _settings.DataSourceContainerQuery &#125;)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            DataDeletionDetectionPolicy = <span class=\"keyword\">new</span> SoftDeleteColumnDeletionDetectionPolicy</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                SoftDeleteColumnName = <span class=\"string\">&quot;IsDel&quot;</span>,</span><br><span class=\"line\">                SoftDeleteMarkerValue = <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">HandleSynonymsIndexSafely</span>(<span class=\"params\"><span class=\"built_in\">string</span> action</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> MaxNumTries = <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; MaxNumTries; ++i)</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                SearchIndex index = _indexClient.GetIndex(_indexName);</span><br><span class=\"line\">                index = HandleSynonymMapsToFields(index, action);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// The IfNotChanged condition ensures that the index is updated only if the ETags match.</span></span><br><span class=\"line\">                _indexClient.CreateOrUpdateIndex(index);</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">&quot;更新索引 OK.&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Console.WriteLine(<span class=\"string\">$&quot;Index update failed : . Attempt(<span class=\"subst\">&#123;i&#125;</span>/<span class=\"subst\">&#123;MaxNumTries&#125;</span>).\\n&quot;</span>);</span><br><span class=\"line\">                Console.WriteLine(ex);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SearchIndex <span class=\"title\">HandleSynonymMapsToFields</span>(<span class=\"params\">SearchIndex index, <span class=\"built_in\">string</span> action</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> fields <span class=\"keyword\">in</span> AzureSearchSettings.SynonymsFields)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> synonymMapNames = index.Fields.First(f =&gt; f.Name == fields).SynonymMapNames;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (action == SynonymsOpera.Create)</span><br><span class=\"line\">                synonymMapNames.Add(AzureSearchSettings.SynonymsName);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                synonymMapNames.Clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">SynonymsString</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span>取得同義詞</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;喫肉趣, 御牧牛, 台畜\\n卜蜂,美特多,洽富氣冷雞 =&gt; 雞肉&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> SearchIndexer <span class=\"title\">PrepareSearchIndexer</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SearchIndexer(_settings.IndexerName, _settings.DataSourceName, _indexName)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Parameters = <span class=\"keyword\">new</span> IndexingParameters</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Configuration =</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    &#123; <span class=\"string\">&quot;parsingMode&quot;</span>, <span class=\"string\">&quot;jsonArray&quot;</span> &#125;,</span><br><span class=\"line\">                    &#123; <span class=\"string\">&quot;dataToExtract&quot;</span>, <span class=\"string\">&quot;contentAndMetadata&quot;</span> &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                MaxFailedItems = <span class=\"number\">0</span>,</span><br><span class=\"line\">                MaxFailedItemsPerBatch = <span class=\"number\">0</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 建立同義詞</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateOrUpdateSynonymMap</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> synonymMap = <span class=\"keyword\">new</span> SynonymMap(AzureSearchSettings.SynonymsName, SynonymsString());</span><br><span class=\"line\">        _indexClient.CreateOrUpdateSynonymMap(synonymMap);</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;上傳同義詞 OK.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 刪除同義詞</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DeleteSynonymMap</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _indexClient.DeleteSynonymMap(AzureSearchSettings.SynonymsName);</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;刪除同義詞 OK.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 刪除索引</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DeleteIndexIfExists</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> isExistIndex = _indexClient.GetIndexNames().Any(index =&gt; index == _indexName);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isExistIndex) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        _indexClient.DeleteIndex(_indexName);</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;清除索引 OK.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 建立 INDEX</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>索引資料類別<span class=\"doctag\">&lt;/typeparam&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateIndex</span>&lt;<span class=\"title\">T</span>&gt;()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> fieldBuilder = <span class=\"keyword\">new</span> FieldBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> searchFields = fieldBuilder.Build(<span class=\"keyword\">typeof</span>(T));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> definition = <span class=\"keyword\">new</span> SearchIndex(_indexName, searchFields);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 搜尋建議</span></span><br><span class=\"line\">        <span class=\"comment\">// REF:https://docs.microsoft.com/zh-tw/azure/search/index-add-suggesters</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> suggester = <span class=\"keyword\">new</span> SearchSuggester(<span class=\"string\">&quot;sg&quot;</span>, AzureSearchSettings.SuggestFields);</span><br><span class=\"line\">        definition.Suggesters.Add(suggester);</span><br><span class=\"line\"></span><br><span class=\"line\">        _indexClient.CreateOrUpdateIndex(definition);</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$&quot;建立索引:[<span class=\"subst\">&#123;_indexName&#125;</span>] OK.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 更新同義詞索引欄位</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;action&quot;&gt;</span>新增或移除<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">HandleSynonymsWhenIndexExist</span>(<span class=\"params\"><span class=\"built_in\">string</span> action</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 更新索引欄位定義</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> isExistIndex = _indexClient.GetIndexNames().Any(index =&gt; index == _indexName);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isExistIndex) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Console.WriteLine($&quot;索引存在，&#123;(action == SynonymsOpera.Create ? &quot;新增&quot; : &quot;移除&quot;)&#125;索引同義詞 ...&quot;);</span></span><br><span class=\"line\">        <span class=\"comment\">// foreach (var field in AzureSearchSettings.SynonymsFields) Console.WriteLine($&quot;同義詞欄位:&#123;field&#125;&quot;);</span></span><br><span class=\"line\">        HandleSynonymsIndexSafely(action);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 執行索引子</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">RunIndexer</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;Running Blob Storage indexer...\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _indexerClient.RunIndexer(_settings.IndexerName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (RequestFailedException ex) <span class=\"keyword\">when</span> (ex.Status == <span class=\"number\">429</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;Failed to run indexer: &#123;0&#125;&quot;</span>, ex.Message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(ex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;執行 Indexer OK.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 建立 Indexer</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateOrUpdateIndexer</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> blobIndexer = PrepareSearchIndexer();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Reset the indexer if it already exists</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _indexerClient.GetIndexer(blobIndexer.Name);</span><br><span class=\"line\">            <span class=\"comment\">//Rest the indexer if it exists.</span></span><br><span class=\"line\">            _indexerClient.ResetIndexer(blobIndexer.Name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (RequestFailedException ex) <span class=\"keyword\">when</span> (ex.Status == <span class=\"number\">404</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        _indexerClient.CreateOrUpdateIndexer(blobIndexer);</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$&quot;建立 Indexer:[<span class=\"subst\">&#123;blobIndexer.Name&#125;</span>] OK.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span>  建立 DataSource</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateOrUpdateDataSourceConnection</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> blobDataSource = PrepareDataSourceConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// The blob data source does not need to be deleted if it already exists,</span></span><br><span class=\"line\">        <span class=\"comment\">// but the connection string might need to be updated if it has changed.</span></span><br><span class=\"line\">        _indexerClient.CreateOrUpdateDataSourceConnection(blobDataSource);</span><br><span class=\"line\"></span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$&quot;建立 Data Source:[<span class=\"subst\">&#123;blobDataSource.Name&#125;</span>] OK.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"呼叫端-init\"><a href=\"#呼叫端-init\" class=\"headerlink\" title=\"呼叫端: init\"></a>呼叫端: init</h3><figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] param</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 建立同義詞</span></span><br><span class=\"line\">    _helper.CreateOrUpdateSynonymMap();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 確保同名的 INDEX 不存在</span></span><br><span class=\"line\">    _helper.DeleteIndexIfExists();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 建立 INDEX</span></span><br><span class=\"line\">    _helper.CreateIndex&lt;MyProduct&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 建立 DataSource</span></span><br><span class=\"line\">    _helper.CreateOrUpdateDataSourceConnection();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 建立 Indexer</span></span><br><span class=\"line\">    _helper.CreateOrUpdateIndexer();</span><br><span class=\"line\">    _helper.RunIndexer();</span><br><span class=\"line\"></span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">&quot;Done!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"呼叫端-Synonyms-Create-or-Remove\"><a href=\"#呼叫端-Synonyms-Create-or-Remove\" class=\"headerlink\" title=\"呼叫端: Synonyms Create or Remove\"></a>呼叫端: Synonyms Create or Remove</h3><figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] param</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (param[<span class=\"number\">1</span>])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Opera.Create:</span><br><span class=\"line\">            <span class=\"comment\">// 建立同義詞</span></span><br><span class=\"line\">            _helper.CreateOrUpdateSynonymMap();</span><br><span class=\"line\">            <span class=\"comment\">// 更新同義詞索引欄位 - 新增</span></span><br><span class=\"line\">            _helper.HandleSynonymsWhenIndexExist(SynonymsOpera.Create);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Opera.Remove:</span><br><span class=\"line\">            <span class=\"comment\">// 刪除同義詞</span></span><br><span class=\"line\">            _helper.DeleteSynonymMap();</span><br><span class=\"line\">            <span class=\"comment\">// 更新同義詞索引欄位 - 移除</span></span><br><span class=\"line\">            _helper.HandleSynonymsWhenIndexExist(SynonymsOpera.Remove);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"literal\">default</span>:</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;Command Error , &#x27;create&#x27; or &#x27;remove&#x27; only&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"呼叫端-DataSrouce-Create-or-Update\"><a href=\"#呼叫端-DataSrouce-Create-or-Update\" class=\"headerlink\" title=\"呼叫端: DataSrouce Create or Update\"></a>呼叫端: DataSrouce Create or Update</h3><figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] param</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 建立 DataSource</span></span><br><span class=\"line\">    _helper.CreateOrUpdateDataSourceConnection();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"呼叫端-Index-Create-or-Remove\"><a href=\"#呼叫端-Index-Create-or-Remove\" class=\"headerlink\" title=\"呼叫端: Index Create or Remove\"></a>呼叫端: Index Create or Remove</h3><figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] param</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (param[<span class=\"number\">1</span>])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Opera.Create:</span><br><span class=\"line\">            <span class=\"comment\">// 建立索引</span></span><br><span class=\"line\">            _helper.CreateIndex&lt;MyProduct&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Opera.Remove:</span><br><span class=\"line\">            <span class=\"comment\">// 刪除索引</span></span><br><span class=\"line\">            _helper.DeleteIndexIfExists();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"literal\">default</span>:</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;Command Error , &#x27;create&#x27; or &#x27;remove&#x27; only&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"呼叫端-Indexer-Create-or-Run\"><a href=\"#呼叫端-Indexer-Create-or-Run\" class=\"headerlink\" title=\"呼叫端: Indexer Create or Run\"></a>呼叫端: Indexer Create or Run</h3><figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] param</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (param[<span class=\"number\">1</span>])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Opera.Create:</span><br><span class=\"line\">            <span class=\"comment\">// 建立 Indexer</span></span><br><span class=\"line\">            _helper.CreateOrUpdateIndexer();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Opera.Run:</span><br><span class=\"line\">            <span class=\"comment\">// 執行索引子</span></span><br><span class=\"line\">            _helper.RunIndexer();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"literal\">default</span>:</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;Command Error , &#x27;create&#x27; or &#x27;run&#x27; only&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"後記\"><a href=\"#後記\" class=\"headerlink\" title=\"後記\"></a>後記</h2><p>其實在實做的過程還有很多細節需要注意，這些東西就很難一一說明，但是官方文件大部分都有提到，如果沒有提到的部分，可以多參考一下 API 的文件，也可以從中取得相關資訊，整體來說文件還蠻詳細，但是就是需要花時間找，而且大部分都有官方範例可以看，需要考量的反而是制訂解決方案，還有決定付費層級，如果只是自己練習的話，建議還是開個新帳號去申請試用，趁著免費的期間熟悉吧。</p>\n","categories":["azure"],"tags":["azureSearch"]},{"title":"git-忽略本地檔案且不修改專案.gitignore","url":"/artblog//git-ignore-local-file-without-edit-project-gitignore/","content":"<p>今天寫的是一個很簡單的 tip，因為使用 rider 但是團隊其他人並沒有使用，這樣子 IDE 產生出來的一些檔案如果也寫到專案的 <code>.gitignore</code> 好像也不太好，以往都是很熟悉的團隊成員，所以偷懶直接加上去也沒關係，但如果是剛到新團隊這樣幹就不太好了</p>\n<span id=\"more\"></span>\n\n<p>當然有一些軟體都有設定可以排除掉本地檔案，像是 php storm 聽說有，但這樣子就被限制住一定要使用該軟體，如果透過指令列或是換一套軟體就破功了。其實在 Github 這邊已經有一篇文章寫得很清楚了:<a href=\"https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files#create-a-global-gitignore\">Ignoring files</a></p>\n<h2 id=\"針對特定一個-repo\"><a href=\"#針對特定一個-repo\" class=\"headerlink\" title=\"針對特定一個 repo\"></a>針對特定一個 repo</h2><p>就是在專案底下建立 <code>.gitignore</code>，這個就是很單純的把不想要進版控的檔案放在這邊，但如果是以這次的情境，明顯是不符合我們要的</p>\n<p>所以我們還必須要在專案根目錄下的 <code>.git/info/exclude</code> 這個檔案去做額外的排除設定就可以了，但如果像是我固定用 <code>rider</code> 每個專案他都會建立 <code>.idea</code> 設定資料，那我不就每個都要去做，又或者是我重新下載 repo 也要重做一次，那很累的，所以，這裡也有提供一個電腦 global 的設定</p>\n<h2 id=\"電腦全域設定排除檔案\"><a href=\"#電腦全域設定排除檔案\" class=\"headerlink\" title=\"電腦全域設定排除檔案\"></a>電腦全域設定排除檔案</h2><p>我們可以透過指令，告訴 git 我們希望做全域排除的檔案放在哪裡，這個步驟可以透過指令來執行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global core.excludesfile ~/.gitignore_global</span><br></pre></td></tr></table></figure>\n\n<p>依照上述命令，設定排除的檔案就是使用者目錄下的 <code>.gitignore_global</code> 這個檔案，所以只要去修改這個檔案內容，就能控制要排除掉的檔案了</p>\n<blockquote>\n<p>git 2.8 版本以上可以透過 <code>git config --list --show-origin</code> 看到當前目錄會吃到的所有 git 設定值，可以更確切的知道會吃到哪些檔案的設定值，對於不清楚 git 設定從哪邊來的使用者很有用(例如使用免安裝的 git 使用者)</p>\n</blockquote>\n","categories":["git"]},{"title":"polly - 熔斷機制","url":"/artblog//polly-library-circuit-breaker/","content":"<p>熔斷機制這個名詞我自己的理解是核心觀念就是類似電路過載保護的概念。家裡面的繼電器負責的就是提供一個保護機制，當同一電流迴路的用電負載超出安全電流，則繼電器就會跳脫，使得電路斷路，達到隔離的作用。原因是連續通過的電流會讓電線過熱(這個有興趣的話好像可以去看看電磁學，我都還給老師了沒有記得很詳細)，容易使電線的絕緣體老化(也就是電線外面那層塑膠皮)，甚至是燃燒的情況，從而有電線走火的危機</p>\n<p>上面那個說法我不確定離開學校那麼久之後有沒有講錯，但大致上的觀念就是這樣：<code>當系統發生問題，透過保護機制將發生問題的系統斷開，不讓問題繼續擴大</code></p>\n<blockquote>\n<p>REF: <a href=\"https://www.easyatm.com.tw/wiki/%E9%81%8E%E8%BC%89%E4%BF%9D%E8%AD%B7\">過載保護 - 中文百科</a></p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"系統可用性相關文章\"><a href=\"#系統可用性相關文章\" class=\"headerlink\" title=\"系統可用性相關文章\"></a>系統可用性相關文章</h2><ol>\n<li>Polly - 熔斷機制</li>\n<li><a href=\"https://partypeopleland.github.io/artblog/2022/08/03/limiting-algorithm/#more\">常見限流策略</a></li>\n</ol>\n<h2 id=\"遭遇的問題\"><a href=\"#遭遇的問題\" class=\"headerlink\" title=\"遭遇的問題\"></a>遭遇的問題</h2><p>而在軟體產業也有類似的情況，也就是網站向外部請求資源失敗後整個卡住，從而破壞使用者體驗。這樣的情況應該很多人都有碰過吧。發生這樣的情況，原因可能有很多，但大致上我們可以想到應該是</p>\n<ol>\n<li>瞬間的故障：指的是發生當下因為種種原因瞬間造成請求失敗，但通常再重試第二次就成功了，例如比較常見的 DB 資源鎖死</li>\n<li>暫時性故障：比較常見的像外部服務故障，即使短時間內重試也沒有辦法解決問題，像是跟第三方請求資源等等</li>\n</ol>\n<p>而發生了這樣的情況，我們當然會希望還是讓使用者體驗好一些，整個網站不要當在那邊，所以期望能夠改善</p>\n<ol>\n<li>當服務失敗的時候，應該要能夠自動使用替代方案</li>\n<li>管理者應該要能夠即時發現問題並處理</li>\n</ol>\n<p>前者是站在使用者的角度來看，我希望就算網站的其他服務失敗了，也不應該破壞我的使用者體驗；就像是我搜尋商品，結果你一直給我卡住畫面在那邊轉圈圈，我寧願你直接回覆我【伺服器發生問題】或者是其他的回應；而後者則是站在維運的角度來看，我期望系統發生問題，我會比顧客早知道情況，這就牽涉到了其他主題，有興趣的話可以透過查詢一些關鍵字像是<code>RUM</code>、<code>APM</code>去學習研究，但在這邊我們的重點不是這個。</p>\n<p><code>C#</code> 有一個 library 叫做 <code>polly</code>，允許在系統服務失敗的時候執行預先定義好一些處理方式</p>\n<h2 id=\"斷路器狀態\"><a href=\"#斷路器狀態\" class=\"headerlink\" title=\"斷路器狀態\"></a>斷路器狀態</h2><p>在說明斷路器之前需要先知道電路的三種狀態：通路、開路、短路。這三種狀態的中文其實是我剛剛查來的，實際上我都是在腦子裡面記電路的圖，再用中文去想，所以我常常把開路說成斷路，因為對我來說就是電路斷開來了</p>\n<ol>\n<li>通路 aka 閉路 aka <code>Closed</code>：通路表示的是『電路暢通』；又因為開關是關閉的，所以又稱之為『閉路』。怕搞錯最好還是直接用 <code>Closed</code>表示開關的狀態是關閉的</li>\n<li>斷路 aka 開路 aka <code>Open</code>：斷路表示『電路中斷』；又因為開關是處於打開的狀態，所以又稱『開路』。當然也可以用英文 <code>Open</code> 來表示開關的狀態是打開的</li>\n<li>短路：由於在電子電路中的短路表示電流沒有經過負載，負載不工作。但因為轉換為軟體的概念的話，就等於沒有呼叫執行程式碼，其實就沒有相對應的部分。</li>\n</ol>\n<blockquote>\n<p>簡單的來說就是記住開關的狀態就是了，開關就是像下面這樣，打開電流過不去就不能用；關閉電流過去才能用</p>\n</blockquote>\n<p><img src=\"/artblog/polly-library-circuit-breaker/open-closed-semantics.png\"></p>\n<p>上面說完了三種傳統的電路狀態，轉換到軟體的話，我們有多一種狀態叫做 <code>Half-Open</code></p>\n<p>在解釋為什麼會有 <code>Half-Open</code>之前，我們需要先理解一下傳統電路的保護機制如何復原電路狀態…</p>\n<p>是的，就是家裡跳電了怎麼辦？我們需要先檢查用電的電器是否能夠使用（跳電後燒壞了原有的電器電路？）然後接著我們要看看繼電器是否有明顯可見的異常，像是溫度過高？繼電器是否有燒焦痕跡等等，這些東西都看過沒問題了之後，我們才手動把跳脫的開關復原（也就是把跳脫的開關關閉後，再重新打開的這個行為）</p>\n<p>現實世界的斷路器我們需要人工手動復原，但軟體的部分我們該怎麼辦？難道也需要手動復原嗎？所以這個時候 <code>Half-Open</code> 概念就出來了，所謂的 <code>Half-Open</code> 其實就是先放一個請求去試試看，其他的請求一樣先給你擋下來：然後我們看看這個放過去的請求回應是成功還是失敗，如果是成功的表示服務正常，後續的請求也可以通過；失敗表示服務還沒恢復，後續的請求還是只能先拒絕。</p>\n<p><img src=\"/artblog/polly-library-circuit-breaker/circuitbreaker.png\"></p>\n<ol>\n<li>CLOSED:正常運行，允許執行動作</li>\n<li>OPEN:電路開關處於打開的狀態，不允許執行動作</li>\n<li>HALF-OPEN:用來測試服務是否正常，同時間只會有一個請求嘗試發出，其餘被拒絕；若執行成功則將電路狀態改為<code>CLOSED</code>；失敗則為<code>OPEN</code></li>\n</ol>\n<blockquote>\n<p>REF:<a href=\"https://github.com/App-vNext/Polly/wiki/Circuit-Breaker#how-the-polly-circuitbreaker-works\">How the Polly CircuitBreaker works</a></p>\n</blockquote>\n<h2 id=\"具體的改善方式\"><a href=\"#具體的改善方式\" class=\"headerlink\" title=\"具體的改善方式\"></a>具體的改善方式</h2><p>這裡我查了一下熔斷，都說是從股票那邊過來的名詞，但我總認為是從電子電路學那邊的概念，畢竟我就不相信股票有什麼保險絲會因為電流過高而燃燒造成電路中斷從而使的保護機制生效，不過我也沒有那麼閒真的去找一堆資料來證明這件事情，反正我只是打算讓大家比較容易理解這個概念而已。之後提到熔斷大家就能夠理解是這樣的一個過載保護的概念就行了</p>\n<p>我們一開始的期望：當服務失敗不應該破壞使用者的操作體驗，就可以透過實現斷路器來實現熔斷機制，在這邊我們查看一下 <code>Polly Library</code> 的 <code>CircuitBreaker</code> 提供的 API</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Break the circuit after the specified number of consecutive exceptions</span></span><br><span class=\"line\"><span class=\"comment\">// and keep circuit broken for the specified duration.</span></span><br><span class=\"line\">Policy</span><br><span class=\"line\">    .Handle&lt;SomeExceptionType&gt;()</span><br><span class=\"line\">    .CircuitBreaker(<span class=\"number\">2</span>, TimeSpan.FromMinutes(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Break the circuit after the specified number of consecutive exceptions</span></span><br><span class=\"line\"><span class=\"comment\">// and keep circuit broken for the specified duration,</span></span><br><span class=\"line\"><span class=\"comment\">// calling an action on change of circuit state,</span></span><br><span class=\"line\"><span class=\"comment\">// passing a context provided to Execute().</span></span><br><span class=\"line\">Action&lt;Exception, TimeSpan, Context&gt; onBreak = (exception, timespan, context) =&gt; &#123; ... &#125;;</span><br><span class=\"line\">Action&lt;Context&gt; onReset = context =&gt; &#123; ... &#125;;</span><br><span class=\"line\">CircuitBreakerPolicy breaker = Policy</span><br><span class=\"line\">    .Handle&lt;SomeExceptionType&gt;()</span><br><span class=\"line\">    .CircuitBreaker(<span class=\"number\">2</span>, TimeSpan.FromMinutes(<span class=\"number\">1</span>), onBreak, onReset);</span><br></pre></td></tr></table></figure>\n\n<p>大概就是這兩種吧，先是宣告你要處理的例外，然後後面就是使用斷路器，並給予必要的參數，講明白一點就是：發生幾次錯誤之後在某個時間段之內都拒絕請求，直到後續電路狀態復原為止</p>\n<p>所以發生了幾次錯誤，你要告訴他；某個時間段是多久，你也要告訴他；發生哪一種錯誤我們要處理，一開始也要定義。當然當電路狀態改變的時候，他也提供了事件讓我們可以做些事情，也就是電路狀態中斷；復原的時候可以做些事情</p>\n<p>用法很單純，所以我們在用的時候只需要透過他的方法</p>\n<ol>\n<li>先準備好斷路器</li>\n<li>在我們需要保護的程式碼那邊，加上斷路器</li>\n</ol>\n<p>假設我的網站要跟我自己的一個 API Gateway 互相溝通，所以網站跟 API Gateway 中間應該要有一顆斷路器。只要是跟 API Gateway 溝通的請求，都用同一個斷路器就行了</p>\n<blockquote>\n<p>REF: <a href=\"https://github.com/App-vNext/Polly/wiki/Statefulness-of-policies#circuitbreaker\">Statefulness-of-policies: CircuitBreaker</a></p>\n</blockquote>\n<h3 id=\"準備斷路器\"><a href=\"#準備斷路器\" class=\"headerlink\" title=\"準備斷路器\"></a>準備斷路器</h3><p>.netFramework 的網站，為了要讓網頁的請求都用同一個斷路器，在這邊我用一個靜態類別取得斷路器，下面的程式碼宣告了一個斷路器，當這個斷路器偵測到兩次例外就會變更電路狀態為 <code>Open</code>，同時在十秒鐘之內一律拒絕請求；十秒中之後的第一個請求會讓電路狀態變更為 <code>Half-Open</code></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">PolicyFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 連續記數斷路器</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;remarks&gt;</span>連續失敗兩次則斷路十秒鐘<span class=\"doctag\">&lt;/remarks&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ISyncPolicy <span class=\"title\">GetCircuitBreaker</span>&lt;<span class=\"title\">T</span>&gt;()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> logPrefix = <span class=\"string\">$&quot;[<span class=\"subst\">&#123;<span class=\"keyword\">typeof</span>(T)&#125;</span>]&quot;</span>;</span><br><span class=\"line\">        Action&lt;Exception, TimeSpan&gt; onBreak = (exception, timespan) =&gt; &#123; Debug.WriteLine(<span class=\"string\">$&quot;<span class=\"subst\">&#123;logPrefix&#125;</span> CircuitBreaker: Open at <span class=\"subst\">&#123;DateTime.Now&#125;</span>&quot;</span>); &#125;;</span><br><span class=\"line\">        Action onReset = () =&gt; &#123; Debug.WriteLine(<span class=\"string\">$&quot;<span class=\"subst\">&#123;logPrefix&#125;</span> CircuitBreaker: Closed at <span class=\"subst\">&#123;DateTime.Now&#125;</span>&quot;</span>); &#125;;</span><br><span class=\"line\">        Action onHalfOpen = () =&gt; &#123; Debug.WriteLine(<span class=\"string\">$&quot;<span class=\"subst\">&#123;logPrefix&#125;</span> CircuitBreaker: Half-Open at <span class=\"subst\">&#123;DateTime.Now&#125;</span>&quot;</span>); &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Policy</span><br><span class=\"line\">            .Handle&lt;Exception&gt;()</span><br><span class=\"line\">            .CircuitBreaker(</span><br><span class=\"line\">                <span class=\"number\">2</span>,</span><br><span class=\"line\">                TimeSpan.FromSeconds(<span class=\"number\">10</span>),</span><br><span class=\"line\">                onBreak,</span><br><span class=\"line\">                onReset,</span><br><span class=\"line\">                onHalfOpen</span><br><span class=\"line\">            );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Circuit-Breaker\"><a href=\"#Circuit-Breaker\" class=\"headerlink\" title=\"Circuit Breaker\"></a>Circuit Breaker</h3><p><strong>Sample Code</strong></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 連續記數斷路器</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;remarks&gt;</span>連續失敗兩次則斷路十秒鐘<span class=\"doctag\">&lt;/remarks&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ISyncPolicy <span class=\"title\">GetCircuitBreaker</span>&lt;<span class=\"title\">T</span>&gt;()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> logPrefix = <span class=\"string\">$&quot;[<span class=\"subst\">&#123;<span class=\"keyword\">typeof</span>(T)&#125;</span>]&quot;</span>;</span><br><span class=\"line\">    Action&lt;Exception, TimeSpan&gt; onBreak = (exception, timespan) =&gt; &#123; Debug.WriteLine(<span class=\"string\">$&quot;<span class=\"subst\">&#123;logPrefix&#125;</span> CircuitBreaker: Open at <span class=\"subst\">&#123;DateTime.Now&#125;</span>&quot;</span>); &#125;;</span><br><span class=\"line\">    Action onReset = () =&gt; &#123; Debug.WriteLine(<span class=\"string\">$&quot;<span class=\"subst\">&#123;logPrefix&#125;</span> CircuitBreaker: Closed at <span class=\"subst\">&#123;DateTime.Now&#125;</span>&quot;</span>); &#125;;</span><br><span class=\"line\">    Action onHalfOpen = () =&gt; &#123; Debug.WriteLine(<span class=\"string\">$&quot;<span class=\"subst\">&#123;logPrefix&#125;</span> CircuitBreaker: Half-Open at <span class=\"subst\">&#123;DateTime.Now&#125;</span>&quot;</span>); &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Policy</span><br><span class=\"line\">        .Handle&lt;Exception&gt;()</span><br><span class=\"line\">        .CircuitBreaker(</span><br><span class=\"line\">            <span class=\"number\">2</span>,</span><br><span class=\"line\">            TimeSpan.FromSeconds(<span class=\"number\">10</span>),</span><br><span class=\"line\">            onBreak,</span><br><span class=\"line\">            onReset,</span><br><span class=\"line\">            onHalfOpen</span><br><span class=\"line\">        );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Advance-Circuit-Breaker\"><a href=\"#Advance-Circuit-Breaker\" class=\"headerlink\" title=\"Advance Circuit Breaker\"></a>Advance Circuit Breaker</h2><p>基本上就是連續記數斷路器的進階版，詳情參考<a href=\"https://github.com/App-vNext/Polly/wiki/Advanced-Circuit-Breaker\">Advanced Circuit Breaker</a></p>\n<p>以下面程式碼的參數來解釋，大致的意思就是：採樣時間內至少有 8 次請求時，異常的發生比例超過 50%，則斷路 30 秒</p>\n<p><strong>Sample Code</strong></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Consecutive County Circuit Controller</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;remarks&gt;</span>採樣時間內至少有8次請求時，異常的發生比例超過 50%，則斷路 30 秒<span class=\"doctag\">&lt;/remarks&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ISyncPolicy <span class=\"title\">GetAdvanceCircuitBreaker</span>&lt;<span class=\"title\">T</span>&gt;()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> logPrefix = <span class=\"string\">$&quot;[<span class=\"subst\">&#123;<span class=\"keyword\">typeof</span>(T)&#125;</span>]&quot;</span>;</span><br><span class=\"line\">    Action&lt;Exception, TimeSpan&gt; onBreak = (exception, timespan) =&gt; &#123; Debug.WriteLine(<span class=\"string\">$&quot;<span class=\"subst\">&#123;logPrefix&#125;</span> AdvanceCircuitBreaker: Open at <span class=\"subst\">&#123;DateTime.Now&#125;</span>&quot;</span>); &#125;;</span><br><span class=\"line\">    Action onReset = () =&gt; &#123; Debug.WriteLine(<span class=\"string\">$&quot;<span class=\"subst\">&#123;logPrefix&#125;</span> AdvanceCircuitBreaker: Closed at <span class=\"subst\">&#123;DateTime.Now&#125;</span>&quot;</span>); &#125;;</span><br><span class=\"line\">    Action onHalfOpen = () =&gt; &#123; Debug.WriteLine(<span class=\"string\">$&quot;<span class=\"subst\">&#123;logPrefix&#125;</span> AdvanceCircuitBreaker: Half-Open at <span class=\"subst\">&#123;DateTime.Now&#125;</span>&quot;</span>); &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Policy</span><br><span class=\"line\">        .Handle&lt;Exception&gt;()</span><br><span class=\"line\">        .AdvancedCircuitBreaker(</span><br><span class=\"line\">            <span class=\"number\">0.5</span>,</span><br><span class=\"line\">            TimeSpan.FromSeconds(<span class=\"number\">10</span>),</span><br><span class=\"line\">            <span class=\"number\">8</span>,</span><br><span class=\"line\">            TimeSpan.FromSeconds(<span class=\"number\">30</span>),</span><br><span class=\"line\">            onBreak,</span><br><span class=\"line\">            onReset,</span><br><span class=\"line\">            onHalfOpen</span><br><span class=\"line\">        );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Timeout\"><a href=\"#Timeout\" class=\"headerlink\" title=\"Timeout\"></a>Timeout</h2><p>這邊設定了一個測試用的 api，在執行之前會先延遲 10 秒來模擬 timeout 的情況</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TestController</span> : <span class=\"title\">BaseController</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> test for 10 sec timeout</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">AlwaysTimeout</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Thread.Sleep(<span class=\"number\">10000</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;always timeout for 10 sec&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接著設定好 timeout policy 並測試</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// policyFactory.cs</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> Timeout 斷路器</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;remarks&gt;</span>執行超過2秒的請求會直接放棄掉<span class=\"doctag\">&lt;/remarks&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ISyncPolicy <span class=\"title\">GetTimeoutBreaker</span>&lt;<span class=\"title\">T</span>&gt;()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> logPrefix = <span class=\"string\">$&quot;[<span class=\"subst\">&#123;<span class=\"keyword\">typeof</span>(T)&#125;</span>]&quot;</span>;</span><br><span class=\"line\">        Action&lt;Context,TimeSpan,Task&gt; onTimeout = (context, timespan, task) =&gt; &#123; Debug.WriteLine(<span class=\"string\">$&quot;<span class=\"subst\">&#123;logPrefix&#125;</span> 逾時時間:<span class=\"subst\">&#123;timespan&#125;</span>&quot;</span>); &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Policy.Timeout(TimeSpan.FromSeconds(<span class=\"number\">2</span>), TimeoutStrategy.Pessimistic, onTimeout);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 呼叫端</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Test</span>(<span class=\"params\"><span class=\"built_in\">string</span> str</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> GetTimeoutBreaker&lt;TestClient&gt;().Execute(() =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Debug.WriteLine(<span class=\"string\">&quot;請求網路資源中...&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> timeoutUri = <span class=\"string\">&quot;http://localhost:4334/api/Test/AlwaysTimeout&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _httpClient.Value.PostAsync(timeoutUri,<span class=\"literal\">null</span>).Result.Content.ReadAsStringAsync().Result;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Debug.WriteLine(ex.Message + <span class=\"string\">&quot; Now:&quot;</span> + DateTime.Now);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> TimeoutException(<span class=\"string\">&quot;發生例外!!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>測試情境：斷路器設為 2 秒，實際上資源需要 10 秒，實際執行 Test 方法</p>\n<p>斷路器在第二秒就直接放棄等待並直接回應一個例外，但是已經發送出去的請求還是會對 URI 請求資源。<br><img src=\"/artblog/polly-library-circuit-breaker/timeout-exception.jpg\"></p>\n<p>所以單純只套用一個 timeout 的話，實際上對於整個系統來說，並沒有太大的幫助，因為它還是會向後面的服務送出請求而浪費資源。</p>\n<p>關於 timeout 策略有區分悲觀、樂觀這部分可以再詳細察看一下官網說明<a href=\"https://github.com/App-vNext/Polly/wiki/Timeout#pessimistic-timeout\">Pessimistic timeout</a>，這邊我並沒有深入再研究練習</p>\n<h2 id=\"Policy-Wrap\"><a href=\"#Policy-Wrap\" class=\"headerlink\" title=\"Policy Wrap\"></a>Policy Wrap</h2><p>Polly 有提供一個策略包的方法，使的各種斷路器可以串在一起使用，只需要將剛才提到的各種斷路器實體透過<code>Policy.Wrap()</code>包裝起來就行了</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">PolicyFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 略...</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ISyncPolicy <span class=\"title\">GetInstance</span>&lt;<span class=\"title\">T</span>&gt;()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span>(T) == <span class=\"keyword\">typeof</span>(TestClient))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> timeout = GetTimeoutBreaker&lt;T&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> circuitBreaker = GetCircuitBreaker&lt;T&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Policy.Wrap(circuitBreaker, timeout);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">$&quot;No Match PolicyWrap For <span class=\"subst\">&#123;<span class=\"keyword\">typeof</span>(T)&#125;</span>&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TestClient</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ISyncPolicy _currentPolicyWrap;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ISyncPolicy CurrentPolicyWrap  =&gt; _currentPolicyWrap ??  (_currentPolicyWrap = PolicyFactory.GetInstance&lt;TestClient&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">SendRequest</span>(<span class=\"params\">MyRequest request</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> CurrentPolicyWrap.Execute(() =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 略...</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這樣在呼叫端只要將原先的程式碼，包裝在 <code>Execute()</code> 之內就可以了，上述程式碼會先送出請求，先判斷是否 <code>timeout</code>，接著才判斷 <code>circuitBreaker</code>。也就是說，送出請求如果沒有在兩秒鐘之內完成，就算失敗一次，如果連續失敗兩次，則十秒鐘之內後續送出的請求都會直接被拒絕</p>\n<h2 id=\"源碼查看\"><a href=\"#源碼查看\" class=\"headerlink\" title=\"源碼查看\"></a>源碼查看</h2><p>說是源碼查看，因為我覺得還沒有到源碼解析的程度，大概就是分享一下斷路器這一部份的程式碼心得，首先我們可以看一下斷路器的用法大概像是下面這個樣子</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\">CircuitBreakerPolicy breaker = Policy.Handle&lt;DivideByZeroException&gt;().CircuitBreaker(<span class=\"number\">1</span>, TimeSpan.MaxValue);</span><br></pre></td></tr></table></figure>\n\n<p>在呼叫端的語法都是先透過 <code>Handle</code> 並給予一個例外的類型，來表示我們要偵測的<code>Exception</code>，而 <code>Handle</code> 會返回一個 <code>PolicyBuilder</code> 類型，同時也會將我們設定的例外，放在裡面一併回傳</p>\n<p>接著後續的 <code>CircuitBreaker()</code> 方法在建立真正的斷路器的時候，才把真正的斷路器以及我們所設定的例外，一起聚合成一個 <code>CircuitBreakerPolicy</code> 類型，實際上只是將一個<code>連續記數斷路器(ConsecutiveCountCircuitController)</code>包裝起來，該類別繼承<code>ICircuitController&lt;TResult&gt;</code></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">interface</span> <span class=\"title\">ICircuitController</span>&lt;<span class=\"title\">TResult</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    CircuitState CircuitState &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">    Exception LastException &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">    TResult LastHandledResult &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Isolate</span>()</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Reset</span>()</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnCircuitReset</span>(<span class=\"params\">Context context</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnActionPreExecute</span>()</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnActionSuccess</span>(<span class=\"params\">Context context</span>)</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnActionFailure</span>(<span class=\"params\">DelegateResult&lt;TResult&gt; outcome, Context context</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這個介面定義了必要的操作，像是執行成功事件、執行失敗事件、電路重置事件；也包含了手動斷路、重置事件。也有當前電路狀態供查驗</p>\n<p>但是這些都是屬於預先定義好的東西，在實際上要呼叫使用，還必須透過斷路器繼承自<code>Policy</code>的<code>Execute()</code>等方法，將原本要執行的程式碼包裝在內</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Execute</span>(<span class=\"params\">Action&lt;Context, CancellationToken&gt; action, Context context, CancellationToken cancellationToken</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (context == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(context));</span><br><span class=\"line\"></span><br><span class=\"line\">    SetPolicyContext(context, <span class=\"keyword\">out</span> <span class=\"built_in\">string</span> priorPolicyWrapKey, <span class=\"keyword\">out</span> <span class=\"built_in\">string</span> priorPolicyKey);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Implementation(action, context, cancellationToken);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        RestorePolicyContext(context, priorPolicyWrapKey, priorPolicyKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而在這個例子當中，我們使用的是熔斷過載保護開關斷路器，因此根據原始碼，可以看到如下</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> TResult <span class=\"title\">Implementation</span>&lt;<span class=\"title\">TResult</span>&gt;(<span class=\"params\">Func&lt;Context, CancellationToken, TResult&gt; action, Context context, CancellationToken cancellationToken</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    TResult result = <span class=\"literal\">default</span>;</span><br><span class=\"line\">    CircuitBreakerEngine.Implementation&lt;EmptyStruct&gt;(</span><br><span class=\"line\">        (ctx, ct) =&gt; &#123; result = action(ctx, ct); <span class=\"keyword\">return</span> EmptyStruct.Instance; &#125;,</span><br><span class=\"line\">        context,</span><br><span class=\"line\">        cancellationToken,</span><br><span class=\"line\">        ExceptionPredicates,</span><br><span class=\"line\">        ResultPredicates&lt;EmptyStruct&gt;.None,</span><br><span class=\"line\">        _breakerController);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>具體的行為是由 <code>CircuitBreakerEngine.Implementation()</code>來實現，而其他的策略如 Retry , Timeout 其實都有自己的 <code>Engine</code> 類別</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">CircuitBreakerEngine</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">internal</span> <span class=\"keyword\">static</span> TResult <span class=\"title\">Implementation</span>&lt;<span class=\"title\">TResult</span>&gt;(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        Func&lt;Context, CancellationToken, TResult&gt; action,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        Context context,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken cancellationToken,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        ExceptionPredicates shouldHandleExceptionPredicates,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        ResultPredicates&lt;TResult&gt; shouldHandleResultPredicates,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        ICircuitController&lt;TResult&gt; breakerController</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cancellationToken.ThrowIfCancellationRequested();</span><br><span class=\"line\">        <span class=\"comment\">// 執行執行之前的事件</span></span><br><span class=\"line\">        breakerController.OnActionPreExecute();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            TResult result = action(context, cancellationToken);</span><br><span class=\"line\">            <span class=\"comment\">// 若執行結果符合預先定義的錯誤</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldHandleResultPredicates.AnyMatch(result))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 斷路器執行失敗事件</span></span><br><span class=\"line\">                breakerController.OnActionFailure(<span class=\"keyword\">new</span> DelegateResult&lt;TResult&gt;(result), context);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 執行成功事件</span></span><br><span class=\"line\">                breakerController.OnActionSuccess(context);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception ex)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Exception handledException = shouldHandleExceptionPredicates.FirstMatchOrDefault(ex);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (handledException == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            breakerController.OnActionFailure(<span class=\"keyword\">new</span> DelegateResult&lt;TResult&gt;(handledException), context);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (handledException != ex)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ExceptionDispatchInfo.Capture(handledException).Throw();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>透過這樣的設計，使得呼叫端呈現的是一個語意化的程式碼</p>\n<ol>\n<li>建立斷路器的擴充方法都放在<code>CircuitBreakerSyntax</code>類別內</li>\n<li>斷路器的主要邏輯都放在<code>CircuitBreakerEngine</code></li>\n<li>斷路器的實體類別，實作細節放在<code>ConsecutiveCountCircuitController</code>(連續記數斷路器)</li>\n</ol>\n<blockquote>\n<p>還有比較看不懂的地方，就是<code>Execute</code>方法內的<code>priorPolicyKey</code>還看不懂他的用途</p>\n</blockquote>\n<h2 id=\"實際範例-POC\"><a href=\"#實際範例-POC\" class=\"headerlink\" title=\"實際範例 POC\"></a>實際範例 POC</h2><p>這邊我做了一個簡單的 POC:<a href=\"https://github.com/art-Blog/PollyDemo\">Github:PollyDemo</a>，用來驗證 Polly 實際上的應用方式，當然這個方式也是我自己想的，沒有正式上線。我本來是想要將 <code>PolicyFactory</code> 從 <code>DataService</code> 搬移到 <code>Core</code>，但是想想這也只是一個簡單的 POC，就不多事了。</p>\n<blockquote>\n<p>這個範例針對的是 <code>.netFramework 4.5.2</code></p>\n</blockquote>\n<p>如果依照這樣的方式，在 nuget 安裝套件完畢後，只要將設定值跟 factory 弄好，應該就很快地可以幫網站加上熔斷機制，但是需要特別注意一下，<code>polly</code> 對於<code>.netFramework</code>、<code>NET6 Core</code>都有不太一樣的支援版本，所以未來可能還是要針對實際情況調整</p>\n<h2 id=\"2022-08-02-補充\"><a href=\"#2022-08-02-補充\" class=\"headerlink\" title=\"2022-08-02 補充\"></a>2022-08-02 補充</h2><p>Polly 也有提供限流，但是在舊的版本並沒有提供，實際測試 7.1.1 也還沒有加入 <code>RateLimit</code>，在 <code>7.2.3</code>版本才有。如果要測試的話可以在先前的 Repo 取得範例。如果是單體應用程式，不涉及分散式部署，可以透過 Polly 來做；但若是分散式部署的情況要實現限流，就需要自己實做，或是用別的套件。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">RateLimitController</span> : <span class=\"title\">ApiController</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Policy _currentPolicy;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Policy CurrentPolicy =&gt; _currentPolicy ?? (_currentPolicy = PolicyFactory.RateLimitPolicy());</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Post</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> timeStamp = DateTime.Now;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> CurrentPolicy.Execute(() =&gt; DoSomething(timeStamp));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (RateLimitRejectedException ex)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ex.Message;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">DoSomething</span>(<span class=\"params\">DateTime timeStamp</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;This is a POST response from the RateLimitController - &quot;</span> + timeStamp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">PolicyFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RateLimitPolicy <span class=\"title\">RateLimitPolicy</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Policy.RateLimit(<span class=\"number\">3</span>, TimeSpan.FromSeconds(<span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><p>在實做完斷路器之後，應該就會接著接觸到幾個關鍵字，這些關鍵字通常又會跟著一個 <code>Domain</code> 叫做 <code>Site Reliability Engineering 網站可靠性工程</code> aka <code>SRE</code>，發現我最近其實重點都放在相關領域上，從先前的<code>ELK Stack</code>、<code>Kibana</code>、<code>Serilog</code>，這些大概都是為了要做到能夠監控網站的情況而去學習的工具</p>\n<p>以我自己的開發經驗大概可以分成三個階段</p>\n<ul>\n<li>第一個階段比較單純直白，大概就是拿到需求就動手開幹，也沒有什麼特別好的方法改善</li>\n<li>第二個階段學習目標主要都是在如何將想法變成程式碼，讓這個過程盡量平滑順利，例如學習單元測試，TDD 等開發方法</li>\n<li>第三個階段學習目標都是環繞在監控及自動化，透過數據的量化得知較客觀的數據，並透過數據的比較來決策，例如 APM, CI&#x2F;CD</li>\n</ul>\n<p>而今天學習的這個斷路器的部分，則是比較偏向架構，這應該是我很少涉及到的領域，所以學習過程當中出現很多名詞都沒看過，像是熔斷；降級；重試也是這一次才搞懂，他們的目的也是為了網站可靠性，最終都是為了使用者體驗，先前也看過了一篇網路文章，提到從單體網站逐步演化成微服務架構的改變，很可惜我沒有加入書籤</p>\n<p>在學習的過程中發現越是後面的階段，怎麼去實做功能的程式碼細節，已經越來越不看重；因為程式碼的部分可以透過官網去找用法，網路也能找到文件去看；但是架構上的設計就需要理解才能夠真的拿來用，像是這一次說到的熔斷機制，程式碼反而就比較不重要，重要的是這個熔斷的觀念，後續帶出來的則是其他幾個類似的策略，都是為了一個目標：『可靠性』</p>\n<p>相對的在如何達成網站可靠性，又有很多很多的事情可以做，而且範疇就不僅僅是程式碼，當然也包含了其他幾個領域的知識，只能說學海無涯，隨便聯想到的幾個關鍵字真的要學下去真的是學不完，所以也只能挑工作上用的到，或是較有可能用的到的先學習。</p>\n","categories":["SRE"],"tags":["polly"]},{"title":"sonarQube-使用sonarLint協助開發","url":"/artblog//sonarQube-with-sonarLint/","content":"<p>簡單說明 sonarQube 搭配 sonarLint 協助開發</p>\n<span id=\"more\"></span>\n\n<p><a href=\"https://www.sonarsource.com/products/sonarlint/\">sonarLint</a> 作為官方推出的 IDE 外掛，當然也能夠很好的配合 sonarQube，使用他的主因就是為了針對 sonarQube 所產生的報告，能夠同步顯示於 IDE 中，即刻修復，便能即刻解決掉問題。軟體支援大部分常見的 IDE，當然也包括了 JetBrains 系列、Visual Studio 以及 VSCode。</p>\n<p>sonarLint 在ＩＤＥ的行為都是開箱即用的，只要設定完畢，點開某支程式碼檔案後就會立即掃描分析，並將結果顯示出來，因此使用上沒有特別難的地方，連線模式下，只需要將 sonarQube Server 主機設定好，並給予 token，頂多再指定一下 node.js 16 以上版本的執行檔案路徑，或者再指定一下 java 11 的路徑就可以了</p>\n<h2 id=\"安裝套件\"><a href=\"#安裝套件\" class=\"headerlink\" title=\"安裝套件\"></a>安裝套件</h2><p>詳細的套件設定步驟應該就沒甚麼好提的，套件頁面都有寫得很清楚，這邊大概寫重點，當然跟主機專案連線用的 token 要先準備好(<code>http://&lt;yourSonarQubeServer&gt;/account/security</code>)</p>\n<ol>\n<li><a href=\"https://plugins.jetbrains.com/plugin/7973-sonarlint\">SonarLint for Rider</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=SonarSource.SonarLintforVisualStudio2022\">SonarLint for Visual Studio 2022</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarlint-vscode\">SonarLint for VSCode</a></li>\n</ol>\n<blockquote>\n<p>設定連線模式的文件可參考 SonarQube Document:<a href=\"https://docs.sonarqube.org/latest/user-guide/sonarlint-connected-mode/\">SonarLint connected mode</a></p>\n</blockquote>\n<h3 id=\"VS2022-設定\"><a href=\"#VS2022-設定\" class=\"headerlink\" title=\"VS2022 設定\"></a>VS2022 設定</h3><p>VS2022 要設定連線模式，需要從 Team Explorer 點擊 sonarQube Icon 之後填寫主機資訊<br><img src=\"/artblog/sonarQube-with-sonarLint/2022-12-13-130123.jpg\"><br><img src=\"/artblog/sonarQube-with-sonarLint/2022-12-13-130222.jpg\"></p>\n<p>建議使用 token，這樣只要輸入主機跟 token，密碼就空白即可。接著連線後取得主機上的專案清單，點兩下專案就可以了<br><img src=\"/artblog/sonarQube-with-sonarLint/2022-12-13-130631.jpg\"></p>\n<h3 id=\"VSCode-設定\"><a href=\"#VSCode-設定\" class=\"headerlink\" title=\"VSCode 設定\"></a>VSCode 設定</h3><p>開 setting 把相關該填的寫一寫<br><img src=\"/artblog/sonarQube-with-sonarLint/2022-12-13-115645.jpg\"></p>\n<p>針對 sonarQube server 的設定部分，透過 F1 叫出指令，接著也是照填<br><img src=\"/artblog/sonarQube-with-sonarLint/2022-12-13-115751.jpg\"><br><img src=\"/artblog/sonarQube-with-sonarLint/2022-12-13-115857.jpg\"></p>\n<blockquote>\n<p>如果執行有問題，可以參考一下<a href=\"https://www.prplbx.com/resources/blog/how-to-configure-sonarlint-in-visual-studio-code/\">How to Configure SonarLint in Visual Studio Code</a>，他還有安裝 VSCode 的 Java 套件</p>\n</blockquote>\n<h2 id=\"Rider-不支援-js-ts\"><a href=\"#Rider-不支援-js-ts\" class=\"headerlink\" title=\"Rider - 不支援 js&#x2F;ts\"></a>Rider - <del>不</del>支援 js&#x2F;ts</h2><p>以分析 CSharp 來說，我當然最喜歡的還是在 Rider 裡面使用，但專案內可不僅僅包含 CSharp，也包含了一堆 javaScript 與 Vue 的原始碼，在這一塊我始終沒有辦法成功取得 sonarQube 主機上專案所掃出來的 js 問題，查了很久，官方一堆回答都是請使用者開啟 Verbose 然後重開 Rider 再去看 LOG<br><img src=\"/artblog/sonarQube-with-sonarLint/2022-12-13-115136.jpg\"></p>\n<p>LOG 裡面我只看到載入了外掛，但它又不使用，最後採用的只有 C# 還有 secret 的兩個外掛去掃 Code，查不到資訊，後來才在一個問答帖子中看到，好像是 Rider 目前還尚未支援 js&#x2F;ts 的分析，我雖然不是很相信但也懶得找了。但如果只有處理 CSharp 的部分的話，我首選還是採用 Rider。</p>\n<p>Rider 的部分外掛視窗這邊有一個手動執行分析的 ICON，點了後可以重新分析當前程式碼<br><img src=\"/artblog/sonarQube-with-sonarLint/2022-12-13-121633.jpg\"></p>\n<p>點選後問題的說明也會列在旁邊<br><img src=\"/artblog/sonarQube-with-sonarLint/2022-12-13-121851.jpg\"></p>\n<blockquote>\n<p>2023&#x2F;01&#x2F;01 補充更新: 目前 7.3 版的 sonarLint 已經支援 js&#x2F;ts，請安心服用<br><img src=\"/artblog/sonarQube-with-sonarLint/2023-01-11-145658.jpg\"></p>\n</blockquote>\n<blockquote>\n<p>套件更新紀錄如下:<br>7.3 - Improved display of rule descriptions. New react performance rules. Analyze CSS files. New Kotlin rules. 6 new C++20 rules. Support Python 3.11. Analyze JS, TS, CSS and HTML in Rider. 1 new rule for C# in Rider. Many rules improvements.</p>\n</blockquote>\n<h2 id=\"VS2022-支援-js-ts\"><a href=\"#VS2022-支援-js-ts\" class=\"headerlink\" title=\"VS2022 - 支援 js&#x2F;ts\"></a>VS2022 - 支援 js&#x2F;ts</h2><p>這是 VS2022 的問題視窗，當中也包含了 eslint 的警告提示<br><img src=\"/artblog/sonarQube-with-sonarLint/2022-12-13-120833.jpg\"></p>\n<p>若選擇了 sonarLint 的錯誤，像這個複雜度的，還會有資訊顯示在旁邊<br><img src=\"/artblog/sonarQube-with-sonarLint/2022-12-13-120923.jpg\"></p>\n<p>當然程式碼編輯器中也有顯示，但就不截圖給大家看了，反正就跟 sonarQube Server 上面顯示的差不多，而滑鼠懸停在有問題的程式碼上面，跳出來的懸浮提視窗，點擊後也會開啟該項規則的線上介紹頁面: <a href=\"https://rules.sonarsource.com/javascript/RSPEC-1481\">RSPEC-1481</a>頁面<br><img src=\"/artblog/sonarQube-with-sonarLint/2022-12-13-121416.jpg\"></p>\n<h2 id=\"VSCode-支援-js-ts\"><a href=\"#VSCode-支援-js-ts\" class=\"headerlink\" title=\"VSCode - 支援 js&#x2F;ts\"></a>VSCode - 支援 js&#x2F;ts</h2><p>VSCode 的部分當然對我而言重頭戲就是針對 JavaScript 的部分，畢竟 Csharp 我喜歡用 Rider，而 VS2022 又很耗資源，所以會開 VSCode 的話應該也只是針對 js 的問題做修正而已，問題的部分在程式碼區塊及 Problem 視窗都有提示，點兩下 problem 　就跳過去程式碼進行修正，也算方便。<br><img src=\"/artblog/sonarQube-with-sonarLint/2022-12-13-122055.jpg\"></p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>這一篇文章其實只是做為紀錄，動機是因為 Rider 的 sonarLint 沒法分析 js，所以嘗試看看 VS2022 及 VSCode，其他的都可以呢～當然之後可能也會支援，我目前測試的當下是 Rider 2022.3，SonarLint 7.2.1.58118</p>\n","tags":["sonarQube"]},{"title":"使用Serilog和Seq紀錄Log","url":"/artblog//logging-using-serilog-and-seq/","content":"<p>以往使用 ELK 來記錄資訊，是一件非常複雜繁瑣的事情，與 ELK 還有一堆 beat 打交道，首先要面對的是不熟悉的 linux 系統，接著是聽都沒聽過的一堆設定方式跟眉眉角角，太久沒用我連 SSL 都忘記怎麼用，更別提複雜的設定語法。而使用 Serilog + Seq 就相對簡單很多，查詢語法也比 Kibana 友善。</p>\n<span id=\"more\"></span>\n\n<p>本次練習專案:<a href=\"https://github.com/partypeopleland/serilog-seq-demo\">Github:serilog-seq-demo</a></p>\n<h1 id=\"使用-serilog-和-seq-紀錄-log\"><a href=\"#使用-serilog-和-seq-紀錄-log\" class=\"headerlink\" title=\"使用 serilog 和 seq 紀錄 log\"></a>使用 serilog 和 seq 紀錄 log</h1><ul>\n<li><a href=\"https://docs.datalust.co/docs\">Seq - Documentation</a></li>\n<li><a href=\"https://github.com/serilog/serilog/wiki/Getting-Started\">serilog - Documentation</a></li>\n</ul>\n<h2 id=\"參考連結\"><a href=\"#參考連結\" class=\"headerlink\" title=\"參考連結\"></a>參考連結</h2><p>學習過程中下面這幾篇文章幫助很大，特別是<code>Logging MVC properties with Serilog.AspNetCore</code>系列文，介紹的非常詳細。</p>\n<ol>\n<li><a href=\"https://blog.miniasp.com/post/2021/11/29/How-to-use-Serilog-with-NET-6\">.NET 6.0 如何使用 Serilog 對應用程式事件進行結構化紀錄</a></li>\n<li><a href=\"https://nblumhardt.com/2016/07/serilog-2-minimumlevel-override/\">Serilog 2.1 MinimumLevel.Override()</a></li>\n<li><a href=\"https://andrewlock.net/using-serilog-aspnetcore-in-asp-net-core-3-reducing-log-verbosity/\">Logging MVC properties with Serilog.AspNetCore</a></li>\n</ol>\n<h2 id=\"使用-Docker-架設-Seq\"><a href=\"#使用-Docker-架設-Seq\" class=\"headerlink\" title=\"使用 Docker 架設 Seq\"></a>使用 Docker 架設 Seq</h2><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># create volume folder</span></span><br><span class=\"line\">mkdir <span class=\"literal\">-p</span> D:\\docker<span class=\"literal\">-volumes</span>\\seq</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker-cli</span></span><br><span class=\"line\">docker run <span class=\"literal\">--name</span> seq <span class=\"literal\">-d</span> <span class=\"literal\">--restart</span> unless<span class=\"literal\">-stopped</span> <span class=\"literal\">-e</span> ACCEPT_EULA=Y <span class=\"literal\">-v</span> D:\\docker<span class=\"literal\">-volumes</span>\\seq:/<span class=\"keyword\">data</span> <span class=\"literal\">-p</span> <span class=\"number\">8090</span>:<span class=\"number\">80</span> <span class=\"literal\">-p</span> <span class=\"number\">5341</span>:<span class=\"number\">5341</span> datalust/seq</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker-compose</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">seq_server:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">datalust/seq</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">seq</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">seq</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ACCEPT_EULA=Y</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">8090</span><span class=\"string\">:80</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">5341</span><span class=\"string\">:5341</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">d:/docker-volumes/seq/data:/data</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-Serilog-搭配-Seq\"><a href=\"#使用-Serilog-搭配-Seq\" class=\"headerlink\" title=\"使用 Serilog 搭配 Seq\"></a>使用 Serilog 搭配 Seq</h2><h3 id=\"Serilog-能夠解決什麼問題\"><a href=\"#Serilog-能夠解決什麼問題\" class=\"headerlink\" title=\"Serilog 能夠解決什麼問題\"></a>Serilog 能夠解決什麼問題</h3><p>在 dotnet core 範本預設的日誌設定下，<code>development</code>環境下光是一個頁面請求就會輸出非常多的 Log，但在<code>Production</code>環境下又完全不輸出日誌，雖然可以透過自訂過濾器來精簡日誌，但仍舊是各自獨立的 Log</p>\n<p><code>Serilog.RequestLoggingMiddleware</code>不是為了請求中的每個步驟建立單獨的 Log 紀錄，而是建立一個包含所有相關資訊的摘要 Log，也正是因為它是一個 middleware，所以可以將之後所需要紀錄的資訊都統整在一起，對於檢視、查詢會很有幫助</p>\n<h3 id=\"安裝套件\"><a href=\"#安裝套件\" class=\"headerlink\" title=\"安裝套件\"></a>安裝套件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">dotnet add package Serilog.AspNetCore</span><br><span class=\"line\">dotnet add package Serilog.Sinks.Console</span><br><span class=\"line\">dotnet add package Serilog.Sinks.Seq</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"將預設-Log-替換為-Serilog\"><a href=\"#將預設-Log-替換為-Serilog\" class=\"headerlink\" title=\"將預設 Log 替換為 Serilog\"></a>將預設 Log 替換為 Serilog</h3><figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指定 LOG 輸出到 Console 及 Seq</span></span><br><span class=\"line\">Log.Logger = <span class=\"keyword\">new</span> LoggerConfiguration()</span><br><span class=\"line\">    .Enrich.FromLogContext()</span><br><span class=\"line\">    .WriteTo.Console()</span><br><span class=\"line\">    .WriteTo.Seq(<span class=\"string\">&quot;http://localhost:5341&quot;</span>)</span><br><span class=\"line\">    .CreateLogger();</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 Serilog</span></span><br><span class=\"line\">builder.Host.UseSerilog();</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/logging-using-serilog-and-seq/03.jpg\"></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 Serilog RequestLoggingMiddleware</span></span><br><span class=\"line\">app.UseSerilogRequestLogging(options =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自訂紀錄的訊息範本格式，修改後並不會影響結構化記錄的屬性</span></span><br><span class=\"line\">    options.MessageTemplate = <span class=\"string\">&quot;Handled  &#123;RequestPath&#125;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 附加資訊到每一次的請求完成事件，可以從 httpContext 取得 HttpContext 下所有可以取得的資訊</span></span><br><span class=\"line\">    options.EnrichDiagnosticContext = (diagnosticContext, httpContext) =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        diagnosticContext.Set(<span class=\"string\">&quot;RequestHost&quot;</span>, httpContext.Request.Host.Value);</span><br><span class=\"line\">        diagnosticContext.Set(<span class=\"string\">&quot;RequestScheme&quot;</span>, httpContext.Request.Scheme);</span><br><span class=\"line\">        diagnosticContext.Set(<span class=\"string\">&quot;UserID&quot;</span>, httpContext.User.Identity?.Name);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"記錄範例\"><a href=\"#記錄範例\" class=\"headerlink\" title=\"記錄範例\"></a>記錄範例</h2><h3 id=\"LogLevel\"><a href=\"#LogLevel\" class=\"headerlink\" title=\"LogLevel\"></a>LogLevel</h3><p>在 Serilog 共計有六種，列舉值高表示越重要</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Serilog.Events</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> Specifies the meaning and relative importance of a log event.</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">enum</span> LogEventLevel</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> Anything and everything you might want to know about</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> a running block of code.</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        Verbose,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> Internal system events that aren&#x27;t necessarily</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> observable from the outside.</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        Debug,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> The lifeblood of operational intelligence - things</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> happen.</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        Information,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> Service is degraded or endangered.</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        Warning,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> Functionality is unavailable, invariants are broken</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> or data is lost.</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        Error,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> If you have a pager, it goes off when one of these</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> occurs.</span></span><br><span class=\"line\">        <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">        Fatal</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"紀錄額外資訊\"><a href=\"#紀錄額外資訊\" class=\"headerlink\" title=\"紀錄額外資訊\"></a>紀錄額外資訊</h3><figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ILogger&lt;HomeController&gt; _logger;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HomeController</span>(<span class=\"params\">ILogger&lt;HomeController&gt; logger</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger = logger;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger.LogInformation(<span class=\"string\">&quot;使用者資訊 , &#123;@user&#125;&quot;</span>, <span class=\"keyword\">new</span> &#123; Name = <span class=\"string\">&quot;art&quot;</span>, Role = <span class=\"string\">&quot;Developer&quot;</span> &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> View();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/logging-using-serilog-and-seq/01.jpg\"><br>使用<code>logger</code>可記錄複雜型別物件資訊，</p>\n<h3 id=\"Serilog-middleware-全站附加的範例\"><a href=\"#Serilog-middleware-全站附加的範例\" class=\"headerlink\" title=\"Serilog middleware 全站附加的範例\"></a>Serilog middleware 全站附加的範例</h3><p>於<code>program.cs</code>內設定如下</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 設置 Serilog</span></span><br><span class=\"line\">app.UseSerilogRequestLogging(options =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 自訂紀錄的訊息範本格式，修改後並不會影響結構化記錄的屬性</span></span><br><span class=\"line\">    options.MessageTemplate = <span class=\"string\">&quot;Handled  &#123;RequestPath&#125;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 附加資訊到每一次的請求完成事件，可以從 httpContext 取得 HttpContext 下所有可以取得的資訊</span></span><br><span class=\"line\">    options.EnrichDiagnosticContext = (diagnosticContext, httpContext) =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        diagnosticContext.Set(<span class=\"string\">&quot;RequestHost&quot;</span>, httpContext.Request.Host.Value);</span><br><span class=\"line\">        diagnosticContext.Set(<span class=\"string\">&quot;RequestScheme&quot;</span>, httpContext.Request.Scheme);</span><br><span class=\"line\">        diagnosticContext.Set(<span class=\"string\">&quot;UserID&quot;</span>, httpContext.User.Identity?.Name);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Serilog-middleware-手動附加的範例\"><a href=\"#Serilog-middleware-手動附加的範例\" class=\"headerlink\" title=\"Serilog middleware 手動附加的範例\"></a>Serilog middleware 手動附加的範例</h3><p>於要附加的地方透過 DI 注入的 <code>IDiagnosticContext</code> 實體附加資訊</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ILogger&lt;HomeController&gt; _logger;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IDiagnosticContext _diagnosticContext;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HomeController</span>(<span class=\"params\">ILogger&lt;HomeController&gt; logger, IDiagnosticContext diagnosticContext</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger = logger;</span><br><span class=\"line\">        _diagnosticContext = diagnosticContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _diagnosticContext.Set(<span class=\"string\">&quot;Params&quot;</span>, <span class=\"keyword\">new</span>[] &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> View();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/logging-using-serilog-and-seq/02.jpg\"><br>若沒有使用自訂訊息範本，預設顯示範本格式為:<code>HTTP &#123;RequestMethod&#125; &#123;RequestPath&#125; responded &#123;StatusCode&#125; in &#123;Elapsed:0.0000&#125; ms</code></p>\n<p>至此先前 dotnet core 預設各自獨立 LOG 紀錄已經被整合在同一筆 LOG 中，而需要特別記錄下來的資訊也可以透過手動的方式另外建立</p>\n<h3 id=\"額外紀錄-Serilog-缺少的資訊-Request-Response\"><a href=\"#額外紀錄-Serilog-缺少的資訊-Request-Response\" class=\"headerlink\" title=\"額外紀錄 Serilog 缺少的資訊 - Request &#x2F; Response\"></a>額外紀錄 Serilog 缺少的資訊 - Request &#x2F; Response</h3><p>改用 Serilog 之後，原本有的一些資訊也可以透過附加的方式補上</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 設置 Serilog</span></span><br><span class=\"line\">  app.UseSerilogRequestLogging(options =&gt;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 自訂紀錄的訊息模板</span></span><br><span class=\"line\">      <span class=\"comment\">// options.MessageTemplate = &quot;Handled  &#123;RequestPath&#125;&quot;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 附加資訊到每一次的請求完成事件</span></span><br><span class=\"line\">      options.EnrichDiagnosticContext = (diagnosticContext, httpContext) =&gt;</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> request = httpContext.Request;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// Set all the common properties available for every request</span></span><br><span class=\"line\">          diagnosticContext.Set(<span class=\"string\">&quot;Host&quot;</span>, request.Host);</span><br><span class=\"line\">          diagnosticContext.Set(<span class=\"string\">&quot;Protocol&quot;</span>, request.Protocol);</span><br><span class=\"line\">          diagnosticContext.Set(<span class=\"string\">&quot;Scheme&quot;</span>, request.Scheme);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// Only set it if available. You&#x27;re not sending sensitive data in a querystring right?!</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span>(request.QueryString.HasValue)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              diagnosticContext.Set(<span class=\"string\">&quot;QueryString&quot;</span>, request.QueryString.Value);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// Set the content-type of the Response at this point</span></span><br><span class=\"line\">          diagnosticContext.Set(<span class=\"string\">&quot;ContentType&quot;</span>, httpContext.Response.ContentType);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// Retrieve the IEndpointFeature selected for the request</span></span><br><span class=\"line\">          <span class=\"keyword\">var</span> endpoint = httpContext.GetEndpoint();</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (endpoint <span class=\"keyword\">is</span> <span class=\"built_in\">object</span>) <span class=\"comment\">// endpoint != null</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              diagnosticContext.Set(<span class=\"string\">&quot;EndpointName&quot;</span>, endpoint.DisplayName);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/logging-using-serilog-and-seq/05.jpg\"></p>\n<h3 id=\"額外紀錄-Serilog-缺少的資訊-MVC\"><a href=\"#額外紀錄-Serilog-缺少的資訊-MVC\" class=\"headerlink\" title=\"額外紀錄 Serilog 缺少的資訊 - MVC\"></a>額外紀錄 Serilog 缺少的資訊 - MVC</h3><p>在 MVC 框架下，相關資訊可以透過 <code>ActionFilter</code>的 <code>OnActionExecuting()</code>去取得 <code>context</code>物件</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SerilogLoggingActionFilter</span> : <span class=\"title\">IActionFilter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IDiagnosticContext _diagnosticContext;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SerilogLoggingActionFilter</span>(<span class=\"params\">IDiagnosticContext diagnosticContext</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _diagnosticContext = diagnosticContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuting</span>(<span class=\"params\">ActionExecutingContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _diagnosticContext.Set(<span class=\"string\">&quot;RouteData&quot;</span>, context.ActionDescriptor.RouteValues);</span><br><span class=\"line\">        _diagnosticContext.Set(<span class=\"string\">&quot;ActionName&quot;</span>, context.ActionDescriptor.DisplayName);</span><br><span class=\"line\">        _diagnosticContext.Set(<span class=\"string\">&quot;ActionId&quot;</span>, context.ActionDescriptor.Id);</span><br><span class=\"line\">        _diagnosticContext.Set(<span class=\"string\">&quot;ValidationState&quot;</span>, context.ModelState.IsValid);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Required by the interface</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuted</span>(<span class=\"params\">ActionExecutedContext context</span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>註冊 action filter</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Add services to the container.</span></span><br><span class=\"line\">builder.Services.AddControllersWithViews(config =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 註冊 serilog action filter</span></span><br><span class=\"line\">    config.Filters.Add(<span class=\"keyword\">typeof</span>(SerilogLoggingActionFilter));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/logging-using-serilog-and-seq/06.jpg\"></p>\n<h3 id=\"過濾不需要的訊息\"><a href=\"#過濾不需要的訊息\" class=\"headerlink\" title=\"過濾不需要的訊息\"></a>過濾不需要的訊息</h3><p>原本 dotnet core 會產生大量的 Log 事件，在使用 Serilog 之後，回顧所有事件會發現有很多類似的事件一直被記錄下來，這個時候可以透過<code>MinimumLevel.Override</code>來過濾掉這類事件</p>\n<p><code>MinimumLevel.Override(&quot;Microsoft.AspNetCore&quot;, LogEventLevel.Warning)</code></p>\n<p>上述程式碼表示:只有在命名空間<code>Microsoft.AspNetCore</code>所發出的<code>Warning</code>層級，或以上層級的事件才會被記錄下來，因此我們可以在設定的部分改寫如下</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\">Log.Logger = <span class=\"keyword\">new</span> LoggerConfiguration()</span><br><span class=\"line\">    .MinimumLevel.Debug()</span><br><span class=\"line\">    .MinimumLevel.Override(<span class=\"string\">&quot;Microsoft&quot;</span>, LogEventLevel.Information)</span><br><span class=\"line\">    <span class=\"comment\">// Filter out ASP.NET Core infrastructre logs that are Information and below</span></span><br><span class=\"line\">    .MinimumLevel.Override(<span class=\"string\">&quot;Microsoft.AspNetCore&quot;</span>, LogEventLevel.Warning)</span><br><span class=\"line\">    .Enrich.FromLogContext()</span><br><span class=\"line\">    .WriteTo.Console()</span><br><span class=\"line\">    .WriteTo.Seq(<span class=\"string\">&quot;http://localhost:5341&quot;</span>)</span><br><span class=\"line\">    .CreateLogger();</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/logging-using-serilog-and-seq/04.jpg\"></p>\n<h3 id=\"紀錄兩份層級不同的-Log\"><a href=\"#紀錄兩份層級不同的-Log\" class=\"headerlink\" title=\"紀錄兩份層級不同的 Log\"></a>紀錄兩份層級不同的 Log</h3><p>有的時候可能會希望記錄兩份不同層級的 LOG 紀錄，例如一份比較精簡的放到 Console，另外一份比較詳細的則輸出到 File</p>\n<p>所有的接收器都提供了<code>restrictedToMinimumLevel</code>可用來至指定層級，參考設定的方式如下</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\">Log.Logger = <span class=\"keyword\">new</span> LoggerConfiguration()</span><br><span class=\"line\">    .MinimumLevel.Debug()</span><br><span class=\"line\">    .WriteTo.File(<span class=\"string\">&quot;log.txt&quot;</span>)</span><br><span class=\"line\">    .WriteTo.Console(restrictedToMinimumLevel: LogEventLevel.Information)</span><br><span class=\"line\">    .CreateLogger();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"情境-不想記錄非必要的請求\"><a href=\"#情境-不想記錄非必要的請求\" class=\"headerlink\" title=\"情境:不想記錄非必要的請求\"></a>情境:不想記錄非必要的請求</h3><p>像是 healthy check 的請求，也會被記錄下來，但是這對我們是沒有意義的，所以我們可以透過調整先前所學過的設定方式來指定我們想要紀錄的東西</p>\n<p>關鍵程式碼如下</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.UseSerilogRequestLogging(opts =&gt; &#123;</span><br><span class=\"line\">    opts.EnrichDiagnosticContext = LogHelper.EnrichFromRequest;</span><br><span class=\"line\">    opts.GetLevel = LogHelper.ExcludeHealthChecks; <span class=\"comment\">// Use the custom level</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">LogHelper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LogEventLevel <span class=\"title\">ExcludeHealthChecks</span>(<span class=\"params\">HttpContext ctx, <span class=\"built_in\">double</span> _, Exception ex</span>)</span> =&gt;</span><br><span class=\"line\">        ex != <span class=\"literal\">null</span></span><br><span class=\"line\">            ? LogEventLevel.Error</span><br><span class=\"line\">            : ctx.Response.StatusCode &gt; <span class=\"number\">499</span></span><br><span class=\"line\">                ? LogEventLevel.Error</span><br><span class=\"line\">                : IsHealthCheckEndpoint(ctx) <span class=\"comment\">// Not an error, check if it was a health check</span></span><br><span class=\"line\">                    ? LogEventLevel.Verbose <span class=\"comment\">// Was a health check, use Verbose</span></span><br><span class=\"line\">                    : LogEventLevel.Information;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsHealthCheckEndpoint</span>(<span class=\"params\">HttpContext ctx</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> endpoint = ctx.GetEndpoint();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (endpoint <span class=\"keyword\">is</span> <span class=\"built_in\">object</span>) <span class=\"comment\">// same as !(endpoint is null)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">string</span>.Equals(</span><br><span class=\"line\">                endpoint.DisplayName,</span><br><span class=\"line\">                <span class=\"string\">&quot;Health checks&quot;</span>,</span><br><span class=\"line\">                StringComparison.Ordinal);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// No endpoint, so not a health check endpoint</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"完整範例\"><a href=\"#完整範例\" class=\"headerlink\" title=\"完整範例\"></a>完整範例</h3><figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// program.cs</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> seq_demo.Filters;</span><br><span class=\"line\"><span class=\"keyword\">using</span> seq_demo.Helper;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Serilog;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Serilog.Events;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指定 LOG 輸出到 Console 及 Seq</span></span><br><span class=\"line\">Log.Logger = <span class=\"keyword\">new</span> LoggerConfiguration()</span><br><span class=\"line\">    .MinimumLevel.Debug()</span><br><span class=\"line\">    .MinimumLevel.Override(<span class=\"string\">&quot;Microsoft&quot;</span>, LogEventLevel.Information)</span><br><span class=\"line\">    <span class=\"comment\">// Filter out ASP.NET Core infrastructre logs that are Information and below</span></span><br><span class=\"line\">    .MinimumLevel.Override(<span class=\"string\">&quot;Microsoft.AspNetCore&quot;</span>, LogEventLevel.Warning)</span><br><span class=\"line\">    .Enrich.FromLogContext()</span><br><span class=\"line\">    .WriteTo.Console()</span><br><span class=\"line\">    .WriteTo.Seq(<span class=\"string\">&quot;http://localhost:5341&quot;</span>)</span><br><span class=\"line\">    .CreateLogger();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\">    <span class=\"comment\">// 使用 Serilog</span></span><br><span class=\"line\">    builder.Host.UseSerilog();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Add services to the container.</span></span><br><span class=\"line\">    builder.Services.AddControllersWithViews(config =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 註冊 serilog action filter</span></span><br><span class=\"line\">        config.Filters.Add(<span class=\"keyword\">typeof</span>(SerilogLoggingActionFilter));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> app = builder.Build();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Configure the HTTP request pipeline.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!app.Environment.IsDevelopment())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseExceptionHandler(<span class=\"string\">&quot;/Home/Error&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.</span></span><br><span class=\"line\">        app.UseHsts();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseHttpsRedirection();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseStaticFiles();</span><br><span class=\"line\">    <span class=\"comment\">// 設置 Serilog</span></span><br><span class=\"line\">    app.UseSerilogRequestLogging(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 自訂紀錄的訊息模板</span></span><br><span class=\"line\">        <span class=\"comment\">// options.MessageTemplate = &quot;Handled  &#123;RequestPath&#125;&quot;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 附加資訊到每一次的請求完成事件</span></span><br><span class=\"line\">        options.EnrichDiagnosticContext = (diagnosticContext, httpContext) =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> request = httpContext.Request;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Set all the common properties available for every request</span></span><br><span class=\"line\">            diagnosticContext.Set(<span class=\"string\">&quot;Host&quot;</span>, request.Host);</span><br><span class=\"line\">            diagnosticContext.Set(<span class=\"string\">&quot;Protocol&quot;</span>, request.Protocol);</span><br><span class=\"line\">            diagnosticContext.Set(<span class=\"string\">&quot;Scheme&quot;</span>, request.Scheme);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Only set it if available. You&#x27;re not sending sensitive data in a querystring right?!</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(request.QueryString.HasValue)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                diagnosticContext.Set(<span class=\"string\">&quot;QueryString&quot;</span>, request.QueryString.Value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Set the content-type of the Response at this point</span></span><br><span class=\"line\">            diagnosticContext.Set(<span class=\"string\">&quot;ContentType&quot;</span>, httpContext.Response.ContentType);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Retrieve the IEndpointFeature selected for the request</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> endpoint = httpContext.GetEndpoint();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (endpoint <span class=\"keyword\">is</span> <span class=\"built_in\">object</span>) <span class=\"comment\">// endpoint != null</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                diagnosticContext.Set(<span class=\"string\">&quot;EndpointName&quot;</span>, endpoint.DisplayName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        options.GetLevel = LogHelper.CustomGetLevel;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseRouting();</span><br><span class=\"line\">    app.UseAuthorization();</span><br><span class=\"line\">    app.MapControllerRoute(name: <span class=\"string\">&quot;default&quot;</span>, pattern: <span class=\"string\">&quot;&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    app.Run();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (Exception e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Log.Fatal(e, <span class=\"string\">&quot;Host terminated unexpectedly&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">finally</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Log.CloseAndFlush();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// LogHelper.cs</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> Serilog.Events;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">seq_demo.Helper</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">LogHelper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LogEventLevel <span class=\"title\">CustomGetLevel</span>(<span class=\"params\">HttpContext ctx, <span class=\"built_in\">double</span> _, Exception? ex</span>)</span> =&gt;</span><br><span class=\"line\">        ex != <span class=\"literal\">null</span></span><br><span class=\"line\">            ? LogEventLevel.Error</span><br><span class=\"line\">            : ctx.Response.StatusCode &gt; <span class=\"number\">499</span></span><br><span class=\"line\">                ? LogEventLevel.Error</span><br><span class=\"line\">                : LogEventLevel.Debug;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// SerilogLoggingActionFilter.cs</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SerilogLoggingActionFilter</span> : <span class=\"title\">IActionFilter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IDiagnosticContext _diagnosticContext;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SerilogLoggingActionFilter</span>(<span class=\"params\">IDiagnosticContext diagnosticContext</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _diagnosticContext = diagnosticContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuting</span>(<span class=\"params\">ActionExecutingContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _diagnosticContext.Set(<span class=\"string\">&quot;RouteData&quot;</span>, context.ActionDescriptor.RouteValues);</span><br><span class=\"line\">        _diagnosticContext.Set(<span class=\"string\">&quot;ActionName&quot;</span>, context.ActionDescriptor.DisplayName);</span><br><span class=\"line\">        _diagnosticContext.Set(<span class=\"string\">&quot;ActionId&quot;</span>, context.ActionDescriptor.Id);</span><br><span class=\"line\">        _diagnosticContext.Set(<span class=\"string\">&quot;ValidationState&quot;</span>, context.ModelState.IsValid);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnActionExecuted</span>(<span class=\"params\">ActionExecutedContext context</span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"補充\"><a href=\"#補充\" class=\"headerlink\" title=\"補充\"></a>補充</h2><p>在之後的練習，我採用的是透過 <code>zipKin</code> 做分散式追蹤</p>\n<blockquote>\n<p>REF: <a href=\"https://partypeopleland.github.io/artblog/2022/04/15/NET6-Core-distributed-tracing/\">NET6 Core distributed tracing</a></p>\n</blockquote>\n<p>也因此不需要在 <code>Seq</code> 的介面中自行先過濾資料，只需要給定一個時間範圍就可以看到那段期間的請求，查看詳細就可以看到每一個 <code>traceId</code> 底下各個 <code>spanId</code> 的資訊，而 <code>Seq</code> 則是想知道更詳細的其他資訊，再透過語法查詢其他資料，像是將一些查詢條件設定成 <code>Signal</code>，如下所示</p>\n<p><img src=\"/artblog/logging-using-serilog-and-seq/seq-signal.jpg\"></p>\n"},{"title":"使用oh-my-posh美化指令列工具 at 2022","url":"/artblog//oh-my-posh-powershell-windows-terminal-at-2022/","content":"<p>前陣子重灌電腦，發現 oh-my-posh 已經不再直接支援 powershell，因此需要依照官網的方法調整一下原先的作法</p>\n<span id=\"more\"></span>\n\n<p>詳情可以參考<a href=\"https://ohmyposh.dev/docs/migrating\">PowerShell module</a>，而要做的事情就是</p>\n<ol>\n<li>移除已經不使用的 oh-my-posh module：<code>Uninstall-Module oh-my-posh -AllVersions</code></li>\n<li>把 $PROFILE 裡面 oh-my-posh 相關指令砍掉：<code>Import-Module oh-my-posh</code></li>\n<li>windows 安裝透過 <code>winget install oh-my-posh</code> 指令</li>\n</ol>\n<p>安裝完畢之後 windows 會多一個 <code>oh-my-posh.exe</code> 可以執行，同時也會建立一個環境變數:<code>POSH_THEMES_PATH</code>，之後可以透過這個方式來指定主題檔案，這個環境變數預設的位置應該是在</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">%userprofile%/appdata/local/programs/oh-my-posh/themes</span><br></pre></td></tr></table></figure>\n\n<p>目前有的 theme 都在這邊，要看效果的話我還是覺得直接去官網看<a href=\"https://ohmyposh.dev/docs/themes\">theme</a>比較方便，指定主題的語法如下</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">oh</span><span class=\"literal\">-my-posh</span> init pwsh <span class=\"literal\">--config</span> <span class=\"string\">&quot;<span class=\"variable\">$env:POSH_THEMES_PATH</span>\\paradox.omp.json&quot;</span> | <span class=\"built_in\">Invoke-Expression</span></span><br></pre></td></tr></table></figure>\n\n<p>直接把這一行加回去到 <code>$PROFILE</code> 就行了</p>\n","tags":["oh-my-posh"]},{"title":"實作youtube直播聊天訊息爬蟲","url":"/artblog//youtube-live-stream-chat-message-crawler/","content":"<p>前陣子因為工作需要，研究了一下如何取得 youtube 聊天室訊息，今天就稍微分享一下過程跟心得吧</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h2><blockquote>\n<p>本文範例程式碼:<a href=\"https://github.com/partypeopleland/youtubeLiveChatCrawler\">Github: youtubeLiveChatCrawler</a></p>\n</blockquote>\n<p>一開始我想得很簡單，就是取得 youtube 直播影片的聊天室訊息內容而已，youtube 那麼大間，官方 API 肯定有這東西，於是直接搜尋 <code>youtube Live Stream API</code>，找到了<a href=\"https://developers.google.com/youtube/v3/live/getting-started\">開發者文件</a>，心裡想著就是事情搞定一半了，沒問題，穩嘞</p>\n<p>結果事情真的沒有像我想的那麼簡單，最終還是參考了其他人爬蟲的 openSource 才成功，主要就是 <a href=\"https://github.com/xenova/chat-downloader\">chat downloader</a></p>\n<h2 id=\"重點\"><a href=\"#重點\" class=\"headerlink\" title=\"重點\"></a>重點</h2><ol>\n<li>直播主需要建立直播活動，並選擇啟用聊天室，這樣直播活動 live 的時候才會有聊天室，在直播期間，透過官方的 API 的確是可以取得聊天紀錄，但結束後就不能用了</li>\n<li>直播結束之後，直播影片存檔有一個設定是是否要顯示聊天歷史，要打勾。</li>\n<li>爬蟲的原理是在直播結束之後，從影片網址取得的 HTML 當中去解析出來 <code>continuation</code> 跟 <code>apiKey</code><ul>\n<li>網址:<code>https://www.youtube.com/watch?v=&#123;0&#125;</code></li>\n<li>continuation: 我的理解是一個 token，透過這一個 token 可以取得下一份資料</li>\n<li>apiKey: 之後要資料會需要這個 apiKey</li>\n</ul>\n</li>\n<li>取得 <code>continuation</code> 就可以開始請求聊天訊息，第一次請求聊天訊息仍舊採用 HttpGet，<ul>\n<li>網址:<code>https://www.youtube.com/live_chat_replay?continuation=&#123;0&#125;</code></li>\n</ul>\n</li>\n<li>後續取得聊天室訊息，則是用 HttpPost 請求 (continuation 則是透過 BODY 送過去)<ul>\n<li>網址:<code>https://www.youtube.com/youtubei/v1/live_chat/get_live_chat_replay?key=&#123;0&#125;</code></li>\n</ul>\n</li>\n<li>聊天訊息其實是放在 HTML 裡面的 javascript 內，而不是直接去抓網頁上ＤＯＭ的顯示，也因此需要對 youtube 回傳的聊天資料格式稍微了解一下，像是斗內的話會是甚麼格式、貼圖、加入頻道會員等等，因為我只需要聊天的內容，其他的東西都被省略就沒有仔細研究了</li>\n</ol>\n<p>大致上重點就是這些，實際的邏輯就請直接參考文章開頭提供的原始碼吧</p>\n<p>雖然最後也沒有用到，但還是提供給有需要的人吧</p>\n<h2 id=\"備註\"><a href=\"#備註\" class=\"headerlink\" title=\"備註\"></a>備註</h2><ol>\n<li>專案一開始針對的是.netFrameWork，後來想的是希望做成小工具的方式來 open Source，所以為了跨平台也能用，採用了 .NET6 Core，有需要可以自行研究 <code>dotnet publish</code></li>\n<li>測試的部分因為希望能夠模擬 httpClient 的回應資料，採用了<a href=\"https://github.com/richardszalay/mockhttp\">MockHttp for HttpClient</a>，當初會看到這個也是因為搜尋 stackoverflow 看到作者自己的回應，嘗試了一下挺好用</li>\n<li>output 的部分其實可以抽象做 Console 或者是 FileOutput，後續可能會也可能不會重構，但最主要的目的是抓訊息，這部分已經完成，本專案大概就是一個 POC 性質，所以我想其實也沒必要再弄其他的畫蛇添足了</li>\n</ol>\n","tags":["crawler"]},{"title":"常見限流策略","url":"/artblog//limiting-algorithm/","content":"<p>先前已經有研究過熔斷機制屬於應用程式呼叫其他服務的時候，對方無法正常回應所採取的手段。限流則是針對自己的應用程式，去限制外部傳過來的請求數量，要做到這一點則必須要能夠知道自己的負載峰值大概在哪一個程度，在接近上限的時候才能夠啟動限流的干預機制，像是服務降級、或是直接拒絕請求</p>\n<span id=\"more\"></span>\n\n<h2 id=\"系統可用性相關文章\"><a href=\"#系統可用性相關文章\" class=\"headerlink\" title=\"系統可用性相關文章\"></a>系統可用性相關文章</h2><ol>\n<li><a href=\"https://partypeopleland.github.io/artblog/2022/04/20/polly-library-circuit-breaker/\">Polly - 熔斷機制</a></li>\n<li>常見限流策略</li>\n</ol>\n<h2 id=\"限流、熔斷的施作點\"><a href=\"#限流、熔斷的施作點\" class=\"headerlink\" title=\"限流、熔斷的施作點\"></a>限流、熔斷的施作點</h2><p>但其實熔斷除了可以做到應用程式呼叫服務的熔斷以外，也可以在被呼叫端，透過偵測系統效能相關指標而啟用熔斷</p>\n<ul>\n<li>前者是透過呼叫服務的回應情況來決定是否啟用熔斷（基於初始配置的熔斷閥值條件啟用熔斷）</li>\n<li>後者則是直接透過偵測系統的 CPU&#x2F;IO&#x2F;RAM 若是超過一定數值，則啟用熔斷（基於偵測相關效能指標啟用熔斷）</li>\n</ul>\n<p>對於要在系統的何處實做限流、熔斷，可以參考下圖，會有比較直觀的瞭解</p>\n<p><img src=\"/artblog/limiting-algorithm/limit.jpg\"></p>\n<h2 id=\"常見的限流策略\"><a href=\"#常見的限流策略\" class=\"headerlink\" title=\"常見的限流策略\"></a>常見的限流策略</h2><p>所謂的限流當然是為了要讓系統可以最大化的應對請求，所以最好限制的點能夠趨近於系統負載上限，因此對於系統進行壓測是很有必要的，只有先知道了系統的能力到哪裡，我們才能接著設定限流的策略</p>\n<h3 id=\"計數器-rate-limit\"><a href=\"#計數器-rate-limit\" class=\"headerlink\" title=\"計數器 rate limit\"></a>計數器 rate limit</h3><p>在這裡又區分成固定窗口及滑動窗口演算法，都是基於計數器的原理判斷是否允許請求</p>\n<ul>\n<li>固定窗口：每一次進來的請求都將計數器累加，判斷若超過系統處理的能力，就拒絕該請求。<br>（例如：每 1 秒鐘只能處理 10 個請求）</li>\n<li>滑動窗口：細分單位，將時間單位再往下切分成數個小區塊，每次滑動一小格。例如同樣是一秒鐘十個請求，每次計算可能就是統計 0.4 ~ 1.4 秒的請求數，下次就是 0.5 ~ 1.5 秒的請求數</li>\n</ul>\n<p>上述這兩種其實很類似，在 Polly 裡面有一個 <a href=\"https://github.com/App-vNext/Polly#rate-limit\">RateLimit</a> 可以用來做速率的限制，其採用的方式是計數器，但因 RateLimit 並沒有在舊版本實作，實測 <code>7.1.1</code> 之前都沒有；測試 <code>7.2.3</code> 版才有，只是還是要搞懂一個觀念，計數器當然可以作為單體使用，也可以共用計數器，主要還是看怎麼設計限流</p>\n<p>如果將應用程式視作一個整體，但是透過 docker 之類的方式部署多個，並透過 load Balance 讓外部訪問，那麼在這邊設計單點的計數器表示的是每一個部署點所能承受的量，這就沒有什麼意義了，既然都透過 docker ＋ load balance 來部署，當然要看的就是整體能夠承受多少流量，因此在這樣情況下，應該是採用共用的計數器才對。只是 polly 的計數器實做應該是放在記憶體中，這樣的方式僅能支援單點，並不支援 scale out，在分散式部署的情境，目前找到的方案都是自行實做計數器演算法，並透過 Redis + Lua Script，讓 Redis 來儲存計數</p>\n<h4 id=\"如何自行實做計數器演算法\"><a href=\"#如何自行實做計數器演算法\" class=\"headerlink\" title=\"如何自行實做計數器演算法\"></a>如何自行實做計數器演算法</h4><p>在網路上有參考到一篇 C＃的範例文章，詳情可以前往<a href=\"https://blog.51cto.com/u_15127608/4547354\">Redis 限流</a>觀看，大致上的思路如下</p>\n<ol>\n<li>將計數器放在 Redis</li>\n<li>採用 AOP 在需要限流的 Controller 或 Action 掛載 Attribute，更細緻一點可以將該 API 在單位時間內允許的請求數傳入參數控制計數器上限，也可以讓不同的 API 可以執行不同的限流閥值策略</li>\n<li>於 Attribute 內實做限流的邏輯，例如<ul>\n<li>限制 IP 每分鐘請求數</li>\n<li>限制登入的使用者每分鐘請求數</li>\n</ul>\n</li>\n</ol>\n<p>對於將計數器放在 Redis 上面，主要是因為 Redis 支援 Lua Script，且因為 Redis 保證執行 Lua Script 的時候是原子執行（這句話我有看沒有懂，但是官方<a href=\"https://redis.io/docs/manual/programmability/eval-intro/\">Scripting with Lua</a>說了在執行 Script 的時候，所有的服務器活動都會被阻止，而這就能確保不會有 race condition 的問題），所以關於計數器的部分，就需要自行查閱一下了</p>\n<h3 id=\"漏桶-leaky-bucket\"><a href=\"#漏桶-leaky-bucket\" class=\"headerlink\" title=\"漏桶 leaky bucket\"></a>漏桶 leaky bucket</h3><p><img src=\"/artblog/limiting-algorithm/leakyBucket.png\"></p>\n<blockquote>\n<p>圖片取自 <a href=\"https://www.wdbyte.com/java/rate-limiter.html\">5 种限流算法，7 种限流方式，挡住突发流量？</a></p>\n</blockquote>\n<p>就像是拿一個水桶，底下戳一個洞，漏下來的水始終是固定的速度；如果水倒的不多，水桶能夠承接的住，慢慢滴總會滴完；如果一次大量的水進來，那麼溢出的水就是被拒絕的請求。這些逸出的部分就是需要觸發流量干預的請求，像是是直接拒絕，或者是降級服務，也因為一次大量的水進來會有很多溢出，所以漏桶算法並不適合應付高併發的請求</p>\n<h3 id=\"令牌桶-token-bucket\"><a href=\"#令牌桶-token-bucket\" class=\"headerlink\" title=\"令牌桶 token bucket\"></a>令牌桶 token bucket</h3><p><img src=\"/artblog/limiting-algorithm/tokenBucket.jpg\"></p>\n<blockquote>\n<p>圖片取自 <a href=\"https://www.796t.com/content/1542707826.html\">Token Bucket 令牌桶演算法</a></p>\n</blockquote>\n<p>系統以固定的速率產生令牌，然後把令牌放到令牌桶裡面，而這個令牌桶有一個容量，如果滿了就不能再往裡面放令牌，多餘的令牌就會被丟掉。當一個請求進來的時候，需要先去令牌桶拿一令牌才可以往下執行，如果令牌桶裡面已經沒有令牌了，那麼就拒絕請求，令牌桶演算法可以應對大流量的突波，能應付多少就看令牌桶的大小有多少，因此在大量請求進來的時候，處理速度的上限是看桶的容量大小；而一般情況之下，處理的速度是看令牌產生的速度。</p>\n<p>當然大方向是這個概念啦，細節的部分還是可以作一些變化，像是一開始的時候先將進來的請求進行分類，看看這個請求是否需要拿令牌，如果不需要拿令牌的就直接放行；需要拿令牌的就照先前說的看是要直接拒絕掉，或者是降級服務，若是感覺難以理解令牌桶演算法，那麼也可以自己想像一下醫院掛號的流程，應該多多少少可以找到相似的地方去理解概念。</p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>對於限流，不管是要自己開發或者是使用現成人家寫好的套件，最重要的還是要先理解概念，才知道人家的 API 每個參數的意義是什麼，否則連參數都不知道是什麼意義，也很難正確的使用套件。如果是知道概念了，但實做有點困難不知如何下手，也可以多多參考實際的範例，或者是 <a href=\"https://github.com/bosima/FireflySoft.RateLimit/blob/master/README.zh-CN.md\">Github: FireflySoft.RateLimit</a>，可以去看看原始碼應該會有些幫助</p>\n<h2 id=\"參考連結\"><a href=\"#參考連結\" class=\"headerlink\" title=\"參考連結\"></a>參考連結</h2><h3 id=\"限流概念及相關演算法\"><a href=\"#限流概念及相關演算法\" class=\"headerlink\" title=\"限流概念及相關演算法\"></a>限流概念及相關演算法</h3><ol>\n<li><a href=\"https://www.infoq.cn/article/uhixhowebu_tyjewjwcl\">分布式系统关注点——限流该怎么做？</a></li>\n<li><a href=\"https://xie.infoq.cn/article/2593d1a3b9e1e06cac6502c4f\">限流、熔断与降级</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000015967922\">接口限流算法：漏桶算法&amp;令牌桶算法</a></li>\n<li><a href=\"http://dockone.io/article/10137\">我司用了 6 年的 Redis 分布式限流器，可以说是非常厉害了！</a><blockquote>\n<p>示意圖是中文的，解釋也很通俗易懂</p>\n</blockquote>\n</li>\n<li><a href=\"https://iter01.com/542914.html\">帶你快速瞭解：限流中的漏桶和令牌桶演算法</a></li>\n<li><a href=\"https://www.796t.com/content/1542707826.html\">Token Bucket 令牌桶演算法</a><blockquote>\n<p>理論的東西較多，建議只看圖即可</p>\n</blockquote>\n</li>\n<li><a href=\"https://www.ucloud.cn/yun/37083.html\">基于 Redis 和 Lua 的分布式限流</a></li>\n<li><a href=\"https://www.its203.com/article/linxingliang/105644250\">没有预热，不叫高并发「限流算法第三把法器：令牌桶算法」- 第 302 篇_悟纤的博客-程序员 ITS203</a><blockquote>\n<p>這邊提供了一個簡易版本的範例</p>\n</blockquote>\n</li>\n<li><a href=\"https://blog.bossma.cn/csharp/about-fireflysoft-ratelimit/\">FireflySoft.RateLimit 使用与原理</a></li>\n<li><a href=\"https://redis.io/docs/manual/programmability/eval-intro/\">Scripting with Lua</a></li>\n<li><a href=\"https://www.readfog.com/a/1647083153628696576\">高併發整體可用性：一文詳解降級、限流和熔斷</a></li>\n</ol>\n<h3 id=\"程式碼範例\"><a href=\"#程式碼範例\" class=\"headerlink\" title=\"程式碼範例\"></a>程式碼範例</h3><ol>\n<li><a href=\"https://blog.51cto.com/u_15127608/4547354\">Redis 限流</a><blockquote>\n<p>C# 版本的 Redis 限流 POC，範例透過 AOP 可實現</p>\n</blockquote>\n</li>\n<li><a href=\"https://github.com/esendex/TokenBucket\">Github: TokenBucket</a><blockquote>\n<p>另一個令牌桶演算法的實作範例</p>\n</blockquote>\n</li>\n<li><a href=\"https://github.com/bosima/FireflySoft.RateLimit/blob/master/README.zh-CN.md\">Github: FireflySoft.RateLimit</a><blockquote>\n<p>支援分散式部署，可參考其中的 Redis + LuaScript 範例</p>\n</blockquote>\n</li>\n</ol>\n","categories":["SRE"]},{"title":"整合vitejs + vue3搭配.NET Core網站開發練習","url":"/artblog//vitejs-vue3-aspnetcore-intergration/","content":"<p>這篇文章主要在練習如何整合前後端網站，在開發時期階段的體驗及發佈出去的方法，最終將網站容器化的一個範例</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h2><p>這篇文章主要是針對 Youtube:<a href=\"https://www.youtube.com/watch?v=opHbgp2f128\">AspNetCore Api + Vitejs + Vuejs Setup for Dev &amp; Prod</a> - <a href=\"https://www.youtube.com/@RawCoding\">Anton Wieslander</a>所做的練習及心得，建議有時間的人可以花 20 分鐘看一下</p>\n<h3 id=\"example-repos\"><a href=\"#example-repos\" class=\"headerlink\" title=\"example repos\"></a>example repos</h3><ol>\n<li><a href=\"https://github.com/partypeopleland/LAB-vite\">LAB-vite</a>: 因為喜歡在 rider 開發，因此新建一個方案檔將前後端專案都拉進來</li>\n<li><a href=\"https://github.com/partypeopleland/Lab-vite-vue-dotnetcore\">Lab-vite-vue-dotnetcore</a>: 多了 dockerfile 的部分，其餘大同小異</li>\n</ol>\n<h2 id=\"網站開發框架的選擇\"><a href=\"#網站開發框架的選擇\" class=\"headerlink\" title=\"網站開發框架的選擇\"></a>網站開發框架的選擇</h2><p><code>webpack</code> 很好沒錯，但專案變大後，不管是在產生 <code>production build</code> 還是在開發時期的編譯時間，都需要很久的時間才能運作，如果再加上開發較複雜的專案，可能同時主機就會需要開好幾個 IDE，有時為了做 <code>PoC</code> 還會需要弄個 <code>docker</code> 架架資料庫<br>在這樣的背景之下如果還要等待 <code>webpack</code> 是非常難以忍受的事情；同理，在先前就已經了解到了 <code>vue2</code> 與 <code>vue3</code> 的差異，並且希望能夠練習一下 <code>vue3</code> 所帶來的開發體驗，而我又是慣常開發 <code>C#</code> 的人，採用<code>.NET6 mvc</code>也是很自然的一件事情，因此就有了下列的技術架構</p>\n<ol>\n<li>前端採用 <code>vite.js</code> + <code>vue3.js</code></li>\n<li>後端採用 <code>.NET6 mvc</code></li>\n</ol>\n<h3 id=\"vite-js-能幹嘛\"><a href=\"#vite-js-能幹嘛\" class=\"headerlink\" title=\"vite.js 能幹嘛\"></a>vite.js 能幹嘛</h3><ol>\n<li>可以拿來打包程式碼</li>\n<li>開發模式的時候，速度挺快 (利用 <strong>瀏覽器支援</strong>的<strong>Native ESM</strong>進行運作)</li>\n<li>正式環境的時候，打包程式碼跟 <code>webpack</code> 一樣，都是將所需要的模組全部包在一起 (為了避免因依賴鍊過長，造成瀏覽器持續的請求資源，這當中前端 JS 是停在那邊等待的，畫面會卡)</li>\n</ol>\n<h3 id=\"vue3-js-的好處\"><a href=\"#vue3-js-的好處\" class=\"headerlink\" title=\"vue3.js 的好處\"></a>vue3.js 的好處</h3><p>相比於 vue2 的差異，最主要的感受應該是提供了 <code>Composition API</code> 的寫法，還有效能的提升，差異的部分網路上很多，我覺得這一篇<a href=\"https://www.gushiciku.cn/pl/pnlJ/zh-tw\">vue3 對比 Vue2.x 差異性、注意點、整體梳理，與 React hook 比又如何</a>挺不錯，專業的評比還是交給專業的來，我轉發一下就好</p>\n<p>對我而言，最主要的就是一系列的效能優化改善，以及最直觀的語法上提供了 <code>Composition API</code> 所帶來的優點，也就是關注點分離，使邏輯、資料可以集中存放維護，也便於 <code>reUse</code></p>\n<h2 id=\"前後端分離開發\"><a href=\"#前後端分離開發\" class=\"headerlink\" title=\"前後端分離開發\"></a>前後端分離開發</h2><p>因為實際上佈署出去的環境，也會影響到開發網站的選擇，這邊因為只是練習，所以打算是將前後端 <code>deploy</code> 到同一個站台發佈出去，之後可以再包裝成 <code>docker</code> 直接容器化，感覺想法還行，那麼就是實作來驗證看看開發體驗順不順，因為是前後端分離專案，兩邊開發，之所以這麼考量，主要還是覺得前端後端其實都有其專業程度，一個專案內如果前後端包在一起，那勢必就會需要開始學習自己不熟悉的部分，有些人喜歡這樣，但也有的人不喜歡，認為為甚麼開發前端，我還要去了解後端的 <code>razor</code> 頁面、生命週期阿啥的東西；或者是反過來開發後端，我還需要去學習 <code>webpack</code>、<code>npm</code>、指令列那些的東西，不能就用 <code>VS2022 IDE</code> 介面上點一點就好了嗎？</p>\n<p>我覺得有興趣的話，東西都放在同一個 sln 內，想看可以去看；如果不感興趣，直接開自己的頁面，前端就確定好假資料的 API 自己刻；後端因為也只提供前端呼叫，所以確認好 API 介面後自己單元測試做一做，都挺好的，反正不管怎麼說，前後端始終都有自己的技術堆疊，切割開來會是比較好的選擇</p>\n<p>但是兩個專案跑起來兩個站台，假設前端 <code>3000</code>後端<code>5000</code>好了，前端跟後端索取資料，很自然地就會需要 <code>fetch</code> 給網址，像是 <code>http://localhost:5000/Api/Test</code>，但是最終又是會放在一起 <code>deploy</code> 出去的，所以 <code>production</code> 出去的時候，網址應該是打<code>/Api/Test</code>，那有沒有辦法可以解決呢</p>\n<p>應該有吧，說不定可以弄一個設定檔之類的東西，看 <code>deploy</code> 出去是 <code>development</code> 還是 <code>production</code> 來切換吧？嗯，可能吧，但想想就有點累，有沒有更方便一點的？</p>\n<h3 id=\"Microsoft-AspNetCore-SpaServices-Extensions\"><a href=\"#Microsoft-AspNetCore-SpaServices-Extensions\" class=\"headerlink\" title=\"Microsoft.AspNetCore.SpaServices.Extensions\"></a>Microsoft.AspNetCore.SpaServices.Extensions</h3><p>還真的有，這東西就叫做 <a href=\"https://www.nuget.org/packages/Microsoft.AspNetCore.SpaServices.Extensions\">Microsoft.AspNetCore.SpaServices.Extensions</a>，但是必須要抱歉的是，我對它不熟悉，而且似乎網上的介紹很少，但藉由一些練習我大概摸索出來的用途如下</p>\n<ol>\n<li>它能夠將發給後端的請求，代理轉發到 SPA 那邊去，所以我們必須要再判斷當前為開發時期的時候才這樣做，因為在正式環境，東西都被我們佈署在一起了，就不需要做代理這件事情</li>\n<li>它能夠指定網站的<code>RootPath</code>，所以當佈署在一起的時候，網站吃的首頁就是該路徑</li>\n</ol>\n<h2 id=\"LAB-建立前後端網站\"><a href=\"#LAB-建立前後端網站\" class=\"headerlink\" title=\"LAB:建立前後端網站\"></a>LAB:建立前後端網站</h2><p>準備工作大概完成了，底下就列出練習的步驟及重點</p>\n<h3 id=\"建立前端網站\"><a href=\"#建立前端網站\" class=\"headerlink\" title=\"建立前端網站\"></a>建立前端網站</h3><p>建立目錄並利用<a href=\"https://vitejs.dev/guide/#getting-started\">官方 Getting Started</a>的指令建立一個快速的啟動專案</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> Lab-vite-vue-dotnetcore</span><br><span class=\"line\"><span class=\"built_in\">cd</span> Lab-vite-vue-dotnetcore</span><br><span class=\"line\">npm create vite@latest</span><br></pre></td></tr></table></figure>\n\n<p>接著會要求輸入專案名稱，選擇技術框架、採用的語言<br><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-113627.jpg\"></p>\n<p>完成後可以進入該目錄先安裝套件，並跑一次看看網站是否正常啟動</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> front-end</span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-113827.jpg\"></p>\n<h3 id=\"建立後端網站\"><a href=\"#建立後端網站\" class=\"headerlink\" title=\"建立後端網站\"></a>建立後端網站</h3><p>回到上層目錄接著開始透過 dotnet cli 建立新的 mvc 專案，完成後一樣測試看看網站是否正常啟動</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">dotnet new web -n back-end</span><br><span class=\"line\"><span class=\"built_in\">cd</span> back-end</span><br><span class=\"line\">dotnet run</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-114215.jpg\"></p>\n<h2 id=\"LAB-前端索取資料\"><a href=\"#LAB-前端索取資料\" class=\"headerlink\" title=\"LAB:前端索取資料\"></a>LAB:前端索取資料</h2><p>這邊我們練習從 Vue Component 裡面去撈後端資料，重點在 fetch 之後，要透過 reactive 包裝，這樣資料才會響應式的隨著變動</p>\n<p>底下就列出關鍵的部分</p>\n<h3 id=\"後端給予資料\"><a href=\"#後端給予資料\" class=\"headerlink\" title=\"後端給予資料\"></a>後端給予資料</h3><p>做一個 API 提供前端呼叫，當路由符合 <code>/api/test</code>就回應一個字串，因此做一個測試的 <code>TestController</code></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Controller/TestController.cs</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">back_end.Controller</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"meta\">Route(<span class=\"string\">&quot;/api/[controller]&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TestController</span> : <span class=\"title\">Microsoft.AspNetCore.Mvc.Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">Index</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Ok(<span class=\"string\">&quot;Test Result&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>當然也因為測試環境是兩個站台，所以後端為了測試要允許<code>CORS</code></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// program.cs</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\">builder.Services.AddControllers();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = builder.Build();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (app.Environment.IsDevelopment())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    app.UseCors(b =&gt; b.AllowAnyHeader().AllowAnyMethod().AllowAnyOrigin());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.UseRouting();</span><br><span class=\"line\">app.UseEndpoints(e =&gt; e.MapDefaultControllerRoute());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.Run();</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-120638.jpg\"></p>\n<h3 id=\"前端取得資料\"><a href=\"#前端取得資料\" class=\"headerlink\" title=\"前端取得資料\"></a>前端取得資料</h3><p>在前端 SFC 透過 fetch 拿資料後將結果指派回資料，經由 vue 渲染於畫面上，後端路由:<code>https://localhost:7156/api/Test</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// /src/components/HelloWorld.vue</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> &#123; reactive, ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">defineProps</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">msg</span>: <span class=\"title class_\">String</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> count = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// === new code begin</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> state = <span class=\"title function_\">reactive</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">message</span>: <span class=\"string\">&quot;empty&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">fetch</span>(<span class=\"string\">&quot;https://localhost:7156/api/Test&quot;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">r</span>) =&gt;</span> r.<span class=\"title function_\">text</span>())</span></span><br><span class=\"line\"><span class=\"language-javascript\">    .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">t</span>) =&gt;</span> (state.<span class=\"property\">message</span> = t))</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// === new code end</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-121420.jpg\"></p>\n<h2 id=\"LAB-Microsoft-AspNetCore-SpaServices-Extensions\"><a href=\"#LAB-Microsoft-AspNetCore-SpaServices-Extensions\" class=\"headerlink\" title=\"LAB:Microsoft.AspNetCore.SpaServices.Extensions\"></a>LAB:Microsoft.AspNetCore.SpaServices.Extensions</h2><h3 id=\"新增套件並設定\"><a href=\"#新增套件並設定\" class=\"headerlink\" title=\"新增套件並設定\"></a>新增套件並設定</h3><p>後端加入套件<code>Microsoft.AspNetCore.SpaServices.Extensions</code>並設置，因為目前我採用.NET6，所以安裝的版本是 6.0.11 版</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">dotnet add package Microsoft.AspNetCore.SpaServices.Extensions --version 6.0.11</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-122007.jpg\"></p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// program.cs</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\">builder.Services.AddControllers();</span><br><span class=\"line\"><span class=\"comment\">// 此處指定 dist 是因為之後我們要佈署的時候，前端是把 build 目錄 dist 整個都複製過來</span></span><br><span class=\"line\">builder.Services.AddSpaStaticFiles(config =&gt; config.RootPath = <span class=\"string\">&quot;dist&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = builder.Build();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (app.Environment.IsDevelopment())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    app.UseDeveloperExceptionPage();</span><br><span class=\"line\">    <span class=\"comment\">// 因為採用套件，開發時期用 proxy 代理，已經不再需要 CORS</span></span><br><span class=\"line\">    <span class=\"comment\">// app.UseCors(b =&gt; b.AllowAnyHeader().AllowAnyMethod().AllowAnyOrigin());</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.UseRouting();</span><br><span class=\"line\">app.UseEndpoints(e =&gt; e.MapDefaultControllerRoute());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 SPA 的靜態檔案</span></span><br><span class=\"line\">app.UseSpaStaticFiles();</span><br><span class=\"line\">app.UseSpa(b =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (app.Environment.IsDevelopment())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 開發階段採用 proxy 指定前端網站</span></span><br><span class=\"line\">        b.UseProxyToSpaDevelopmentServer(<span class=\"string\">&quot;http://localhost:5173/&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.Run();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改前端-fetch-網址\"><a href=\"#修改前端-fetch-網址\" class=\"headerlink\" title=\"修改前端 fetch 網址\"></a>修改前端 fetch 網址</h3><p>因為請求已經被代理，所以路由就改成相對路徑</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fetch</span>(<span class=\"string\">&quot;/api/Test&quot;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">r</span>) =&gt;</span> r.<span class=\"title function_\">text</span>())</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">t</span>) =&gt;</span> (state.<span class=\"property\">message</span> = t))</span><br></pre></td></tr></table></figure>\n\n<p>接著直接開啟後端網站，就可以看到前端ＳＰＡ，呼叫後端ＡＰＩ的結果</p>\n<p><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-122627.jpg\"></p>\n<p>這個時候，如果你同時有開啟 Hot Reload , HMR，前後端的程式碼修改後都可以直接看到瀏覽器會去自動更新畫面，當然後端的部分 Hot Reload 有一些條件，但到目前為止整體的開發流程無疑被改善很多了</p>\n<h2 id=\"發佈網站\"><a href=\"#發佈網站\" class=\"headerlink\" title=\"發佈網站\"></a>發佈網站</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 發布後端網站到上層的output目錄</span><br><span class=\"line\">dotnet publish -c Release -o ..\\output</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-123159.jpg\"></p>\n<p>前端的部分直接讓他發佈到 output 就好</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vite.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vite&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vitejs/plugin-vue&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [<span class=\"title function_\">vue</span>()],</span><br><span class=\"line\">  <span class=\"attr\">build</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">outDir</span>: <span class=\"string\">&quot;../output/dist&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-125100.jpg\"></p>\n<h2 id=\"測試發佈版本\"><a href=\"#測試發佈版本\" class=\"headerlink\" title=\"測試發佈版本\"></a>測試發佈版本</h2><p>目前專案目錄如下<br><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-131758.jpg\"></p>\n<p>進入 output 目錄，這邊存放的是剛才前後端輸出的結果<br><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-2131907.jpg\"></p>\n<p>直接透過 <code>dotnet back-end.dll</code>執行<br><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-132051.jpg\"><br><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-132110.jpg\"></p>\n<h2 id=\"將應用程式容器化\"><a href=\"#將應用程式容器化\" class=\"headerlink\" title=\"將應用程式容器化\"></a>將應用程式容器化</h2><h3 id=\"建立-dockerfile\"><a href=\"#建立-dockerfile\" class=\"headerlink\" title=\"建立 dockerfile\"></a>建立 dockerfile</h3><p>因為不想要把建立搞得太麻煩，所以 <code>build</code> 都在外面先做好，<code>image</code> 就是直接拿 <code>output</code> 複製進去，所以指令變得很單純</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> mcr.microsoft.com/dotnet/aspnet:<span class=\"number\">6.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> output .</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">80</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;dotnet&quot;</span>, <span class=\"string\">&quot;back-end.dll&quot;</span>]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"產生-image\"><a href=\"#產生-image\" class=\"headerlink\" title=\"產生 image\"></a>產生 image</h3><p>在專案根目錄下執行指令建立 <code>docker image</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -t demo .</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-133658.jpg\"></p>\n<h3 id=\"產生-container\"><a href=\"#產生-container\" class=\"headerlink\" title=\"產生 container\"></a>產生 container</h3><p>當然還需要將 <code>image</code> 透過指令來產生 <code>container</code>，並且測試將 <code>port:7000</code> 指給 <code>container</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --name=lab -p 7000:80 demo</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-134152.jpg\"><br><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-134845.jpg\"><br><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-134512.jpg\"></p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>經由這一次的練習，大概可以學到，或者說是複習了</p>\n<ol>\n<li>Vite.js + Vue3.js 的威力展示 (HMR)</li>\n<li>.NET6 mvc</li>\n<li>前後端整合開發</li>\n<li>production 發佈方式</li>\n<li>容器化</li>\n</ol>\n<p>可以為之後日益複雜的軟體架構打一些基礎，而過去幾年的技術與現在相比，在開發時期階段更是進步了很多，但是如果舊網站跟不上技術迭代的腳步，可以想見的是維護的人力會越來越辛苦，也越來越少。像是以前的 <code>classic asp</code> 應該已經不會有人想要維護，而傳統的 js 開發方式也很難被現在的開發者接受，舊專案除非已經穩定沒有維護需求那就還好，技術背景停滯在開發當下的階段，如果還要求持續更新專案功能或是除錯維護，無疑是非常挑戰開發人員的一件事情，要嘛弄一些 <code>workAround</code> 避掉，透過增加整體架構的複雜度、犧牲可維護性；要嘛就是乖乖地想辦法把應用程式的技術棧一層層慢慢更新上去，但這其中也有很大的可能性會受限於<br>客戶端硬體、系統。只能說真的看運氣了，不論如何，軟體開發的演進總是越來越進步，身為開發人員也必須要能夠持續學習成長，才能說是專業從業人員啊 (技術沒有很強至少要有學習心態啊~)</p>\n<h2 id=\"補充-如果你也喜歡用-Rider\"><a href=\"#補充-如果你也喜歡用-Rider\" class=\"headerlink\" title=\"補充:如果你也喜歡用 Rider\"></a>補充:如果你也喜歡用 Rider</h2><p>我非常喜歡使用 Rider 來開發，所以我做了另外一個 Repo:LAB-vite，主要就是為了在 Rider 裡面可以方便的開發，這邊列出一些我碰到的問題還有解法，下面的步驟我就再做一次在新的練習專案:<code>Lab-vite-vue-dotnetcore</code>中</p>\n<h3 id=\"我想要利用-IDE-的搜尋功能，找到前端檔案\"><a href=\"#我想要利用-IDE-的搜尋功能，找到前端檔案\" class=\"headerlink\" title=\"我想要利用 IDE 的搜尋功能，找到前端檔案\"></a>我想要利用 IDE 的搜尋功能，找到前端檔案</h3><p>首先幫前端專案複製一個專案檔過去，並修改一下，檔案命名為 <code>front-end.csproj</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Project</span> <span class=\"attr\">Sdk</span>=<span class=\"string\">&quot;Microsoft.NET.Sdk&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PropertyGroup</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TargetFramework</span>&gt;</span>net6.0<span class=\"tag\">&lt;/<span class=\"name\">TargetFramework</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">RootNamespace</span>&gt;</span>front_end<span class=\"tag\">&lt;/<span class=\"name\">RootNamespace</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ImplicitUsings</span>&gt;</span>enable<span class=\"tag\">&lt;/<span class=\"name\">ImplicitUsings</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Nullable</span>&gt;</span>enable<span class=\"tag\">&lt;/<span class=\"name\">Nullable</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">PropertyGroup</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>根目錄下建立方案檔，並將專案加入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">dotnet new sln</span><br><span class=\"line\">dotnet sln .\\Lab-vite-vue-dotnetcore.sln add .\\back-end\\back-end.csproj</span><br><span class=\"line\">dotnet sln .\\Lab-vite-vue-dotnetcore.sln add .\\front-end\\front-end.csproj</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-143203.jpg\"><br><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-143319.jpg\"><br><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-143733.jpg\"></p>\n<p>最後透過開啟方案檔的方式，就可以透過 <code>Search EveryWhere</code> 找到前端檔案了<br><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-144204.jpg\"></p>\n<h3 id=\"測試前後端都要分別執行，有沒有-one-click-搞定的方法\"><a href=\"#測試前後端都要分別執行，有沒有-one-click-搞定的方法\" class=\"headerlink\" title=\"測試前後端都要分別執行，有沒有 one click 搞定的方法\"></a>測試前後端都要分別執行，有沒有 one click 搞定的方法</h3><p>有的，但是仍舊需要做一些前置作業，前端需要一個任務去執行 <code>npm run dev</code>、後端需要一個任務去執行<code>dotnet watch</code>，最後在透過內建的<code>Compound</code>執行兩個任務，</p>\n<p>首先我們設定前端的部分，指定好前端路徑<br><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-142622.jpg\"></p>\n<p>後端的部分則透過<a href=\"https://plugins.jetbrains.com/plugin/17951--net-watch-run-configuration\">.NET Watch Run Configuration</a>，可以很方便的執行<br><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-144429.jpg\"></p>\n<blockquote>\n<p>如果一開始是用開啟目錄的方式打開，而不是透過開啟解決方案、專案的話，是沒有辦法設定 <code>dotnet watch</code>外掛的</p>\n</blockquote>\n<p>新增 <code>Compound</code> 任務如下，選擇另外兩個任務就好<br><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-144849.jpg\"></p>\n<p>點一下之後等待兩個任務跑完，瀏覽器自動開出來<br><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-145133.jpg\"></p>\n<p>測試一下前端修改之後，<code>HMR</code> 正確執行<br><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-145421.jpg\"></p>\n<p>後端的部分修改完畢後會自動重載頁面<br><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-145618.jpg\"></p>\n<h3 id=\"既然都有一鍵執行了，那一鍵發佈呢\"><a href=\"#既然都有一鍵執行了，那一鍵發佈呢\" class=\"headerlink\" title=\"既然都有一鍵執行了，那一鍵發佈呢\"></a>既然都有一鍵執行了，那一鍵發佈呢</h3><p>本質都是一樣的東西啊，把指令包裝一下就好了<br><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-150906.jpg\"><br><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-151210.jpg\"></p>\n<p>再新增一個執行 <code>output</code> 目錄下 exe 的任務<br><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-151640.jpg\"><br>測試一下發佈的網站結果</p>\n<p><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-151948.jpg\"></p>\n<h3 id=\"那容器化也來一個吧，我真的懶得打指令了\"><a href=\"#那容器化也來一個吧，我真的懶得打指令了\" class=\"headerlink\" title=\"那容器化也來一個吧，我真的懶得打指令了\"></a>那容器化也來一個吧，我真的懶得打指令了</h3><p>新增任務照圖設定<br><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-152334.jpg\"></p>\n<p>如果想要順便把容器也建立起來，就填一下必要的設定值<br><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-153922.jpg\"><br><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-154029.jpg\"></p>\n<p>測試一下 docker container 的網站<br><img src=\"/artblog/vitejs-vue3-aspnetcore-intergration/2022-11-29-154232.jpg\"></p>\n","categories":["practice"],"tags":["vue3","vitejs","netCore","rider"]},{"title":"Jenkins-pipeline-加入單元測試報告","url":"/artblog//Jenkins-pipeline-unittest-report/","content":"<p>將 Jenkins 的 pipeline 專案加入單元測試的一些注意事項</p>\n<span id=\"more\"></span>\n\n<h2 id=\"套件\"><a href=\"#套件\" class=\"headerlink\" title=\"套件\"></a>套件</h2><p>Jenkins 可以搭配下列兩個套件來加入單元測試報告，直接在 plugin 頁面進行安裝即可</p>\n<ol>\n<li><code>VSTest Runner</code></li>\n<li><code>MSTest Runner</code></li>\n</ol>\n<h2 id=\"設定\"><a href=\"#設定\" class=\"headerlink\" title=\"設定\"></a>設定</h2><p>目前設定流程：<code>Git</code>–&gt;<code>NuGet</code>–&gt;<code>Build</code>–&gt;<code>Deploy</code></p>\n<p>加入單元測試：<code>Git</code>–&gt;<code>NuGet</code>–&gt;<code>Test</code>–&gt;<code>Build</code>–&gt;<code>Deploy</code></p>\n<p>各個環節的細部設定就不提了，以下是單元測試的設定範例</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">stage(&#x27;nuget&#x27;)</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">//</span> <span class=\"string\">nuget</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"string\">stage(&#x27;build</span> <span class=\"string\">Test&#x27;)</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">bat label:</span> <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">script:</span> <span class=\"string\">&#x27;&#x27;</span><span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        chcp 65001</span></span><br><span class=\"line\"><span class=\"string\">        msbuild MyProject.Core.Test\\\\MyProject.Core.Test.csproj /p:Configuration=Debug /t:Rebuild</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;</span><span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">vsTest cmdLineArgs:</span> <span class=\"string\">&#x27;/Logger:trx;LogFileName=MyProject.Core.trx&#x27;</span>, <span class=\"attr\">testFiles:</span> <span class=\"string\">&#x27;MyProject.Core.Test\\\\bin\\\\Debug\\\\MyProject.Core.Test.dll&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">mstest testResultsFile:</span> <span class=\"string\">&#x27;TestResults/MyProject.Core.trx&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">if</span> <span class=\"string\">(currentBuild.result</span> <span class=\"string\">==</span> <span class=\"string\">&quot;FAILURE&quot;</span><span class=\"string\">)</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">error(&#x27;測試失敗&#x27;)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"net6\"><a href=\"#net6\" class=\"headerlink\" title=\".net6\"></a>.net6</h2><p>如果專案是.NET6，直接可以透過 CLI 下指令去測試，並產生報告檔，再接著透過 mstest 指定報告檔的路徑就可以了</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">stage(&#x27;unitTest&#x27;)</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">bat returnStatus:</span> <span class=\"literal\">true</span>, <span class=\"attr\">script:</span> <span class=\"string\">&#x27;&#x27;</span><span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">        chcp 65001</span></span><br><span class=\"line\"><span class=\"string\">        c:</span></span><br><span class=\"line\"><span class=\"string\">        cd C:\\\\Program Files\\\\dotnet</span></span><br><span class=\"line\"><span class=\"string\">        dotnet test -c Release &quot;D:\\\\MyProject.Core.Test\\\\MyProject.Core.Test.csproj&quot; --filter TestCategory=UnitTest --logger &quot;trx;LogFileName=unit_tests.xml&quot;</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;</span><span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">mstest testResultsFile:</span> <span class=\"string\">&#x27;**/unit_tests.xml&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"踩過的坑\"><a href=\"#踩過的坑\" class=\"headerlink\" title=\"踩過的坑\"></a>踩過的坑</h2><h3 id=\"工具版本不一\"><a href=\"#工具版本不一\" class=\"headerlink\" title=\"工具版本不一\"></a>工具版本不一</h3><p>LAB 環境已經有點久了，所以安裝的軟體都還蠻舊的，使用<code>msbuild</code>的指令在 LAB 環境與 Local 環境有差異，需要加上一些參數並指定版本，為了避免這樣的情況，希望可以使用相同的設定，因此需要將 Jenkins 主機上的工具程式更新</p>\n<p>微軟有提供一個東西叫做<code>BuildTools</code>，而且很神奇的非常難找到下載點，還好在這篇文章 <a href=\"https://docs.microsoft.com/en-us/answers/questions/136985/build-tools-for-visual-studio.html\">Build Tools for Visual Studio</a> 裏面有好心人士直接提供直接下載<a href=\"https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&rel=16\">連結</a></p>\n<p>下載後安裝<code>buildTools</code>，將頁籤切換到個別工具，找到測試相關類別底下有一個中文叫做<code>測試工具的核心功能 - 建置工具</code>，打勾才會安裝<code>VSTest.console.exe</code></p>\n<h3 id=\"Jenkins-外掛設定\"><a href=\"#Jenkins-外掛設定\" class=\"headerlink\" title=\"Jenkins 外掛設定\"></a>Jenkins 外掛設定</h3><p>怕影響到其他使用原有舊程式的 Jenkins 專案，所以沒有設定<code>path</code>，使用到<code>msbuild</code>以及<code>VSTest.console.exe</code>的地方，都透過絕對路徑來呼叫，而絕對路徑中間有空格，就必須要使用雙引號將整段括起來<br>若不須考慮舊專案，可以直接在系統環境變數中將路徑加上，這樣在指令列就不需要輸入完整路徑呼叫工具</p>\n<p>接著是 Jenkins 的 plugin 設定，需要在<code>Jenkins</code>的<code>Global Tool Configuration</code>裡面設定好工具程式的呼叫方式，此處可以直接用雙引號將絕對路徑打上，如果先前有設定<code>path</code>，也可以直接輸入執行檔名稱就好。以<code>VSTest.Console.exe</code>為例，可以直接設定</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\Common7\\IDE\\CommonExtensions\\Microsoft\\TestWindow\\vstest.console.exe&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"工作區目錄與發佈目錄\"><a href=\"#工作區目錄與發佈目錄\" class=\"headerlink\" title=\"工作區目錄與發佈目錄\"></a>工作區目錄與發佈目錄</h3><p>因為在 LAB 環境有區分工作區目錄、發佈目錄，所以最好遵循著流程，測試通過之前都操作都在工作區做，所以建議在 Git 下載原始碼之後，就直接在工作區建置測試專案，接著測試通過後才進行發佈</p>\n<h3 id=\"測試失敗後未能中斷-pipeline\"><a href=\"#測試失敗後未能中斷-pipeline\" class=\"headerlink\" title=\"測試失敗後未能中斷 pipeline\"></a>測試失敗後未能中斷 pipeline</h3><p>利用<code>if</code>指令判斷當前狀態來決定是否中斷，範例可參考先前的設定</p>\n<h3 id=\"中斷-pipeline\"><a href=\"#中斷-pipeline\" class=\"headerlink\" title=\"中斷 pipeline\"></a>中斷 pipeline</h3><p>在 Jenkins pipeline 中整合另外一篇文章<a href=\"https://partypeopleland.github.io/artblog/2020/02/25/Jenkins%E6%AA%A2%E6%9F%A5%E5%89%8D%E7%AB%AF%E7%B7%A8%E8%AD%AF%E7%A8%8B%E5%BC%8F%E6%9C%89%E7%84%A1%E7%B0%BD%E5%85%A5%E7%89%88%E6%8E%A7/\">Jenkins 檢查前端編譯程式有無簽入版控</a>，測試了一下後發現若發生錯誤未能中斷 pipeline，查了一下，解決的方式如下</p>\n<p>使用 bat 去執行命令，可以讓回傳狀態碼，然後將它存到變數內</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">def x = bat(</span><br><span class=\"line\">    returnStdout: true,</span><br><span class=\"line\">    script: &quot;exit 1&quot;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>然後再 stage 的區段之內，透過<code>if</code>判斷式來拋<code>error</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">if (x == 1) &#123;</span><br><span class=\"line\">    error(&#x27;something wrong!&#x27;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>Code Coverage 並沒有加入，一方面是因為我沒有使用<code>VSTest.console.exe</code>或是<code>NCover</code>做出來，以前曾經有做過<code>DotCover.exe</code>的覆蓋率報告，但是它不是免費的，所以不能用在公司的機器上，而我自己若需要覆蓋率的資訊，現在其實也都使用<code>Rider</code>的功能去看我的 Production Code 還有哪個邏輯分支沒有被覆蓋到，它是屬於哪一個測試案例，我有沒有需要為此寫一個測試，所以在 Jenkins 上面也不太需要報告；而且單元測試覆蓋率其實一直有個爭議，很容易讓大家追求這個數據要越高越好，但其實這也是一種浪費，有興趣了解的人可以自行查詢一下，我很推薦 91 的這篇文章：<a href=\"https://dotblogs.com.tw/hatelove/2017/05/30/my-opinions-of-code-coverage-and-tdd\">測試覆蓋率與 TDD 的正確心態</a>，裡面的童子軍法則其實就是每天進步一點點的概念，這樣的方式也比較容易達成，至少把自己製造的垃圾帶走吧~</p>\n","categories":["devOps"],"tags":["jenkins"]},{"title":"LUIS - 自然語言語意分析初學入門","url":"/artblog//language-understanding-intelligent-service/","content":"<p>LUIS 是自然語言的語意分析服務，接下來的文章會用官方文件為基底，開始學習如何建立屬於自己的 LUIS 服務，過程中我會將這些步驟記錄下來，希望也能對別人有所助益</p>\n<span id=\"more\"></span>\n\n<p>參考文件：<a href=\"https://docs.microsoft.com/zh-tw/azure/cognitive-services/luis/luis-container-howto?tabs=v3\">安裝和執行適用于 LUIS 的 Docker 容器</a></p>\n<h2 id=\"什麼是-Language-Understanding-Intelligent-Service-LUIS-？\"><a href=\"#什麼是-Language-Understanding-Intelligent-Service-LUIS-？\" class=\"headerlink\" title=\"什麼是 Language Understanding Intelligent Service (LUIS)？\"></a>什麼是 Language Understanding Intelligent Service (LUIS)？</h2><p>在<code>LUIS</code>文件<a href=\"https://docs.microsoft.com/zh-tw/azure/cognitive-services/luis/\">首頁</a>的地方我看到這句話，真的是很精簡：<code>了解 Language Understanding 如何讓應用程式了解人在文字中所表達的意思</code></p>\n<p>我們可以從<a href=\"https://docs.microsoft.com/zh-tw/azure/cognitive-services/luis/what-is-luis\">概觀頁面</a>中看到定義</p>\n<blockquote>\n<p><code>Language Understanding</code> (LUIS) 是一種雲端式交談式 AI 服務，可將自訂機器學習智慧套用至使用者的對話、自然語言文字中，以預測整體意義，並找出相關的詳細資訊。<br>LUIS 的用戶端應用程式是任何對話應用程式，可與使用者透過自然語言溝通以完成工作。 用戶端應用程式的例子包括社群媒體應用程式、AI 聊天機器人，以及啟用語音功能的桌面應用程式。</p>\n</blockquote>\n<p>從上面這簡短的介紹當中可以發現 LUIS 能被廣泛的應用到很多的情境中，相信能夠為我們實務上的問題帶來一些嶄新的解決方案，我是還蠻期待的，至於有沒有用，那就之後慢慢看下去吧</p>\n<h2 id=\"事前準備\"><a href=\"#事前準備\" class=\"headerlink\" title=\"事前準備\"></a>事前準備</h2><p>因為<code>LUIS</code>需要在<code>Azure</code>裡面先建立起服務，所以可想而知的也必須要先有個<code>Azure</code>帳號才能夠使用，但我們可以使用免費的額度來進行測試開發使用，所以不用太擔心費用的問題</p>\n<p>申請完畢之後，登入<code>Azure</code></p>\n<p><img src=\"/artblog/language-understanding-intelligent-service/2021-03-30_095508.jpg\"><br>左側選單找到<code>建立資源</code></p>\n<p><img src=\"/artblog/language-understanding-intelligent-service/2021-03-30_095603.jpg\"><br>輸入<code>luis</code>可看到<code>language understanding</code></p>\n<p><img src=\"/artblog/language-understanding-intelligent-service/2021-03-30_095310.jpg\"><br>此處選擇建立</p>\n<p><img src=\"/artblog/language-understanding-intelligent-service/2021-03-30_095812.jpg\"><br>在這邊就可以依據需要選擇然後建立資源了，因為我們會建立<code>LUIS</code>，稍後也會將它發布出去測試，所以選擇<code>兩者</code>，如果想了解細節的人，可以看看<a href=\"https://azure.microsoft.com/zh-tw/pricing/details/cognitive-services/language-understanding-intelligent-services/\">定價</a></p>\n<p><img src=\"/artblog/language-understanding-intelligent-service/2021-03-30_100550.jpg\"><br>仔細看看下面的認知服務計價原則，會發現傳送的每個文字片語都會被視為一筆交易計價，雖然我看不是很懂，但我突然明白了為什麼我只有測幾次請求，交易卻是將近 100 筆的紀錄，一直以來讓我很驚恐的部分就是 Azure 的計價…實在是太難了</p>\n<p><img src=\"/artblog/language-understanding-intelligent-service/2021-03-30_101117.jpg\"><br>反正記得選取計價層的時候，要挑有<code>F0</code>免費的來測試</p>\n<p>建立完畢 LUIS 服務後，接著到<a href=\"https://www.luis.ai/\">LUIS 網站</a>去建立 luis 應用程式</p>\n<p><img src=\"/artblog/language-understanding-intelligent-service/2021-03-30_101743.jpg\"><br>因為我先前已經有建立過，所以我這裡直接可以點<code>New App</code>，他會跳出一個燈箱讓我填寫新的 App 資料；如果是第一次進入，印象是會要你選擇剛剛在<code>Azure</code>建立的資源，才可以繼續使用</p>\n<h2 id=\"建立模型\"><a href=\"#建立模型\" class=\"headerlink\" title=\"建立模型\"></a>建立模型</h2><p>首先需要先知道一下整個 LUIS 的概念，我們以點餐為例，在<code>Intents</code>裡面新增一個點餐行為<br><img src=\"/artblog/language-understanding-intelligent-service/2021-03-30_102435.jpg\"></p>\n<p>然後輸入幾個口語化的訂單範例給他，注意要不同的句型喔</p>\n<p><img src=\"/artblog/language-understanding-intelligent-service/2021-03-30_102910.jpg\"><br>像這樣，接著就可以把文字標記起來，並選擇實體…這邊還沒有建立，所以我們先回到<code>Entities</code>去建立</p>\n<p><img src=\"/artblog/language-understanding-intelligent-service/2021-03-30_103109.jpg\"></p>\n<p>再次回到<code>Intents</code>就可以將剛剛的點餐範例，標記上哪個東西代表的是餐點名稱了<br><img src=\"/artblog/language-understanding-intelligent-service/2021-03-30_103207.jpg\"></p>\n<p>當我們都設定完畢後，就可以點右上角的<code>Train</code>去訓練我們的模型了<br><img src=\"/artblog/language-understanding-intelligent-service/2021-03-30_103346.jpg\"></p>\n<p>訓練完畢之後我們可以在<code>Test</code>測試我們的模型<br><img src=\"/artblog/language-understanding-intelligent-service/2021-03-30_103605.jpg\"></p>\n<p>可以看到他預測這個輸入的文字，意圖是點餐行為，但是他沒有抓到正確的 Entities</p>\n<p><img src=\"/artblog/language-understanding-intelligent-service/2021-03-30_103803.jpg\"><br>上面的這個就有抓到</p>\n<p>接下來我們講講複雜一點的實體，再剛剛操作的是機器學習的 Entity，稱之為 ML Entity，那這個東西他是可以做階層的，再這邊我另外做了一個小吃攤的點餐行為，先建立一個叫做<code>餐食</code>的 entity，並且加上幾個子實體，分別是餐點的份量、麵條種類以及主菜</p>\n<p><img src=\"/artblog/language-understanding-intelligent-service/2021-04-01_152532.jpg\"></p>\n<p>這樣的話，測試的結果會在餐食底下看到各個子實體<br><img src=\"/artblog/language-understanding-intelligent-service/2021-04-01_152702.jpg\"></p>\n<p>細節的部分請參照<a href=\"https://docs.microsoft.com/zh-tw/azure/cognitive-services/luis/luis-concept-feature\">說明文件</a></p>\n<h2 id=\"發布\"><a href=\"#發布\" class=\"headerlink\" title=\"發布\"></a>發布</h2><p>右上角的<code>Publish</code>按鈕點下去後他會問說要發佈到哪裡去，我們因為只是測試練習，所以就直接發到<code>production</code>去<br><img src=\"/artblog/language-understanding-intelligent-service/2021-03-30_120343.jpg\"></p>\n<p><img src=\"/artblog/language-understanding-intelligent-service/2021-03-30_120705.jpg\"><br>上面這個地方可以看到 (上面這張我截錯 app，不過沒關係，都是一樣的)</p>\n<ol>\n<li>APIkey</li>\n<li>EndPoints</li>\n<li>測試用的網址</li>\n</ol>\n<p>我們可以直接用測試網址後面帶 QueryString 去測試語句，測試結果會回應 Json 資料格式<br><img src=\"/artblog/language-understanding-intelligent-service/2021-03-30_121249.jpg\"></p>\n","categories":["LUIS"]},{"title":"Jenkins Pipeline Script 部署 VuePress 到本地目錄範例","url":"/artblog//Jenkins-pipeline-script-VuePress-By-SCM/","content":"<p>我原先是不打算寫這篇的，因為感覺好像沒有很難，但是我最後花了一個下午的時間，決定還是記錄一下</p>\n<span id=\"more\"></span>\n\n<h2 id=\"intro\"><a href=\"#intro\" class=\"headerlink\" title=\"intro\"></a>intro</h2><p>事情是這樣的：我自己會建立一些文件，用來作自己的知識管理。當然就是記錄一些比較繁瑣的事情，也順便想學習一下<code>VuePress</code>來做，當然因為覺得方便又漂亮，寫起來還不麻煩。最終也會想要把他部署在自己的IIS上面，這樣工作的時候需要查什麼東西就可以直接看了。</p>\n<p>於是今天順手升級了<code>Jenkins</code>之後，覺得很漂亮，我一定要做些什麼，然後就打算自己順便練習一下把設定檔放在Repo裡面，這樣就只要設定<code>Jenkins</code>要抓的Repo網址，就可以自動化整個流程了，挺好</p>\n<h2 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a>Jenkins</h2><p>直接從2.2x版本升級到目前最新版本，套件也都更新，整個畫面都很漂亮</p>\n<h2 id=\"新建專案\"><a href=\"#新建專案\" class=\"headerlink\" title=\"新建專案\"></a>新建專案</h2><p>照例新增一個<code>pipeline</code>專案，沒什麼好講的</p>\n<p>加入參數化建置<br><img src=\"/artblog/Jenkins-pipeline-script-VuePress-By-SCM/01.jpg\"></p>\n<p>這部分的考量是我不想要每一次都重新安裝套件，只要第一次做了之後，後續沒有新增套件，自然就不需要做了，我想作為一個VuePress專案，也沒什麼機會要去裝套件用，畢竟我只是拿來記錄而已</p>\n<p>選擇<code>Pipeline script from SCM</code>，並設定好Repo網址<br><img src=\"/artblog/Jenkins-pipeline-script-VuePress-By-SCM/02.jpg\"></p>\n<h2 id=\"建立-Jenkinsfile\"><a href=\"#建立-Jenkinsfile\" class=\"headerlink\" title=\"建立 Jenkinsfile\"></a>建立 Jenkinsfile</h2><p>回到Repo根目錄，新增文件<code>Jenkinsfile</code>，裡面的內容就是 pipeline script</p>\n<p>我嘗試了很多辦法，失敗過程就不提了，直接給成功案例，我應該是有什麼地方沒弄好，才會需要在裡面再抓一次 Repo，等之後有機會再重新回頭來研究吧，現在就先這樣就好了</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">node() &#123;</span><br><span class=\"line\">    ws(<span class=\"string\">&#x27;D:\\\\Github_Newbie-Doc-VuePress&#x27;</span>)&#123;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;git&#x27;</span>) &#123;</span><br><span class=\"line\">            git <span class=\"attr\">credentialsId:</span> <span class=\"string\">&#x27;44ac570d-74df-471f-ac39-62f07b16b3be&#x27;</span>, <span class=\"attr\">url:</span> <span class=\"string\">&#x27;your github repository&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;npm&#x27;</span>) &#123;</span><br><span class=\"line\">            bat <span class=\"attr\">label:</span> <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">returnStatus:</span> <span class=\"literal\">true</span>, <span class=\"attr\">script:</span> <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">            D:</span></span><br><span class=\"line\"><span class=\"string\">            cd D:\\\\Github_Newbie-Doc-VuePress</span></span><br><span class=\"line\"><span class=\"string\">            if %npmInstall% == true npm install</span></span><br><span class=\"line\"><span class=\"string\">            &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;build&#x27;</span>) &#123;</span><br><span class=\"line\">            bat <span class=\"attr\">label:</span> <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">returnStatus:</span> <span class=\"literal\">true</span>, <span class=\"attr\">script:</span> <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">            D:</span></span><br><span class=\"line\"><span class=\"string\">            cd D:\\\\Github_Newbie-Doc-VuePress</span></span><br><span class=\"line\"><span class=\"string\">            npm run docs:build</span></span><br><span class=\"line\"><span class=\"string\">            &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;deploy&#x27;</span>) &#123;</span><br><span class=\"line\">            bat <span class=\"attr\">label:</span> <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">returnStatus:</span> <span class=\"literal\">true</span>, <span class=\"attr\">script:</span> <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">            D:</span></span><br><span class=\"line\"><span class=\"string\">            cd D:\\\\Github_Newbie-Doc-VuePress</span></span><br><span class=\"line\"><span class=\"string\">            npm run docs:deploy</span></span><br><span class=\"line\"><span class=\"string\">            &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我在D槽新增了一個目錄給<code>Jenkins</code>使用，這樣配合前面的參數化設定，我可以選擇是否需要<code>npm install</code>，但最終的結果，我發現這個設計是多餘的。</p>\n<h2 id=\"環境變數\"><a href=\"#環境變數\" class=\"headerlink\" title=\"環境變數\"></a>環境變數</h2><p>因為要使用 <code>vuePress</code>，我無法直接找到<code>node</code>路徑去下指令，最終是透過設定全域變數，指定了<code>cmd.exe</code>還有<code>node</code>的路徑</p>\n<p><img src=\"/artblog/Jenkins-pipeline-script-VuePress-By-SCM/03.jpg\"></p>\n<h2 id=\"將設定檔推上Repo\"><a href=\"#將設定檔推上Repo\" class=\"headerlink\" title=\"將設定檔推上Repo\"></a>將設定檔推上Repo</h2><p>這個步驟就是將剛剛的<code>Jenkinsfile</code> commit後push到Github去而已。</p>\n<h2 id=\"成果\"><a href=\"#成果\" class=\"headerlink\" title=\"成果\"></a>成果</h2><p><img src=\"/artblog/Jenkins-pipeline-script-VuePress-By-SCM/04.jpg\"></p>\n<p>這是成功案例，在這之前我是先寫<code>pipeline script</code>去測試，測試成功才把取得SOURCE的那部分移除，然後加到Repo，可以看到失敗了37次…<br><img src=\"/artblog/Jenkins-pipeline-script-VuePress-By-SCM/05.jpg\"></p>\n<h2 id=\"補充\"><a href=\"#補充\" class=\"headerlink\" title=\"補充\"></a>補充</h2><p>實際上 build 完畢之後還有 deploy 的部分，在這邊因為是我 local Jenkins Deploy to local Folder , 所以我直接用 node.js 寫個拷貝資料的 script就完事，如果是要發布到其他空間，可以參考<a href=\"https://www.vuepress.cn/guide/deploy.html\">VuePress 官方文件：部署</a></p>\n<p>附上拷貝檔案的sample</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// include fs-extra package</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs-extra&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;path&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> sourceDir = path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&quot;./docs/.vuepress/dist&quot;</span>); </span><br><span class=\"line\"><span class=\"keyword\">const</span> iisFolder = <span class=\"string\">&#x27;D:\\\\PublishSite\\\\newbieDoc&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">emptyDirAndCopyFiles</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> fs.<span class=\"title function_\">emptyDir</span>(iisFolder)</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;clean iisFolder folder success!&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> fs.<span class=\"title function_\">copy</span>(sourceDir, iisFolder)</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;copy to iisFolder success!&#x27;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">emptyDirAndCopyFiles</span>()</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"補充：github-取得-repo-失敗\"><a href=\"#補充：github-取得-repo-失敗\" class=\"headerlink\" title=\"補充：github 取得 repo 失敗\"></a>補充：github 取得 repo 失敗</h2><p>以前用SSH的方式在前幾天失敗了，原因是Github不支援了，必須要在Github的個人設定內，做一個 access token<br><img src=\"/artblog/Jenkins-pipeline-script-VuePress-By-SCM/accessToken.png\"></p>\n<p>然後在網址的部分改用 <code>https://&lt;accessToken&gt;@github.com/&lt;userAccount&gt;/&lt;repositoryName&gt;.git</code> 的方式請求，然後auth就不用了，像下面這樣</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">stage(<span class=\"string\">&#x27;git&#x27;</span>) &#123;</span><br><span class=\"line\">    git <span class=\"string\">&#x27;https://XXXXXXXXXXXXXXX@github.com/myAccount/myProject.git&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["devOps"],"tags":["jenkins"]},{"title":"Rider-重新格式化代碼及代碼清理","url":"/artblog//rider-reformat-code-and-cleanup/","content":"<p>簡單紀錄重新格式化代碼、代碼清理的使用及設定方法</p>\n<span id=\"more\"></span>\n\n<p>為了要讓團隊成員在撰寫代碼的時候有統一的格式，讓其他成員能夠迅速的瞭解程式碼，不因為個人風格的喜好而影響，通常我們會定義程式碼撰寫風格來讓團隊成員遵守，這個東西大概就是團隊成員一同遵守的<code>Coding Style</code>，像是<a href=\"https://editorconfig.org/\">EditorConfig</a>或是大名鼎鼎的<a href=\"https://eslint.org/\">ESLint</a>等等工具，其實都是在定義一系列的規則，輔助團隊透過各種支援的 IDE 達成程式碼風格的一致性</p>\n<p>Rider 所提供的 Reformat Code 功能則是可以依據自行定義好的規則進行自動格式化，當然這些規則需要自己去設定裡面先定義好各種語言的 <code>Code Style</code><br><img src=\"/artblog/rider-reformat-code-and-cleanup/2021-10-29-123009.jpg\"></p>\n<p>設定的細節非常的多，尤其是 csharp, 就不一一截圖了，一般使用者應該也是跟我一樣直接使用預設值，然後針對結果再去做微調的動作</p>\n<p>而呼叫使用的方式，則可以從 keymap 裡面去搜尋然後自行設定熱鍵<br><img src=\"/artblog/rider-reformat-code-and-cleanup/2021-10-29-141521.jpg\"></p>\n<p>可以看見有三個執行的方式</p>\n<h2 id=\"reformat-code\"><a href=\"#reformat-code\" class=\"headerlink\" title=\"reformat code\"></a>reformat code</h2><p>這個方式就只是最簡單的幫你把代碼重新格式化排版而已</p>\n<h2 id=\"reformat-and-Cleanup\"><a href=\"#reformat-and-Cleanup\" class=\"headerlink\" title=\"reformat and Cleanup\"></a>reformat and Cleanup</h2><p>採用這個方式的話他會再跳出視窗詢問你要套用哪一套規則來做 CleanUp 的動作<br><img src=\"/artblog/rider-reformat-code-and-cleanup/2021-10-29-142043.jpg\"></p>\n<p>當然在檔案總管的部分也可以透過右鍵找到 <code>reformat and cleanup</code>的選項，一樣可以跳出視窗，如果規則都設定完成的話，可以一次將專案所有程式碼都先作一次 cleanup 然後 Commit，之後的開發 commit 內容應該也會比較乾淨些，更容易看到 Diff 的差異<br><img src=\"/artblog/rider-reformat-code-and-cleanup/2021-10-29-142602.jpg\"></p>\n<h2 id=\"silent-reformat-and-cleanup\"><a href=\"#silent-reformat-and-cleanup\" class=\"headerlink\" title=\"silent reformat and cleanup\"></a>silent reformat and cleanup</h2><p>跟上面一個一樣，只是會需要你先指定一份設定檔，就不會再跳出視窗詢問了<br>設定的方式在 <code>Editor</code>-&gt;<code>Code Cleanup</code><br><img src=\"/artblog/rider-reformat-code-and-cleanup/2021-10-29-143019.jpg\"></p>\n<p>上面的三個是預設的，沒有辦法修改，如果需要自訂，則必須要透過新增，或複製現有的設定出來再自行調整，指定 silent 的預設，可以從上方的 ICON 來指定預設使用哪一份 cleanup 的設定，調整細節就透過右邊的 checkbox</p>\n<h2 id=\"引入團隊\"><a href=\"#引入團隊\" class=\"headerlink\" title=\"引入團隊\"></a>引入團隊</h2><p>如果想要將統一的風格推給團隊，我目前的首選還是透過<code>EditorConfig</code>來做這件事情，先把規則設定完畢，然後將.editorConfig commit 進去，然後再請團隊成員依據他們慣用的編輯器來將 EditorConfig 的環境準備好</p>\n<p>支援的編輯器可以在<a href=\"https://editorconfig.org/\">EditorConfig 官網</a>下方看到，以<code>VSCode</code>為例，需要安裝<a href=\"https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig\">EditorConfig for VS Code</a>這套件，但其實還需要本機安裝<a href=\"https://www.npmjs.com/package/editorconfig\">EditorConfig JavaScript Core</a>才行</p>\n<p>Rider 可以將設定資料匯出，應該有點用<br><img src=\"/artblog/rider-reformat-code-and-cleanup/2021-10-29-145804.jpg\"></p>\n<h2 id=\"我的使用習慣\"><a href=\"#我的使用習慣\" class=\"headerlink\" title=\"我的使用習慣\"></a>我的使用習慣</h2><p>實務上我用到 cleanup 的機會其實不多，使用預設的 Reformat Code 來做格式化，因為預設的就蠻符合我要的，不變動太多程式碼，然後將縮排弄好，然後在自己新開發的程式碼檔案，在 Commit 之前才會作一次 cleanup，但如果是在前端 vue.js SFC 的部分，就會蠻常使用的。</p>\n<p>因為我覺得他 Vue.js cleanup 的效果還不錯，尤其是亂亂的 HTML 屬性夾雜 vue 語法，有個統一的格式在習慣之後，維護起來也很方便，調整 Import 的順序也很不錯。</p>\n<p>這些都有微調的空間，如果還想深究的話，官方文件及動手嘗試是好辦法。</p>\n<h2 id=\"補充-FileLayout-xml\"><a href=\"#補充-FileLayout-xml\" class=\"headerlink\" title=\"補充 FileLayout.xml\"></a>補充 FileLayout.xml</h2><p><code>Editor</code>-&gt;<code>Code Style</code>-&gt;<code>C#</code>-&gt;<code>File Layout</code></p>\n<p><img src=\"/artblog/rider-reformat-code-and-cleanup/filelayout.jpg\"></p>\n<p>在組織程式直線碼的部分可以透過設定 FileLayout.xml 來處理，直接參考人家寫好的範例再自行微調會比較簡單，雖然在 Resharper 裡面有 GUI 可以設定，然後再將 XML 搬來 Rider 使用也行，但直接看 XML 應該也可以理解，尤其是範例寫得還蠻清楚，照著跑一次比對一下結果應該也能理解。所以沒有很推 GUI 的設定介面。</p>\n<p>修改完畢 XML 之後執行 <code>Silent Reformat and Cleanup</code> 就可以看到結果了。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Patterns</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;urn:schemas-jetbrains-com:member-reordering-patterns&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TypePattern</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Non-reorderable types&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TypePattern.Match</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Or</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Interface&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Or</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">HasAttribute</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;System.Runtime.InteropServices.InterfaceTypeAttribute&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">HasAttribute</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;System.Runtime.InteropServices.ComImport&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">Or</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Struct&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">HasAttribute</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;JetBrains.Annotations.NoReorderAttribute&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">HasAttribute</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;JetBrains.Annotations.NoReorder&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Or</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">TypePattern.Match</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">TypePattern</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TypePattern</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;xUnit.net Test Classes&quot;</span> <span class=\"attr\">RemoveRegions</span>=<span class=\"string\">&quot;All&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TypePattern.Match</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Class&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">HasMember</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Method&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">HasAttribute</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;Xunit.FactAttribute&quot;</span> <span class=\"attr\">Inherited</span>=<span class=\"string\">&quot;True&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">HasAttribute</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;Xunit.TheoryAttribute&quot;</span> <span class=\"attr\">Inherited</span>=<span class=\"string\">&quot;True&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">HasMember</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">TypePattern.Match</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;Setup/Teardown&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Setup/Teardown Methods&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Or</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Constructor&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Method&quot;</span> /&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">ImplementsInterface</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;System.IDisposable&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">Or</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.SortBy</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Kind</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Kind.Order</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">DeclarationKind</span>&gt;</span>Constructor<span class=\"tag\">&lt;/<span class=\"name\">DeclarationKind</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">Kind.Order</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">Kind</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.SortBy</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;All other members&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Test Methods&quot;</span> <span class=\"attr\">Priority</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Method&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Or</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">HasAttribute</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;Xunit.FactAttribute&quot;</span> <span class=\"attr\">Inherited</span>=<span class=\"string\">&quot;false&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">HasAttribute</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;Xunit.TheoryAttribute&quot;</span> <span class=\"attr\">Inherited</span>=<span class=\"string\">&quot;false&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">Or</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry.SortBy</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Name</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry.SortBy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">TypePattern</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TypePattern</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;NUnit Test Fixtures&quot;</span> <span class=\"attr\">RemoveRegions</span>=<span class=\"string\">&quot;All&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TypePattern.Match</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Class&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Or</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">HasAttribute</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;NUnit.Framework.TestFixtureAttribute&quot;</span> <span class=\"attr\">Inherited</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">HasAttribute</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;NUnit.Framework.TestFixtureSourceAttribute&quot;</span> <span class=\"attr\">Inherited</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">HasMember</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Method&quot;</span> /&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">HasAttribute</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;NUnit.Framework.TestAttribute&quot;</span> <span class=\"attr\">Inherited</span>=<span class=\"string\">&quot;false&quot;</span> /&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">HasAttribute</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;NUnit.Framework.TestCaseAttribute&quot;</span> <span class=\"attr\">Inherited</span>=<span class=\"string\">&quot;false&quot;</span> /&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">HasAttribute</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;NUnit.Framework.TestCaseSourceAttribute&quot;</span> <span class=\"attr\">Inherited</span>=<span class=\"string\">&quot;false&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">HasMember</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Or</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">TypePattern.Match</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;Setup/Teardown&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Setup/Teardown Methods&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Method&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Or</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">HasAttribute</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;NUnit.Framework.SetUpAttribute&quot;</span> <span class=\"attr\">Inherited</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">HasAttribute</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;NUnit.Framework.TearDownAttribute&quot;</span> <span class=\"attr\">Inherited</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">HasAttribute</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;NUnit.Framework.TestFixtureSetUpAttribute&quot;</span> <span class=\"attr\">Inherited</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">HasAttribute</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;NUnit.Framework.TestFixtureTearDownAttribute&quot;</span> <span class=\"attr\">Inherited</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">HasAttribute</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;NUnit.Framework.OneTimeSetUpAttribute&quot;</span> <span class=\"attr\">Inherited</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">HasAttribute</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;NUnit.Framework.OneTimeTearDownAttribute&quot;</span> <span class=\"attr\">Inherited</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">Or</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;All other members&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Test Methods&quot;</span> <span class=\"attr\">Priority</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Method&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Or</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">HasAttribute</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;NUnit.Framework.TestAttribute&quot;</span> <span class=\"attr\">Inherited</span>=<span class=\"string\">&quot;false&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">HasAttribute</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;NUnit.Framework.TestCaseAttribute&quot;</span> <span class=\"attr\">Inherited</span>=<span class=\"string\">&quot;false&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">HasAttribute</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;NUnit.Framework.TestCaseSourceAttribute&quot;</span> <span class=\"attr\">Inherited</span>=<span class=\"string\">&quot;false&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">Or</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry.SortBy</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Name</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry.SortBy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">TypePattern</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TypePattern</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;MSTest Test Classes&quot;</span> <span class=\"attr\">RemoveRegions</span>=<span class=\"string\">&quot;All&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TypePattern.Match</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Class&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Or</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">HasAttribute</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute&quot;</span> <span class=\"attr\">Inherited</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">HasMember</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Method&quot;</span> /&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">HasAttribute</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute&quot;</span> <span class=\"attr\">Inherited</span>=<span class=\"string\">&quot;false&quot;</span> /&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">HasAttribute</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute&quot;</span> <span class=\"attr\">Inherited</span>=<span class=\"string\">&quot;false&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">HasMember</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Or</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">TypePattern.Match</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;Setup/Teardown&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Setup/Teardown Methods&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Method&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Or</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">HasAttribute</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute&quot;</span> <span class=\"attr\">Inherited</span>=<span class=\"string\">&quot;false&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">Or</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;All other members&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Test Methods&quot;</span> <span class=\"attr\">Priority</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Method&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Or</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">HasAttribute</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute&quot;</span> <span class=\"attr\">Inherited</span>=<span class=\"string\">&quot;false&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">Or</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry.SortBy</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Name</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry.SortBy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">TypePattern</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TypePattern</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Default Pattern&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;PUBLIC CONSTANTS&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Public Constants&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Access</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Public&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Constant&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;PUBLIC READONLY FIELDS&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Public Readonly Fields&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Access</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Public&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Readonly</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Field&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;PUBLIC STATIC FIELDS&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Public Static Fields&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Access</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Public&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Static</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Field&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;PUBLIC FIELDS&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Public Fields&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Access</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Public&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Field&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;CONSTANTS&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Constants&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Constant&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;READONLY FIELDS&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Readonly Fields&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Readonly</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Field&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;STATIC FIELDS&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Static Fields&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Static</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Field&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;FIELDS&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Fields&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Field&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;PUBLIC ENUMS&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Public Enums&quot;</span> <span class=\"attr\">Priority</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Access</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Public&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Enum&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;ENUMS&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Enums&quot;</span> <span class=\"attr\">Priority</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Enum&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;PUBLIC DELEGATES&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Public Delegates&quot;</span> <span class=\"attr\">Priority</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Access</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Public&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Or</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Delegate&quot;</span> /&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Event&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">Or</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;DELEGATES&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Delegates&quot;</span> <span class=\"attr\">Priority</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Or</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Delegate&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Event&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">Or</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;PUBLIC PROPERTIES&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Public Properties&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Access</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Public&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Property&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.SortBy</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Kind</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Kind.Order</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">DeclarationKind</span>&gt;</span>Autoproperty<span class=\"tag\">&lt;/<span class=\"name\">DeclarationKind</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">Kind.Order</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">Kind</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.SortBy</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;PROPERTIES&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Properties&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Property&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.SortBy</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Kind</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Kind.Order</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">DeclarationKind</span>&gt;</span>Autoproperty<span class=\"tag\">&lt;/<span class=\"name\">DeclarationKind</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">Kind.Order</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">Kind</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.SortBy</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;INDEXERS&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Indexers&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Indexer&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;OPERATORS&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Operators&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Operator&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;CONSTRUCTORS&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Constructors&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Constructor&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.SortBy</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Static</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.SortBy</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;DESTRUCTORS&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Destructors&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Destructor&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.SortBy</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Static</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.SortBy</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;INTERFACE IMPLEMENTATIONS&quot;</span> <span class=\"attr\">Priority</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;$&#123;0&#125;&quot;</span> <span class=\"attr\">Priority</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Region.GroupBy</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">ImplementsInterface</span> <span class=\"attr\">Immediate</span>=<span class=\"string\">&quot;True&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Region.GroupBy</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Interface Members&quot;</span> <span class=\"attr\">Priority</span>=<span class=\"string\">&quot;100&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Member&quot;</span> /&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">ImplementsInterface</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Entry.SortBy</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">ImplementsInterface</span> <span class=\"attr\">Immediate</span>=<span class=\"string\">&quot;true&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">Entry.SortBy</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;PUBLIC METHODS&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Public Methods&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Access</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Public&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Method&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;METHODS&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Methods&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Method&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;OTHER MEMBERS&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;All Other Members&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;PUBLIC NESTED STRUCTS&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Public Nested Structs&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Access</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Public&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Struct&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;NESTED STRUCTS&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Nested STRUCTS&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Struct&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;PUBLIC NESTED CLASSES&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Public Nested Classes&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Access</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Public&quot;</span> /&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Class&quot;</span> /&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">And</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Region</span> <span class=\"attr\">Name</span>=<span class=\"string\">&quot;NESTED CLASSES&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Entry</span> <span class=\"attr\">DisplayName</span>=<span class=\"string\">&quot;Nested Classes&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">Kind</span> <span class=\"attr\">Is</span>=<span class=\"string\">&quot;Class&quot;</span> /&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Entry.Match</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Region</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">TypePattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Patterns</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"參考資源\"><a href=\"#參考資源\" class=\"headerlink\" title=\"參考資源\"></a>參考資源</h2><ol>\n<li><a href=\"https://www.jetbrains.com/help/rider/Code_Cleanup__Index.html\">JetBrains Rider Document:Code cleanup</a></li>\n<li><a href=\"https://asp.net-hacker.rocks/2020/01/13/editorconfig.html\">Using the .editorconfig in VS2019 and VSCode</a></li>\n<li><a href=\"https://docs.microsoft.com/zh-tw/visualstudio/ide/create-portable-custom-editor-options?view=vs-2019\">使用 EditorConfig 建立可攜式自訂編輯器設定</a></li>\n<li><a href=\"https://stackoverflow.com/questions/46846128/editorconfig-for-vs-code-not-working\">EditorConfig for VS Code not working</a></li>\n<li><a href=\"https://gist.github.com/Jakob-PB/b33e4b6dd3e097caec1c52a84f1676f7\">Jakob-PB&#x2F;rider-csharp-filelayout.xml</a></li>\n</ol>\n","categories":["rider"]},{"title":"VSCode自動排版logstash設定檔","url":"/artblog//vscode-logstash-conf-formatter/","content":"<p>使用 VSCode 自動格式化 logstash 的設定檔，pipeline.conf</p>\n<span id=\"more\"></span>\n\n<p>為了確保這個步驟是正確的，所以我下載 <a href=\"https://code.visualstudio.com/docs/?dv=winzip&build=insiders\">VSCode Insiders</a> 的 zip 版作為一個初始的 Editor 環境，可以看到外掛這邊都是沒東西的</p>\n<p><img src=\"/artblog/vscode-logstash-conf-formatter/2021-10-25-090849.jpg\"></p>\n<p>接著安裝 logStash 相關的套件</p>\n<p><img src=\"/artblog/vscode-logstash-conf-formatter/2021-10-25-091041.jpg\"></p>\n<ol>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=RandomChance.logstash\">Logstash Configuration Syntax &#x2F; Language Support</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=fbaligand.vscode-logstash-editor\">Logstash Editor</a></li>\n</ol>\n<p>這個時候如果開啟設定檔嘗試去做自動格式化的動作，當然是沒用的，因為我們還需要正確設定檔案類型，並且設定該檔案類型的 formatter 是誰，所以在 VSCode 右下角那邊正確設定檔案類型為 <code>logStash</code> 就可以了</p>\n<p><img src=\"/artblog/vscode-logstash-conf-formatter/2021-10-25-092426.jpg\"><br><img src=\"/artblog/vscode-logstash-conf-formatter/2021-10-25-092528.jpg\"><br><img src=\"/artblog/vscode-logstash-conf-formatter/2021-10-25-092617.jpg\"></p>\n<p>接著選擇 Format Document (Alt+Ctrl+F) 就可以使用了</p>\n<p>如果 VSCode 未能正確使用 <code>LogStash Editor</code> 排版，也可以直接透過 <code>Format Document With ...</code>來選擇 Formatter<br><img src=\"/artblog/vscode-logstash-conf-formatter/2021-10-25-092934.jpg\"></p>\n<p>這個步驟等同於在設定檔加入 Formatter 的設定</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;[logstash]&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;editor.defaultFormatter&quot;</span>: <span class=\"string\">&quot;fbaligand.vscode-logstash-editor&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最後只要在設定檔中按下快捷鍵就可以自動格式化 logstash 的設定檔了</p>\n","categories":["工具"],"tags":["vscode"]},{"title":"axios Error Handle","url":"/artblog//axios-error-handle/","content":"<p>這篇文章沒甚麼特別的，只是純粹應用了一次<code>axios</code>的錯誤處理而已，希望表達在應用程式內，將重複程式碼抽象出來利用的範例</p>\n<span id=\"more\"></span>\n\n<h2 id=\"基本語法範例\"><a href=\"#基本語法範例\" class=\"headerlink\" title=\"基本語法範例\"></a>基本語法範例</h2><p><code>axios</code>與 <code>jquery</code>語法都還蠻像的，經由<code>config</code>設定發出請求的網址、資料，像是下面這樣</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\"> <span class=\"attr\">method</span>: <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\"> <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/user/12345&#x27;</span>,</span><br><span class=\"line\"> <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;bar&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;foo&#x27;</span>,</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>也可以經由別名來處理網址、資料，若是需要也可以再添加<code>config</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">post</span>(</span><br><span class=\"line\"> <span class=\"string\">&#x27;/user/12345&#x27;</span>,</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"attr\">firstName</span>: <span class=\"string\">&#x27;bar&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">lastName</span>: <span class=\"string\">&#x27;foo&#x27;</span>,</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/*config here*/</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://axios-http.com/zh/docs/intro\">官網</a>已經寫得很清楚了，細節就請移步官網瀏覽</p>\n<h2 id=\"情境\"><a href=\"#情境\" class=\"headerlink\" title=\"情境\"></a>情境</h2><p>當我們的程式碼越來越多、也越來越複雜的時候，為了維護方便，我們可能會自然而然地將架構逐漸演化，假設是一個登陸頁面好了，除了基本的頁面進入點<code>index.js</code>，可能還會在裡面有一個<code>Service</code>來處理這個頁面的一些操作，因為<code>Service</code>只是負責處理邏輯，一些比較細節的處理則是再放給<code>Helper</code>、<code>Utiliy</code>、<code>Adapter</code>之類的去做，而為了便於維護，我也會使用<code>AxiosHelper</code>去將一些行為包裝起來，所以輸入帳號密碼登入的操作會是像這樣</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    Name:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;form.name&quot;</span> /&gt;</span> </span><br><span class=\"line\">    Pass:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;pass&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;pass&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;form.pass&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;loginHandler&quot;</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js</span></span><br><span class=\"line\"><span class=\"comment\">// import ....</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">    <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">form</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">                <span class=\"attr\">pass</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">        <span class=\"keyword\">async</span> <span class=\"title function_\">loginHandler</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            sweetAlertHelper.<span class=\"title class_\">ShowLoading</span>();</span><br><span class=\"line\">            <span class=\"keyword\">let</span> &#123; isSuccess, message &#125; = <span class=\"keyword\">await</span> memberService.<span class=\"title function_\">login</span>(&#123; ...<span class=\"variable language_\">this</span>.<span class=\"property\">form</span> &#125;);</span><br><span class=\"line\">            sweetAlertHelper.<span class=\"title class_\">CloseModal</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isSuccess) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 登入成功，跳轉頁面</span></span><br><span class=\"line\">                <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">href</span> = <span class=\"string\">&#x27;/Member&#x27;</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 登入錯誤，將資料傳遞給Log服務，將錯誤記錄下來</span></span><br><span class=\"line\">                logService.<span class=\"title function_\">loginFailed</span>(&#123; ...<span class=\"variable language_\">this</span>.<span class=\"property\">form</span> &#125;, message);</span><br><span class=\"line\">                <span class=\"comment\">// 顯示錯誤訊息，告知使用者登入錯誤，訊息由後端控制</span></span><br><span class=\"line\">                sweetAlertHelper.<span class=\"title function_\">showError</span>(message);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MemberService.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">MemberAdapter</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./MemberAdapter.js&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MemberService</span> = &#123;</span><br><span class=\"line\">    <span class=\"title function_\">login</span>(<span class=\"params\">&#123; name, pass &#125;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">MemberAdapter</span>.<span class=\"title function_\">login</span>(&#123; name, pass &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">MemberService</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MemberAdapter.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">AxiosHelper</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./AxiosHelper.js&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">MemberAdapter</span> = &#123;</span><br><span class=\"line\">    <span class=\"title function_\">login</span>(<span class=\"params\">&#123;name,pass&#125;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">AxiosHelper</span>.<span class=\"title function_\">sendRequest</span>(<span class=\"string\">&#x27;/Login&#x27;</span>,&#123;name,pass&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">MemberAdapter</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// axiosHelper.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">AxiosHelper</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">sendRequest</span>: <span class=\"keyword\">async</span> (url, sendData) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">await</span> axios.<span class=\"title function_\">post</span>(url, sendData)).<span class=\"property\">data</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">AxiosHelper</span>;</span><br></pre></td></tr></table></figure>\n\n<p>按照上面的程式碼來看，登入的回應如果是正確或失敗，都是有動作的，乍看之下沒甚麼問題，但是如果後端伺服器沒有回應呢？最常見的就是後端很忙，結果前端請求就一直掛在那邊變成 timeout，然後因為程式碼在呼叫後端之前，透過<code>SweetAlertHelper</code>將畫面墊了一層遮罩，秀出 Loading 畫面，避免讓使用者重複送出請求，結果因為後端 Timeout，則前端 Js 就掛掉了，於是使用者看到的畫面就是一直轉圈圈的 Loading 畫面</p>\n<blockquote>\n<p>上面程式碼沒有實際跑過，只是為了讓大家比較理解情境隨手寫的，跑不起來的</p>\n</blockquote>\n<h2 id=\"解決方案\"><a href=\"#解決方案\" class=\"headerlink\" title=\"解決方案\"></a>解決方案</h2><p>既然我們針對的情境是要解決 <code>timeout</code>，那我們就直接使用官方所提供的<a href=\"https://axios-http.com/zh/docs/handling_errors\">錯誤處理</a>不就好了？</p>\n<p>是的，沒有錯，我們就直接套用就行了，OK，結案。</p>\n<p>因為我們已經將所有使用到 <code>axios</code> 的東西都封裝在 <code>AxiosHelper</code> 裡面了，所以我們也只需要改一個地方就好了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// axiosHelper.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">AxiosHelper</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">sendRequest</span>: <span class=\"keyword\">async</span> (url, sendData) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 多了一個 &#123;timeout: 5000&#125; 的 option config</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">await</span> axios.<span class=\"title function_\">post</span>(url, sendData, &#123; <span class=\"attr\">timeout</span>: <span class=\"number\">5000</span> &#125;)).<span class=\"property\">data</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 顯示錯誤訊息，告知使用者登入錯誤，訊息由後端控制</span></span><br><span class=\"line\">            sweetAlertHelper.<span class=\"title function_\">showError</span>(<span class=\"string\">&#x27;伺服器忙碌，請稍後再試&#x27;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// throw error 中斷後面的程式不再執行</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> error;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>這樣子的話，在原先程式碼的部分，就不會繼續往下執行，</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"title function_\">loginHandler</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      sweetAlertHelper.<span class=\"title class_\">ShowLoading</span>()</span><br><span class=\"line\">      <span class=\"keyword\">let</span> &#123;isSuccess, message&#125; = <span class=\"keyword\">await</span> memberService.<span class=\"title function_\">login</span>(&#123;...<span class=\"variable language_\">this</span>.<span class=\"property\">form</span>&#125;)</span><br><span class=\"line\">      <span class=\"comment\">/** 這以下就不會執行了</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">      sweetAlertHelper.CloseModal()</span></span><br><span class=\"line\"><span class=\"comment\">      if (isSuccess) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">          // 登入成功，跳轉頁面</span></span><br><span class=\"line\"><span class=\"comment\">          window.location.href=&quot;/Member&quot;</span></span><br><span class=\"line\"><span class=\"comment\">      &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">          // 登入錯誤，將資料傳遞給Log服務，將錯誤記錄下來</span></span><br><span class=\"line\"><span class=\"comment\">          logService.loginFailed(&#123;...this.form&#125;, message)</span></span><br><span class=\"line\"><span class=\"comment\">          // 顯示錯誤訊息，告知使用者登入錯誤，訊息由後端控制</span></span><br><span class=\"line\"><span class=\"comment\">          sweetAlertHelper.showError(message)</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>原本的程式碼就會再呼叫完畢後，拋出例外，直接中斷掉，使用者也能看到畫面顯示<code>伺服器忙碌</code>，同時我們也只需要改一個地方，其他頁面都不需再調整，好吧，技術本身沒甚麼難度，但是共用的抽象出來才是我要表達的</p>\n<h2 id=\"延伸議題\"><a href=\"#延伸議題\" class=\"headerlink\" title=\"延伸議題\"></a>延伸議題</h2><ol>\n<li><p><a href=\"https://www.it145.com/9/82557.html\">#研發解決方案#易車前端監控系統</a>：這篇文章是某一天我逛到的，它們自己做了一套監控系統，在錯誤處理的部分，也可以將這些資訊像它們一樣，不管是透過自己建立，或者是用現有 Open Source 解決方案，都是不錯的，不過我沒有再研究下去，有興趣的朋友可以點進去看看</p>\n</li>\n<li><p><a href=\"https://medium.com/i-am-mike/%E4%BD%BF%E7%94%A8axios%E6%99%82%E4%BD%A0%E7%9A%84api%E9%83%BD%E6%80%8E%E9%BA%BC%E7%AE%A1%E7%90%86-557d88365619\">使用 Axios 你的 API 都怎麼管理</a>：這篇則是一位知名的前端 Youtuber 寫的一篇關於 <code>axios</code> 的東西，概念上是不錯的，他這篇文章主要針對的情境是你可能服務來自好幾個<code>Domain</code>所以會需要這樣做，但我碰到的情境這部分會在後端就整合起來而不是在前端來做。所以他的辦法就比較不合我用，但是概念上都是為了便於管理，也是一個不錯的案例解決方案，提供大家參考</p>\n</li>\n</ol>\n<p>這也是為什麼我會說要看情況套用解決方案，別人的<code>best practice</code>不一定適合你，多看多參考，你會有自己的想法的</p>\n","categories":["javascript"],"tags":["axios"]},{"title":"dotnet-CLI透過TAB自動完成","url":"/artblog//dotnet-cli-auto-complete-with-tab/","content":"<p>最近打算開始學習 .NET 6，自然就要先做一些準備工作，第一步就是 CLI 的 AutoComplete 功能</p>\n<span id=\"more\"></span>\n\n<p>一直以來習慣的指令列工具都是微軟內建的 CMD.exe，可能是因為他跟 MS-DOS 6.0 很像，從以前就用到現在了所以就一直沒改，後來也都是用類似<code>Cmder</code>這樣的工具，但骨子還是沒變。</p>\n<p>不過因為<code>powerShell</code>真的很強大，也應該是時候換一下工具了，最主要的是，他能夠透過設定的方式達到我們需要的自動完成功能，其實官方文件就已經說明了這件事情，並且介紹了支援的幾個 shell</p>\n<p>有興趣的可以前往觀看<a href=\"https://docs.microsoft.com/zh-tw/dotnet/core/tools/enable-tab-autocomplete\">如何啟用 .NET CLI 的 TAB 鍵自動完成</a></p>\n<h2 id=\"PowerShell-設定\"><a href=\"#PowerShell-設定\" class=\"headerlink\" title=\"PowerShell 設定\"></a>PowerShell 設定</h2><figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># PowerShell parameter completion shim for the dotnet CLI</span></span><br><span class=\"line\"><span class=\"built_in\">Register-ArgumentCompleter</span> <span class=\"literal\">-Native</span> <span class=\"literal\">-CommandName</span> dotnet <span class=\"literal\">-ScriptBlock</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">param</span>(<span class=\"variable\">$commandName</span>, <span class=\"variable\">$wordToComplete</span>, <span class=\"variable\">$cursorPosition</span>)</span><br><span class=\"line\">         dotnet complete <span class=\"literal\">--position</span> <span class=\"variable\">$cursorPosition</span> <span class=\"string\">&quot;<span class=\"variable\">$wordToComplete</span>&quot;</span> | <span class=\"built_in\">ForEach-Object</span> &#123;</span><br><span class=\"line\">            [<span class=\"type\">System.Management.Automation.CompletionResult</span>]::new(<span class=\"variable\">$_</span>, <span class=\"variable\">$_</span>, <span class=\"string\">&#x27;ParameterValue&#x27;</span>, <span class=\"variable\">$_</span>)</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>重點就是上面的程式碼而已，雖然我不會寫<code>powerShell</code>但也能看得懂邏輯，大概就是註冊一個自動完成的事件給<code>dotnet</code>指令，然後接受參數，並透過設定的<code>dotnet complete --position</code>指令去循環，大概的原理是這樣，能夠做到這件事情應該也是依靠<code>dotnet complete</code></p>\n<p>那麼理解了之後，自然也就要知道這份設定檔如何設定，在官網範例程式碼旁邊可以看到</p>\n<blockquote>\n<p>請參閱如何和設定檔與執行原則。</p>\n</blockquote>\n<h2 id=\"建立-powerShell-設定檔\"><a href=\"#建立-powerShell-設定檔\" class=\"headerlink\" title=\"建立 powerShell 設定檔\"></a>建立 powerShell 設定檔</h2><p>第一步當然就是先去看一下<a href=\"https://docs.microsoft.com/zh-tw/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-7.2#how-to-create-a-profile\">建立設定檔</a></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!(<span class=\"built_in\">Test-Path</span> <span class=\"literal\">-Path</span> <span class=\"variable\">$PROFILE</span>)) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">New-Item</span> <span class=\"literal\">-ItemType</span> File <span class=\"literal\">-Path</span> <span class=\"variable\">$PROFILE</span> <span class=\"literal\">-Force</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看起來應該也很容易理解語意，如果路徑檔案名稱不存在的話，就強制建立一個檔案:$PROFILE，這應該也是一個特殊保留字，用來表示設定檔的吧</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">notepad <span class=\"variable\">$PROFILE</span></span><br></pre></td></tr></table></figure>\n\n<p>接著再透過 notepad 開啟該檔案，並且將我們之前自動完成的程式碼貼上去儲存就可以了</p>\n<h2 id=\"設定檔和執行原則\"><a href=\"#設定檔和執行原則\" class=\"headerlink\" title=\"設定檔和執行原則\"></a>設定檔和執行原則</h2><p>如果開啟<code>powerShell</code>之後發現紅色的警告說是不能執行程式的話，那麼這個<a href=\"https://docs.microsoft.com/zh-tw/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.2\">關於執行原則</a>可能就要先了解一下</p>\n<p>建議是全部先看過一次，然後挑選適合的設定值進行設定，以我的情況在本機自己練習開發，所以我直接設定</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Set-ExecutionPolicy</span> <span class=\"literal\">-ExecutionPolicy</span> RemoteSigned <span class=\"literal\">-scope</span> CurrentUser</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"VSCode-設定預設-shell\"><a href=\"#VSCode-設定預設-shell\" class=\"headerlink\" title=\"VSCode 設定預設 shell\"></a>VSCode 設定預設 shell</h2><p>開啟<code>Terminal</code>之後這個地方可以設定預設值<br><img src=\"/artblog/dotnet-cli-auto-complete-with-tab/2021-11-12-110127.jpg\"></p>\n<p>或是直接按下<code>F1</code>輸入關鍵字，也能夠查到指令<br><img src=\"/artblog/dotnet-cli-auto-complete-with-tab/2021-11-12-110302.jpg\"></p>\n<p>然後就會列出各種 shell，在這邊就可以指定預設的 shell 了<br><img src=\"/artblog/dotnet-cli-auto-complete-with-tab/2021-11-12-110353.jpg\"></p>\n<h2 id=\"結尾\"><a href=\"#結尾\" class=\"headerlink\" title=\"結尾\"></a>結尾</h2><p>經過上面的設定後，開啟 powerShell 也不再出現錯誤提示，並且在我輸入 <code>dotnet a</code>的時候，他也會自動幫我改為<code>dotnet add</code>，但不知道是不是因為我電腦比較慢的關係，反應時間有點久，不過起碼是正確動作了</p>\n","categories":["dotnet"]},{"title":"gulp-順序執行指令","url":"/artblog//gulp-order-command/","content":"<p>本文紀錄如何透過 gulp 4 順序執行指令，所以篇幅會很短~</p>\n<span id=\"more\"></span>\n\n<p>目前 gulp 已經更新到 4 了，所以以前我們想要順序執行指令，用的方法已經不能用了，現在 task 他只支援兩個參數，解決辦法是透過 <a href=\"https://gulpjs.com/docs/en/api/series\">series()</a>這個 API 來做；如果是需要平行處理的，則是使用<a href=\"https://gulpjs.com/docs/en/api/parallel\">parallel()</a></p>\n<p>因為官網其實也有範例，基本語法就不在介紹了</p>\n<p>這邊要介紹<a href=\"https://github.com/Klathmon/gulp-run-command\">gulp-run-command</a>是可以讓我們在 gulp 裡面去執行 command，一樣性質的套件還有一個叫做<a href=\"https://github.com/m19c/gulp-run\">gulp-run</a>，但感覺比較難使用，畢竟我的原始需求很簡單，就是順序執行 node.js 的檔案而已。</p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>官方的範例還蠻好懂的，直接引用後就可以透過它提供的<code>run</code>指令執行指令，引用的方式就看你要用 <code>import</code> 還是 <code>require</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> gulp <span class=\"keyword\">from</span> <span class=\"string\">&quot;gulp&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> run <span class=\"keyword\">from</span> <span class=\"string\">&quot;gulp-run-command&quot;</span>; <span class=\"comment\">// or `var run = require(&#x27;gulp-run-command&#x27;).default` for ES5</span></span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&quot;clean&quot;</span>, <span class=\"title function_\">run</span>(<span class=\"string\">&quot;rm -rf build&quot;</span>));</span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(</span><br><span class=\"line\">  <span class=\"string\">&quot;build&quot;</span>,</span><br><span class=\"line\">  [<span class=\"string\">&quot;clean&quot;</span>],</span><br><span class=\"line\">  <span class=\"title function_\">run</span>(<span class=\"string\">&quot;babel index.js --out-file index.es5.js&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">env</span>: &#123; <span class=\"attr\">NODE_ENV</span>: <span class=\"string\">&quot;production&quot;</span> &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"實際範例\"><a href=\"#實際範例\" class=\"headerlink\" title=\"實際範例\"></a>實際範例</h2><p>這個是我的第一個版本，能夠正確順序執行我要的指令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;gulp&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> run = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;gulp-run-command&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&quot;step1&quot;</span>, <span class=\"keyword\">async</span> () =&gt; <span class=\"title function_\">run</span>(<span class=\"string\">&quot;node work01.js&quot;</span>)());</span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&quot;step2&quot;</span>, <span class=\"keyword\">async</span> () =&gt; <span class=\"title function_\">run</span>(<span class=\"string\">&quot;node work02.js&quot;</span>)());</span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&quot;step3&quot;</span>, <span class=\"keyword\">async</span> () =&gt; <span class=\"title function_\">run</span>(<span class=\"string\">&quot;node work03.js&quot;</span>)());</span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&quot;step4&quot;</span>, <span class=\"keyword\">async</span> () =&gt; <span class=\"title function_\">run</span>(<span class=\"string\">&quot;node work04.js&quot;</span>)());</span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(</span><br><span class=\"line\">  <span class=\"string\">&quot;default&quot;</span>,</span><br><span class=\"line\">  gulp.<span class=\"title function_\">series</span>(<span class=\"string\">&quot;step1&quot;</span>, <span class=\"string\">&quot;step2&quot;</span>, <span class=\"string\">&quot;step3&quot;</span>, <span class=\"string\">&quot;step4&quot;</span>, <span class=\"function\">(<span class=\"params\">done</span>) =&gt;</span> <span class=\"title function_\">done</span>())</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>後來仔細看了一下文件，有提到，run 的第一個參數支援 Array , String , 並且也說明了一系列的命令將會按照順序執，於是直接將指令變成陣列，最終版本如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> gulp = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;gulp&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> run = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;gulp-run-command&quot;</span>).<span class=\"property\">default</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> commands = [</span><br><span class=\"line\">  <span class=\"string\">&quot;node work01.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;node work02.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;node work03.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;node work04.js&quot;</span>,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.<span class=\"title function_\">task</span>(<span class=\"string\">&quot;default&quot;</span>, <span class=\"keyword\">async</span> () =&gt; <span class=\"title function_\">run</span>(commands)());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"後記\"><a href=\"#後記\" class=\"headerlink\" title=\"後記\"></a>後記</h2><p>會做這件事情其實是因為原本在 CI 上面的作業，有時候會有錯誤的情況，但那些作業內容在 Local 的話又要一個一個自己依照順序執行才能夠檢查，所以用<code>gulp</code>做了一個 local 也可以執行的檢查指令，其實 gulp 在某些地方還蠻好用的，很適合拿來做一些簡單的小任務</p>\n","categories":["node.js"],"tags":["gulp"]},{"title":"使用oh-my-posh美化指令列工具-powershell, windows terminal","url":"/artblog//oh-my-posh-powershell-windows-terminal/","content":"<p>常常看到一些網站有人使用美美的指令列工具，並且能夠提示當前 repo 的分支，甚至是.NetCore 版本，就覺得很酷，現在來分享一下如何在 Windows 使用指令列也能夠做到美美的提示。</p>\n<blockquote>\n<p>最新消息是 oh-my-posh 已經不再直接支持 powershell，本篇的作法已經過時</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h2 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h2><p>這篇文章主要是根據<a href=\"https://www.hanselman.com/about\">Scott Hanselman</a>的部落格文章<a href=\"https://www.hanselman.com/blog/my-ultimate-powershell-prompt-with-oh-my-posh-and-the-windows-terminal\">My Ultimate PowerShell prompt with Oh My Posh and the Windows Terminal</a>來做的，原文非常的詳細，有興趣的人可以自行前往閱讀</p>\n<h2 id=\"Windows-Terminal\"><a href=\"#Windows-Terminal\" class=\"headerlink\" title=\"Windows Terminal\"></a>Windows Terminal</h2><p>原本我所採用的工具列為<a href=\"https://cmder.net/\">cmder</a>，但是使用上感覺好像越來越慢了，而且在一些自訂的部分也都要去查文件，也有點複雜，所以也趁這次機會改用了很多人都推薦的<a href=\"https://github.com/microsoft/terminal\">Windwos Terminal</a>，不僅快速而且也整合了 powerShell、命令提示字元還有 WSL 的 Shell，整個就是很方便，而且很喜歡它的設定有中文語系</p>\n<ul>\n<li><a href=\"https://docs.microsoft.com/en-us/windows/terminal/install\">Windows Terminal Document</a></li>\n<li><a href=\"https://aka.ms/terminal\">Windows Terminal from the Microsoft Store</a></li>\n</ul>\n<h2 id=\"font\"><a href=\"#font\" class=\"headerlink\" title=\"font\"></a>font</h2><p>首先我們從<code>powershell</code>開始修改，第一步就是先下載<a href=\"https://www.nerdfonts.com/\">Nerd Font</a>的字型檔案，否則安裝完畢之後有可能會因為字型的關係畫面還是無法正常顯示</p>\n<p><a href=\"https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/CascadiaCode.zip?WT.mc_id=-blog-scottha\">Caskaydia Cove Nerd Font Complete</a></p>\n<p>下載字型解壓縮，並逐一右鍵安裝字體即可，另外一篇<a href=\"https://blog.poychang.net/setting-powershell-theme-with-oh-my-posh/\">文章</a>也有提到可以使用<a href=\"https://github.com/tonsky/FiraCode\">FiraCode</a></p>\n<h2 id=\"terminal-font\"><a href=\"#terminal-font\" class=\"headerlink\" title=\"terminal font\"></a>terminal font</h2><p>接著我們可以在 Windows Terminal 的設定去選擇我們所要使用的字型<br><img src=\"/artblog/oh-my-posh-powershell-windows-terminal/2021-11-19-140632.jpg\"></p>\n<h2 id=\"install-oh-my-posh-in-PowerShell\"><a href=\"#install-oh-my-posh-in-PowerShell\" class=\"headerlink\" title=\"install oh-my-posh in PowerShell\"></a>install oh-my-posh in PowerShell</h2><p>接下來就是安裝<a href=\"https://ohmyposh.dev/docs/\">oh-my-posh</a></p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Install-Module</span> <span class=\"built_in\">oh</span><span class=\"literal\">-my-posh</span> <span class=\"literal\">-Scope</span> CurrentUser</span><br></pre></td></tr></table></figure>\n\n<p>安裝完畢之後可以列出所有的 <code>theme</code> ，挑一個喜歡的用就可以了</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Get-PoshThemes</span></span><br></pre></td></tr></table></figure>\n\n<p>我比較喜歡 <code>paradox</code>，所以接下來直接設定讓 <code>powershell</code>的提示套用<code>paradox</code>主題</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Set-PoshPrompt</span> <span class=\"literal\">-Theme</span> paradox</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/oh-my-posh-powershell-windows-terminal/2021-11-19-141631.jpg\"></p>\n<p>但是這樣子必須手動每次開啟，因此我們就可以利用 <code>powershell</code>的設定檔，讓他每次開啟的時候都先執行一次就可以了</p>\n<p>如果你的電腦當中並沒有這個設定檔，可以透過下面的指令建立</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!(<span class=\"built_in\">Test-Path</span> <span class=\"literal\">-Path</span> <span class=\"variable\">$PROFILE</span>)) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">New-Item</span> <span class=\"literal\">-ItemType</span> File <span class=\"literal\">-Path</span> <span class=\"variable\">$PROFILE</span> <span class=\"literal\">-Force</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接著可以透過記事本或其他編輯器修改</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">notepad <span class=\"variable\">$PROFILE</span></span><br></pre></td></tr></table></figure>\n\n<p>而內容就直接將剛才手動設置主題的指令打在裡面就可以了</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Set-PoshPrompt</span> <span class=\"literal\">-Theme</span> paradox</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/oh-my-posh-powershell-windows-terminal/2021-11-19-142518.jpg\"></p>\n<p>另外也可以額外安裝圖示，讓<code>powershell</code>的檔案顯示更漂亮</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安裝指令</span></span><br><span class=\"line\"><span class=\"built_in\">Install-Module</span> <span class=\"literal\">-Name</span> Terminal<span class=\"literal\">-Icons</span> <span class=\"literal\">-Repository</span> PSGallery</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># $PROFILE 設定檔內容</span></span><br><span class=\"line\"><span class=\"built_in\">Set-PoshPrompt</span> <span class=\"literal\">-Theme</span> paradox</span><br><span class=\"line\"><span class=\"built_in\">Import-Module</span> <span class=\"literal\">-Name</span> Terminal<span class=\"literal\">-Icons</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/oh-my-posh-powershell-windows-terminal/2021-11-19-142839.jpg\"></p>\n<p>設定完畢之後，不管是使用 <code>Windows Terminal</code>或是<code>VSCode</code>開啟 Terminal，都能夠顯示<code>oh-my-posh</code>的 Theme<br><img src=\"/artblog/oh-my-posh-powershell-windows-terminal/2021-11-19-142949.jpg\"><br>是不是很漂亮啊</p>\n<h2 id=\"install-oh-my-posh-in-windows-terminal\"><a href=\"#install-oh-my-posh-in-windows-terminal\" class=\"headerlink\" title=\"install oh-my-posh in windows terminal\"></a>install oh-my-posh in windows terminal</h2><p>如果是要讓 Windows 的命令提示字元也套用<code>oh-my-posh</code>主題的話，我們還需要額外安裝<a href=\"https://mridgers.github.io/clink/\">clink</a>，下載<a href=\"https://github.com/mridgers/clink/releases/download/0.4.9/clink_0.4.9_setup.exe\">安裝檔</a>並進行安裝</p>\n<p>然後透過<code>winget</code>安裝 <code>oh-my-posh</code>，直接在命令提示字元輸入下列指令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">winget install JanDeDobbeleer.OhMyPosh</span><br></pre></td></tr></table></figure>\n\n<p>接著我們去找到<code>oh-my-posh</code>的主題設定 json 檔案路徑，這個路徑我們可以透過剛剛的<code>powershell</code>去找到本機路徑</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Get-PoshThemes</span> <span class=\"literal\">-list</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/oh-my-posh-powershell-windows-terminal/2021-11-19-144227.jpg\"></p>\n<p><img src=\"/artblog/oh-my-posh-powershell-windows-terminal/2021-11-19-144726.jpg\"></p>\n<p>當然你也可以從官網看到，Windows 安裝的路徑<br><img src=\"/artblog/oh-my-posh-powershell-windows-terminal/2021-11-19-144623.jpg\"></p>\n<p>然後依照官網給出的指令，並將當中的 json 路徑替換成自己要用的主題，存成<code>oh-my-posh.lua</code>並且將它放置於<code>clink</code>的<code>scripts</code>目錄即可</p>\n<p><img src=\"/artblog/oh-my-posh-powershell-windows-terminal/2021-11-19-144928.jpg\"></p>\n<p><code>Clink</code>的<code>Scripts</code>目錄可在命令提示字元輸入<code>clink info</code>查詢<br><img src=\"/artblog/oh-my-posh-powershell-windows-terminal/2021-11-19-145243.jpg\"></p>\n<figure class=\"highlight lua\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">load</span>(<span class=\"built_in\">io</span>.<span class=\"built_in\">popen</span>(<span class=\"string\">&#x27;oh-my-posh --config=&quot;C:/Users/art/AppData/Local/Programs/oh-my-posh/themes/paradox.omp.json&quot; --init --shell cmd&#x27;</span>):<span class=\"built_in\">read</span>(<span class=\"string\">&quot;*a&quot;</span>))()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>將上面的指令儲存在<code>Clink</code>的<code>Scripts</code>目錄後就完成了<br><img src=\"/artblog/oh-my-posh-powershell-windows-terminal/2021-11-19-145946.jpg\"></p>\n<p><img src=\"/artblog/oh-my-posh-powershell-windows-terminal/2021-11-19-145545.jpg\"></p>\n<h2 id=\"Command-History\"><a href=\"#Command-History\" class=\"headerlink\" title=\"Command History\"></a>Command History</h2><p>在文章後面，Scott Hanselman 也給出了 CLI IntelliSense 的<a href=\"https://www.hanselman.com/blog/adding-predictive-intellisense-to-my-windows-terminal-powershell-prompt-with-psreadline\">參考連結</a>及<a href=\"https://gist.github.com/shanselman/25f5550ad186189e0e68916c6d7f44c3?WT.mc_id=-blog-scottha\">設定</a></p>\n<p>指令輸入的歷史紀錄也能透過選單的方式呈現並選擇，如果你是依照上面一步步做下來，那麼輸入</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Get-Module</span></span><br></pre></td></tr></table></figure>\n\n<p>應該會看到已經安裝好了 PSReadLine，而支援 ListView 的版本是 2.2.0-beta1 以上，所以我們需要先升級一下</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Update-Module</span> <span class=\"literal\">-Name</span> PSReadLine <span class=\"literal\">-AllowPrerelease</span></span><br></pre></td></tr></table></figure>\n\n<p>如果碰到<code>Update-Module: Module &#39;PSReadLine&#39; was not installed by using Install-Module, so it cannot be updated.</code>的錯誤訊息的話，就需要將<code>powershell</code>關閉，然後使用命令提示字元去執行重新安裝的指令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;path-to-pwsh-executable&gt; -noprofile -command &quot;Install-Module PSReadLine -Force -SkipPublisherCheck -AllowPrerelease&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/oh-my-posh-powershell-windows-terminal/2021-11-23-092750.jpg\"></p>\n<p>接著回到<code>powershell</code>確認版本就會發現已經安裝到最新版了<br><img src=\"/artblog/oh-my-posh-powershell-windows-terminal/2021-11-23-093035.jpg\"></p>\n<p>在<code>powershell</code>輸入下列指令</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 啟用歷史紀錄</span></span><br><span class=\"line\"><span class=\"built_in\">Set-PSReadLineOption</span> <span class=\"literal\">-PredictionSource</span> <span class=\"built_in\">History</span></span><br><span class=\"line\"><span class=\"comment\"># 歷史紀錄的呈現方式使用 ListView</span></span><br><span class=\"line\"><span class=\"built_in\">Set-PSReadLineOption</span> <span class=\"literal\">-PredictionViewStyle</span> ListView</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/oh-my-posh-powershell-windows-terminal/2021-11-23-093234.jpg\"></p>\n<p>這兩行加入<code>$PROFILE</code>就可以每次開啟<code>powershell</code>就一起執行了<br>但如果是在 VSCode 的 Terminal 使用的話，可能會出現警告訊息，因為用 ListView 的話有最小的高度、長度限制，否則無法正確顯示，這個時候可以用<code>F2</code>切換回原本的歷史紀錄 Intellisens</p>\n<p><img src=\"/artblog/oh-my-posh-powershell-windows-terminal/2021-11-23-094404.jpg\"></p>\n<p>想知道<code>PSReadLine</code>的一些使用方法可以看一下這兩篇文章，寫得蠻詳細的我就不贅述了</p>\n<ol>\n<li><a href=\"https://www.learningkoala.com/powershell-psreadline-21-and-higher.html\">PowerShell - PSReadLine 2.1, PSReadLine 2.2 + Predictive IntelliSens</a></li>\n<li><a href=\"https://devblogs.microsoft.com/powershell/announcing-psreadline-2-1-with-predictive-intellisense/\">Announcing PSReadLine 2.1+ with Predictive IntelliSense</a></li>\n</ol>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ol>\n<li><a href=\"https://www.hanselman.com/blog/my-ultimate-powershell-prompt-with-oh-my-posh-and-the-windows-terminal\">My Ultimate PowerShell prompt with Oh My Posh and the Windows Terminal</a></li>\n<li><a href=\"https://blog.poychang.net/setting-powershell-theme-with-oh-my-posh/\">使用 oh-my-posh 美化 PowerShell 樣式</a></li>\n<li><a href=\"https://docs.microsoft.com/zh-tw/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-7.2\">PowerShell 7.2:關於設定檔</a></li>\n<li><a href=\"https://www.hanselman.com/blog/adding-predictive-intellisense-to-my-windows-terminal-powershell-prompt-with-psreadline\">Adding Predictive IntelliSense to my Windows Terminal PowerShell Prompt with PSReadline</a></li>\n<li><a href=\"https://www.learningkoala.com/powershell-psreadline-21-and-higher.html\">PowerShell - PSReadLine 2.1, PSReadLine 2.2 + Predictive IntelliSens</a></li>\n<li><a href=\"https://github.com/PowerShell/PowerShellGetv2/issues/644\">Upgrade of the PSReadLine fails due that The version ‘2.0.0’ of module ‘PSReadLine’ is currently in use. #644</a></li>\n<li><a href=\"https://devblogs.microsoft.com/powershell/announcing-psreadline-2-1-with-predictive-intellisense/\">Announcing PSReadLine 2.1+ with Predictive IntelliSense</a></li>\n<li><a href=\"https://www.powershellgallery.com/packages/PSReadLine/2.2.0-beta4\">PSReadLine 2.2.0-beta4</a></li>\n</ol>\n","tags":["oh-my-posh"]},{"title":"心得 - Classic TDD by Examples Refactor to Design","url":"/artblog//Classic-TDD-by-Examples-Refactor-to-Design/","content":"<p>這幾天的碎片時間幾乎都在看 <code>ClassicTDD</code> 課程影片，每一個段落每一個章節都能夠給我觀念上的糾正與實際的解決思路，我越來越覺得其實我根本就不會寫 Code…..<br>其實收穫最大的除了這個以外，我常常就是想到一句話，學習從模仿開始，問題是，你要能夠找的到<strong>對</strong>的模仿對象</p>\n<span id=\"more\"></span>\n\n<h1 id=\"在-TDD-的世界中有兩種人\"><a href=\"#在-TDD-的世界中有兩種人\" class=\"headerlink\" title=\"在 TDD 的世界中有兩種人\"></a>在 TDD 的世界中有兩種人</h1><p>一種是上過 <code>91</code> 課程的人，都是一面倒的好評<br>一種是沒有上過 <code>91</code> 課程的人，可能是因為價格卻步、又可能是擔心不值得</p>\n<p>我希望能夠以過來人的經驗，提供一點心得給他們參考，至於我為什麼這樣做？因為資訊量太過龐大，而我想把學習過程中的心得、感受記錄下來</p>\n<p>一方面是因為方便自己未來複習的時候，可以快速抓到重點，一方面也想要透過這樣的方式，讓其他的人也了解這樣的課程有甚麼幫助</p>\n<blockquote>\n<p>我其實想要推薦的對象，是像我一樣，對 Coding 有一點點熱忱，但對於技術並沒有那麼厲害的普通人</p>\n</blockquote>\n<h2 id=\"我的學習方式\"><a href=\"#我的學習方式\" class=\"headerlink\" title=\"我的學習方式\"></a>我的學習方式</h2><p>我的習慣是將每個段落理解到一個階段後，再往下個段落學習；然後全部看完之後，如果還沒辦法內化的話，那就再來一次</p>\n<p>我也上過不少實體課程，講師其實都很優秀，東西也都很棒，但我吸收的效果卻不是很好，我自認對於學習還算有熱忱，但礙於天資、年紀與精力，我很難在實體課程中真正的吸收到甚麼東西</p>\n<p>所以我逐漸將實體課程的學習方式，轉為閱讀與影音課程，期望能透過反覆觀看的方式，可以比較輕鬆自在的學習，但是實際的情況是，我買了課程、買了書，安排了時間閱讀與學習，效果卻不盡理想</p>\n<ol>\n<li>年紀漸長，很難有一段時間能專心做事情，晚上能準時睡覺就該偷笑了</li>\n<li>影片的語言不是中文，或者是大陸口音，在學習過程中往往還要分心在理解講師要表達的意思，對於我有點吃力</li>\n<li>有些老師很有料，但其實口條並不清楚，或者是不會教學，反而很容易讓我直接放棄，因為那不是個好的學習體驗</li>\n</ol>\n<p>也因此，能夠找到自己適合的課程，選擇其實很少，就在這樣的情況下，<code>91</code>開始準備著手影音課程，讓我很期待</p>\n<h2 id=\"課程資訊\"><a href=\"#課程資訊\" class=\"headerlink\" title=\"課程資訊\"></a>課程資訊</h2><p>這一次的課程<a href=\"https://tdd.best/courses/classic-tdd-by-example-video-training/\">Classic TDD by Examples - Refactor to Design</a>就是我很想要的一門課程<br>主要的誘因</p>\n<ol>\n<li>講師在 TDD 領域非常專業</li>\n<li>課程採用 Rider 示範，學習如何善用開發工具</li>\n<li>想 Refactor 但不知道怎樣做比較好</li>\n<li>我曾經上過講師的實體課程，雖未能完全理解，但很多我還記得的觀念，到今天還受用</li>\n</ol>\n<h2 id=\"提醒\"><a href=\"#提醒\" class=\"headerlink\" title=\"提醒\"></a>提醒</h2><p>跟讀書心得不一樣，我並不打算在這邊暴露任何關於課程的細節<br>一方面是因為一門課程的準備與設計都是很耗費心力的，沒有接觸過的人很難理解，講師在準備一門課程所花費的心力有多少<br>一方面是我認同付出需要回報，才能夠持續成長，所以我不想要破壞這件事情</p>\n<p>如果想了解課程細節，上面有連結；如果想看我的心得，就放在下面，心得會隨著我的學習進度持續更新，但大致上也就是這樣的形式</p>\n<blockquote>\n<p>寫到後面好像已經有點不太像是學習心得了，感覺像是個學習日記一樣，哈哈，我應該不會每天更新，其實我很懶惰的</p>\n</blockquote>\n<h1 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h1><h2 id=\"2021-07\"><a href=\"#2021-07\" class=\"headerlink\" title=\"2021-07\"></a>2021-07</h2><h3 id=\"0714\"><a href=\"#0714\" class=\"headerlink\" title=\"0714\"></a>0714</h3><p>拿到影片課程了，非常開心。先看了幾份文件，知道大概有那些東西後，將影片下載回來，查看了一下影片長度，有 11 小時多，應該之後的時間都會花在這上面了，既期待影片內容，又怕不符合自己期待值，懷著忐忑的心情，睡覺去</p>\n<h3 id=\"0715\"><a href=\"#0715\" class=\"headerlink\" title=\"0715\"></a>0715</h3><p>利用碎片時間先看過一遍題目講解、分析，文件中有提到最好是自己先寫一次，寫完之後再來開始學習比較，效果會比較明顯。嗯，我很認真地看了 20 分鐘開始思考這件事情，然後決定放棄了，因為我好像短時間做不出來，做出來應該也很髒；這效果應該不用比了，我直接就開始上課了。</p>\n<p>果然從第一步就開始打臉，細緻的分析與邏輯，明確的列出已知資訊及待辦事項，我覺得今天學習的第一件事情就是這個了，我可能沒辦法像講師一樣能這麼厲害的分析，但這個方法我能學起來，用久了這個習慣也就養成了</p>\n<blockquote>\n<p>透過工具，在分析題目的當下，整理資訊，而這份資訊會是我們後續作業的依據</p>\n</blockquote>\n<h3 id=\"0716\"><a href=\"#0716\" class=\"headerlink\" title=\"0716\"></a>0716</h3><p>因為之前的分析有些地方我還是會忘記，希望至少能夠在聽熟一點，知道全貌<br>所以透過手機隨身撥放，聽分析的影片度過一天</p>\n<h3 id=\"0717\"><a href=\"#0717\" class=\"headerlink\" title=\"0717\"></a>0717</h3><p>開始照著影片建立測試專案，一開始的行為就是，邊聽講師說明，然後同步跟著操作 IDE 做一模一樣的事情<br>我以為剛開始而已，應該沒有甚麼值得記憶的點，但事隔三天，我現在還能記起來，從一開始操作 IDE，我就決定直接改變我的使用習慣<br>所有的熱健全部改用跟影片相同的，也就是<code>VisualStudio</code>，少部分自己加入的熱鍵再去新增就好</p>\n<ol>\n<li>講師的影片有裝顯示熱鍵的外掛，想知道操作可以暫停影片，觀看熱鍵顯示，如果熱鍵組設定相同，可以省去心力</li>\n<li>每個人的熱鍵最好自己設定，但前提是你要先熟練使用了功能，再去改，未熟練之前，看影片有時會直接打上熱鍵，這些都是加深記憶，所以這些熱鍵最好先相同</li>\n<li><code>Alt+PageUp</code>、<code>Alt+PageDown</code>值得記錄一下，這是個我忽略了的超好用熱鍵</li>\n</ol>\n<p>今天的收穫是，開發習慣的建立</p>\n<ol>\n<li>熱鍵</li>\n<li>使用鍵盤操作單元測試、Git Commit</li>\n</ol>\n<h3 id=\"0718\"><a href=\"#0718\" class=\"headerlink\" title=\"0718\"></a>0718</h3><p>開始寫測試了，學習到如何從一開始我們整理好的資訊，怎麼樣照著它做事情，這邊很多時候都會有講師說明，比較屬於觀念上的東西，讓我們清楚為什麼在這個階段要做這件事情</p>\n<h3 id=\"0719\"><a href=\"#0719\" class=\"headerlink\" title=\"0719\"></a>0719</h3><p>在重構的部分，開始有<code>pattern</code>的感覺了，講師在影片重構完畢後，我有時候都覺得應該 OK 了，但就又開始重構，並解說為什麼這樣做的原因。<br>比較記憶深刻的點是<code>feature envy</code>，但我對於這個東西怎麼應用在現有的公司專案上有點困惑，這個就等之後有想法再說吧。</p>\n<p>在觀看影片的時候注意到<code>Ctrl+comma</code>的這個熱鍵組合，但因為使用中文輸入的關係無法輸入這個熱鍵，這算是很困擾我的一點，因此參考了 slack 的講師回答跟其他人的建議，我最終還是選擇將系統加入一個英文語系，如此一來，我可以透過<code>Alt+Shift</code>切換英文跟中文輸入法，也可以採用<code>Win+Space</code>切換，透過這樣的方式取代原來<code>Ctrl+Space</code>切換輸入法的習慣</p>\n<h3 id=\"0720\"><a href=\"#0720\" class=\"headerlink\" title=\"0720\"></a>0720</h3><p>好用的<code>Rider</code>熱鍵組，今天開始有意識的查熱鍵，練習如何熟練使用</p>\n<ol>\n<li>移動到下一個方法的熱鍵 <code>Alt+Down</code>、<code>Alt+Up</code></li>\n<li>頁籤之間切換 <code>Alt+Left</code>、<code>Alt+Right</code></li>\n<li>自己建立一個測試 Session <code>Ctrl+U, N</code></li>\n<li>添加測試進入 Session <code>Ctrl+U, A</code></li>\n<li>執行當前 Session 所有測試 <code>Ctrl+U, Y</code></li>\n</ol>\n<h3 id=\"0722\"><a href=\"#0722\" class=\"headerlink\" title=\"0722\"></a>0722</h3><p>先前半夜睡前聽影片的時候，發現有一些前面的細節我沒有補充，但想想應該我至少會整個重聽幾次，前面沒記錄下來表示我還沒有 GET 到點，那就以後聽到再補吧</p>\n<p>今天接續新進度繼續下去，影片中講師不厭其煩的再次解釋了 out 的問題，以及解決方案，在這邊反覆提及的是<code>職責</code>這件事情，從一個我們暴露出去的方法中，不應該包含太多實作上的細節，這些細節都是應該要再被抽象出去的。</p>\n<p>這也呼應了先前所說的<code>呈現意圖</code>這件事情，這個真的很重要，以後看程式碼好不好維護、 容不容易理解就靠這個了</p>\n<p>而從單元測試案例的設計開始，也反覆地提到關鍵字：<code>代表性</code><br>透過測試失敗來明確目標，然後透過綠燈的過程去完成目標，最後透過重構整理；後面的紅燈綠燈重構應該大家都很熟悉了，但是更重要的事情是測試案例的代表性，而不是隨便抓一個案例就開工了，我想這個影片示範，對我的確是有警示作用，而且也提供了一個實際的思路如何去正確的設計測試案例</p>\n<p>但是如果要做的事情太多，那還是需要先將其拆解成顆粒度較小的測試才行，至於單元測試的測試案例重構，我個人是偏向保留代表性足夠的案例即可，畢竟越多案例就需要越多精力去理解，執行也要更多時間</p>\n<blockquote>\n<p>本日影片金句：骯髒無恥的綠燈就出來了</p>\n</blockquote>\n<p>可能是因為已經很習慣講師以前一直強調的開發方式，所以也都很習慣用 IDE 來產還沒有產生出來的 Code，而是先將我們要做的事情先描述出來，在這邊也特別花了點時間介紹這樣的觀念，姑且稱之為<code>Intention Driven</code>，這也是我覺得改變開發習慣的第一步，透過重構功能能夠很方便地做到這些事情，入門也不難，值得嘗試</p>\n<p>綠燈之後就是重構，在這邊我會先猜測等等的重構行為，會是做哪些事情，然後用意圖的方式去思考，很開心的猜中了</p>\n<h3 id=\"0723\"><a href=\"#0723\" class=\"headerlink\" title=\"0723\"></a>0723</h3><p>接著昨天的進度繼續往下看，還好接續的部分剛好是講師告一段落，後面開始往下做的時候，也順帶的前情提要了之前做的事情，讓我隔了一天接著看也能快速地進入狀況，昨天我猜的重構步驟只猜到前半段，後半段整個就是超出我想像的方式，但一步步走來卻又那麼理所當然。這種震撼我很難表達出來，連續的幾個巧思直接將我原本預想中困難的部分輕而易舉的就用我所熟知的東西幹掉了，所以這一段我今天看了不少次，而剩下的零碎時間，我打算在回顧一下之前的內容，這次透過的是<code>91</code>哥在報名成功後，就同時給予的一個 dropbox paper 文件來複習已經看過的部分。</p>\n<p>是的，<code>91</code>哥用寫書的概念在寫這份文件，將開發過程當中一些重要的資訊也寫在這份文件內，方便同學回顧，一開始我是沒有仔細看內容，還是事後在 slack 頻道中，無意間看到同學說他怎麼卷軸拉不到底，原來是好像有十五萬字….<br>恩，所以就沒什麼好提供心得的了，這兩天就好好複習一下到目前為止的進度，希望能夠在腦子裏面順順地跳出來，下一步應該要做什麼，怎麼做。</p>\n<h3 id=\"0726\"><a href=\"#0726\" class=\"headerlink\" title=\"0726\"></a>0726</h3><p>用了一些時間再次重溫了先前被震撼到的重構，這次著重在<strong>為什麼會想到要這樣重構</strong><br>如何將原本近似的兩個類別，透過重構的方式先將不同的方法簽章處理成相同的，然後再提取共同的介面，再次精簡主要方法的邏輯，並使其完整地呈現意圖，而細節都被封裝，而這一切都有<code>91</code>哥同步解釋思路，這一段真的是精華</p>\n<h3 id=\"0727\"><a href=\"#0727\" class=\"headerlink\" title=\"0727\"></a>0727</h3><p>想起了自己很久前亂寫的一個分頁小工具，趁著最近學到的需求分析方法，也弄個心智圖來分析歸納一下，不整理不知道，一整理之後發現我一直在改 testcase，然後改著改著，整個需求越來越明確，我也越來越清楚整個脈絡，要做哪些事情，在整理的當下，也順手將一些規則直接定義完畢，整個與先前的狀況就是天壤之別，雖然還沒開始寫 CODE，但我感覺這次如果開始寫的話，會順利很多</p>\n<h2 id=\"2021-08\"><a href=\"#2021-08\" class=\"headerlink\" title=\"2021-08\"></a>2021-08</h2><h3 id=\"0805\"><a href=\"#0805\" class=\"headerlink\" title=\"0805\"></a>0805</h3><p>距離上次練習已經有些時間了，今天又抓到一點時間重新溫習並往下繼續，影片遵循著紅燈、綠燈、重構的循環，在每個階段開始前，<code>91</code>哥會先大致上簡單分析需求並解釋思路，有了概念後才開始動工；看著程式碼逐漸產生最後又是利用先前提過的重構技巧，一套組合拳下來，發現程式碼已經打完了。我想大概是因為解說教學的關係，再加上刻意的<code>BabyStep</code>練習，程式碼的撰寫實際上花費很少時間，大部分都是利用 IDE 產生再去調整、重構，如果想好好善用<code>Rider</code>進行開發，透過<code>91</code>的課程來學習我想比起自己悶著頭練習會很好多。</p>\n<p>原先我以為這一段要綠燈的話，會寫得很複雜，但影片中<code>91</code>用一種非常優雅輕鬆的方式完成了，然後程式碼能夠很清晰的表達意圖，過程中連續幾次的重點提醒有 Code Smell，也能夠加深印象，讓我組合技也能打得有模有樣</p>\n<blockquote>\n<p><code>91</code>邊解說邊敲代碼，講完了也敲完了，沒看過的人應該有點難想像，因為很難跟得上<code>91</code>的速度，我大概每個片段都是反覆看好幾次</p>\n</blockquote>\n<p>影片看到目前，剛好在六小時左右，才看到一半，慢慢來吧</p>\n<h3 id=\"0809\"><a href=\"#0809\" class=\"headerlink\" title=\"0809\"></a>0809</h3><p>今天於公司專案重構時，刻意運用小步快跑的概念，既有專案非常的複雜且骯髒，想要先嘗試重構，將 razor 接收的後端資料改用別的方式給值，替換掉 global 變數，調整後立即重開 iis express 驗證頁面功能是否正常，速度雖然比較慢，但每次只改一點點，也不要重構改過的程式碼，先驗證重構的方向與概念是否可行，OK 後再進行優化，重複這樣執行，速度雖然比較慢，但勝在很穩健。確認 OK 的部分馬上先用 Git 加入 Stash，出錯了也可以立即還原，這個概念雖然很簡單，但其實是真的有用。尤其是在不熟悉的狀況下，想要驗證自己的想法時，可以有效地建立一個安全地帶，讓重構無後顧之憂。</p>\n<blockquote>\n<p>這也是以前就知道，但沒有多刻意重視。藉由這次影片的觀念解說，嚴格遵守這樣的概念其實是有幫助的。</p>\n</blockquote>\n<h3 id=\"0813\"><a href=\"#0813\" class=\"headerlink\" title=\"0813\"></a>0813</h3><p>影片持續進行，今天練習的進度是將一段邏輯重構為責任鍊的方式，其實寫 CODE 寫久的人大概可以知道程式碼最終應該可以長成什麼樣子，但如何利用 IDE 的功能，讓 IDE 幫你重構成那個樣子就是壓箱底的絕招了，這兩天就都在看這一塊，先完整的看過一次，隔天再手動跟著練一次，感覺還不識很熟悉，我想我會需要將這一段落的目標寫起來，然後下面條列出細節的重點，之後複習的時候可以不用看影片，需要提示的時候稍微看一下這個筆記就好了。</p>\n<p>然後我這樣想的時候，就想到，好像講師早就把這件事情做完了，放在 dropbox paper 上了，越來越覺得這份影片處處用心，都埋了很多細節，以前也曾經上過 OO 課程，也有講到責任鍊，但透過重構完成反而更能讓我體會到這個 Pattern 是怎樣演變出來的，我覺得對我個人是很有效果的</p>\n<p>今天最重要的部分就是學到了如何透過 IDE 重構並提取父類別，原來是這樣做到的，我也像講師說的那樣，看到不熟悉我就 <code>UNDO</code> 回去了，然後還是傻傻地用手 KEY。能夠學到這招的確能夠省很多時間，也期望未來自己能在實戰中應用上。</p>\n<h3 id=\"0817\"><a href=\"#0817\" class=\"headerlink\" title=\"0817\"></a>0817</h3><p>今天的影片進度看完了，也跟著做了一次；過程中感觸很深的是，假設我們不採用<code>TDD</code>方式開發，通常我們會選擇用<code>XXXHelper</code>的方式來處理，而這就是一個災難，試想好像真的如此，而這就會造成後續接手維護的困難，就像寫小說一樣，後面的結果已經被安排得好好的了，就是一個噩夢</p>\n<p>反覆地提及壞味道的辨別方式，讓我感知壞味道的功力似乎也提升了一點點，而一再提起的東西都與物件導向的內聚有關係，看完這邊，我的感想又跟第一天看影片的心情一樣，我真的一點都不會寫 Code，希望被狂打臉後能將養分吸收起來。</p>\n<p>另外我覺得很棒的是：當新增一個紅燈測試案例後，照理說一定會錯，但在還沒有執行測試看到結果之前，<code>91</code>會先預測這個紅燈跑出來的行為是甚麼，然後去比對程式真正的結果，用來看看我們對於程式碼的掌握是否足夠，而這也是我目前主管曾經告誡過我的一個很重要的能力，果然厲害的人習慣都差不多。</p>\n<p>重構完畢後，會回顧這一小步做了哪些事情，這也相當於復盤我們這一 ROUND 做了哪些東西來滿足新的測試案例，我還蠻喜歡這個步驟的</p>\n<h3 id=\"0919\"><a href=\"#0919\" class=\"headerlink\" title=\"0919\"></a>0919</h3><p>時隔一個月的這段期間，已經將影片看完，雖然看完了，但因為時間跨度很長，其實也缺少了一鼓作氣連貫的練習，回想起整個課程，目前我第一次破關的感覺是，懵懵懂懂。91哥在影片最後特別給予了自學這份影音的學員一些建議，記得比較有感觸的是：那些DIFF才是寶貴的地方。原句忘記了，但仔細想想，其實就是這些DIFF被我們內化後的知識、經驗，能夠比別人有更多的優勢。</p>\n<p>至於學習上的部份，我只能說從這份課程中我得到很多東西，不管是技術上還是心態上。感覺就像是一個人剛進社會寫程式，這部影片扮演的就是一個很棒的mentor腳色，或者是說，有個老手帶你pair programming，寫完之後順便帶你Code Review一次，如果我能在十年前上過這門課，那會是很幸福的事情。</p>\n<p>從技術上來說，我得到的是</p>\n<ol>\n<li>如何辨識壞味道：這也是影片中被91哥重點提及的，這個題目很棒的原因之一，因為除了某一個壞味道，其餘的幾個都重複出現過好幾次，這能夠讓我們對於壞味道的辨識、處理，更有記憶點。</li>\n<li>藉由測試保護並開始TDD：是的，這是一句老話，而且我原本也知道，但看了影片之後，每一次的commit，都有個節奏，讓你慢慢習慣那個tempo，模仿那個節奏是很棒的事情。</li>\n<li>善用工具：不管是從IDE的重構支援、還是VIM、或者是熱鍵，甚至是其他工具的應用，包含Excel或是影片所使用的心智圖，了解工具並善用他，能夠讓開發行為更順利，一開始的心智圖+需求分析更是重點。但我說的重點是，用工具怎麼幫助你，而不是一昧地追求工具，如果習慣手繪，那或許筆記本+幾個有色鉛筆會更適合你。</li>\n</ol>\n<p>從心態上來說，學到的是</p>\n<ol>\n<li>所有看起來行雲流水的操作，背後都是一次次的練習換來的：你必須投入練習，才能夠看起來游刃有餘毫不費力。</li>\n<li>沒有最完美的解法，所有的嘗試都是養份，讓這些養份成就你</li>\n</ol>\n<p>或許還有很多知識點被我遺漏，但很棒的是91哥已經做好了各位同學二刷、三刷的課題。甚至也設計了一個簡易版的題目，讓各位學員也能夠將簡易版的題目，作為個人練習，也允許內部分享。在我看來是很佛心的事情，只是以我第一輪破關就花那麼久時間來說，我想我有空餘的時間都會花在二刷三刷上，要等我內化到足以分享的地步，可能會很久吧，這個機會我想還是讓給其他厲害的學員吧。</p>\n<h2 id=\"2024-05\"><a href=\"#2024-05\" class=\"headerlink\" title=\"2024-05\"></a>2024-05</h2><p>睽違已久的心得，繼續接著寫，最近一周花了一些時間，從頭到尾再做一次練習，這一次我從開始的部分看影片看到約莫六小時多的地方，邊看邊寫作一次，然後重新開一個 branch練習，將所有的測試案例保留下來，一步步地透過 TDD的方式開始做</p>\n<p>這樣做的好處是，對於大框架都有印象，細節的部份因為也才剛瀏覽過也會有部分記憶，所以我終於可以享受到順暢的，紅燈、綠燈、重構的節奏，之所以覺得很重要的點，是因為保持在這個節奏下，所有的東西步調比較快，你才會比較明顯的感受到，為甚麼要用這個測試案例，它代表的是甚麼意思；過程中的重構演化，則是針對程式碼的架構、可讀性開始做優化的階段，主要的工都在這一個階段，影片中為了講解，所以把每一個步驟切得很細，但實際上在這一次的練習過程，將這一個部份快速的帶過，更能夠感受到每一個綠燈之後的重構所帶來的差異，對於可讀性及架構有甚麼改變</p>\n<p>練習完畢後，趁著記憶還鮮明，這一次我開始挑戰附加的練習作業，也就是<code>十八拉</code>，整體來說大概的解題思路跟教學的KATA很像，但因為他畢竟是比較小的一個練習，所以有些地方就不需要完全照搬影片的解法，設計太多不必要的類別也是壞味道之一；影片中有一段是為了示範責任鍊的重構，在練習反而不太需要。而依照點數的牌型比較，我也自行調整，透過繼承與子類別代表各種牌型，並透過實作 ICompare 去實作比較，這樣就不需要將比較的實作，放在 XXXCompare裡面，這樣的做法我相信應該也是原先<code>91</code>哥有考慮過的，只是因為要讓我們多接觸一個重構責任鍊的範例，所以才會在影片中也特別提及這一個部分實際上是不需要用到這樣的方式重構。</p>\n<p>在實作練習的時候，其實還是有點卡，主要就是沒想好案例的部分，導致常常就是改完案例改實作，重構完後發現又需要改案例，紅燈綠燈重構的節奏整個跑掉，而最後手動重構的部分，沒有用IDE介面，因為實在不知道怎麼弄，我想應該是在設計規劃的階段就要比較明確應該往哪個方向走，這樣才會逐漸重構成自己想要的架構，但那應該就是二刷、三刷練習題的時候再慢慢嘗試吧</p>\n<p>這一份教材其實隔很久之後再看也還是有溫故知新的感覺，真的很超值喔。</p>\n","categories":["心得"],"tags":["TDD","refactor"]},{"title":"心得-Refactor Tennis Game By Baby Step in Java","url":"/artblog//%E5%BF%83%E5%BE%97-Refactor-Tennis-Game-By-Baby-Step-in-Java/","content":"<p>在實務上常常遇到的情況是針對遺留程式碼做調整，這些 Code，有一些是半年之前的我自己寫的，有一些是別人寫的，不可避免的是我無法記得所有系統的細節，所以很多時候我必須要先重新看過一次程式碼，知道在做什麼事情之後，才能開始修改，如何修改<code>Legacy code</code>都是老生常談了，這次有機會可以從頭到尾感受一下<code>Joey</code>的重構影片，尤其是都有旁白說明，是非常難得的機會，推薦給大家看看</p>\n<span id=\"more\"></span>\n\n<p><code>Joey</code>針對這個主題也錄製了影片、撰寫了文章、提供了完整的 Github Commit History，相信可以讓大家更完整的感受到重構的威力、及善用工具的優勢</p>\n<p>影片連結：<a href=\"https://www.youtube.com/watch?v=d70T_lqxBmY\">[Fake it till you make it] refactoring tennis by baby steps in Java - By Joey Youtube Channel</a><br>文章連結：<a href=\"https://tdd.best/code-4-fun/fake-it-till-you-make-it/\">重構全 hard-code 的 tennis</a></p>\n<p>還不了解 <code>Tennis Game</code>的人，可以先看一下<a href=\"https://codingdojo.org/kata/Tennis/\">Tennis Kata</a>的規則說明，其實就是網球的計分規則，在網路上關於<code>Tennis TDD Kata</code>有不少文章，大家可以自行搜尋一下。</p>\n<h2 id=\"Magic-String-Magic-Number\"><a href=\"#Magic-String-Magic-Number\" class=\"headerlink\" title=\"Magic String &#x2F; Magic Number\"></a>Magic String &#x2F; Magic Number</h2><p>影片中第一件事情就是去除掉<code>Magic String</code>，又或者是數字，那就叫做<code>Magic Number</code></p>\n<p>這些東西不注意的話就會充斥在整份程式碼當中，事過境遷，真正的意義很可能被遺忘在歷史長河中，為了避免這件事情，應該要用一個有意義的變數取代這些寫死的字串(或是數字)。</p>\n<h2 id=\"抽象共用的變數\"><a href=\"#抽象共用的變數\" class=\"headerlink\" title=\"抽象共用的變數\"></a>抽象共用的變數</h2><p>這是影片中第二個用到的技巧，實務上這樣做的原因也很簡單，你不會想要同時修改很多次，如果你只需要修改一個地方，那不是很好嗎？所以將所有相同的字串都用一樣的變數取代掉，這個技巧在影片當中的速度很快，快捷鍵看樣子是按下<code>Ctrl+Alt+F</code>，這在 Intellij 裡面應該是把東西變成<code>Field</code>的快捷鍵，但是我在<code>Rider</code>裡面並沒有辦法像影片中那樣，只抽取反白的區域而已，如果有相同的字串，在<code>Rider</code>裡面也會問你是否要處理所有相同的字串，這點很方便</p>\n<h2 id=\"讓分數與顯示結果的關係更明顯\"><a href=\"#讓分數與顯示結果的關係更明顯\" class=\"headerlink\" title=\"讓分數與顯示結果的關係更明顯\"></a>讓分數與顯示結果的關係更明顯</h2><p>為了讓玩家的分數，與實際顯示的字串對應關係更明顯一點，透過<code>HashMap</code>來存放這份關係，讓使用者分數為 Key，這樣的方式會更清楚，相對的也可以將原先的邏輯，逐漸替換掉，讓分數作為條件，取得對應的文字顯示，在 CSharp 裡面，我常用的也是<code>Dictionary</code>，在<code>Javascript</code>則可以直接用<code>&#123;&#125;</code>的方式來宣告，這些都是 Key-Value-Pair</p>\n<h2 id=\"整理程式碼區塊內的程式\"><a href=\"#整理程式碼區塊內的程式\" class=\"headerlink\" title=\"整理程式碼區塊內的程式\"></a>整理程式碼區塊內的程式</h2><p>對應關係的<code>HashMap</code>是固定的，其實可以在<code>Create Instance</code>的時候就建立好，這樣子實際上取得分數的方法內，就只需要包含邏輯就好，不再有初始化的事情，讓職責更清晰，也讓三個月後的你回來看 Code 能更快速的理解程式碼邏輯</p>\n<h2 id=\"Inline-變數\"><a href=\"#Inline-變數\" class=\"headerlink\" title=\"Inline 變數\"></a>Inline 變數</h2><p>在影片後面接著會將所有的變數搬來搬去，到最後放到 HashMap 的時候，最後一個動作是把變數 inline 進去，一開始抽象出來是為了 reuse，最後 inline 是為了消滅非必要的變數，這一系列的過程其實就是重構，重構最常做的事情其實也就是這樣子，改一下命名，把東西搬過去、搬過來、抽出一個 Function 之類的，最終的目的都是為了讓程式碼更容易理解</p>\n<h2 id=\"合併相似的邏輯\"><a href=\"#合併相似的邏輯\" class=\"headerlink\" title=\"合併相似的邏輯\"></a>合併相似的邏輯</h2><p>程式碼中有很多 if 分支，在裡面的邏輯是都相同的，所以這個時候可以將判斷修改一下，就可以移除重複的程式碼</p>\n<h2 id=\"組織程式碼順序\"><a href=\"#組織程式碼順序\" class=\"headerlink\" title=\"組織程式碼順序\"></a>組織程式碼順序</h2><p>這個行為我不太知道該怎麼說，影片中是將類似的邏輯放在一起，這也有助於理解程式碼，透過這樣的搬移，又發現這幾個程式碼都有相同的邏輯實作，所以又可以精簡，這樣的動作不一定每次都奏效，但起碼可以幫助你理解程式碼的行為，類似的行為放在一起總是更容易理解不是嗎？</p>\n<p>影片中的範例透過這樣子操作，合併判斷式之後最後又發現可以進行更精簡的修改，逐漸減少判斷條件，程式碼也越來越清晰，如果有練習過 <code>Tennis TDD Kata</code> 的人，應該到這邊就開始發現，程式碼開始有點像了</p>\n<h2 id=\"取個容易理解的名字\"><a href=\"#取個容易理解的名字\" class=\"headerlink\" title=\"取個容易理解的名字\"></a>取個容易理解的名字</h2><p>具體的範例就是影片中的<code>isDeuce()</code>、<code>sameScore()</code>、<code>lookupScore()</code>這樣的東西，一看到這個 Function 名稱，你就知道它在幹什麼的，它怎麼實作的，你不要去管它，讓你的注意力集中在商業邏輯，而不是實作方式，當然方法的內容也要清晰明瞭</p>\n<h2 id=\"重複這些操作\"><a href=\"#重複這些操作\" class=\"headerlink\" title=\"重複這些操作\"></a>重複這些操作</h2><p>在部分合併後的判斷式調整，需要用腦子去想想商業邏輯，應該怎麼改寫可以更簡單，其他都是重複操作了，最終你看到的程式碼，所有方法都是一行，而主要的方法邏輯很清楚，你可以透過方法的名稱知道整個商業邏輯，計算分數的規則是甚麼</p>\n<h1 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h1><p>我寫完程式碼之後，也都是用上面的方式來 review 我的程式碼，在剛入這行的時候都不知道這些事情，所以跌跌撞撞了很久，這些東西跟技巧都很簡單，但是觀念的培養是需要時間的，要不然就是真的踩雷才會記得，推薦這影片給大家，有機會多看看，重複看也很不錯，這影片暴露的東西很多了</p>\n<ol>\n<li>如何善用你的開發工具：熱鍵、Vim、IDE 重構支援</li>\n<li>如何理解你的需求：透過<code>Joey</code>的旁白，你可以知道判斷式修改是為什麼，如何組織在一起的，為什麼可以這樣合併，這些都是需要先理解需求，才能知道應該怎麼寫的</li>\n</ol>\n<p>這也是我推薦給大家的主因，理解需求，並修改既有的程式碼</p>\n","categories":["心得"],"tags":["refactor"]},{"title":"讀書心得-Vue.js應用測試","url":"/artblog//testing-vue-js-applications/","content":"<p>專注於如何測試 vue.js 應用程式的書籍，雖然出版已經有一陣子了，但對於如何測試 <code>vue.js</code> 來說，是一本很優秀的入門書籍，網路上有找到這本書的英文版，看起來好像可以免費觀看：<a href=\"https://livebook.manning.com/book/testing-vue-js-applications/\">Testing Vue.js Applications</a>，如果喜歡的話也可以考慮去天瓏入手一本<a href=\"https://www.tenlong.com.tw/products/9787111646709\">vue.js 應用測試 - testing vue.js application</a></p>\n<span id=\"more\"></span>\n\n<p>在其他關於 <code>vue.js</code> 的書籍中通常都用一兩個章節提到 <code>vue.js</code> 的測試；或者是在講測試的書籍內，用某些前端框架作為例子，用幾個章節介紹，我沒有看過一本專門講 <code>vue.js</code> 如何測試的書，因此這本書的確很吸引我，所以盡管這本書已經出版好一陣子，我還是打算買下來，並好好研讀一下；但是畢竟這是一本關於前端框架測試的書籍，而我本身其實並沒有對前端涉略很多，工作上也用不到，因此書籍的某些章節會略過，真的想了解的朋友可以自己買書研究一下</p>\n<p>這本書畢竟是在講測試，所以會假設讀者都已經對 <code>vue.js</code>有一定認識，所以一些東西就被歸類於常識，如果對於 <code>vue.js</code> 比較不熟，可能還是需要先了解一下，另外，這本書畢竟有點久了，跟著書籍的步驟練習的話，可能會發生套件相容的問題，這個時候看是要去切換分支比對各個套件依賴關係，確定可用的套件版本，或者是自行依照錯誤訊息，確認相關套件是否需要隨著更新，這些就不再撰述</p>\n<p>簡單的說就是當時安裝的是甚麼套件，現在手動練習的話，你也要安裝相同版本的套件才不容易出錯；要不就是自己解一下衝突，看一下哪個套件要更新版本</p>\n<h2 id=\"準備工作\"><a href=\"#準備工作\" class=\"headerlink\" title=\"準備工作\"></a>準備工作</h2><p>書籍提供一個用來練習的 repository <a href=\"https://github.com/eddyerburgh/vue-hackernews\">hacker news</a>，但是按照步驟將他還原套件的時候會發現在安裝<code>firebase</code>套件的時候錯誤，也上網找了很多解決辦法，但是沒一個能穩定運作，專案還原到懷疑人生</p>\n<p>最後嘗試很多種辦法，我最後也不確定哪一種才是關鍵因素，因此都列出來</p>\n<ol>\n<li>參考 <a href=\"https://www.jianshu.com/p/2b831714bbff\">windows 下安装 node-gyp</a> 處理<code>node-gyp</code>的問題 (<code>npm install --global --production windows-build-tools</code>)</li>\n<li>將專案本身依賴的<code>firebase</code>砍掉，然後重新安裝最新版本</li>\n</ol>\n<p>但其實或許也可以將套件記著，全部砍掉後重新一個個手動加入依賴，但我已經不想去測試了，底下是截至第二章結束時，正常運作的<code>package.json</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;vue-hackernews-2&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;version&quot;</span>: <span class=\"string\">&quot;0.1.0&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;private&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;serve&quot;</span>: <span class=\"string\">&quot;vue-cli-service serve&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;build&quot;</span>: <span class=\"string\">&quot;vue-cli-service build&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;lint&quot;</span>: <span class=\"string\">&quot;vue-cli-service lint&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;jest&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;test:unit&quot;</span>: <span class=\"string\">&quot;jest --no-cache&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;dependencies&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;firebase&quot;</span>: <span class=\"string\">&quot;^8.2.7&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;vue&quot;</span>: <span class=\"string\">&quot;^2.5.16&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;devDependencies&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;@babel/core&quot;</span>: <span class=\"string\">&quot;^7.12.16&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;@vue/cli-plugin-babel&quot;</span>: <span class=\"string\">&quot;^3.0.0-beta.15&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;@vue/cli-plugin-eslint&quot;</span>: <span class=\"string\">&quot;^3.0.0-beta.16&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;@vue/cli-service&quot;</span>: <span class=\"string\">&quot;^3.0.0-beta.15&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;@vue/eslint-config-standard&quot;</span>: <span class=\"string\">&quot;^3.0.0-beta.16&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;@vue/test-utils&quot;</span>: <span class=\"string\">&quot;^1.1.3&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;babel-core&quot;</span>: <span class=\"string\">&quot;^7.0.0-bridge.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;babel-jest&quot;</span>: <span class=\"string\">&quot;^26.6.3&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;cross-env&quot;</span>: <span class=\"string\">&quot;^5.2.0&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;jest&quot;</span>: <span class=\"string\">&quot;^26.6.3&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;vue-jest&quot;</span>: <span class=\"string\">&quot;^3.0.7&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;vue-template-compiler&quot;</span>: <span class=\"string\">&quot;^2.5.16&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;eslintConfig&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;root&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;env&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;node&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;jest&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;extends&quot;</span>: [</span><br><span class=\"line\">      <span class=\"string\">&quot;plugin:vue/essential&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;@vue/standard&quot;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&quot;rules&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;prefer-promise-reject-errors&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;no-new&quot;</span>: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&quot;parserOptions&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;parser&quot;</span>: <span class=\"string\">&quot;babel-eslint&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;postcss&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;plugins&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;autoprefixer&quot;</span>: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;browserslist&quot;</span>: [</span><br><span class=\"line\">    <span class=\"string\">&quot;&gt; 1%&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;last 2 versions&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;not ie &lt;= 8&quot;</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>之後雖然作者在每一個章節都有提供分支做切換，但被坑過的我，第一次測試 OK，切到分支第三章，重新再跑一次就又被整到懷疑人生了，因此這一次我直接從第二章的分支開始做，然後不做分支切換了。如果要參考相關 Code，應該就是自己再另外開一個 Repository 去做切換來觀看。這一次練習的也會放在 Github:<a href=\"https://github.com/art-Forks/vue-hackernews/commits/my-practice\">my practice commit history</a>，如果有需要參考的人請自取</p>\n<h2 id=\"第-1-章-Vue-程序測試介紹\"><a href=\"#第-1-章-Vue-程序測試介紹\" class=\"headerlink\" title=\"第 1 章 Vue 程序測試介紹\"></a>第 1 章 Vue 程序測試介紹</h2><h2 id=\"第-2-章-創建你的第一個測試\"><a href=\"#第-2-章-創建你的第一個測試\" class=\"headerlink\" title=\"第 2 章 創建你的第一個測試\"></a>第 2 章 創建你的第一個測試</h2><p>經由本章介紹，熟悉專案內容的各項功能</p>\n<ol>\n<li>執行專案 <code>npm run serve</code></li>\n<li>執行 ESLint 檢查：執行 ESLint 後，書上說的錯誤源自於<code>src/components/ItemList.vue</code>，實際上是<code>src/views/ItemList.vue</code></li>\n<li>編譯網站：如果發生錯誤是與<code>firebase</code>有關，可以參考一下<a href=\"#%E6%BA%96%E5%82%99%E5%B7%A5%E4%BD%9C\">準備工作</a></li>\n<li>建立單元測試：<code>jest</code>框架預設的測試檔案 pattern：<code>**/__tests__/**/*.[jt]s?(x), **/?(*.)+(spec|test).[tj]s?(x)</code></li>\n<li>讓 Jest 支援 Vue SFC (Single File Component)</li>\n<li>如何 debug 測試程式</li>\n</ol>\n<p>跟隨著章節練習，手動加入套件的時候可能會發生奇奇怪怪的錯誤，猜測應該是當時的<code>jest</code>套件比較舊，而現在的<code>jest</code>套件與專案內的<code>babel core</code>衝突，解決辦法就是將<code>package.json</code>內的 babel 依賴砍掉，重新再安裝一次<code>babel</code>就好了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-jest vue-jest @babel/core babel-core@bridge</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>這邊順便介紹了一個知識點，透過<code>--</code>將參數帶給 npm 的指令，例如 <code>npm run unit:test -- --watch</code></p>\n</blockquote>\n<h3 id=\"產生-jest-config-js\"><a href=\"#產生-jest-config-js\" class=\"headerlink\" title=\"產生 jest.config.js\"></a>產生 jest.config.js</h3><p>這邊不採用將設定寫在<code>package.json</code>的方式，而是直接透過<code>jest --init</code>的方式來產生設定檔，之後再自行修改</p>\n<blockquote>\n<p>特別注意需要確認 <code>testEnvironment</code>使用<code>jsdom</code>，如果在 init 的時候有回<code>jsdom</code>的話就沒問題，我是點了<code>node</code>結果發生錯誤查半天，最後才發現我選錯了，要選<code>jsdom</code>才對</p>\n</blockquote>\n<h3 id=\"讓-Jest-支援-Import-、支援-Vue-SFC\"><a href=\"#讓-Jest-支援-Import-、支援-Vue-SFC\" class=\"headerlink\" title=\"讓 Jest 支援 Import 、支援 Vue SFC\"></a>讓 Jest 支援 Import 、支援 Vue SFC</h3><p>要讓<code>jest</code>支援<code>import</code>的語法，請參閱<a href=\"https://jestjs.io/docs/en/configuration.html#transform-objectstring-pathtotransformer--pathtotransformer-object\">Configuring Jest</a>，這邊有提到需要顯式指定<code>transform</code>區段的設定，可參考<a href=\"https://github.com/facebook/jest/tree/master/packages/babel-jest\">babel-jest</a>的設定方式範例，在<a href=\"https://github.com/vuejs/vue-jest\">vue-jest</a>有提到一些相關版本的注意事項，因為現在是新安裝，採用的 <code>babel</code> &gt; 7，且 <code>jest</code> &gt; 24，所以還要再額外安裝套件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-jest @babel/core babel-core@bridge</span><br></pre></td></tr></table></figure>\n\n<p>並且加上 vue 的設定，最後設定的部分看起來是這樣的，要注意 js 的 regex pattern，可能會因為我們檔名用 item.spec.js，不符合<code>^.+\\\\.js$</code>這種 pattern，所以只判斷副檔名結尾即可，或者是自己重新寫一個符合的 regex pattern</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">transform</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;\\\\.[jt]sx?$&quot;</span>: <span class=\"string\">&quot;babel-jest&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;^.+\\\\.vue$&quot;</span>: <span class=\"string\">&quot;vue-jest&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是到這邊之後還沒完，接著要讓測試把 Vue Component 掛載起來，官方有推出一個測試工具可以使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save-dev @vue/test-utils</span><br></pre></td></tr></table></figure>\n\n<p>可以參考一下官方文件：<a href=\"https://vue-test-utils.vuejs.org/zh/installation/testing-single-file-components-with-jest.html\">用 Jest 测试单文件组件</a>，大概都把重點說出來了，難怪人家說 vue 的文件做的很棒</p>\n<h3 id=\"一般狀況下如何-debug-測試程式\"><a href=\"#一般狀況下如何-debug-測試程式\" class=\"headerlink\" title=\"一般狀況下如何 debug 測試程式\"></a>一般狀況下如何 debug 測試程式</h3><ol>\n<li>在程式中下中斷點<code>debugger</code></li>\n<li>透過<code>node --inspect-brk ./node_modules/jest/bin/jest.js --no-cache --runInBand</code>執行測試</li>\n<li>node 會顯示監控一個 websocket 的時候，透過 chrome 開啟 chrome:&#x2F;&#x2F;inspect，從 Remote Target 底下點<code>inspect</code>開啟一個 DevTool</li>\n<li>在 DevTool 可以執行 F8，讓程式開始執行，接著會中斷在<code>debugger</code>的地方</li>\n</ol>\n<h3 id=\"使用-Rider-WebStorm-如何-debug-測試程式\"><a href=\"#使用-Rider-WebStorm-如何-debug-測試程式\" class=\"headerlink\" title=\"使用 Rider &#x2F; WebStorm 如何 debug 測試程式\"></a>使用 Rider &#x2F; WebStorm 如何 debug 測試程式</h3><p>但如果你用的是<code>Rider</code>，先設定一個執行的設定檔<br><img src=\"/artblog/testing-vue-js-applications/2021-02-17_171459.jpg\"></p>\n<p>然後按旁邊的蟲蟲 Icon，直接就可以在 IDE 裡面 Debug (這邊上面的綠色 Play 旁邊那個 Bug Icon 沒有截圖好)<br><img src=\"/artblog/testing-vue-js-applications/2021-02-17_171211.jpg\"></p>\n<h2 id=\"第-3-章-渲染組件輸出測試\"><a href=\"#第-3-章-渲染組件輸出測試\" class=\"headerlink\" title=\"第 3 章 渲染組件輸出測試\"></a>第 3 章 渲染組件輸出測試</h2><p>這裡採用有點類似 <code>TDD</code> 的概念先將需求釐清，確認那些 Component 要做到那些事情，然後先寫測試；再這邊的準備工作就是將職責確定好，分析的方式可以仔細看看書裡面，分析完畢後就是接著實作，書籍先示範了一次 item.url 這個屬性的測試；接著大概就是以測試驅動的方式產生 production code，也就是實際上 Item Component 的實作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; shallowMount &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@vue/test-utils&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Item</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../Item.vue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;Item.vue&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">test</span>(<span class=\"string\">&#x27;renders item.url&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> item = &#123; <span class=\"attr\">url</span>: <span class=\"number\">10</span> &#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">shallowMount</span>(<span class=\"title class_\">Item</span>, &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">propsData</span>: &#123; item &#125;,</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t<span class=\"title function_\">expect</span>(wrapper.<span class=\"title function_\">text</span>()).<span class=\"title function_\">toContain</span>(item.<span class=\"property\">url</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>原文中提到：<strong>其他兩個測試與你剛剛編寫的測試非常相似，因此在這裡就不再重複展示了</strong>。</p>\n<p>所以從 repository 切到 chapter-4 分支，來看看這段消失的歷史發生了那些事情<br><img src=\"/artblog/testing-vue-js-applications/horse.jpg\"><br>還好上面的事情沒有發生，它只是略過了兩個類似的測試而已，如果它能順便附上<code>item.score</code>、<code>item.by</code>，就是所謂的<code>其他兩個測試</code>，我會覺得好一些，這兩個測試與先前的大同小異，測試只要判斷有抓到一樣的文字就好，在 production code 那邊要考量到顯示的結果，所以要再另外編排一下畫面。</p>\n<p>接著透過範例來介紹如何取得元件內的元素、測試標籤的文字內容以及屬性，在這邊有一個重點是避免透過 boolean 來做斷言，因為出錯了你看訊息也無法明確的知道為什麼失敗，我們在撰寫單元測試的時候很重要的是，當它失敗的時候我們能夠確切的知道為何失敗，若是回應 boolean，這應該很難達到</p>\n<p>接著我們希望能夠測試被渲染出來的子組件數量有多少個，在這邊的情境是 <code>ItemList</code> Component 有沒有正確的 render 出來對應數量的 <code>Item</code> Component；用這個案例來帶出 <code>mount</code> 與 <code>shallowMount</code> 的差異，這邊照著書裡面的流程一步步做就可以了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; shallowMount &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@vue/test-utils&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ItemList</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../ItemList.vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Item</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../components/Item.vue&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;ItemList.vue&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">test</span>(<span class=\"string\">&#x27;renders an Item for each item in windows.items&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">window</span>.<span class=\"property\">items</span> = [&#123;&#125;, &#123;&#125;, &#123;&#125;];</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">shallowMount</span>(<span class=\"title class_\">ItemList</span>);</span><br><span class=\"line\">\t\t<span class=\"title function_\">expect</span>(wrapper.<span class=\"title function_\">findAll</span>(<span class=\"title class_\">Item</span>)).<span class=\"title function_\">toHaveLength</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">items</span>.<span class=\"property\">length</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>書裡面教到的<code>findAll</code>方法，在新版的測試工具提示為過時，要改用<code>findAllComponents</code></p>\n</blockquote>\n<p>最後一個步驟是用進度條 component 來帶出測試樣式的方法，這邊書裡面有提到因為樣式的部分對網站顯示蠻重要的，所以可以先透過切換章節的 branch 去看看各個 SFC 的樣式</p>\n<h2 id=\"第-4-章-測試組件方法\"><a href=\"#第-4-章-測試組件方法\" class=\"headerlink\" title=\"第 4 章 測試組件方法\"></a>第 4 章 測試組件方法</h2><h3 id=\"測試公共組件、私有組件方法\"><a href=\"#測試公共組件、私有組件方法\" class=\"headerlink\" title=\"測試公共組件、私有組件方法\"></a>測試公共組件、私有組件方法</h3><p>這裡有提到<strong>私有方法是實現細節的，因此不用直接為他們編寫測試</strong>，我也因此聯想到自己的經驗，通常我們測試的都是邏輯，而非實作細節，所以還蠻贊同的。</p>\n<p>以上一章節的進度條作範例，提供方法給外部呼叫，並說明測試的條件，作為入門我覺得挺好，因為夠簡單也沒有依賴其他東西，但如果你依照書裡面的作法，還是錯誤的，我不確定是否是因為依賴套件版本的關係，但是牽涉到變更 component 狀態，可能還要考慮到 DOM 是否有 re-render，查詢了之後，解決方案是<code>await Vue.nextTick()</code>，所以在之後的測試程式中，需要先等候 re-render 的情況，就需要先加上<code>await Vue.nextTick()</code>之後才去斷言</p>\n<p>因此第一個範例應為</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&#x27;displays the bar when start is called&#x27;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">shallowMount</span>(<span class=\"title class_\">ProgressBar</span>);</span><br><span class=\"line\">\t<span class=\"title function_\">expect</span>(wrapper.<span class=\"title function_\">classes</span>()).<span class=\"title function_\">toContain</span>(<span class=\"string\">&#x27;hidden&#x27;</span>);</span><br><span class=\"line\">\twrapper.<span class=\"property\">vm</span>.<span class=\"title function_\">start</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> <span class=\"title class_\">Vue</span>.<span class=\"title function_\">nextTick</span>();</span><br><span class=\"line\">\t<span class=\"title function_\">expect</span>(wrapper.<span class=\"title function_\">classes</span>()).<span class=\"property\">not</span>.<span class=\"title function_\">toContain</span>(<span class=\"string\">&#x27;hidden&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"測試使用定時器功能的代碼\"><a href=\"#測試使用定時器功能的代碼\" class=\"headerlink\" title=\"測試使用定時器功能的代碼\"></a>測試使用定時器功能的代碼</h3><p>正如書中所說的，js 裡面要去測試有<code>setTimeout</code>這種東西無疑是很拖累單元測試速度的一件事情，所以這邊提出的解決方案是，使用自己的函式去替換掉原生的<code>setTimeout</code>，書裡面稱之為<code>模擬函數</code>，而在我們所使用的測試框架裡面，也有提供了這樣方便的工具來讓我們模擬定時器的功能 <code>jest.userFakeTimers()</code>；這邊書裡面的註解就很清楚，在測試之前，我們透過<code>jest</code>提供的假計時器功能取代掉實際上真正的計時器，然後在我們的測試程式裡面，我們要告訴<code>jest</code>的計時器功能，時間再往前推進多少，很好理解，但實際操作後，還是要加上<code>await Vue.nextTick()</code>才能順利測試成功。</p>\n<p>我的理解是在需要斷言的地方，先等待<code>Component</code> re-render 完畢，才去斷言，因此都是加在<code>expect</code>前面，但加到現在為止我已經加了很多次，我都懷疑是不是我打開範例的姿勢錯誤了，所以才需要加這些東西，還是真的如我所說的，因為我用的套件版本比較新，跟書上不一樣….第一次寫心得寫的這麼心虛的。</p>\n<p>整個計時器的範例是這樣的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ProgressBar.spec.js</span></span><br><span class=\"line\"><span class=\"title function_\">beforeEach</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\tjest.<span class=\"title function_\">useFakeTimers</span>();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&#x27;increases width by 1% every 100ms after start call&#x27;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">shallowMount</span>(<span class=\"title class_\">ProgressBar</span>);</span><br><span class=\"line\">\twrapper.<span class=\"property\">vm</span>.<span class=\"title function_\">start</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\tjest.<span class=\"title function_\">runTimersToTime</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> <span class=\"title class_\">Vue</span>.<span class=\"title function_\">nextTick</span>();</span><br><span class=\"line\">\t<span class=\"title function_\">expect</span>(wrapper.<span class=\"property\">element</span>.<span class=\"property\">style</span>.<span class=\"property\">width</span>).<span class=\"title function_\">toBe</span>(<span class=\"string\">&#x27;1%&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tjest.<span class=\"title function_\">runTimersToTime</span>(<span class=\"number\">900</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> <span class=\"title class_\">Vue</span>.<span class=\"title function_\">nextTick</span>();</span><br><span class=\"line\">\t<span class=\"title function_\">expect</span>(wrapper.<span class=\"property\">element</span>.<span class=\"property\">style</span>.<span class=\"property\">width</span>).<span class=\"title function_\">toBe</span>(<span class=\"string\">&#x27;10%&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tjest.<span class=\"title function_\">runTimersToTime</span>(<span class=\"number\">4000</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> <span class=\"title class_\">Vue</span>.<span class=\"title function_\">nextTick</span>();</span><br><span class=\"line\">\t<span class=\"title function_\">expect</span>(wrapper.<span class=\"property\">element</span>.<span class=\"property\">style</span>.<span class=\"property\">width</span>).<span class=\"title function_\">toBe</span>(<span class=\"string\">&#x27;50%&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>而透過這個例子，順勢帶出來第二個測試案例，因為結束的時候要清除計時器(clearInterval)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">finish</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">hidden</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">percent</span> = <span class=\"number\">100</span></span><br><span class=\"line\">  <span class=\"built_in\">clearInterval</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">timer</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以依照測試情境，透過<code>jest</code>提供的<code>spyOn</code>讓他監視 window 的<code>clearInterval</code>方法，接著模擬 setInterval 的返回值，最後斷言該方法有沒有被我們指定的值呼叫</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&#x27;clears timer when finish is called&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\tjest.<span class=\"title function_\">spyOn</span>(<span class=\"variable language_\">window</span>, <span class=\"string\">&#x27;clearInterval&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">setInterval</span>.<span class=\"title function_\">mockReturnValue</span>(<span class=\"number\">123</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">shallowMount</span>(<span class=\"title class_\">ProgressBar</span>);</span><br><span class=\"line\">\twrapper.<span class=\"property\">vm</span>.<span class=\"title function_\">start</span>();</span><br><span class=\"line\">\twrapper.<span class=\"property\">vm</span>.<span class=\"title function_\">finish</span>();</span><br><span class=\"line\">\t<span class=\"title function_\">expect</span>(<span class=\"variable language_\">window</span>.<span class=\"property\">clearInterval</span>).<span class=\"title function_\">toHaveBeenCalledWith</span>(<span class=\"number\">123</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-mock-測試代碼\"><a href=\"#使用-mock-測試代碼\" class=\"headerlink\" title=\"使用 mock 測試代碼\"></a>使用 mock 測試代碼</h3><p>這裡的解釋有點難懂，但看圖卻很好理解，在實際應用透過 Vue Instance 去載入 <code>ItemList</code>這個 Component，此時因為先前有將<code>ProgressBar</code>注入到 Vue Instance 裡面，因此<code>ItemList</code>可以調用$bar屬性，呼叫到進度條，但是在單元測試只有載入ItemList，因此若調用不存在的$bar 屬性，就會產生錯誤，大概就是這個意思，所以我們這邊會利用到<code>mock</code>的方式來解決這個問題，一樣透過<code>jest</code>提供的 mock 函數。情境是當<code>ItemList</code>元件被載入的時候，希望他會去呼叫進度條的<code>start</code>方法，所以為此撰寫的測試是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&#x27;calls $bar start on load&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> $bar = &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">start</span>: jest.<span class=\"title function_\">fn</span>(),</span><br><span class=\"line\">\t\t<span class=\"attr\">finish</span>: <span class=\"function\">() =&gt;</span> &#123;&#125;,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"title function_\">shallowMount</span>(<span class=\"title class_\">ItemList</span>, &#123; <span class=\"attr\">mocks</span>: &#123; $bar &#125; &#125;);</span><br><span class=\"line\">\t<span class=\"title function_\">expect</span>($bar.<span class=\"property\">start</span>).<span class=\"title function_\">toHaveBeenCalledTimes</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>但是這樣又會讓先前一個測試失敗，要解決這個問題之前，<a href=\"#%E6%A8%A1%E6%93%AC%E6%A8%A1%E5%A1%8A%E4%BE%9D%E8%B3%B4%E9%97%9C%E4%BF%82\">模擬模塊依賴關係</a>了解一下</p>\n<h3 id=\"模擬模塊依賴關係\"><a href=\"#模擬模塊依賴關係\" class=\"headerlink\" title=\"模擬模塊依賴關係\"></a>模擬模塊依賴關係</h3><p>若要模擬 api.js 的<code>fetchData</code>方法，我們就要先建立一個 mock 的文件，讓 jest 知道他實際上真正應該要解析的 mock 文件，而非被請求的文件，mock 文件內我們只需要包含測試會用到的函數就好，如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/api/__mocks__/api.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fetchListData = jest.<span class=\"title function_\">fn</span>(<span class=\"function\">() =&gt;</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>([]));</span><br></pre></td></tr></table></figure>\n\n<p>關於 mock 的部分可以在看一下<a href=\"https://jestjs.io/docs/en/manual-mocks\">官方文件</a>說明，會比較詳細；接下來範例就直接看 Code，重點是要先看一下他<code>ItemList</code>元件，掛載之後要做的事情，其實也就是載入的時候先呼叫進度條<code>start</code>，然後打 API 要資料，結束之後呼叫<code>finish</code>，在這邊就透過<code>jest.mock()</code>模擬<code>api.js</code>，因為又有用到<code>flush-promises</code>，所以也要先安裝一下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save-dev flush-promises</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 讓jest模擬api.js</span></span><br><span class=\"line\">jest.<span class=\"title function_\">mock</span>(<span class=\"string\">&#x27;../../api/api.js&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">test</span>(<span class=\"string\">&#x27;renders an Item with data for each item in window.items&#x27;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 預期會有四次斷言，包含預期會有三筆資料一次斷言，以及迴圈的三次斷言</span></span><br><span class=\"line\">\texpect.<span class=\"title function_\">assertions</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 先前提到過的，透過jest.mocks注入其他的Instance，這邊也是直接建立一個假物件並透過jest框架提供的mocks注入進去</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> $bar = &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">start</span>: <span class=\"function\">() =&gt;</span> &#123;&#125;,</span><br><span class=\"line\">\t\t<span class=\"attr\">finish</span>: <span class=\"function\">() =&gt;</span> &#123;&#125;,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">// 讓mock的api.js方法可以取得假資料來做測試</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> items = [&#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span> &#125;, &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span> &#125;, &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span> &#125;];</span><br><span class=\"line\">\t<span class=\"comment\">// Component的mount事件就會呼叫這個方法取得資料回來顯示，所以這裡模擬它的回傳結果</span></span><br><span class=\"line\">\tfetchListData.<span class=\"title function_\">mockImplementationOnce</span>(<span class=\"function\">() =&gt;</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(items));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 渲染待測元件</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">shallowMount</span>(<span class=\"title class_\">ItemList</span>, &#123; <span class=\"attr\">mocks</span>: &#123; $bar &#125; &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 等候所有的promise callback都執行過才會往下走</span></span><br><span class=\"line\">\t<span class=\"keyword\">await</span> <span class=\"title function_\">flushPromises</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 測試資料筆數</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"title class_\">Items</span> = wrapper.<span class=\"title function_\">findAllComponents</span>(<span class=\"title class_\">Item</span>);</span><br><span class=\"line\">\t<span class=\"title function_\">expect</span>(<span class=\"title class_\">Items</span>).<span class=\"title function_\">toHaveLength</span>(items.<span class=\"property\">length</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 測試每筆資料是否相等</span></span><br><span class=\"line\">\t<span class=\"title class_\">Items</span>.<span class=\"property\">wrappers</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">wrapper, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">expect</span>(wrapper.<span class=\"property\">vm</span>.<span class=\"property\">item</span>).<span class=\"title function_\">toBe</span>(items[i]);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>這邊要提一下，如果你跟我一樣都寫過 C#的測試，可能會覺得奇怪為什麼測試程式中，明明就用到了 fetchData，但是測試程式卻不用去模擬呢？C#寫測試的時候我都還要用 NSub 在每一個測試中去 mock 有用到的 function，並指定回傳結果呢…因為一開始，我們有先把 mock 的東西寫在<code>src/api/__mocks__/api.js</code>，而且在測試文件開頭有<code>jest.mock(&#39;../../api/api.js&#39;)</code>，這兩個搭配在一起，所以<code>jest</code>會知道 fetchData 被模擬了</p>\n<p>在後面的部分要測試 fetchData 發生例外錯誤的部分，也可以透過<code>fetchListData.mockRejectedValueOnce()</code>來模擬，當然也可以直接用<code>fetchListData.mockImplementationOnce(() =&gt; Promise.reject())</code>，我個人是比較喜歡前者</p>\n<p>在這章節最後，語重心長地再次提醒，適度的使用<code>mock</code>這個技巧，因為濫用它會有一些問題，我自己的心得是如果你模擬了越多的東西，就代表這個測試越脆弱，測試成功的條件必須建立在很多假設的前提，自然這個測試就不會有太大的信心，而書中建議，應該要 mock 的應該是</p>\n<ol>\n<li>Http 調用</li>\n<li>連接數據庫</li>\n<li>使用文件系統</li>\n</ol>\n<p>因為單元測試不應該包含這些外部依賴，因為</p>\n<ol>\n<li>速度會被這些外部依賴拖累</li>\n<li>當測試失敗的時候你不會知道是測試失敗還是外部依賴失敗，應該一次只測一件事情</li>\n</ol>\n<p>我也喜歡這書編排，在章節的最後會 Recap 重點學到什麼，這可以讓我重新 focus 一下，我對這些重點項目有沒有記憶，而且他還有出練習題，感覺好像教科書，又回到學校上課的感覺，也是個不錯的方法，透過練習題目來檢視自己有沒有學到</p>\n<h2 id=\"第-5-章-測試事件\"><a href=\"#第-5-章-測試事件\" class=\"headerlink\" title=\"第 5 章 測試事件\"></a>第 5 章 測試事件</h2><p>測試事件的範例改用別的 repository：<a href=\"https://github.com/eddyerburgh/vue-email-signup-form-app\">testing-events-in-vue-components</a>，入手新專案後一樣<code>npm install</code>走起來先。然後透過<code>npm run serve</code>看看網站</p>\n<h3 id=\"測試原生-DOM-事件、測試自定義事件\"><a href=\"#測試原生-DOM-事件、測試自定義事件\" class=\"headerlink\" title=\"測試原生 DOM 事件、測試自定義事件\"></a>測試原生 DOM 事件、測試自定義事件</h3><p>這兩小節相對前面的章節來講我覺得比較簡單，測試自定義事件其實就是<code>emit</code>，只要了解了 emit 是甚麼，其實看這章節很輕鬆；就算不是很懂，透過一開始的原生 DOM 事件測試，改寫成 Vue 的自定義事件，也比較容易理解，如果想練習的話就把 repository 切到比較早的 commit，如果只想看結果測試看看，那就直接用最後的 commit</p>\n<h3 id=\"測試輸入表單\"><a href=\"#測試輸入表單\" class=\"headerlink\" title=\"測試輸入表單\"></a>測試輸入表單</h3><p>這章節可以細細研讀一下，解釋了一下如何用純 js 操作 Dom 的值，接著在 vue-test-utils 該如何做，又因為 v-model 的關係，最終解決方案是採用官方測試工具的<code>setValue()</code>來設置表單的值。然後是測試送出去給 API 的資料是否跟表單一致，這邊有個 key point 是<code>expect.objectContaining(&#123; email: &#39;email@gmail.com&#125;)</code>這樣的用法，它可以用 match 的方式去斷言，而不是完全比對，未來表單擴充之後，測試也比較不容易壞掉</p>\n<p>而<code>radio button</code>的測試比較不同的是，需要透過直接指定<code>checked</code>屬性的方式來做，先前的<code>setValue()</code>並不適用，可參考下列範例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// js的寫法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> wrapper = <span class=\"title function_\">shallowMount</span>(<span class=\"title class_\">Form</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> radioInput = wrapper.<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;input[&quot;radio&quot;]&#x27;</span>);</span><br><span class=\"line\">radioInput.<span class=\"property\">element</span>.<span class=\"property\">checked</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 工具提供的方法</span></span><br><span class=\"line\">wrapper.<span class=\"title function_\">find</span>(<span class=\"string\">&#x27;input[type=&quot;radio&quot;]&#x27;</span>).<span class=\"title function_\">setChecked</span>();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"了解-jsdom-的侷限\"><a href=\"#了解-jsdom-的侷限\" class=\"headerlink\" title=\"了解 jsdom 的侷限\"></a>了解 jsdom 的侷限</h3><p>這一塊就是說明一下 jsdom 有那些東西不能做；也就是關於畫面上的布局，以及轉導頁面的部分，就大概看過有個印象就行了，等到需要用的時候再回來翻也可以</p>\n<h2 id=\"第-6-章-了解-Vuex\"><a href=\"#第-6-章-了解-Vuex\" class=\"headerlink\" title=\"第 6 章 了解 Vuex\"></a>第 6 章 了解 Vuex</h2><p>這一章在解釋 vuex 是甚麼東西，他用的例子還蠻生動的，後面也針對 store 的各項功能逐一解說，但我認為最好還是搭配官方的 vuex 文件來看，這邊就沒甚麼特別要說的，已經熟悉 vuex 的人可以直接略過本章節</p>\n<h2 id=\"第-7-章-測試-Vuex\"><a href=\"#第-7-章-測試-Vuex\" class=\"headerlink\" title=\"第 7 章 測試 Vuex\"></a>第 7 章 測試 Vuex</h2><p>在具備了<code>vuex</code>的基礎知識之後，回到<code>hacker news</code>這個範例專案，從高一點的層面來看一下元件與資料流的關係，書裡面將這個解釋得很清楚，尤其那個流程圖畫的還真是不錯；大概就是從元件被建立之後，一開始需要打後端 API 要資料，接著拿到資料後的一些動作。</p>\n<p><img src=\"/artblog/testing-vue-js-applications/07fig01_alt.jpg\"></p>\n<blockquote>\n<p>圖片來源：<a href=\"https://livebook.manning.com/book/testing-vue-js-applications/chapter-7/20\">https://livebook.manning.com/book/testing-vue-js-applications/chapter-7/20</a></p>\n</blockquote>\n<p>在實際寫程式實現這些事情之前，第一步當然還是要先建立 store 的 instance，並注入給 vue instance 使用，所以套件還是要先裝起來 <code>npm install vuex --save</code>，接著有兩種方式來測試，一種是針對 store 裡面拆分出來的各個東西測試，這種測試方式足夠簡單，很容易就能上手，而且測試失敗的資訊也能夠很明確，如果對於書裡面的說明不夠容易理解，你可以直接看測試程式與 production code，會比較清楚；但是這也有一個難以忽視的缺點，當需要為非同步撰寫測試的時候，會需要 mock 一堆東西</p>\n<p>另外一種方式是直接測試整個 vuex store instance，這可以用很直覺的方式，就像我們在 production code 使用<code>vuex</code>的方式一樣，但是這也有缺點，那就是物件參考的問題，以及基礎 Vue 構造函數污染的問題。這兩種問題書裡面都有解釋得很清楚，對於前者，如果有傳值、傳址的概念很容易就能搞懂，解決方式也很簡單，使用物件之前你自己先深層複製一個出來用就可以了，此處用的是<code>lodash</code>的功能，所以也需要先安裝套件<code>npm install --save-dev lodash.clonedeep</code>；對於後者若難以理解，也可以參考他解釋的圖，那個圖很明確地指出基礎函數被汙染的過程，解決方案是透過官方測試框架的<code>localVue</code>構造函數，養成習慣，大概都是用這樣的起手式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createLocalVue, shallowMount &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@vue/test-utils&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> lovalVue = <span class=\"title function_\">createLocalVue</span>();</span><br><span class=\"line\">localVue.<span class=\"title function_\">use</span>(<span class=\"title class_\">Vuex</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">shallowMount</span>(<span class=\"title class_\">TestComponent</span>, &#123; localVue &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>所以對於這個抓資料的測試，完整的測試程式如下，我會在旁邊寫上我理解的註解</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vuex</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createLocalVue &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@vue/test-utils&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cloneDeep <span class=\"keyword\">from</span> <span class=\"string\">&#x27;lodash.clonedeep&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> flushPromises <span class=\"keyword\">from</span> <span class=\"string\">&#x27;flush-promises&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> storeConfig <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../store-config&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; fetchListData &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../api/api&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 告訴 jest 框架我們要 mock 這個 api，當然在先前的章節，我們已經將模擬的api寫在src/api/__mocks__/api.js裡面了</span></span><br><span class=\"line\">jest.<span class=\"title function_\">mock</span>(<span class=\"string\">&#x27;../../api/api&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 為了避免構造函數污染的問題，採用官方測試工具提供的 createLocalVue 替代 Vue</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> localVue = <span class=\"title function_\">createLocalVue</span>();</span><br><span class=\"line\">localVue.<span class=\"title function_\">use</span>(<span class=\"title class_\">Vuex</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 做假資料，模擬後端回應結果</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createItems</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> arr = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">22</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> arr.<span class=\"title function_\">fill</span>().<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item, i</span>) =&gt;</span> (&#123; <span class=\"attr\">id</span>: <span class=\"string\">`a<span class=\"subst\">$&#123;i&#125;</span>`</span>, <span class=\"attr\">name</span>: <span class=\"string\">&#x27;item&#x27;</span> &#125;));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">describe</span>(<span class=\"string\">&#x27;store-config&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">test</span>(<span class=\"string\">&#x27;calling fetchListData with the type returns top 20 displayItems from displayItems getter&#x27;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 3A rule:arrange</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 預期會有一次 assertion</span></span><br><span class=\"line\">\t\texpect.<span class=\"title function_\">assertions</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> items = <span class=\"title function_\">createItems</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 為了避免汙染到其他測試也用到了相同的store設定，在這邊先複製一份出來給這個測試案例使用</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> clonedStoreConfig = <span class=\"title function_\">cloneDeep</span>(storeConfig);</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(clonedStoreConfig);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 設定模擬打後端API後回傳的結果</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> type = <span class=\"string\">&#x27;top&#x27;</span>;</span><br><span class=\"line\">\t\tfetchListData.<span class=\"title function_\">mockImplementation</span>(<span class=\"function\">(<span class=\"params\">calledType</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> calledType === type ? <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(items) : <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 3A rule:act</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 實際要測試的行為</span></span><br><span class=\"line\">\t\tstore.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&#x27;fetchListData&#x27;</span>, &#123; type &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 等候測試中的promise都結束了才往下走</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">await</span> <span class=\"title function_\">flushPromises</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 3A rule:assert</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 預期store的getters的資料等於測試資料的前20筆</span></span><br><span class=\"line\">\t\t<span class=\"title function_\">expect</span>(store.<span class=\"property\">getters</span>.<span class=\"property\">displayItems</span>).<span class=\"title function_\">toEqual</span>(items.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, <span class=\"number\">20</span>));</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>上面說的都只是單獨測試 store，但如果要測試的是 component 裡面的 store 呢？書籍這邊也用實際的範例來做 demo，就是先前我們為了<code>itemList.vue</code>做的測試，還記得當時我們的資料來源是 window.items，現在改寫成 vuex 版本，相對應的我們也要來將這個測試，改寫成使用 vuex 的版本</p>\n<p>在這邊利用 jest hooks 在每個測試開始之前，建立一個新的 store 給測試使用，跟著書裡面的教學一步步先建立好測試，這些細節先前都學過，然後測試紅燈，去調整元件的內容，綠燈後重構，刪除無效代碼，完成一個 TDD 的小循環</p>\n<h2 id=\"第-8-章-使用工廠函數組織測試\"><a href=\"#第-8-章-使用工廠函數組織測試\" class=\"headerlink\" title=\"第 8 章 使用工廠函數組織測試\"></a>第 8 章 使用工廠函數組織測試</h2><p>這一章其實就是用<code>factory</code>來將一些我們常常重複的動作包裝起來，我自己覺得其實是沒有什麼必要特別說明，但想一想似乎也有道理。因為我覺得這屬於重構的部分，而重構是無時無刻都會在做的事情，不管你是用 TDD 開發，或者是平常接到需求在做，又或者是直接優化系統，當你的程式碼重複第三次了，就應該要重構他，這邊只是透過<code>factory</code>來做這件事情而已。</p>\n<p>當然對我自己而言，我喜歡用這樣的方式除了 reuse 的原因之外，更重要的一點是我可以更輕鬆的在測試程式中表現我的意圖</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createStore</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> defaultStoreConfig = &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">displayItems</span>: jest.<span class=\"title function_\">fn</span>(),</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">fetchListData</span>: jest.<span class=\"title function_\">fn</span>(<span class=\"function\">() =&gt;</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>()),</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(defaultStoreConfig);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>書裡面的範例如上，他包裝起來的部分都是實作的細節，對我而言其實可以忽略，我只要知道這些東西的意圖在<code>createStore</code>就可以了，至於更細節的應用及設計方式，這邊就直接留給書本介紹囉</p>\n<h2 id=\"第-9-章-了解-Vue-Router\"><a href=\"#第-9-章-了解-Vue-Router\" class=\"headerlink\" title=\"第 9 章 了解 Vue Router\"></a>第 9 章 了解 Vue Router</h2><p>略，因為工作上並不使用 Vue Router，後端都是直接用<code>asp.net mvc</code></p>\n<h2 id=\"第-10-章-測試-Vue-Router\"><a href=\"#第-10-章-測試-Vue-Router\" class=\"headerlink\" title=\"第 10 章 測試 Vue Router\"></a>第 10 章 測試 Vue Router</h2><p>略，因為工作上並不使用 Vue Router，後端都是直接用<code>asp.net mvc</code></p>\n<h2 id=\"第-11-章-測試-mixin-和過濾器\"><a href=\"#第-11-章-測試-mixin-和過濾器\" class=\"headerlink\" title=\"第 11 章 測試 mixin 和過濾器\"></a>第 11 章 測試 mixin 和過濾器</h2><p>mixin 在追蹤錯誤部分較困難，且在新版本中也會移除掉這個東西，所以這章節就屬於時代的眼淚了，直接棄坑吧</p>\n<h2 id=\"第-12-章-編寫快照測試\"><a href=\"#第-12-章-編寫快照測試\" class=\"headerlink\" title=\"第 12 章 編寫快照測試\"></a>第 12 章 編寫快照測試</h2><p>快照測試的部分我其實沒有 follow 照著做一遍，我只有閱讀而已，他其實就是比較元件的輸出，將他快照起來，等到你下一次執行的時候再去跟快照比較，如果輸出的 Html 不一樣，就會測試失敗；如果是想要更新快照的話，必須要在加上參數<code>--updateSnapshot</code>，這會讓<code>jest</code>重寫測試失敗的快照文件，但這樣有風險，建議還是透過<code>--watch</code>執行測試，然後透過互動的方式輸入指令列的回應，來更新快照會是比較安全的方式。</p>\n<h2 id=\"第-13-章-測試服務端渲染\"><a href=\"#第-13-章-測試服務端渲染\" class=\"headerlink\" title=\"第 13 章 測試服務端渲染\"></a>第 13 章 測試服務端渲染</h2><p>略，因為工作上並不使用 SSR，後端都是直接用<code>asp.net mvc</code></p>\n<h2 id=\"第-14-章-編寫端到端測試\"><a href=\"#第-14-章-編寫端到端測試\" class=\"headerlink\" title=\"第 14 章 編寫端到端測試\"></a>第 14 章 編寫端到端測試</h2><p>略，關於 e2e 測試的部分先前已經用過<code>testcafe</code>、<code>cypress</code>，這些都是不錯的解決方案，這章節用的是<code>nightwatch</code>，除了工具的不同以外，其他的都差不多</p>\n<h2 id=\"Recap\"><a href=\"#Recap\" class=\"headerlink\" title=\"Recap\"></a>Recap</h2><p>看完書之後，也照著做了一次，覺得大部分的東西我都能看懂，但真的闔上書之後，面對著自己實務上的 production code，看著那滿坑滿谷的 component，我還是抓瞎了。其實這個時候就發現，念書學到的東西都只是告訴你基本的技巧跟觀念，但是甚麼時候該怎麼下手開幹又是另外一門學問跟經驗；好比水電師傅的三用電表跟老虎鉗，都會用也知道拿來幹嘛的，但碰到冷氣壞掉開始叫你維修的時候，面板拆開之後整個呆掉</p>\n<p>打開書本直接翻開目錄，首先印入眼簾的就是每章節的標題，看到一些關鍵字，重新再畫一下重點</p>\n<p><strong>CH3：渲染組件輸出測試</strong>，完美地解釋了我目前的窘境，碰到後再回來看，的確字字珠璣；如果是從無到有的話，可以動手在草稿上畫出元件的草圖，大概長什麼樣子，然後針對這個東西去發想。依照我現在的情況來看，我手上有已經開發完成的元件，所以我應該可以直接跳到最後一個步驟，釐清該元件的職責為何？如何釐清，我想就參考書本內的範例吧；列表的元件，碰到的第一個問題肯定都是資料從哪裡來？接著呈現畫面的時候就要看看一頁幾筆？或是不分頁？</p>\n<p>諸如此類的東西都是這個元件應該要做到的事情，接著我才能用後面學到的實務技巧，去測試這些項目</p>\n<ol>\n<li>渲染文本測試：元件有沒有正確的渲染文字訊息？</li>\n<li>測試 DOM 屬性：像是動態產生出來的連結是否有正確的設定好 href 屬性？</li>\n<li>測試組件數量：像是列表會呈現 20 筆資料，那我應該如何測試有沒有真的渲染 20 筆？</li>\n<li>測試 Props：子組件是否有正確接收到父元件給予的資料？</li>\n<li>測試 class、style：對於樣式是否有需要測試？</li>\n</ol>\n<p>甚麼時候要測試渲染的 component 輸出？</p>\n<ol>\n<li>輸出是動態產生的</li>\n<li>輸出是 component 契約的一部分</li>\n</ol>\n","categories":["心得"],"tags":["vue"]},{"title":"SonarQube-Jenkins執行分析後取得報告並寄送通知信件","url":"/artblog//sonarqube-jenkins-pipeline-get-metrics-then-send-mail/","content":"<p>隔了很久我也忘記要怎麼在 CI 流程中取得 sonarQube 報告並寄送。要用 jenkins 套件也有點懶惰，記得 sonarQube 有提供 API 可以取得各項指標，自己動手做感覺也不難，於是就記錄一下。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"注意事項\"><a href=\"#注意事項\" class=\"headerlink\" title=\"注意事項\"></a>注意事項</h2><ol>\n<li>寄送信件透過 <a href=\"https://plugins.jenkins.io/emailext-template/\">email extension template</a></li>\n<li>解析 json 字串透過 <a href=\"https://plugins.jenkins.io/pipeline-utility-steps/\">pipeline utility steps</a></li>\n</ol>\n<blockquote>\n<p>如果套件有相依性問題記得先處理好，或是尋求其他解決方案</p>\n</blockquote>\n<h2 id=\"如何判定要不要通知\"><a href=\"#如何判定要不要通知\" class=\"headerlink\" title=\"如何判定要不要通知\"></a>如何判定要不要通知</h2><p>這邊我的想法是不需要取得很細節的東西，因為我們在 sonarqube 都有設定一個質量閥的東西，如果專案沒有通過我們設置的質量閥，表示有一些東西需要被關心，此時才需要去了解細節，除此之外，只要品質是夠的，也不需要收到通知信件</p>\n<p><img src=\"/artblog/sonarqube-jenkins-pipeline-get-metrics-then-send-mail/02.jpg\"><br>這個就是通過質量閥的顯示，介面上顯示的是很明顯的綠色表示通過</p>\n<p><img src=\"/artblog/sonarqube-jenkins-pipeline-get-metrics-then-send-mail/03.jpg\"><br>這就是沒有通過的顯示，採用顯眼的紅色並在底下列出了為什麼不 OK 的原因，從網頁上可看到是因為沒有滿足底下的兩個條件才導致質量閥檢查沒有通過，那就順便看看質量閥的設定</p>\n<p><img src=\"/artblog/sonarqube-jenkins-pipeline-get-metrics-then-send-mail/03-1.jpg\"><br>從這邊點一下專案資訊，找到質量閥設定，點一下看明細</p>\n<p><img src=\"/artblog/sonarqube-jenkins-pipeline-get-metrics-then-send-mail/03-2.jpg\"><br>從這裡可以看到細節，呼應先前紅色的質量閥顯示失敗的原因 (當然直接在網頁上點一下紅色質量閥底下的項目，也會直接在網頁上重新導頁到細節)</p>\n<p>也就是說，除非是專案分析結果的質量閥紅色了，否則我不需要收到通知信件，如果專案有些小毛病都需要通知，那就依照自己需求調整囉，也就是不依照質量閥，而是取得你想判斷的指標，自行在 CI 流程當中去實作判斷的邏輯，來決定是否要寄送 EMAIL 通知</p>\n<h2 id=\"sonarQube-提供的-API\"><a href=\"#sonarQube-提供的-API\" class=\"headerlink\" title=\"sonarQube 提供的 API\"></a>sonarQube 提供的 API</h2><p>其實主要也只有一個，那就是給他我們要看的指標 key 然後取得該指標的回應 JSON，CURL 範例如下<br><code>curl -u squ_302e77414cbcfd425a22bc0aebb67c7323e39c1e: -X GET &quot;http://localhost:9090/api/measures/component?component=projectKey&amp;metricKeys=alert_status,quality_gate_details&quot;</code><br><img src=\"/artblog/sonarqube-jenkins-pipeline-get-metrics-then-send-mail/04.jpg\"></p>\n<p>需要注意的是在身分認證的部分，我給予 CURL 指令的是我自己建立的一個 token , 如果要改用 postman 之類的軟體測試，記得要將該 token 進行 base64 編碼，當然專案的 key 也要自行設定喔，這邊我亂打的。</p>\n<ol>\n<li>component: 專案 key</li>\n<li>metricKeys: 指標</li>\n</ol>\n<p>但實際上到底有哪些指標可以用呢？官方有提供另外一個 API 可以查詢，有興趣的人可以去取得內容一個一個看，我是沒有那麼有耐心啦。<br><img src=\"/artblog/sonarqube-jenkins-pipeline-get-metrics-then-send-mail/04-1.jpg\"><br><img src=\"/artblog/sonarqube-jenkins-pipeline-get-metrics-then-send-mail/04-2.jpg\"></p>\n<p>所以我就遵循官方 <a href=\"https://docs.sonarqube.org/latest/user-guide/metric-definitions/\">metric definitions</a> 的部分，直接取得質量閥就好了<br><img src=\"/artblog/sonarqube-jenkins-pipeline-get-metrics-then-send-mail/05.jpg\"></p>\n<p>最終也就是上面的範例，抓的那兩個指標</p>\n<blockquote>\n<p>因為質量閥的回應結果他是給字串，要自己再把雙引號處理一下</p>\n</blockquote>\n<h2 id=\"如何在-jenkins-中取得指標內容，寄信\"><a href=\"#如何在-jenkins-中取得指標內容，寄信\" class=\"headerlink\" title=\"如何在 jenkins 中取得指標內容，寄信\"></a>如何在 jenkins 中取得指標內容，寄信</h2><p>也就是在 CI 的 groovy 裡面透過 CURL 呼叫 sonarQube API 取得資料後，解析 json 內容並組出我們要寫的信件內容，因為後面直接給了完整範例，此處直接講重點就好</p>\n<ol>\n<li>寫指令包在 script 區段內</li>\n<li>metrics 我還是另外抓了幾個網頁上會顯示的東西，像是壞味道，技術債時間，不想看也可以拿掉，就維持用質量閥(其實是第一版我是全部都寄信，後來才改的質量閥決定是否寄送，懶得改了)</li>\n<li>用 curl 的 sonarToken 可以直接明碼帶過去會通，不用自己再轉 base64，如果你用的是帳號密碼，就用 <code>-u user pass</code>這樣的格式，不過還是不建議啦，建立個 token 不費力也不要錢，你省這道工幹嘛？是吧</li>\n<li>這邊解析 json 採用的是土法煉鋼拿索引擷取 json，主因還是 response 內包含了原本送出的 CURL 指令，原因不糾結了，可能是 BAT 還是 CURL 的關係</li>\n<li>json 字串轉物件用的是 readJSON，這樣方便後面取 JSON 資料節點的值，語法請參考範例</li>\n<li>中間加了一個流程，如果回應的質量閥結果沒問題，我連寄信都不寄了，這邊用 script 包裝 if 語法，用雙等於判斷字串</li>\n<li>質量閥條件需要先處理雙引號，這邊採用<code>  def detailJson = qualityGateDetails.replace(&quot;\\\\\\&quot;&quot;, &quot;\\&quot;&quot;)</code> 簡單好用</li>\n<li>迴圈取得條件 KEY 與內容，並透過 stringbuilder 組字串，缺點就是他ＫＥＹ有些沒有很直覺，提供的也是ＯＫ不ＯＫ，細節還是要再去網站看，不過作為通知應該很夠了</li>\n</ol>\n<h2 id=\"避免暴露敏感資訊\"><a href=\"#避免暴露敏感資訊\" class=\"headerlink\" title=\"避免暴露敏感資訊\"></a>避免暴露敏感資訊</h2><p>之前的一個版本是直接用字串存放 token 並且用它來組指令，但感覺似乎可以再更安全一點，我不想在建置的時候還要用參數來處理 token，因此可以利用<code>withCredentials</code>來做這件事情</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">withCredentials([string(<span class=\"attr\">credentialsId:</span> <span class=\"string\">&#x27;sonarqube-metrics-key&#x27;</span>, <span class=\"attr\">variable:</span> <span class=\"string\">&#x27;TOKEN&#x27;</span>)]) &#123;</span><br><span class=\"line\">  curlCmd = <span class=\"string\">&quot;curl -u $&#123;TOKEN&#125;: -X GET \\&quot;$&#123;sonarUrl&#125;?component=$&#123;projectKey&#125;&amp;metricKeys=$&#123;metricKeys&#125;\\&quot;&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用上就直接透過<code>pipeline-syntax</code>這個輔助頁面，在這邊直接新增，範例如下<br><img src=\"/artblog/sonarqube-jenkins-pipeline-get-metrics-then-send-mail/09.jpg\"><br>選擇用 secret text，並且設定好 id 跟 desc，這兩個值用途可以看下面使用的時候，選擇下拉選單是吃 desc , 程式碼用的是 id<br><img src=\"/artblog/sonarqube-jenkins-pipeline-get-metrics-then-send-mail/10.jpg\"></p>\n<h2 id=\"完整範例\"><a href=\"#完整範例\" class=\"headerlink\" title=\"完整範例\"></a>完整範例</h2><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">  agent any</span><br><span class=\"line\"></span><br><span class=\"line\">  stages &#123;</span><br><span class=\"line\">    stage(<span class=\"string\">&#x27;Get SonarQube Metrics &amp; SendMail&#x27;</span>) &#123;</span><br><span class=\"line\">      steps &#123;</span><br><span class=\"line\">        script &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">def</span> sonarUrl = <span class=\"string\">&quot;http://localhost:9090/api/measures/component&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// https://docs.sonarqube.org/latest/user-guide/metric-definitions/</span></span><br><span class=\"line\">          <span class=\"keyword\">def</span> metricKeys = <span class=\"string\">&quot;new_code_smells,new_bugs,new_technical_debt,new_violations,alert_status,quality_gate_details&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">def</span> response = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">          <span class=\"keyword\">def</span> curlCmd = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">          withCredentials([string(<span class=\"attr\">credentialsId:</span> <span class=\"string\">&#x27;sonarqube-metrics-key&#x27;</span>, <span class=\"attr\">variable:</span> <span class=\"string\">&#x27;TOKEN&#x27;</span>)]) &#123;</span><br><span class=\"line\">            curlCmd = <span class=\"string\">&quot;curl -u $&#123;TOKEN&#125;: -X GET \\&quot;$&#123;sonarUrl&#125;?component=$&#123;projectKey&#125;&amp;metricKeys=$&#123;metricKeys&#125;\\&quot;&quot;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          response = bat(<span class=\"attr\">returnStdout:</span> <span class=\"literal\">true</span>, <span class=\"attr\">script:</span> curlCmd).trim()</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 找到 JSON 開始的索引</span></span><br><span class=\"line\">          <span class=\"keyword\">def</span> jsonStartIndex = response.indexOf(<span class=\"string\">&#x27;&#123;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">// 截取回應中的 JSON 部分</span></span><br><span class=\"line\">          <span class=\"keyword\">def</span> jsonResponse = response.substring(jsonStartIndex)</span><br><span class=\"line\">          <span class=\"keyword\">def</span> json = readJSON <span class=\"attr\">text:</span> jsonResponse</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">          echo <span class=\"string\">&quot;SonarQube Metrics jsonResponse:&quot;</span></span><br><span class=\"line\">          echo jsonResponse</span><br><span class=\"line\"></span><br><span class=\"line\">          echo <span class=\"string\">&quot;SonarQube Metrics:&quot;</span></span><br><span class=\"line\">          <span class=\"keyword\">def</span> newBugsValue = json.component.measures.find &#123; it.metric == <span class=\"string\">&#x27;new_bugs&#x27;</span> &#125;?.periods[<span class=\"number\">0</span>]?.value</span><br><span class=\"line\">          echo <span class=\"string\">&quot;New Bugs(新錯誤問題的數量): $&#123;newBugsValue&#125;&quot;</span></span><br><span class=\"line\">          def newViolationsValue = json.component.measures.find &#123; it.metric == <span class=\"string\">&#x27;new_violations&#x27;</span> &#125;?.periods[<span class=\"number\">0</span>]?.value</span><br><span class=\"line\">          echo <span class=\"string\">&quot;New Issues(首次針對新代碼提出的問題數量): $&#123;newViolationsValue&#125;&quot;</span></span><br><span class=\"line\">          def newTechnicalDebtValue = json.component.measures.find &#123; it.metric == <span class=\"string\">&#x27;new_technical_debt&#x27;</span> &#125;?.periods[<span class=\"number\">0</span>]?.value</span><br><span class=\"line\">          echo <span class=\"string\">&quot;New Technical Debt(修復新代碼上首次出現的所有代碼異味所需的工作量。): $&#123;newTechnicalDebtValue&#125; mins&quot;</span></span><br><span class=\"line\">          def newCodeSmellsValue = json.component.measures.find &#123; it.metric == <span class=\"string\">&#x27;new_code_smells&#x27;</span> &#125;?.periods[<span class=\"number\">0</span>]?.value</span><br><span class=\"line\">          echo <span class=\"string\">&quot;New Code Smells(新代碼異味問題的總數): $&#123;newCodeSmellsValue&#125;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">          def alertStatus = json.component.measures.find &#123; it.metric == <span class=\"string\">&#x27;alert_status&#x27;</span> &#125;?.value</span><br><span class=\"line\">          echo <span class=\"string\">&quot;Alert Status: $&#123;alertStatus&#125;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">          if (alertStatus == <span class=\"string\">&#x27;OK&#x27;</span>) &#123;</span><br><span class=\"line\">            echo <span class=\"string\">&#x27;SonarQube metrics are within acceptable limits. Task terminated.&#x27;</span></span><br><span class=\"line\">          &#125; else &#123;</span><br><span class=\"line\">            def qualityGateDetails = json.component.measures.find &#123; it.metric == <span class=\"string\">&#x27;quality_gate_details&#x27;</span> &#125;?.value</span><br><span class=\"line\">            def detailJson = qualityGateDetails.replace(<span class=\"string\">&quot;\\\\\\&quot;&quot;</span>, <span class=\"string\">&quot;\\&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            def sb = new StringBuilder()</span><br><span class=\"line\">            sb.append(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">            def detailObject = readJSON text: detailJson</span><br><span class=\"line\">            detailObject.conditions.each &#123; condition -&gt;</span><br><span class=\"line\">                def level = condition.level</span><br><span class=\"line\">                def currentMetric = condition.metric</span><br><span class=\"line\">                sb.append(<span class=\"string\">&quot;\\t$&#123;currentMetric&#125;: $&#123;level&#125;\\n&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 构建邮件内容</span></span><br><span class=\"line\">            def emailContent =</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;SonarQube Metrics:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Alert Status: $&#123;alertStatus&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Quality Gate Details:$&#123;sb.toString()&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Main Metrics:</span></span><br><span class=\"line\"><span class=\"string\">\\tNew Code Smells: $&#123;newCodeSmellsValue&#125;</span></span><br><span class=\"line\"><span class=\"string\">\\tNew Bugs: $&#123;newBugsValue&#125;</span></span><br><span class=\"line\"><span class=\"string\">\\tNew Technical Debt: $&#123;newTechnicalDebtValue&#125;</span></span><br><span class=\"line\"><span class=\"string\">\\tNew Violations: $&#123;newViolationsValue&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">See more information about metrics:https://docs.sonarqube.org/latest/user-guide/metric-definitions/</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 发送邮件</span></span><br><span class=\"line\">            emailext (</span><br><span class=\"line\">              subject: <span class=\"string\">&#x27;[$&#123;projectKey&#125;] SonarQube Metrics Report&#x27;</span>,</span><br><span class=\"line\">              body: emailContent,</span><br><span class=\"line\">              to: <span class=\"string\">&#x27;art.huang@local.jenkins&#x27;</span>,</span><br><span class=\"line\">              from: <span class=\"string\">&#x27;art@local.jenkins&#x27;</span></span><br><span class=\"line\">            )</span><br><span class=\"line\"></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"執行結果\"><a href=\"#執行結果\" class=\"headerlink\" title=\"執行結果\"></a>執行結果</h2><p>Jenkins 上執行的ＬＯＧ紀錄<br><img src=\"/artblog/sonarqube-jenkins-pipeline-get-metrics-then-send-mail/06.jpg\"><br><img src=\"/artblog/sonarqube-jenkins-pipeline-get-metrics-then-send-mail/07.jpg\"></p>\n<p>這裡可以看出，當分析結果沒有通過的話，才會寄送信件</p>\n<p><img src=\"/artblog/sonarqube-jenkins-pipeline-get-metrics-then-send-mail/08.jpg\"></p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>我實際上是將這一個任務作為下游任務，並接收專案 projectKey 與 token，這樣可以更方便的串接其他任務，只需要再別的上游任務最後面，加上一個觸發下游任務的步驟即可。有需要進行專案分析的，就先觸發專案分析，分析完成之後再觸發寄信通知，當然怎麼串接就看個人方便，重點也只是將參數傳遞給下游任務，之前有說過，不過為了方便這邊還是再次列出</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">stage(<span class=\"string\">&#x27;Check Should SendMail&#x27;</span>) &#123;</span><br><span class=\"line\">  steps &#123;</span><br><span class=\"line\">    script &#123;</span><br><span class=\"line\">      <span class=\"keyword\">def</span> shouldSendMail = params.shouldSendMail</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (shouldSendMail) &#123;</span><br><span class=\"line\">        echo <span class=\"string\">&quot;shouldSendMail is true. Trigger next job&quot;</span></span><br><span class=\"line\">        <span class=\"comment\">// 执行构建步骤</span></span><br><span class=\"line\">        build <span class=\"attr\">job:</span> <span class=\"string\">&#x27;Fetch-Metrics-Then-Send-Mail&#x27;</span>, <span class=\"attr\">wait:</span> <span class=\"literal\">false</span>, <span class=\"attr\">parameters:</span> [</span><br><span class=\"line\">          string(<span class=\"attr\">name:</span> <span class=\"string\">&#x27;projectKey&#x27;</span>, <span class=\"attr\">value:</span> projectKey),</span><br><span class=\"line\">          <span class=\"comment\">// 如果你已經有將 sonarToken 用 secret text 取代，此處應該可以再調整，甚至是不需傳遞 sonarToken , 在最後的任務中用之前的方式取得 token</span></span><br><span class=\"line\">          <span class=\"comment\">// string(name: &#x27;sonarToken&#x27;, value: sonarToken)</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        echo <span class=\"string\">&quot;shouldSendMail is false. Skipping the build step.&quot;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果你是要在建構任務分析後直接觸發，當然就直接將 projectKey , sonarToken 寫死於步驟內，不需要再用變數；如果是想要做一個共用的任務，就可以用參數來決定，而最一開始的建構任務，就可以將流程 flag 跟必要參數一層層傳遞</p>\n","categories":["devOps"],"tags":["sonarQube"]},{"title":"SonarQube-Jenkins執行分析後透過Teams通知","url":"/artblog//sonarqube-jenkins-pipeline-get-metrics-then-notify-via-teams/","content":"<p>其實這一篇應該跟上一篇寫在一起的，但是標題下得不夠好，所以想說分開寫也行。之所以會說應該寫在一起是因為等到要在正式環境弄得時候，因為種種因素所以我無法使用寄信的方式來通知。後來想到直接透過 teams 通知似乎更好一些</p>\n<span id=\"more\"></span>\n\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p><img src=\"/artblog/sonarqube-jenkins-pipeline-get-metrics-then-notify-via-teams/2.jpg\"></p>\n<p>目前我們就是要做通知的這個部分，也因此在這個任務中，為了可以支援其他不同專案的上游任務觸發，該任務的核心就是</p>\n<ol>\n<li>依據傳入的專案名稱，取得對應的指標</li>\n<li>組通知內容</li>\n<li>判斷若需要通知，依據傳入的 webhook 網址發送通知</li>\n</ol>\n<p>要完成這個任務，會需要準備好</p>\n<ol>\n<li>可以取得 sonarQube 分析結果的 token , 請到 sonarQube 那邊自行建立一個 user token</li>\n<li>要可以依據接到的資料來解析我們所需要的指標</li>\n<li>通知的手段可以是 EMAIL 也可以是別的甚麼方法，此處採用 teams 通知，安裝個 <a href=\"https://plugins.jenkins.io/Office-365-Connector/\">Office 365 Connector</a> 就可以在 pipeline 直接呼叫使用</li>\n</ol>\n<p>如果對於通知的樣式有要求，可以自行透過 http 的方式去 call teams 的 webhook，參考連結</p>\n<ol>\n<li><a href=\"https://learn.microsoft.com/en-us/outlook/actionable-messages/message-card-reference\">Legacy actionable message card reference</a></li>\n<li><a href=\"https://messagecardplayground.azurewebsites.net/\">MessageCard PlayGroundV2</a></li>\n</ol>\n<h2 id=\"設定傳入參數\"><a href=\"#設定傳入參數\" class=\"headerlink\" title=\"設定傳入參數\"></a>設定傳入參數</h2><p>為了讓任務可以被複用，傳入 webhook 及 projectKey 都用字串表示，記得自己在 jenkins 設定參數化建置，新增兩個字串參數來接</p>\n<h2 id=\"建立-sonarQube-user-token\"><a href=\"#建立-sonarQube-user-token\" class=\"headerlink\" title=\"建立 sonarQube user token\"></a>建立 sonarQube user token</h2><p>如果不知道從哪邊進入的話，直接到<code>&lt;YourSonarQubeHostUrl&gt;/account/security</code>可以開始新增<br><img src=\"/artblog/sonarqube-jenkins-pipeline-get-metrics-then-notify-via-teams/3.jpg\"></p>\n<h2 id=\"使用-JsonSlurper-解析-json\"><a href=\"#使用-JsonSlurper-解析-json\" class=\"headerlink\" title=\"使用 JsonSlurper 解析 json\"></a>使用 JsonSlurper 解析 json</h2><p>延續上一篇的內容，我們現在已經可以透過 curl 的方式呼叫 sonarQube 的 api 取得我們所關心的指標，並且也能將他轉成 json 物件並解析取得內容</p>\n<p>這邊附上一個轉換的範例，避免無法安裝使用外掛來解析</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> groovy.json.JsonSlurper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> jsonResponse = <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">&#123;&quot;level&quot;:&quot;ERROR&quot;,&quot;conditions&quot;:[&#123;&quot;metric&quot;:&quot;new_reliability_rating&quot;,&quot;op&quot;:&quot;GT&quot;,&quot;period&quot;:1,&quot;error&quot;:&quot;1&quot;,&quot;actual&quot;:&quot;3&quot;,&quot;level&quot;:&quot;ERROR&quot;&#125;,&#123;&quot;metric&quot;:&quot;new_security_rating&quot;,&quot;op&quot;:&quot;GT&quot;,&quot;period&quot;:1,&quot;error&quot;:&quot;1&quot;,&quot;actual&quot;:&quot;1&quot;,&quot;level&quot;:&quot;OK&quot;&#125;,&#123;&quot;metric&quot;:&quot;new_maintainability_rating&quot;,&quot;op&quot;:&quot;GT&quot;,&quot;period&quot;:1,&quot;error&quot;:&quot;1&quot;,&quot;actual&quot;:&quot;1&quot;,&quot;level&quot;:&quot;OK&quot;&#125;,&#123;&quot;metric&quot;:&quot;new_coverage&quot;,&quot;op&quot;:&quot;LT&quot;,&quot;period&quot;:1,&quot;error&quot;:&quot;80&quot;,&quot;actual&quot;:&quot;0.0&quot;,&quot;level&quot;:&quot;ERROR&quot;&#125;,&#123;&quot;metric&quot;:&quot;new_duplicated_lines_density&quot;,&quot;op&quot;:&quot;GT&quot;,&quot;period&quot;:1,&quot;error&quot;:&quot;3&quot;,&quot;actual&quot;:&quot;0.8520790729379687&quot;,&quot;level&quot;:&quot;OK&quot;&#125;,&#123;&quot;metric&quot;:&quot;new_security_hotspots_reviewed&quot;,&quot;op&quot;:&quot;LT&quot;,&quot;period&quot;:1,&quot;error&quot;:&quot;100&quot;,&quot;actual&quot;:&quot;100.0&quot;,&quot;level&quot;:&quot;OK&quot;&#125;],&quot;ignoredConditions&quot;:false&#125;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> detailObject = <span class=\"keyword\">new</span> JsonSlurper().parseText(jsonResponse)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> sb = <span class=\"keyword\">new</span> StringBuilder()</span><br><span class=\"line\">sb.append(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">detailObject.conditions.each &#123; condition -&gt;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> level = condition.level</span><br><span class=\"line\">    <span class=\"keyword\">def</span> currentMetric = condition.metric</span><br><span class=\"line\">    println <span class=\"string\">&quot;\\t$&#123;currentMetric&#125;: $&#123;level&#125;\\n&quot;</span></span><br><span class=\"line\">    sb.append(<span class=\"string\">&quot;\\t$&#123;currentMetric&#125;: $&#123;level&#125;\\n&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">echo <span class=\"string\">&quot;Quality Gate Details:$&#123;sb.toString()&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>執行完的結果<br><img src=\"/artblog/sonarqube-jenkins-pipeline-get-metrics-then-notify-via-teams/1.jpg\"></p>\n<h2 id=\"使用-teams-通知\"><a href=\"#使用-teams-通知\" class=\"headerlink\" title=\"使用 teams 通知\"></a>使用 teams 通知</h2><p>通知訊息內容這個看個人，想看範例的前一篇文章也有，那這個 webhook 網址怎麼建立，其實也很簡單</p>\n<p>首先在團隊這邊新增一個頻道<br><img src=\"/artblog/sonarqube-jenkins-pipeline-get-metrics-then-notify-via-teams/4.jpg\"><br><img src=\"/artblog/sonarqube-jenkins-pipeline-get-metrics-then-notify-via-teams/4-1.jpg\"></p>\n<p>然後在剛剛新增出來的頻道上面選擇連接器<br><img src=\"/artblog/sonarqube-jenkins-pipeline-get-metrics-then-notify-via-teams/4-2.jpg\"></p>\n<p>會看到很多可以用的工具，於此處我們採用的是 <code>傳入 Webhook</code>，英文可能是什麼 Incoming Webhook 吧<br><img src=\"/artblog/sonarqube-jenkins-pipeline-get-metrics-then-notify-via-teams/4-3.jpg\"></p>\n<p>接著進入設定畫面，這邊的名稱就是之後通知出來的時候，顯示的名稱；如果對頭像沒要求，就用預設的也行，不過你也可以去找個 SonarQube 的 LOGO 來上傳<br><img src=\"/artblog/sonarqube-jenkins-pipeline-get-metrics-then-notify-via-teams/4-4.jpg\"></p>\n<p>建立成功後就會出現 webhook URL 將他複製下來記好<br><img src=\"/artblog/sonarqube-jenkins-pipeline-get-metrics-then-notify-via-teams/4-5.jpg\"></p>\n<p>新增完畢後就會看到了<br><img src=\"/artblog/sonarqube-jenkins-pipeline-get-metrics-then-notify-via-teams/4-6.jpg\"></p>\n<p>如果還想測試一下 webhook 到底能不能用，可以用ＣＲＵＬ去打看看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -X POST -H &quot;Content-Type: application/json&quot; -d &#x27;&#123;</span><br><span class=\"line\">  &quot;text&quot;: &quot;This is a test message&quot;</span><br><span class=\"line\">&#125;&#x27; &lt;Webhook URL&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/sonarqube-jenkins-pipeline-get-metrics-then-notify-via-teams/4-7.jpg\"></p>\n<p>到此，我們準備好了要通知的訊息(content)、要呼叫的 webhook，直接一行就解決</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">office365ConnectorSend <span class=\"attr\">message:</span> content, <span class=\"attr\">webhookUrl:</span> webhook</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"上游任務觸發\"><a href=\"#上游任務觸發\" class=\"headerlink\" title=\"上游任務觸發\"></a>上游任務觸發</h2><p>在上游任務要觸發下一個通知任務的時候，指定好任務名稱還有要帶過去的參數、值</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">stage(<span class=\"string\">&#x27;觸發通知&#x27;</span>) &#123;</span><br><span class=\"line\">    build <span class=\"attr\">wait:</span> <span class=\"literal\">false</span>, <span class=\"attr\">job:</span> <span class=\"string\">&#x27;notify-via-teams&#x27;</span>, <span class=\"attr\">parameters:</span> [</span><br><span class=\"line\">        string(<span class=\"attr\">name:</span> <span class=\"string\">&#x27;projectKey&#x27;</span>, <span class=\"attr\">value:</span><span class=\"string\">&#x27;myProject&#x27;</span>),</span><br><span class=\"line\">        string(<span class=\"attr\">name:</span> <span class=\"string\">&#x27;webhook&#x27;</span>, <span class=\"attr\">value:</span><span class=\"string\">&#x27;https://my.webhook.url/xxxx/ooooo&#x27;</span>),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"成果\"><a href=\"#成果\" class=\"headerlink\" title=\"成果\"></a>成果</h2><p><img src=\"/artblog/sonarqube-jenkins-pipeline-get-metrics-then-notify-via-teams/4-8.jpg\"></p>\n","categories":["devOps"],"tags":["sonarQube"]},{"title":"aspnet core publish and environment","url":"/artblog//aspnet-core-publish-and-environment/","content":"<p>因為對於 dotnet 的 publish 以及環境變數的設定，一直都有點混淆，所以這邊就來整理一下。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"佈署到哪裡？-IIS-還是-Kestrel？\"><a href=\"#佈署到哪裡？-IIS-還是-Kestrel？\" class=\"headerlink\" title=\"佈署到哪裡？ IIS 還是 Kestrel？\"></a>佈署到哪裡？ IIS 還是 Kestrel？</h2><p>在 ASP.NET Core 中，我們可以使用 Kestrel 作為 Web Server，也可以使用 IIS 作為 Web Server。<br>而執行 <code>dotnet publish</code>的時候，其實就是將專案編譯成一個可執行的檔案，並且將相關的資源檔案一起打包成一個資料夾，這個資料夾就是我們要佈署的檔案。</p>\n<p><code>dotnet publish</code>的時候預設會產出一個<code>web.config</code>給 IIS 使用，也就是說如果要佈署到 IIS，那麼在 <code>dotnet publish</code>的時候必須要加上環境變數設定的指令， <code>web.config</code>才會有環境變數</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">dotnet publish -c Debug -p:EnvironmentName=Development</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">location</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;.&quot;</span> <span class=\"attr\">inheritInChildApplications</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">system.webServer</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">handlers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">add</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;aspNetCore&quot;</span> <span class=\"attr\">path</span>=<span class=\"string\">&quot;*&quot;</span> <span class=\"attr\">verb</span>=<span class=\"string\">&quot;*&quot;</span> <span class=\"attr\">modules</span>=<span class=\"string\">&quot;AspNetCoreModuleV2&quot;</span> <span class=\"attr\">resourceType</span>=<span class=\"string\">&quot;Unspecified&quot;</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">handlers</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">aspNetCore</span> <span class=\"attr\">processPath</span>=<span class=\"string\">&quot;dotnet&quot;</span> <span class=\"attr\">arguments</span>=<span class=\"string\">&quot;.\\api1.dll&quot;</span> <span class=\"attr\">stdoutLogEnabled</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">stdoutLogFile</span>=<span class=\"string\">&quot;.\\logs\\stdout&quot;</span> <span class=\"attr\">hostingModel</span>=<span class=\"string\">&quot;inprocess&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">environmentVariables</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">environmentVariable</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;ASPNETCORE_ENVIRONMENT&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;Development&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">environmentVariables</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">aspNetCore</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">system.webServer</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">location</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Ref:<a href=\"https://blog.miniasp.com/post/2023/03/30/How-to-set-environment-name-for-webconfig-when-run-dotnet-publish\">如何透過 dotnet publish 調整 ASP․NET Core 部署到 IIS 的 Web.config 內容\n</a></p>\n<h2 id=\"那麼環境變數需要設置的是那些東西，又影響什麼呢？\"><a href=\"#那麼環境變數需要設置的是那些東西，又影響什麼呢？\" class=\"headerlink\" title=\"那麼環境變數需要設置的是那些東西，又影響什麼呢？\"></a>那麼環境變數需要設置的是那些東西，又影響什麼呢？</h2><p>環境主要用來配置跟環境相關的一些設定值，例如連線字串、NAS 儲存空間的路徑、LOG 紀錄層級等等。設定好環境變數，在應用程序中就可以使用指定的環境（”myhome”）來載入對應的設定文件（如 appsettings.myhome.json）。而在實際上發佈出去的檔案內，也會包含著各個環境的設定檔案，例如 appsettings.myhome.json、appsettings.company.json、appsettings.home.json 等等。<br>這些檔案會等到實際上執行的時候，再去讀取對應的設定檔案，並且載入到應用程序中。</p>\n<blockquote>\n<p>環境變數設定檔案並不會以實體的方式合併，而是在執行時，會依照環境變數的設定，去讀取對應的設定檔案，並且載入到應用程序中。</p>\n</blockquote>\n<h2 id=\"那麼版本又是怎麼影響佈署的呢？\"><a href=\"#那麼版本又是怎麼影響佈署的呢？\" class=\"headerlink\" title=\"那麼版本又是怎麼影響佈署的呢？\"></a>那麼版本又是怎麼影響佈署的呢？</h2><p>版本可能會有開發版本、正式版本等差異，主要的判斷依據就是以功能來區分，雖然這些區分的方式，可以透過環境變數來做，但是如果是在開發階段，可能會有一些功能是還沒有完成的，但是又想要測試，這時候就可以透過版本來做區分。假設我在 Debug 環境需要紀錄完整的資訊，於是可能透過<a href=\"https://learn.microsoft.com/zh-tw/dotnet/csharp/language-reference/preprocessor-directives?WT.mc_id=DT-MVP-4015686\">條件式編譯</a>來額外紀錄一些資訊，但是在 Release 環境下，就不需要紀錄這些資訊，這時候就可以透過版本來做區分。</p>\n<p><code>dotnet publish</code>的時候會發現我們若指定了版本，那麼編譯出來的 appsettings.json 的內容，就會是合併了版本、預設的 appsettings.json 的內容。</p>\n<p>我們可以來測試一下，首先將專案設定擋像下面這樣設定</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// appsettings.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;my_version&quot;</span>: <span class=\"string\">&quot;default&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// appsettings.Debug.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;my_version&quot;</span>: <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// appsettings.Release.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;my_version&quot;</span>: <span class=\"string\">&quot;release&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>接著發布之後直接查看 appsettings.json 的內容，可以發現內容是合併了版本、預設的 appsettings.json 的內容。</p>\n<figure class=\"highlight bat\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">@rem 將檔案編譯輸出到 myoutput 資料夾</span></span><br><span class=\"line\">dotnet publish -c Debug -o myoutput</span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">@rem 查看 appsettings.json 的內容</span></span><br><span class=\"line\"><span class=\"built_in\">type</span> myoutput/appsettings.json</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/aspnet-core-publish-and-environment/2023-07-21_151304.png\"><br>可以看到結果是 “my_version”: “debug”</p>\n<h2 id=\"那麼環境變數與版本的優先權是怎麼樣的呢？\"><a href=\"#那麼環境變數與版本的優先權是怎麼樣的呢？\" class=\"headerlink\" title=\"那麼環境變數與版本的優先權是怎麼樣的呢？\"></a>那麼環境變數與版本的優先權是怎麼樣的呢？</h2><p>實際上 publish 的版本已經被合併到 <code>appsettings.json</code>了，此時，就只剩下了<code>環境變數的設定</code>、以及<code>合併完預設、版本的設定</code>。執行的時候會先去抓<code>appsettings.json</code>的內容，然後也依據環境變數的設定，到對應的檔案中尋找是不是有對應的設定值，有的話就使用，沒有的話就是使用預設的設定值。</p>\n<p>假設目前在伺服器上面的設定檔案如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// appsettings.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;my_version&quot;</span>: <span class=\"string\">&quot;debug&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;my_conn&quot;</span>: <span class=\"string\">&quot;empty&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// appsettings.Lab.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;my_conn&quot;</span>: <span class=\"string\">&quot;lab connection string&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>此時應用程式若要取得 my_version 的值，則會是 <code>debug</code>；而若要取得 my_conn 的值，則會是 <code>lab connection string</code>。</p>\n<h2 id=\"ReCap\"><a href=\"#ReCap\" class=\"headerlink\" title=\"ReCap\"></a>ReCap</h2><ol>\n<li>環境變數設定檔案並不會以實體的方式合併，而是在執行時，會依照環境變數的設定，去讀取對應的設定檔案，並且載入到應用程序中。</li>\n<li>publish 的時候，會將版本合併到 appsettings.json 中。</li>\n<li>環境變數的設定，會優先於 appsettings.json 的設定。</li>\n<li>dotnet publish -c &lt;版本&gt; -p:EnvironmentName&#x3D;&lt;環境變數&gt; (此時指定環境變數是為了讓 IIS 使用)</li>\n</ol>\n<h2 id=\"補充\"><a href=\"#補充\" class=\"headerlink\" title=\"補充\"></a>補充</h2><p>微軟官方提供的教學:<a href=\"https://learn.microsoft.com/zh-tw/aspnet/core/fundamentals/configuration/?view=aspnetcore-7.0\">ASP.NET Core 的設定</a>，內容非常詳盡，有興趣的可以看看。</p>\n","categories":["dotnet"],"tags":["publish","environment"]},{"title":"vee-validate 提示 options.awareOfUnicodeTokens  錯誤","url":"/artblog//vee-validate-options-awareOfUnicodeTokens-must-be-set-to-true-to-use-yyyy-token/","content":"<p>這個問題其實不算難解，但可能剛遇到會有點沒頭緒，很有可能自己電腦也沒啥問題但是一上 CI 流程，測試環境就掛掉了</p>\n<span id=\"more\"></span>\n\n<h2 id=\"錯誤情況\"><a href=\"#錯誤情況\" class=\"headerlink\" title=\"錯誤情況\"></a>錯誤情況</h2><p><img src=\"/artblog/vee-validate-options-awareOfUnicodeTokens-must-be-set-to-true-to-use-yyyy-token/a.png\"></p>\n<p>大概可以從這邊獲取到一些關鍵信息</p>\n<ol>\n<li>它讓你去看錯誤原因的解釋網頁 <a href=\"https://git.io/fxCyr\">https://git.io/fxCyr</a></li>\n<li>這邊報錯的是 <code>vee-validate</code> 套件</li>\n<li>看方法名稱應該跟 <code>parse</code> 有關係，應該也是從套件的 scope 驗證自己定義的規則有關係</li>\n</ol>\n<p>實際上錯誤的原因就自己看網頁，我覺得也比我講得清楚</p>\n<h2 id=\"驗證情況\"><a href=\"#驗證情況\" class=\"headerlink\" title=\"驗證情況\"></a>驗證情況</h2><p>利用關鍵字可以查到套件有人反映的事情，也是在版本更新的時候傳出災情，驗證一下自己專案也的確採用的是 <code>2.1.7</code>版本，並檢查專案目錄下 <code>node_modules</code>內的 <code>vee-validate</code>版本，也的確採用的是 <code>2.2.15</code>。而造成這個情況的元凶就是在 <code>package.json</code>內依賴套件的語法，寫的是 <code>^2.1.7</code>。根據升級規則，也就很順理成章地幫你升到了 <code>2.2.15</code>，反正沒指定版本嘛</p>\n<h2 id=\"解決辦法\"><a href=\"#解決辦法\" class=\"headerlink\" title=\"解決辦法\"></a>解決辦法</h2><p>讓 npm 確實採用 <code>2.1.7</code>版本</p>\n<h2 id=\"測試驗證\"><a href=\"#測試驗證\" class=\"headerlink\" title=\"測試驗證\"></a>測試驗證</h2><ol>\n<li>本地端刪除 node_modules，全部套件重新安裝一次</li>\n<li>調整 package.json , 在 <code>vee-validate</code>套件的地方指定 <code>2.1.7</code>版本 (不要<code>^</code>符號)</li>\n<li>執行 <code>npm install</code>，讓套件管理自動更新 <code>package-lock.json</code>，更新完畢後該檔案搜尋 <code>vee-validate</code>可看到採用版本的確也是 <code>2.1.7</code></li>\n<li>跑網站執行，看原本功能錯誤的地方是否已經沒有問題</li>\n<li>如果有 CI，也在 CI 主機上執行一次 <code>npm ci</code></li>\n</ol>\n"},{"title":"vue3-MPA sample","url":"/artblog//vue3-MPA-sample/","content":"<p>紀錄一下使用 vite.js 新建專案後，要怎麼從 SPA 改 MPA，請注意目前此練習還有 BUG，無法透過填入網址直接瀏覽正確路由的頁面，僅能透過網頁 UI 操作。</p>\n<span id=\"more\"></span>\n\n<p>其實東西不多，不過自己要查的話會花很多時間，少用的話又不會記得，所以乾脆紀錄一下，基本的東西就不說了，直接上<a href=\"https://github.com/art-Blog/lab-vite-mpa\">程式</a></p>\n<h2 id=\"目錄結構\"><a href=\"#目錄結構\" class=\"headerlink\" title=\"目錄結構\"></a>目錄結構</h2><p><img src=\"/artblog/vue3-MPA-sample/struct.jpg\"></p>\n<ol>\n<li><code>components</code> 放共用元件等等，預計是放全站共用的東西，如 <code>UI component</code>，<code>Layout component</code></li>\n<li><code>pages</code> 放各個獨立的ＳＰＡ進入點相關檔案，其子目錄下可自行再增設 <code>components</code> 目錄，存放該ＳＰＡ自己用的元件</li>\n</ol>\n<h2 id=\"vite-config-js-設定\"><a href=\"#vite-config-js-設定\" class=\"headerlink\" title=\"vite.config.js 設定\"></a>vite.config.js 設定</h2><p>vite.js 打包透過 rollup 處理，設定內有提供對接的設定值，整份設定檔請參閱下方程式碼註解說明</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; resolve &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;path&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vite&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vitejs/plugin-vue&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 所有頁面進入點都放在 /src/pages 底下</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;src&quot;</span>, <span class=\"string\">&quot;pages&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 編譯輸出檔案放在 /dist</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> outputDir = <span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// https://vitejs.dev/config/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 重新指定index.html所在的根目錄</span></span><br><span class=\"line\">    root,</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [<span class=\"title function_\">vue</span>()],</span><br><span class=\"line\">    <span class=\"attr\">build</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">outDir</span>: outputDir,</span><br><span class=\"line\">        <span class=\"comment\">// vite.js 透過 rollup 打包，此處可自定義底層的 rollup 打包設定</span></span><br><span class=\"line\">        <span class=\"attr\">rollupOptions</span>: &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 網站入口點設定</span></span><br><span class=\"line\">            <span class=\"comment\">// ref:https://rollupjs.org/configuration-options/#input</span></span><br><span class=\"line\">            <span class=\"attr\">input</span>: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 網站的超連結路徑必須要加上尾巴的&quot;/&quot;，如 &lt;a href=&quot;/monster/&quot;&gt;monster&lt;/a&gt;</span></span><br><span class=\"line\">                <span class=\"attr\">home</span>: <span class=\"title function_\">resolve</span>(root, <span class=\"string\">&quot;index.html&quot;</span>),</span><br><span class=\"line\">                <span class=\"attr\">monster</span>: <span class=\"title function_\">resolve</span>(root, <span class=\"string\">&quot;monster&quot;</span>, <span class=\"string\">&quot;index.html&quot;</span>),</span><br><span class=\"line\">                <span class=\"attr\">about</span>: <span class=\"title function_\">resolve</span>(root, <span class=\"string\">&quot;about&quot;</span>, <span class=\"string\">&quot;index.html&quot;</span>),</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 此處定義路徑替換的別名</span></span><br><span class=\"line\">        <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;@&quot;</span>: <span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;src&quot;</span>),</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"後記\"><a href=\"#後記\" class=\"headerlink\" title=\"後記\"></a>後記</h2><p>查詢網路上要做 vite-mpa 好像很多方式都是說要新增套件，但我覺得官網既然說可以做到，應該是不需要用到套件，所以我就沒有查這方面相關的資訊了，事實證明好像也不用，只是在很多地方感覺好像還是可以更友善一點，或許套件就是能夠幫忙處理這些細節的部分吧，無論如何，這只是第一次測試ＭＰＡ的ＰＯＣ，順便記錄起來，未來可能會有更合適的做法那就再說了。</p>\n<h2 id=\"補充\"><a href=\"#補充\" class=\"headerlink\" title=\"補充\"></a>補充</h2><p>此練習到最後有發現一個致命的問題，也就是透過網址進入網站的話，並不會進入到正確的路由。簡單的說就是瀏覽網站到一半，重新整理頁面會發現回到首頁去了，目前沒有找到此問題的解決方案，所以後續還是會從 SPA 加上動態載入元件的方向著手，這篇文章就存查紀錄用吧</p>\n","categories":["vue3"],"tags":["MPA"]},{"title":"vue3-SPA sample","url":"/artblog//vue3-SPA-sample/","content":"<p>紀錄一下使用 vite.js 建立 vue3 練習專案的步驟</p>\n<span id=\"more\"></span>\n\n<p>基礎語法及使用請參閱其他教學資源，此處僅簡單紀錄提示一些我覺得較為重要、容易忘記或者是方便複製貼上使用的部分，相對的 vue3 的練習主要放在專案內的 <code>about</code>、<code>monster</code>、<code>teams</code>這三個路由，練習範例是依照<code>udemy</code>課程下去改的，有興趣了解課程也可以參考一下我的文章<a href=\"https://partypeopleland.github.io/artblog/2023/01/30/learning-record-vue-the-complete-guide/\">學習紀錄-Vue - The Complete Guide (incl. Router &amp; Composition API)</a> (只是到今天我還沒看完就是了，但目前為止的感想是適合初學者，有中文字幕，買了不虧)</p>\n<blockquote>\n<ol>\n<li>vite 線上試用:<a href=\"https://vite.new/\">StackBlitz</a></li>\n</ol>\n</blockquote>\n<h2 id=\"建立專案\"><a href=\"#建立專案\" class=\"headerlink\" title=\"建立專案\"></a>建立專案</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新建專案</span></span><br><span class=\"line\">npm create vite@latest</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ol>\n<li><a href=\"https://cn.vitejs.dev/guide/\">vite.js document</a></li>\n</ol>\n</blockquote>\n<h2 id=\"練習專案目錄結構\"><a href=\"#練習專案目錄結構\" class=\"headerlink\" title=\"練習專案目錄結構\"></a>練習專案目錄結構</h2><ol>\n<li>練習範例程式碼 github:<a href=\"https://github.com/art-Blog/lab-vite-spa\">lab-vite-spa</a></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>路徑</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;dist:</td>\n<td>編譯產出路徑</td>\n</tr>\n<tr>\n<td>&#x2F;src:</td>\n<td>前端原始碼路徑</td>\n</tr>\n<tr>\n<td>&#x2F;src&#x2F;components:</td>\n<td>全站共用元件</td>\n</tr>\n<tr>\n<td>&#x2F;pages&#x2F;*.vue:</td>\n<td>主要頁面元件</td>\n</tr>\n<tr>\n<td>&#x2F;pages&#x2F;*<em>&#x2F;</em>.vue:</td>\n<td>各頁面非公用元件</td>\n</tr>\n<tr>\n<td>&#x2F;src&#x2F;router.js:</td>\n<td>路由設定</td>\n</tr>\n<tr>\n<td>&#x2F;src&#x2F;App.vue:</td>\n<td>網站進入點</td>\n</tr>\n<tr>\n<td>&#x2F;vite.config.js:</td>\n<td>vite 設定檔</td>\n</tr>\n</tbody></table>\n<h2 id=\"路徑別名設定\"><a href=\"#路徑別名設定\" class=\"headerlink\" title=\"路徑別名設定\"></a>路徑別名設定</h2><ol>\n<li>專案原始碼路徑放置於專案根目錄下的<code>src</code>內，可依需要自行設定</li>\n<li>前端編譯 <code>production</code> 時的產出路徑為 <code>/dist</code></li>\n<li><code>resolve.alias</code>設定宣告了<code>@</code>表示為 <code>src</code>，便於引用資源時不必再使用<code>../../Home.vue</code>的相對路徑語法</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// vite.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; resolve &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;path&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vite&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vitejs/plugin-vue&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = <span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;src&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> outputDir = <span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">    root,</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [<span class=\"title function_\">vue</span>()],</span><br><span class=\"line\">    <span class=\"attr\">build</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">outDir</span>: outputDir,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">optimizeDeps</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">include</span>: [<span class=\"string\">&quot;vue&quot;</span>, <span class=\"string\">&quot;vue-router&quot;</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;@&quot;</span>: <span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;src&quot;</span>),</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"前端路由設定-動態引用元件\"><a href=\"#前端路由設定-動態引用元件\" class=\"headerlink\" title=\"前端路由設定 &amp; 動態引用元件\"></a>前端路由設定 &amp; 動態引用元件</h2><ol>\n<li>透過<code>()=&gt;import(&quot;@/pages/Home.vue&quot;)</code>即可動態引用元件，第一次使用該元件會另外發出請求取得元件 js 檔案；進入頁面不需要再將所有的資源全數載入，優化頁面速度</li>\n<li><code>linkActiveClass</code>設定會在使用者點擊路由連結後，添加所設定的類別樣式名稱，此處設定會添加一個<code>active</code>的樣式</li>\n<li>路由設定指定 <code>name</code> 可用於 <code>router-link</code></li>\n<li>指定 <code>HTML5 mode</code> 處理前端路由 (<code>createWebHistory()</code>)</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App.vue&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/router.js&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">createApp</span>(<span class=\"title class_\">App</span>).<span class=\"title function_\">use</span>(router).<span class=\"title function_\">mount</span>(<span class=\"string\">&quot;#app&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// src/router.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRouter, createWebHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-router&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;home&quot;</span>, <span class=\"attr\">path</span>: <span class=\"string\">&quot;/&quot;</span>, <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;@/pages/Home.vue&quot;</span>) &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;about&quot;</span>, <span class=\"attr\">path</span>: <span class=\"string\">&quot;/about&quot;</span>, <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;@/pages/About.vue&quot;</span>) &#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"title function_\">createRouter</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">linkActiveClass</span>: <span class=\"string\">&quot;active&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">history</span>: <span class=\"title function_\">createWebHistory</span>(),</span><br><span class=\"line\">    routes,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"導航條-路由連結範例\"><a href=\"#導航條-路由連結範例\" class=\"headerlink\" title=\"導航條(路由連結範例)\"></a>導航條(路由連結範例)</h2><p><strong>basic sample</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/&quot;</span>&gt;</span>Go to Home<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/about&quot;</span>&gt;</span>Go to About<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>navBar sample</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;header&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">            &lt;li v-for=&quot;m in menu&quot;&gt;</span><br><span class=\"line\">                &lt;router-link :to=&quot;m.to&quot;&gt;&#123;&#123; m.text &#125;&#125;&lt;/router-link&gt;</span><br><span class=\"line\">            &lt;/li&gt;</span><br><span class=\"line\">        &lt;/ul&gt;</span><br><span class=\"line\">    &lt;/header&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">import &#123; routes &#125; from &quot;@/router&quot;</span><br><span class=\"line\">const menu = routes.filter((r) =&gt; r.name).map((r) =&gt; (&#123; to: r.path, text: r.name &#125;))</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ol>\n<li><a href=\"https://router.vuejs.org/guide/\">Vue router</a></li>\n<li><a href=\"https://book.vue.tw/CH4/4-2-route-settings.html\">Vue Router 路由設定 - 重新認識 vue.js</a></li>\n</ol>\n</blockquote>\n<h2 id=\"透過-docker-佈署網站\"><a href=\"#透過-docker-佈署網站\" class=\"headerlink\" title=\"透過 docker 佈署網站\"></a>透過 docker 佈署網站</h2><ol>\n<li><code>npm ci</code> 會依照 <code>package-lock.json</code> 安裝套件，<code>npm install</code> 則是依照 <code>package.json</code>。</li>\n<li>在 <code>docker</code>內複製檔案<code>COPY</code>，會略過在<code>.dockerignore</code>內的檔案</li>\n<li>第二段 <code>docker</code> 命令在建構 <code>production</code> 的時候，是將第一段的編譯成果，複製到 <code>nginx</code> 的預設網站目錄下</li>\n<li><code>nginx</code> 設定檔也從專案目錄複製到 <code>image</code> 內的 <code>nginx</code> 設定目錄下，請特別注意此處設定檔 <code>spa.conf</code> 的編碼應為 <code>ASCII</code>，不要用 <code>UTF8</code></li>\n</ol>\n<p><strong>.dockerignore</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">.dockerignore</span><br><span class=\"line\">node_modules</span><br><span class=\"line\">dist</span><br><span class=\"line\">.vscode</span><br><span class=\"line\">.run</span><br><span class=\"line\">.idea</span><br><span class=\"line\">.git</span><br><span class=\"line\">README.md</span><br></pre></td></tr></table></figure>\n\n<p><strong>Dockerfile</strong></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> node:alpine as builder</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> package*.json ./</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> npm ci</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> . .</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> npm run build</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> nginx:alpine as production-build</span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=builder /app/dist /usr/share/nginx/html</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> ./.nginx/spa.conf /etc/nginx/conf.d/</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>docker cli commands</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">build docker image</span></span><br><span class=\"line\">docker build -t lab-vite-spa .</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">create container</span></span><br><span class=\"line\">docker run -d --name=lab-vite-spa -p 80:80 lab-vite-spa</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nginx-設定\"><a href=\"#nginx-設定\" class=\"headerlink\" title=\"nginx 設定\"></a>nginx 設定</h2><p>開發階段採用 <code>npm run dev</code> 不會發現，但若將程式碼佈署於 <code>IIS</code> 就會發現無法正確的顯示畫面，因為在重新整理過後，<code>IIS</code> 接收到的網址請求的資源是不存在的，此時應該是要吃首頁的路由設定。<code>IIS</code> 可以透過 <code>UrlReWrite</code> 處理；若佈署於 <code>linux</code> 則可以利用 <code>nginx</code> 解決，請參閱下方設定檔內容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># /etc/nginx/conf.d/spa.conf</span><br><span class=\"line\"></span><br><span class=\"line\">  server &#123;</span><br><span class=\"line\">    listen 80 default_server;</span><br><span class=\"line\">    listen [::]:80 default_server;</span><br><span class=\"line\"></span><br><span class=\"line\">    root /usr/share/nginx/html;</span><br><span class=\"line\"></span><br><span class=\"line\">    index index.html;</span><br><span class=\"line\">  #  server_name you.server.com;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">      try_files $uri $uri/ @rewrites;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location @rewrites &#123;</span><br><span class=\"line\">      rewrite ^(.+)$ /index.html last;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ~* \\.(?:ico|css|js|gif|jpe?g|png)$ &#123;</span><br><span class=\"line\">      # Some basic cache-control for static files to be sent to the browser</span><br><span class=\"line\">      expires max;</span><br><span class=\"line\">      add_header Pragma public;</span><br><span class=\"line\">      add_header Cache-Control &quot;public, must-revalidate, proxy-revalidate&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>這篇主要應該都不是在說 vue3、或 composition API 怎麼寫，記錄下來的重點反而都比較偏向佈署、開發過程。寫這一篇之前其實我也寫了 MPA，就是因為原始需求是前後端整合開發，到後面發現分離會比較好，而分離之後採用ＭＰＡ也難以達成需求，也因此才會有 SPA + 動態載入的練習 PoC，目前這樣的開發配置是我覺得很不錯的，比起以往前後端混合，利用 webpack 編譯，每改一次都要等編譯很久，希望之後也能慢慢應用在工作上</p>\n","categories":["vue3"],"tags":["SPA"]},{"title":"使用 dotnet user-secrets 儲存敏感資訊","url":"/artblog//store-sensitive-information-via-dotnet-user-secrets/","content":"<p>紀錄一下如何透過 dotnet user-secret 儲存敏感資訊</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h2><p>專案通常會有一個配置檔案，在 dotnet 則是儲存於 <code>appSetting.json</code>，這隻檔案應該要進版控，因為有它專案才完整，但如果是ㄧ些比較敏感的資訊就不合適一起進入版控，例如一些 <code>token</code>或者是一些比較敏感的資料，可能是關於安全的，可能是關於錢的，反正這些東西進入版控就會有一些風險。所以我們不會想要這些東西進入版控，在 dotnet 的世界裏面有一個東西可以解決這件事情，就是 <code>user-secret</code></p>\n<p>簡單的來說，既然你不想把這些東西進版控，那就另外放在別的目錄，跟專案隔開來，這些敏感資訊也只會留在你的電腦中，不會進入版控，也不會 deploy 出去。他的概念其實就只是這樣，實際的做法則是在你本機上的目錄做一個 json 檔案，當專案有設定，他會去找這個檔案。如果<code>secret.json</code>與<code>appSetting.json</code>有同樣的設定，則是會以<code>secret.json</code>的設定為準</p>\n<p><img src=\"/artblog/store-sensitive-information-via-dotnet-user-secrets/20230308-1.jpg\"><br><img src=\"/artblog/store-sensitive-information-via-dotnet-user-secrets/20230308-2.jpg\"></p>\n<h2 id=\"How-To-Start\"><a href=\"#How-To-Start\" class=\"headerlink\" title=\"How To Start\"></a>How To Start</h2><p><img src=\"/artblog/store-sensitive-information-via-dotnet-user-secrets/20230308-3.jpg\"></p>\n<p>輸入<code>dotnet user-secrets</code>指令可以看到說明，所以使用方法就是在沒有用 <code>user secret</code>的專案，先透過 <code>init</code>來初始化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">產生 secret 的 guid</span></span><br><span class=\"line\">dotnet user-secrets init</span><br></pre></td></tr></table></figure>\n\n<p>做完這件事情之後，專案檔會被加入一段 XML Tag，用來記錄所產生的 Guid，接著可以透過 <code>clear</code>、<code>list</code>、<code>set</code>、<code>remove</code>來管理，這個應該就不用多講了，不過如果是在本機開發，我會建議還是直接開啟 json 檔編輯比較直接。 cli 指令可以等到需要自動化作業的時候再研究語法即可。</p>\n<blockquote>\n<p>VisualStudio 2022 似乎可以在專案右鍵從跳出來的選單中找到使用者秘密的選項，點選後會直接幫你把 json 檔開起來，Rider 則需要安裝外掛<a href=\"https://plugins.jetbrains.com/plugin/10183--net-core-user-secrets\">.​NET Core User Secrets</a>，然後 <strong>RightClick Solution</strong> -&gt; <strong>Tools</strong> -&gt; <strong>Open Project User Secrets</strong> 開啟檔案</p>\n</blockquote>\n<h2 id=\"範例設定\"><a href=\"#範例設定\" class=\"headerlink\" title=\"範例設定\"></a>範例設定</h2><p><strong>appSetting.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Logging&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;LogLevel&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Default&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Information&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Microsoft.AspNetCore&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Warning&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;LineBot&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;channelAccessToken&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&lt;your-channel-access-token&gt;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;adminUserId&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&lt;your-line-user-id&gt;&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;AllowedHosts&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>secrets.json</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;LineBot&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;channelAccessToken&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;I am real channel access token&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;adminUserId&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;I am admin user id&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"佈署到-Azure\"><a href=\"#佈署到-Azure\" class=\"headerlink\" title=\"佈署到 Azure\"></a>佈署到 Azure</h2><p>佈署到 Azure 則是需要在應用程式設定中自己新增<br><img src=\"/artblog/store-sensitive-information-via-dotnet-user-secrets/20230308-4.jpg\"></p>\n<p>假設以這樣的結構來說，我在 azure 的設定就是<br><img src=\"/artblog/store-sensitive-information-via-dotnet-user-secrets/20230308-5.jpg\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">LineBot:adminUserId</span><br></pre></td></tr></table></figure>\n\n<p>驗證一下 azure 設定是不是真的有吃到，我做了一個簡單的 Controller 去抓設定值並顯示，並且改了一個設定，測試是否會出現在 azure 網站上</p>\n<p><img src=\"/artblog/store-sensitive-information-via-dotnet-user-secrets/20230308-6.jpg\"><br><img src=\"/artblog/store-sensitive-information-via-dotnet-user-secrets/20230308-7.jpg\"></p>\n<p>應用程式設定修改之後記得按下儲存，他會重新啟動網站</p>\n<p><img src=\"/artblog/store-sensitive-information-via-dotnet-user-secrets/20230308-8.jpg\"><br><img src=\"/artblog/store-sensitive-information-via-dotnet-user-secrets/20230308-9.jpg\"><br><img src=\"/artblog/store-sensitive-information-via-dotnet-user-secrets/20230308-10.jpg\"></p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>設定值如果要往下一個節點，就用冒號隔開，這個東西很簡單，但是也很容易忘記細節，主要是怕自己忘記在 azure 要怎麼設定，剛好有機會就隨手紀錄一下</p>\n","categories":["dotnet"]},{"title":"使用 sentry 追蹤前端錯誤","url":"/artblog//sentry-self-hosted-by-docker-compose/","content":"<p>很久以前就有聽過 sentry 這個服務，但一直沒有機會使用，這次有機會就來試試看，這邊就記錄一下重點</p>\n<span id=\"more\"></span>\n\n<h2 id=\"怎麼安裝本地的-sentry-服務\"><a href=\"#怎麼安裝本地的-sentry-服務\" class=\"headerlink\" title=\"怎麼安裝本地的 sentry 服務\"></a>怎麼安裝本地的 sentry 服務</h2><p>如果作業系統是 windows 可以直接使用 linux 子系統，執行 <code>wsl</code> 後再安裝，官方其實已經提供文件<a href=\"https://develop.sentry.dev/self-hosted/\">Self-Hosted Sentry</a>，只需要照著做就可以了，實際上的步驟是</p>\n<ol>\n<li>從 Github 下載 <a href=\"https://github.com/getsentry/self-hosted/releases/latest\">release</a> 的原始碼，目前最新的是 23.8.0</li>\n<li>解壓縮進入該目錄下執行 <code>./install.sh</code></li>\n<li>等待完成後，畫面提示所有事情都做完了，可以使用<code>docker compose up -d</code>來啟動服務<br><img src=\"/artblog/sentry-self-hosted-by-docker-compose/2.png\"></li>\n</ol>\n<p><img src=\"/artblog/sentry-self-hosted-by-docker-compose/1.png\"><br>安裝過程會詢問是否提供資料給 sentry，可以選擇 N</p>\n<p>安裝過程會詢問<code>Would you like to create a user account now? [Y/n]</code><br>是否要建立一開始的使用者帳號，請選擇 Y 並設定帳號密碼</p>\n<blockquote>\n<p>如果需要將在 proxy 後安裝，可以參考<a href=\"https://develop.sentry.dev/self-hosted/#installing-behind-a-proxy\">installing-behind-a-proxy</a></p>\n</blockquote>\n<p>服務若正常啟動後，可以訪問 9000 port 來瀏覽 sentry 的頁面，預設帳號密碼是剛剛設定的。至於一些設定的方式可以參考目錄下</p>\n<ol>\n<li>sentry&#x2F;config.yml</li>\n<li>sentry&#x2F;sentry.conf.py</li>\n</ol>\n<p>這兩隻檔案的內容可以看一下，裡面有許多可以設定的東西，例如資料庫的連線方式、redis 的連線方式、服務的 port 等等，更詳細的設定可以參考<a href=\"https://develop.sentry.dev/config/\">Configuration</a></p>\n<p>整個步驟下來其實是很簡單就能夠在本地跑起來，但要特別注意的是因為系統架構很複雜，所以其實對於想要自行擴充的人來說是有門檻的，官方對此的建議是希望有這部份需求的人轉而採用他們的雲端服務，這樣就不用自己搞這麼多事情了</p>\n<p>所以我覺得如果只是想要試試看，或者是本身的應用程式不大，用這份文件就可以了；如果官方提供的這份架構不夠，真的需要自己擴充，那我覺得還是直接用雲端服務比較好</p>\n<h2 id=\"怎麼在前端使用-sentry\"><a href=\"#怎麼在前端使用-sentry\" class=\"headerlink\" title=\"怎麼在前端使用 sentry\"></a>怎麼在前端使用 sentry</h2><p>這邊用 Vue3 做示範，讓我很驚豔的是，在 sentry 頁面也有互動的方式詢問你要怎麼使用，並給予對應的程式碼，這樣的體驗真的很棒，</p>\n<p><img src=\"/artblog/sentry-self-hosted-by-docker-compose/3.png\"><br>就像上面說的，快速地建立專案，只需要選擇對應的程式語言，警告的頻率，輸入名稱就行了，接著會馬上顯示對應的程式碼，照著說明一步步做就行了</p>\n<p>Vue 的部分也提供了 Vue2 , Vue3 的版本<br><img src=\"/artblog/sentry-self-hosted-by-docker-compose/4.png\"><br><img src=\"/artblog/sentry-self-hosted-by-docker-compose/5.png\"></p>\n<h2 id=\"sentry-的問題追蹤\"><a href=\"#sentry-的問題追蹤\" class=\"headerlink\" title=\"sentry 的問題追蹤\"></a>sentry 的問題追蹤</h2><p>為了測試一下 sentry 在捕捉錯誤之後的效果，我照著步驟安裝前端套件並設定後，故意做一個 throw Error 的動作，看看捕捉的錯誤會長怎樣<br><img src=\"/artblog/sentry-self-hosted-by-docker-compose/6.png\"><br><img src=\"/artblog/sentry-self-hosted-by-docker-compose/7.png\"><br><img src=\"/artblog/sentry-self-hosted-by-docker-compose/8.png\"></p>\n<p>這些資訊對於除錯都有很大幫助，而且看著那些密密麻麻的頁籤，這還是我用初始的設定下去跑，如果更細緻一點的設定，對於除錯的效率幫助應該會更大</p>\n<h2 id=\"sentry-的性能追蹤\"><a href=\"#sentry-的性能追蹤\" class=\"headerlink\" title=\"sentry 的性能追蹤\"></a>sentry 的性能追蹤</h2><p>網頁上有提供一個範例，讓我們了解這功能看起來會是怎樣的，我感覺這畫面類似以前用過的 seq , elk rum 之類的服務，可以追蹤系統的效能，有機會再來試試看<br><img src=\"/artblog/sentry-self-hosted-by-docker-compose/11.png\"></p>\n<h2 id=\"sentry-的儀錶板\"><a href=\"#sentry-的儀錶板\" class=\"headerlink\" title=\"sentry 的儀錶板\"></a>sentry 的儀錶板</h2><p>另外一個可以關注的部分我覺得是儀錶板，他有針對前、後端、手機應用給予預設的 dashboard 範本，點開來看一下<br><img src=\"/artblog/sentry-self-hosted-by-docker-compose/9.png\"><br><img src=\"/artblog/sentry-self-hosted-by-docker-compose/10.png\"></p>\n<p>可以看到他一些追蹤的指標例如<code>overall FID</code>，我一看真的沒有懂，於是去搜尋到這篇文章<a href=\"https://web.dev/fid/\">First Input Delay 首次输入延迟 (FID)</a>，發現這些指標的設定還真的是很細緻。</p>\n<p>實際上我們會想要快速地掌握系統現況，藉由 dashboard 統整資訊是很基本的，但是提供那些資訊就很講究了，從人家的範本來學習一下應該追蹤哪些指標，我覺得幫助很大</p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>這篇文章基本上只是照著官方說明把服務架起來體驗一下而已，並沒有能實質上說些什麼，大概就是屬於感受一下官方的威力展示，了解一下所謂的錯誤追蹤系統是怎麼一回事，而 sentry 提供的功能選單以及一些友善提示都讓我覺得這個服務可以很完整的串接在日常的工作流程中</p>\n<p>只是一想到這東西超級複雜，如果工作上要用到他又沒有提供擴充機制的配套，只能選擇用雲端的話，我覺得還是會有點猶豫，畢竟這東西不是免費的，如果要付費的話，我覺得還是要看看有沒有其他的選擇，因為牽涉到公司、要錢的事情、就是一件很麻煩的事。</p>\n<p>不過總體來說，我覺得這東西很棒，超酷的，如果不考慮架設，只單純使用，誰會不愛呢?</p>\n","tags":["sentry"]},{"title":"學習紀錄-Vue - The Complete Guide (incl. Router & Composition API)","url":"/artblog//learning-record-vue-the-complete-guide/","content":"<p>已經很久沒有寫心得文了，趁這次剛好有機會碰到一個學習動機比較強烈的 moment，順便當成新年新希望之一，學習一下新購入的 Udemy 課程並記錄</p>\n<span id=\"more\"></span>\n\n<p>因為章節很多，加上我覺得可能心得也會很簡單沒什麼好寫的，所以大概就是遵循之前 TDD 的學習方式，紀錄一下日期、感想即可。畢竟這篇文章沒有要闡述什麼東西，純粹就是用來鞭策自己的一個學習紀錄而已，對於其他人來說，大概也就像是一個課程開箱文的東西吧。</p>\n<ul>\n<li>課程資訊:<a href=\"https://www.udemy.com/share/101WzM3@HVUKN6JRnISOpZ3roSbIC-ar-bkxodFjQXmrrESrl-8lU3pvZVPVihZeZZNZTCh7/\">Vue - The Complete Guide (incl. Router &amp; Composition API)</a></li>\n<li>購入價格:NT:570(2023 過年特價期間)</li>\n<li>購入動機:對於<code>Routing: Building &quot;Multi-Page&quot; Single Page Applications</code>、<code>Vue &amp; Authentication</code>、<code>Vue2 to Vue3 Migration</code>這三個章節主題還蠻有興趣的</li>\n<li>對課程的期許:希望能了解一下這麼多人一致推薦點讚的課程，關於這三個主題有甚麼值得學習的重點</li>\n<li>對自己的期許:除了這三個主題以外，也順便從頭惡補一下基礎，順便重新培養一下學習的習慣，最近幾個月以來真的太放鬆了</li>\n</ul>\n<h2 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h2><p><strong>2023-01-30</strong>: 大概所有的課程一開始都是比較介紹性質，所以也就輕鬆的大致瀏覽一下，比較有趣的部份是除了理論性的介紹以外，講師用一個簡單的範例來展示使用 Vue.js 前後的語法差異，對於開發而言應該很有感覺，將 Vue.js 的優點做了一個火力展示。相信沒有接觸過前端開發框架的人應該很震撼。</p>\n<h2 id=\"Basics-Core-Concepts-DOM-Interaction-with-Vue\"><a href=\"#Basics-Core-Concepts-DOM-Interaction-with-Vue\" class=\"headerlink\" title=\"Basics &amp; Core Concepts - DOM Interaction with Vue\"></a>Basics &amp; Core Concepts - DOM Interaction with Vue</h2><p><strong>2023-01-30</strong>: 這個章節大概的內容就是將比較實用的一些基本語法用範例來做教學，講的程度我覺得剛好，沒有非常細緻到你看不下去，也不會太省略，基本上該知道的基礎用法都有帶過一次，讓我覺得比較驚豔的是關於 <code>v-on:input</code>的部分，以前基礎知識不夠，只知道能這樣用 <code>event</code>、<code>$event</code>，但卻不知道這個東西從哪裡來，看完之後才知道原來是內建的香草，而 Vue 也能用<code>$event</code>，這個其實以前都不是很清楚，透過這次釐清觀念，很開心。而且也因為對於 CSS 不熟悉，剛好這次的基礎中關於 style 的部分講師還透過好幾種寫法，逐漸演變的方式重構，真的是很不錯。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 行內樣式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;demo&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;border-color: blue&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;boxSelected&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 綁定物件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;demo&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123; borderColor: &#x27;blue&#x27; &#125;&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;boxSelected&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 動態綁定 style --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;demo&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123; borderColor: selected ? &#x27;blue&#x27; : &#x27;red&#x27; &#125;&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;boxSelected&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 動態綁定 class (CSS預先建立好 active 類別)--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;selected ? &#x27;demo active&#x27; : &#x27;demo&#x27;&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;boxSelected&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 動態綁定 class 物件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;demo&quot;</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123;active: selected&#125;&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;boxSelected&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123; demo:true, active: selected&#125;&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;boxSelected&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 或者改用陣列綁定 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;[&#x27;demo&#x27;, &#123;active:selected&#125;]&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;boxSelected&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 改成用計算屬性設定樣式 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;demo&quot;</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;boxCss&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;boxSelected&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">return</span> &#123; <span class=\"attr\">selected</span>: <span class=\"literal\">false</span> &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">computed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">boxCss</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> &#123; <span class=\"attr\">active</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">selected</span> &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">method</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">boxSelected</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"variable language_\">this</span>.<span class=\"property\">selected</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">selected</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Rendering-Conditional-Content-Lists\"><a href=\"#Rendering-Conditional-Content-Lists\" class=\"headerlink\" title=\"Rendering Conditional Content &amp; Lists\"></a>Rendering Conditional Content &amp; Lists</h2><p><strong>2023-01-31</strong>: 這一章節重點在於如何根據所定義的條件來呈現不一樣的畫面，當然集合的列表呈現也是重點，今天嘗試了一下在解說需求的時候就先完成範例程式碼，最終與講師的比較，相差的不多，而在<code>v-for</code>的<code>key</code>屬性解說上，講得算清楚易懂，也順便重新溫習了一下這一段，還好沒有忘記，當然渲染列表最好還是有後端給予的<code>unique key</code>最方便。簡單來說如果只是用來作呈現，不會動態的去改變集合元素的話，我是覺得給不給 key 無所謂，反正渲染出來就都不會改變那就沒事；但如果是會動態改變元素的話，還是要確保 key 屬性是以唯一值代入的。</p>\n<h2 id=\"Course-Project-The-Monster-Slayer-Game\"><a href=\"#Course-Project-The-Monster-Slayer-Game\" class=\"headerlink\" title=\"Course Project: The Monster Slayer Game\"></a>Course Project: The Monster Slayer Game</h2><p><strong>2023-01-31</strong>: 講師設計了一個簡單的小遊戲，透過這個需求來練習之前學習過的各種指令，整體來說是很有趣的，也透過一開始的需求說明，逐漸地釐清整體要做的事情有那些，有一點工作拆解的教學意思。使用到的東西都不難，而且也以實際需求帶出來用法，我是覺得這個小遊戲練習挺好的。</p>\n<h2 id=\"Vue-Behind-the-Scenes\"><a href=\"#Vue-Behind-the-Scenes\" class=\"headerlink\" title=\"Vue: Behind the Scenes\"></a>Vue: Behind the Scenes</h2><p><strong>2023-02-02</strong>: 這個章節講的東西都是一些你不知道但仍舊可以使用 vue，不過知道了之後對於 vue 的掌握度會更高一點，主要都是一些簡短但重要的觀念說明</p>\n<ul>\n<li>Vue 的工作原理:<ul>\n<li>Vue 更新機制:透過 Proxy 來追蹤更新</li>\n<li>Vue 的 Template 語法:透過模板語法，將 HTML 語法與方法、資料內聚在一起</li>\n<li>Vue 透過 Virtual DOM 的比對來渲染修改過的頁面到實際 DOM</li>\n<li>支援 Fragments: 一個、或者掛載多個 Vue Instance</li>\n<li>透過 ref 讓 vue 訪問 DOM</li>\n</ul>\n</li>\n<li>Vue 生命週期:透過解說與實際操作中斷點展示生命週期過程中的 hook 與 UI 的狀態</li>\n</ul>\n<h2 id=\"Introducing-Components\"><a href=\"#Introducing-Components\" class=\"headerlink\" title=\"Introducing Components\"></a>Introducing Components</h2><p><strong>2023-02-02</strong>: 很多時候我們並沒有辦法透過到目前為止所學習到的東西來完成所有需求，就像是範例中的兩筆、或多筆資料呈現，如果要針對他做更精細的控制，就會碰上每一筆資料各自的狀態處理問題；而解決辦法就是封裝成一個 component，讓每個元件各自管理它們自己的狀態，當然到目前為止還沒有學到 SFC 與 props 等等，所以這個章節也只是簡單的帶出來問題與解決方案，後續還有一些基礎知識要補</p>\n<h2 id=\"Moving-to-a-Better-Development-Setup-Workflow-with-the-Vue-CLI\"><a href=\"#Moving-to-a-Better-Development-Setup-Workflow-with-the-Vue-CLI\" class=\"headerlink\" title=\"Moving to a Better Development Setup &amp; Workflow with the Vue CLI\"></a>Moving to a Better Development Setup &amp; Workflow with the Vue CLI</h2><p><strong>2023-02-02</strong>:在這個章節開頭，重溫了一下之前的開發方式所遇到的問題，在改善開發流程的部分，使用了 vue cli 來解決先前碰到的問題，也因此開始接觸到當前流行的前端開發方式。影片中解說了 vue cli 的預設範本以及開發階段工作流程說明，其實也就是跟後端編譯式語言一樣，我們所撰寫的代碼不能直接被瀏覽器識別，需要先經過前端編譯的步驟，將其轉換為瀏覽器支援的語法後才能使用，這些東西 vue cli 都已經做好了，能夠在專案開始的時候省去很多設定的繁瑣作業，節省很多時間。當然開發工具也需要能夠支援 SFC 語法，這邊則是透過 VSCode plugin Vetur 來獲得 vue SFC 的 highlight 支援。當這些基礎的工作都準備完成之後，就可以著手開發新專案了</p>\n<p>接下來的練習，則是從一個空白的專案開始，從安裝依賴項目，執行開發伺服器，同時編寫第一個 Vue SFC，熟悉一下開發的流程，並完成一個簡單的元件</p>\n<blockquote>\n<p>當然隨著工具的演進，現在也可以使用<code>npm init vue</code>以及 VSCode 套件<code>Volar</code>來替換</p>\n</blockquote>\n<h2 id=\"Component-Communication\"><a href=\"#Component-Communication\" class=\"headerlink\" title=\"Component Communication\"></a>Component Communication</h2><p><strong>2023-02-06</strong>: 關於組件之間的資料傳遞，基本的解決方案都是透過 <code>props</code>、<code>$emit</code> 直接傳遞數據或方法，在這個章節以一個簡單的範例來解說，也補充了<code>props</code>,<code>$emit</code>定義的方式，便於偵錯。像是下面這樣的方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">props</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">username</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>:<span class=\"title class_\">String</span>,</span><br><span class=\"line\">        <span class=\"attr\">default</span>:<span class=\"string\">&#x27;noname&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">emits</span>:&#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;toggle-favorite&#x27;</span>: <span class=\"keyword\">function</span>(<span class=\"params\">id</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (id) <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">warning</span>(<span class=\"string\">&#x27;id is missing&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>若是有資料要從父組件，往下要傳遞多個子組件，一路傳遞到最底層，中間若是都用 props 來層層傳遞就會很多餘，因此可以改用 <code>provide</code>、<code>inject</code>，不論是資料或函式方法都可以透過這樣的方式傳遞給最底層元件，對於程式碼的整潔有很大幫助，基本上透過這樣的方式大致上就能夠處理好組件資料傳遞的問題了。在講師提供的教學範例中，所有的示範都遵循著一個規則：<strong>根組件提供資料，子組件使用資料</strong></p>\n<h2 id=\"Diving-Deeper-Into-Components\"><a href=\"#Diving-Deeper-Into-Components\" class=\"headerlink\" title=\"Diving Deeper Into Components\"></a>Diving Deeper Into Components</h2><p><strong>2023-02-06</strong>: 在先前的章節中，程式碼雖然可以運作，但若是在比較大型一點點的應用程式之內，就有一些議題值得思考及關注，講師又用了另外一個例子來解釋這一切，包含了</p>\n<ol>\n<li>組件的註冊方式: 全域註冊或是在組件內引用其他組件，基本上一些屬於樣式的東西全站都會用到，所以樣式組件應該會是全域註冊</li>\n<li>限縮樣式的有效範圍: <code>style scoped</code></li>\n<li>簡介<code>slot</code>、<code>named slot</code>的使用方式</li>\n<li>動態組件相關:dynamic component、<code>keep-alive</code></li>\n<li><code>teleport</code>標籤，可用於改變輸出的 HTML 位置</li>\n<li>簡介了一下檔案命名及目錄存放的建議</li>\n</ol>\n<p>在這邊講師重構範例中有一段是因為想要消除重複的 css 樣式而建立了一個 <code>BaseCard</code> 的組件，這是我沒想過的，可能是因為我完全不碰 CSS 所以對於這部分敏感度很低，但是經過示範後，才發現這樣的做法的確可以讓我目前專案很多東西都更簡潔；而要注意的地方是原先的樣式，因為作用域的關係也要隨之搬移到 <code>BaseCard</code>組件內，這樣可以避免在元件內宣告全域樣式從而影響到別的地方。</p>\n<p>另外由於可以透過 <code>$slot.header</code> 檢查上層元件是否有傳入 header 的 slot 內容，因此也可以用下面的技巧來渲染輸出結果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">header</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;$slots.header&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>而在這邊還有更重要也是非常實用的一個技巧，那就是透過 slot 由父組件傳遞內容給子組件的同時，在父組件使用的資料是子組件提供的，這個觀念就是<code>scoped slot</code>，意思就是讓這個 slot 在父、子組件之間的 scoped 去共享資料，範例如下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 父組件:透過 slotProps 取得 scoped slot 所綁定的所有資料--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">course-goals</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">default</span>=<span class=\"string\">&quot;slotProps&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123; slotProps.item &#125;&#125; - &#123;&#123; slotProps.anotherProp &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">course-goals</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 子組件:宣告 slot 的同時綁定資料提供給 scoped slot --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;goal in goals&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;goal&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">:item</span>=<span class=\"string\">&quot;goal&quot;</span> <span class=\"attr\">another-prop</span>=<span class=\"string\">&quot;something&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>更細節的部份可以看一下 Vue 官網<a href=\"https://vuejs.org/guide/components/slots.html#scoped-slots\">Slots</a>說明會更清晰一點</p>\n<blockquote>\n<p>連續幾個範例下來，我發現講師在設計課程的時候是有用心過的，可以注意到每次透過解說範例來教學新的指令的時候，都是伴隨著需求而直觀的寫出第一版，隨後學習到更多東西，或者是碰到問題後，再接著用別的方式改善，其實就是一直在針對程式碼進行重構，而在重構過程中，也都在為了消除重複，不管是程式碼、HTML 或者是樣式，從而使最終程式碼變得更為清晰易懂</p>\n</blockquote>\n<h2 id=\"Course-Project-The-Learning-Resources-App\"><a href=\"#Course-Project-The-Learning-Resources-App\" class=\"headerlink\" title=\"Course Project: The Learning Resources App\"></a>Course Project: The Learning Resources App</h2><p><strong>2023-02-06</strong>:之前學習過的東西，在這個章節都實際演練一次加深印象，同時在過程中伴隨著講解說明，將組件的設計概念、目錄配置及考量的原因都一併解說，含金量很高。這邊會從 <code>components</code> 目錄開始，底下再開始細分<code>UI</code>(帶入 base 組件概念)、<code>layouts</code>(共用布局)以及應用程式本身功能的目錄；同時也依據各種組件，決定採用<code>Global</code>或者是<code>Local</code>引用，順便帶了一下命名規則概念，這些都是重溫先前學習過的東西，相信對於不是一開始就學習前端的人會有所幫助</p>\n<p>從頭到尾跟著做一遍，的確也發現了許多地方以為自己知道，但實戰總會卡住想一下的情況，沒有辦法，多練習幾次就知道了，這一章節的練習對於學習效果的確是不錯的</p>\n<h2 id=\"Forms\"><a href=\"#Forms\" class=\"headerlink\" title=\"Forms\"></a>Forms</h2><p><strong>2023-02-07</strong>:關於表單的部分專門弄了一個章節來解說，其實也就是把 vue 綁定各種表單元素的東西做過一次，一些比較容易錯誤的地方也有說明，至少看完這章節能夠將表單資料記錄下來就是了，至於驗證提示的方式，也有稍微示範一下，比較特別的是最後有補充如何自訂表單客製化元件，是個不錯的啟發。</p>\n<h2 id=\"Sending-Http-Requests\"><a href=\"#Sending-Http-Requests\" class=\"headerlink\" title=\"Sending Http Requests\"></a>Sending Http Requests</h2><p><strong>2023-02-07</strong>:這章節很有意思，除了教怎麼發出請求獲取資料以外，當然也帶了一下 firebase，範例透過一個簡單的 local 資料處理範例，展示了新增、讀取的功能，一步步地轉換到將資料儲存於後端，有意思的點在於在跟後端互動的過程不一定是順利的，又或者是為了顧及使用者體驗，所以需要在畫面上有一些回饋，因此針對這些情況作了一些例外處理，這就是實務上一定會碰到的事情</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">fetch</span>(<span class=\"string\">&quot;https://xxxxxxx.firebaseio.com/surveys.json&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&quot;POST&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">headers</span>: &#123; <span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;application/json&quot;</span> &#125;,</span><br><span class=\"line\">    <span class=\"attr\">body</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(sendData),</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (response.<span class=\"property\">ok</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// server 端錯誤</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Could not save data!&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">error</span> = error.<span class=\"property\">message</span></span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Routing-Building-“Multi-Page”-Single-Page-Applications\"><a href=\"#Routing-Building-“Multi-Page”-Single-Page-Applications\" class=\"headerlink\" title=\"Routing: Building “Multi-Page” Single Page Applications\"></a>Routing: Building “Multi-Page” Single Page Applications</h2><p><strong>2023-02-07</strong>: 這個章節主要解說 SPA 的概念及實作，重點會放在路由的部分，由於涉及的東西真的很多，只看一次應該會是有點印象而已，自己之後可能會再參照官網說明或者是再多看幾次。除了基本的路由設定以外，還包含了動態路由參數、將動態路由參數改用 props 傳遞給元件、巢狀路由等等，講師在示範的時候我覺得蠻詳細的，路由順序設定的部分也特別提醒了路由比對的小問題及解決方案，算是非常貼心了</p>\n<h2 id=\"Animations-Transitions\"><a href=\"#Animations-Transitions\" class=\"headerlink\" title=\"Animations &amp; Transitions\"></a>Animations &amp; Transitions</h2><p>TBD</p>\n<h2 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h2><p>TBD</p>\n<h2 id=\"Main-Project-“Find-a-Coach”-Web-App\"><a href=\"#Main-Project-“Find-a-Coach”-Web-App\" class=\"headerlink\" title=\"Main Project: “Find a Coach” Web App\"></a>Main Project: “Find a Coach” Web App</h2><p>TBD</p>\n<h2 id=\"Vue-Authentication\"><a href=\"#Vue-Authentication\" class=\"headerlink\" title=\"Vue &amp; Authentication\"></a>Vue &amp; Authentication</h2><p>TBD</p>\n<h2 id=\"Optimizing-Deploying-Vue-Apps\"><a href=\"#Optimizing-Deploying-Vue-Apps\" class=\"headerlink\" title=\"Optimizing &amp; Deploying Vue Apps\"></a>Optimizing &amp; Deploying Vue Apps</h2><p>TBD</p>\n<h2 id=\"The-Composition-API-Replacing-the-Options-API\"><a href=\"#The-Composition-API-Replacing-the-Options-API\" class=\"headerlink\" title=\"The Composition API - Replacing the Options API\"></a>The Composition API - Replacing the Options API</h2><p>TBD</p>\n<h2 id=\"Reusing-Functionality-Mixins-Custom-Composition-Functions\"><a href=\"#Reusing-Functionality-Mixins-Custom-Composition-Functions\" class=\"headerlink\" title=\"Reusing Functionality: Mixins &amp; Custom Composition Functions\"></a>Reusing Functionality: Mixins &amp; Custom Composition Functions</h2><p>TBD</p>\n<h2 id=\"Roundup-Next-Steps\"><a href=\"#Roundup-Next-Steps\" class=\"headerlink\" title=\"Roundup &amp; Next Steps\"></a>Roundup &amp; Next Steps</h2><p>TBD</p>\n<h2 id=\"Vue2-to-Vue3-Migration\"><a href=\"#Vue2-to-Vue3-Migration\" class=\"headerlink\" title=\"Vue2 to Vue3 Migration\"></a>Vue2 to Vue3 Migration</h2><p>TBD</p>\n<h2 id=\"Learn-Vue2-Old-Course-Content\"><a href=\"#Learn-Vue2-Old-Course-Content\" class=\"headerlink\" title=\"Learn Vue2 | Old Course Content\"></a>Learn Vue2 | Old Course Content</h2><p>這個章節主要是釋出一些舊的課程資源，原因是當初課程是為了 Vue2 所錄製的，後來 Vue3 發佈之後，講師也將課程全部重新錄製為 Vue3 版本。若是想要訪問原始課程內容學習 Vue2 的話，在這邊可以透過講師提供的原始影片及代碼學習，影片品質很不錯，可惜的是沒有提供任何語系的字幕檔案</p>\n","categories":["心得"]},{"title":"將資料存成eml格式下載-使用裝飾模式","url":"/artblog//eml-format-download-with-decorator-pattern/","content":"<p>之前曾經有個案例是要將使用者輸入的文案轉存成 EMAIL 的格式，下載後可以讓他們自行編輯再轉發出去，這邊就記錄一下重點</p>\n<span id=\"more\"></span>\n\n<h2 id=\"概略說明\"><a href=\"#概略說明\" class=\"headerlink\" title=\"概略說明\"></a>概略說明</h2><p>因為先前採用的輸入介面是 CKEditor , 然後使用者如果在裡面編輯的話，實際上是存成 HTML，但如果它們又想要轉寄這些信件，CKEditor 的所見即所得就會造成很大的困擾。因為並不是每一家的 EMAIL 服務都能夠支援這些 HTML 語法與 CSS，大都是只有支援一部分，有許多新的語法並不支援。但是使用者又希望它們能夠在網站上直接將這些東西轉寄出去，當然如果直接這樣幹的話會有很多繞不過去的問題。</p>\n<p>最終的解決方案就是將這些東西轉存成 eml 格式，然後讓使用者下載下來，讓它們自己編輯後再轉寄出去<br>附件的部分直接在編輯時附加在信件內；圖片則是轉 base64 後就可以直接顯示</p>\n<ol>\n<li>前端就是點擊後呼叫後端並下載存成 EML 檔案</li>\n<li>後端就是負責提供某個文章的 EMAIL 格式資料給前端</li>\n</ol>\n<h2 id=\"下載檔案\"><a href=\"#下載檔案\" class=\"headerlink\" title=\"下載檔案\"></a>下載檔案</h2><p>前端的部分比較單純，呼叫後端後將內容存檔即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"title function_\">mailDownload</span>(<span class=\"params\">id</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 向後端發出請求取得檔案內容</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> response = <span class=\"keyword\">await</span> <span class=\"title class_\">ArticleModule</span>.<span class=\"title function_\">downloadEmail</span>(id)</span><br><span class=\"line\">    <span class=\"comment\">// 檔案下載</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> $a = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;a&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> url = <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">createObjectURL</span>(response.<span class=\"property\">data</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileName = response.<span class=\"property\">headers</span>[<span class=\"string\">&quot;content-disposition&quot;</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&quot;=&quot;</span>)[<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> currentFileName = fileName.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/&quot;(.*)&quot;/</span>, <span class=\"string\">&quot;$1&quot;</span>).<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;UTF-8&#x27;&#x27;&quot;</span>, <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    $a.<span class=\"property\">download</span> = <span class=\"built_in\">decodeURIComponent</span>(currentFileName)</span><br><span class=\"line\">    $a.<span class=\"property\">href</span> = url</span><br><span class=\"line\">    $a.<span class=\"title function_\">click</span>()</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">revokeObjectURL</span>(url), <span class=\"number\">5000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"轉存成-eml-格式\"><a href=\"#轉存成-eml-格式\" class=\"headerlink\" title=\"轉存成 eml 格式\"></a>轉存成 eml 格式</h2><p>透過<a href=\"https://jsfiddle.net/seanodotcom/yd1n8Lfh/\">.EML - Email Generation in JS</a>範例，可以知道核心的解決方案就是像範例中一樣，把一些郵件的資訊放在最前面，指定好收件人、信件主旨，接著就是準備 HTML 的信件內容</p>\n<p>又因為這邊要做兩三件事情，都是針對信件內容作加工處理，我覺得還蠻適合用裝飾模式，就順便練習一下</p>\n<ol>\n<li>針對信件內容的圖片網址，轉 base64 編碼</li>\n<li>針對信件內容，最前面加上一些信件的資訊，例如收件人、寄件人、信件主旨等等</li>\n<li>針對信件內容的部分，將 CKEditor 的 CSS 附加上去</li>\n</ol>\n<h2 id=\"裝飾模式\"><a href=\"#裝飾模式\" class=\"headerlink\" title=\"裝飾模式\"></a>裝飾模式</h2><p>大概就跟穿衣服一樣，所有穿衣服的動作都是圍繞著人這個主體，概念就是這樣而已，穿衣服的行為就是在人的身上穿衣服、穿褲子、穿內衣、戴手錶、穿襪子、穿鞋子這些事情而已，所以就是用下面的介面來表示這個行為</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IPeopleDecorator</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">string</span> <span class=\"title\">Decorate</span>(<span class=\"params\"><span class=\"built_in\">string</span> people</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>用這個例子來說的話，裝飾前是：<code>人</code>，裝飾後就會是:<code>穿著運動上衣的人</code>，其他的裝飾也是一樣的概念</p>\n</blockquote>\n<p>出門運動跑步，大概就會知道你要在你的身上弄好：衣服、褲子、鞋子，最後可能就會<code>穿著運動上衣、運動褲、運動鞋的人</code><br>出門上班上課，大概就會知道你在身上要弄好的是：衣服、褲子、鞋子、背包，最後可能就會<code>穿著襯衫、西裝褲、皮鞋、還拿個公事包的人</code></p>\n<blockquote>\n<p>這只是個例子，不要太認真要帶什麼東西</p>\n</blockquote>\n<p>所以用上面的概念，你就會知道有一個 人的裝飾工廠，可能有兩個方法，一個是準備出門運動的行頭 method、另外一個是準備出門上班上課的行頭 method</p>\n<p>like this</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">PeopleDecoratorFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IPeopleDecorator <span class=\"title\">Sport</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 運動上衣</span></span><br><span class=\"line\">        <span class=\"comment\">// 運動褲</span></span><br><span class=\"line\">        <span class=\"comment\">// 運動鞋</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PeopleDecorator(運動上衣,運動褲,運動鞋);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IPeopleDecorator <span class=\"title\">Work</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 襯衫</span></span><br><span class=\"line\">        <span class=\"comment\">// 西裝褲</span></span><br><span class=\"line\">        <span class=\"comment\">// 皮鞋</span></span><br><span class=\"line\">        <span class=\"comment\">// 公事包</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PeopleDecorator(襯衫,西裝褲,皮鞋,公事包);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">```</span><br><span class=\"line\">`PeopleDecorator`就是實際上穿衣服的行為，用程式碼的概念就是下面這樣</span><br><span class=\"line\"></span><br><span class=\"line\">```cs</span><br><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">PeopleDecorator</span> : <span class=\"title\">IPeopleDecorator</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> List&lt;IPeopleDecorator&gt; _decorators;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ContentDecorator</span>(<span class=\"params\"><span class=\"keyword\">params</span> IPeopleDecorator[] decorators</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 透過建構式把剛剛要準備裝飾的東西都放進來</span></span><br><span class=\"line\">        _decorators = decorators.ToList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 好吧，下面這段我覺得如果改成中文的人，反而更難懂</span></span><br><span class=\"line\">    <span class=\"comment\">// 反正概念就是把剛剛準備要裝飾的東西，一個一個的裝飾在人的身上</span></span><br><span class=\"line\">    <span class=\"comment\">// 就等同於我們把要裝飾的項目，一個一個的在內容上加工是一樣的道理</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Decorate</span>(<span class=\"params\"><span class=\"built_in\">string</span> content</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> decoratedContent = content;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> decorator <span class=\"keyword\">in</span> _decorators)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            decoratedContent = decorator.Decorate(decoratedContent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> decoratedContent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最終要使用的時候就是向下面這樣呼叫就可以了</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">GoToPark</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> people = <span class=\"string\">&quot;art&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> decorator = PeopleDecoratorFactory.Sport();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = decorator.Decorate(people);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">GoToWork</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> people = <span class=\"string\">&quot;art&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> decorator = PeopleDecoratorFactory.Work();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = decorator.Decorate(people);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>整體的概念及程式碼就是這樣了，下面用實際的範例來感覺一下</p>\n<h2 id=\"實際範例\"><a href=\"#實際範例\" class=\"headerlink\" title=\"實際範例\"></a>實際範例</h2><p>輸入驗證的部分以及例外處理的部分因為不是本文重點，直接略過，若實際要用的話記得補上</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Controller</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> FileResult <span class=\"title\">DownloadEmail</span>(<span class=\"params\"><span class=\"built_in\">int</span> id</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 取得文章內容</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> article = ArticleModule.Get(id);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 準備好裝飾者</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> decorator = ContentDecoratorFactory.CreateDecorator(article);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 將裝飾者加工後的內容以UTF8編碼轉成byte陣列</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> emailContent = decorator.Decorate(article.Content);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fileBytes = Encoding.UTF8.GetBytes(emailContent);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指定檔案名稱並回傳</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> fileName = <span class=\"string\">$&quot;[<span class=\"subst\">&#123;article.Type.GetDescription()&#125;</span>] <span class=\"subst\">&#123;article.Subject&#125;</span>.eml&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> File(fileBytes, System.Net.Mime.MediaTypeNames.Application.Octet, fileName);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">ContentDecoratorFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 規定好的圖片網址格式</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> ImageUrlPattern = <span class=\"string\">@&quot;\\/Common\\/ArticleImage\\/[a-zA-Z0-9]&#123;32&#125;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IContentDecorator <span class=\"title\">CreateDecorator</span>(<span class=\"params\">ArticleEntity article</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> pattern = <span class=\"keyword\">new</span> Regex(ImageUrlPattern);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> imageUrlDecorator = <span class=\"keyword\">new</span> ArticleImageDecorator(pattern);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> styleDecorator = <span class=\"keyword\">new</span> CkeditorStyleDecorator();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> htmlDecorator = <span class=\"keyword\">new</span> HtmlTagDecorator(article.Subject);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ContentDecorator(imageUrlDecorator, styleDecorator, htmlDecorator);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">articleImageDecorator</span> : <span class=\"title\">IContentDecorator</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> Regex _pattern;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IarticleFileInfoDao _articleFileInfoDao;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IarticleFileInfoDao articleFileInfoDao =&gt; _articleFileInfoDao ?? (_articleFileInfoDao = DataFactory.GetarticleImageInfoDAO());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">articleImageDecorator</span>(<span class=\"params\">Regex pattern</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _pattern = pattern;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Decorate</span>(<span class=\"params\"><span class=\"built_in\">string</span> content</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _pattern.Replace(content, match =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 取得圖片的 GUID</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> guid = match.Value.Split(<span class=\"string\">&#x27;/&#x27;</span>).Last();</span><br><span class=\"line\">            <span class=\"comment\">// 依據 GUID 找實體檔案資料</span></span><br><span class=\"line\">            articleFileInfo fileInfo = articleFileInfoDao.GetFileInfoByGuid(guid);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fileInfo == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> MyException(ExceptionCode.NotFound, <span class=\"string\">$&quot;cannot found fileInfo by Guid:<span class=\"subst\">&#123;match.Value&#125;</span>&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 檔案實際儲存的路徑</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> baseFolder = <span class=\"string\">&quot;D:\\\\article\\\\&quot;</span></span><br><span class=\"line\">            <span class=\"comment\">// 讀取檔案</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> filePath = <span class=\"built_in\">string</span>.Concat(<span class=\"string\">$@&quot;<span class=\"subst\">&#123;baseFolder&#125;</span><span class=\"subst\">&#123;fileInfo.articleId&#125;</span>\\&quot;</span>, <span class=\"string\">$&quot;<span class=\"subst\">&#123;guid&#125;</span>.jpg&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">byte</span>[] imageBytes = File.ReadAllBytes(filePath);</span><br><span class=\"line\">            <span class=\"built_in\">string</span> base64String = Convert.ToBase64String(imageBytes);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">$&quot;data:image/jpeg;base64,<span class=\"subst\">&#123;base64String&#125;</span>&quot;</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">CkeditorStyleDecorator</span> : <span class=\"title\">IContentDecorator</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Decorate</span>(<span class=\"params\"><span class=\"built_in\">string</span> content</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        sb.AppendLine(<span class=\"string\">&quot;&lt;style&gt;&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 把 CKEditor CSS 放在這邊，當然也可以選擇不要做這件事情，這邊只是範例</span></span><br><span class=\"line\">        <span class=\"comment\">// sb.AppendLine(&quot;@&quot;.ck.ck-placeholder:before,.ck .ck......&quot;)</span></span><br><span class=\"line\">        sb.AppendLine(<span class=\"string\">&quot;&lt;/style&gt;&quot;</span>);</span><br><span class=\"line\">        sb.AppendLine(content);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.ToString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">class</span> <span class=\"title\">HtmlTagDecorator</span> : <span class=\"title\">IContentDecorator</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span> _subject;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HtmlTagDecorator</span>(<span class=\"params\"><span class=\"built_in\">string</span> subject</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _subject = subject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">Decorate</span>(<span class=\"params\"><span class=\"built_in\">string</span> content</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        sb.AppendLine(<span class=\"string\">&quot;To:&quot;</span>);</span><br><span class=\"line\">        sb.AppendLine(<span class=\"string\">&quot;Subject: &quot;</span> + _subject);</span><br><span class=\"line\">        sb.AppendLine(<span class=\"string\">&quot;X-Unsent: 1&quot;</span>);</span><br><span class=\"line\">        sb.AppendLine(<span class=\"string\">&quot;Content-Type: text/html; charset=utf-8&quot;</span>);</span><br><span class=\"line\">        sb.AppendLine(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        sb.AppendLine(<span class=\"string\">@&quot;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&quot;</span>);</span><br><span class=\"line\">        sb.AppendLine(content);</span><br><span class=\"line\">        sb.AppendLine(<span class=\"string\">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.ToString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>整體上就是這樣子，看程式碼可能會有點難理解，不過如果概念懂了之後，用什麼辦法都沒關係，程式碼只是輔助而已，重點是能不能做到你想要的事情，這才是重點。關於裝飾模式有很多介紹的文章跟書籍都有談到，我也看了好多個，以前還寫了個 js 版本的<a href=\"https://partypeopleland.github.io/artblog/2018/06/19/JavaScript-Decorator-Pattern/\">JavaScript Decorator Pattern</a>，最後還是因為這個工作上實際應用上了，才比較有感覺，所以這邊就記錄一下，希望也對別人有幫助。</p>\n","categories":["pattern"],"tags":["decorator"]},{"title":"Unicode 字元轉換為 UTF16","url":"/artblog//unicode-character-convert-to-utf16/","content":"<p>剛好最近都在看編碼的東西，順便整理一下</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Unicode\"><a href=\"#Unicode\" class=\"headerlink\" title=\"Unicode\"></a>Unicode</h2><p>Unicode 又稱萬國碼，是一種電腦編碼規則，目的是為了解決不同語言之間的文字互通，目前，幾乎所有電腦系統都支援基本拉丁字母，並各自支援不同的其他編碼方式。Unicode 為了和它們相互相容，其首 256 個字元保留給 ISO 8859-1(也就是現在大家所熟知的，以 ASCII 為基礎，再添加附加符號、拉丁字母)所定義的字元</p>\n<h2 id=\"Unicode-字元的平面對應\"><a href=\"#Unicode-字元的平面對應\" class=\"headerlink\" title=\"Unicode 字元的平面對應\"></a>Unicode 字元的平面對應</h2><p>目前 Unicode 分為 17 個平面，每個平面包含 65536 個字元，每個平面的字元都有一個獨一無二的點位，這個點位就是該字元的 Unicode 點位，這個點位是一個十六進位的數字，可以用來表示該字元，目前只用了少數平面，主要的就是前四個平面，其他的平面則是用來存放一些不常用的字元，或是一些特殊的字元</p>\n<table>\n<thead>\n<tr>\n<th>平面</th>\n<th>範圍</th>\n<th>中文名</th>\n<th>英文名</th>\n<th>簡稱</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>U+0000 至 U+FFFF</td>\n<td>基本多文種平面</td>\n<td>Basic Multilingual Plane</td>\n<td>BMP</td>\n</tr>\n<tr>\n<td>1</td>\n<td>U+10000 至 U+1FFFF</td>\n<td>多文種補充平面</td>\n<td>Supplementary Multilingual Plane</td>\n<td>SMP</td>\n</tr>\n<tr>\n<td>2</td>\n<td>U+20000 至 U+2FFFF</td>\n<td>表意文字補充平面</td>\n<td>Supplementary Ideographic Plane</td>\n<td>SIP</td>\n</tr>\n<tr>\n<td>3</td>\n<td>U+30000 至 U+3FFFF</td>\n<td>表意文字第三平面</td>\n<td>Tertiary Ideographic Plane</td>\n<td>TIP</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>ref:<a href=\"https://zh.wikipedia.org/wiki/Unicode%E5%AD%97%E7%AC%A6%E5%B9%B3%E9%9D%A2%E6%98%A0%E5%B0%84#%E5%9F%BA%E6%9C%AC%E5%A4%9A%E6%96%87%E7%A7%8D%E5%B9%B3%E9%9D%A2\">Unicode 字元平面對映</a></p>\n</blockquote>\n<h2 id=\"Unicode-的編碼\"><a href=\"#Unicode-的編碼\" class=\"headerlink\" title=\"Unicode 的編碼\"></a>Unicode 的編碼</h2><p>在表示一個 Unicode 字元的時候，會使用 U+4AE0 這樣的格式來表示，其中 U+ 是固定的，後面的數字則是該字元的 Unicode 點位。</p>\n<h2 id=\"UTF8\"><a href=\"#UTF8\" class=\"headerlink\" title=\"UTF8\"></a>UTF8</h2><p>UTF8 的英文是 8-bit Unicode Transformation Format，是一種可以變動長度的字元表示方式</p>\n<ol>\n<li>128 個 ASCII 字元，只需一個位元組編碼（Unicode 範圍由 U+0000 至 U+007F）</li>\n<li>其他西歐國家的會用到的一些字元，少部分則需要用到兩個位元組（Unicode 範圍由 U+0080 至 U+07FF）</li>\n<li>其他大部分的常用字元，包含中文、日文、韓文等，則需要用到三個位元組（Unicode 範圍由 U+0800 至 U+FFFF）</li>\n<li>其他極少使用的 Unicode 輔助平面的字元(也就是 BMP 之外的輔助平面)使用四至六位元組編碼（Unicode 範圍由 U+10000 至 U+1FFFFF 使用四位元組，Unicode 範圍由 U+200000 至 U+3FFFFFF 使用五位元組，Unicode 範圍由 U+4000000 至 U+7FFFFFFF 使用六位元組）。</li>\n</ol>\n<blockquote>\n<p>ref: <a href=\"https://zh.wikipedia.org/wiki/UTF-8\">維基百科 UTF-8</a></p>\n</blockquote>\n<h2 id=\"UTF8-與-UTF16-的比較\"><a href=\"#UTF8-與-UTF16-的比較\" class=\"headerlink\" title=\"UTF8 與 UTF16 的比較\"></a>UTF8 與 UTF16 的比較</h2><p>在輔助平面字元的處理，兩者都需要使用 4 bytes 表示一個字元；但在 BMP 平面的字元處理上，UTF-8 使用 1-3 bytes 表示一個字元，而 UTF-16 則是固定使用 2 bytes 表示一個字元，這也是為什麼 UTF16 在處理 BMP 平面的字元時，會比 UTF8 來的節省空間</p>\n<h2 id=\"Unicode-點位轉換的計算過程-輔助平面的字元\"><a href=\"#Unicode-點位轉換的計算過程-輔助平面的字元\" class=\"headerlink\" title=\"Unicode 點位轉換的計算過程 (輔助平面的字元)\"></a>Unicode 點位轉換的計算過程 (輔助平面的字元)</h2><p><code>𠎀</code>這個字的 Unicode 點位: 0x20380</p>\n<p>首先需要將其扣除 0x10000，因為該點位超過了 0xFFFF，並不屬於 BMP 範圍，所以需要使用 4 個 byte 來表示，扣除掉 0x10000 後，剩下的點位就是該字的編碼</p>\n<p>該字的 Unicode 點位為: 0x20380 - 0x10000 &#x3D; 0x10380，也就是二進位 <code>0001000000 1110000000</code> 將其切割為兩部分，先拿低點位的 10 碼，剩下高點位不足的部分補 0，如此一來就會得到兩個 10 位元組的碼位，</p>\n<ul>\n<li>高點位:<code>0001000000</code></li>\n<li>低點位:<code>1110000000</code></li>\n</ul>\n<p>輔助平面的高低點位初始值為 <code>0xD800</code> 與 <code>0xDC00</code>，所以將剛剛的計算出來的點位加上這兩個值就是該字的編碼</p>\n<blockquote>\n<p>這個初始值，轉為二進位後有 6 碼，再加上切割出來的 10 碼，剛好就是一個 16 位元組的字元</p>\n</blockquote>\n<p>高點位的計算為 0xD800，也就是 <code>110110 0000000000</code>，加上剛剛切割出來的高位十碼 &#x3D; <code>110110 0001000000</code> &#x3D; <code>0xD840</code><br>低點位的計算為 0xDC00，也就是 <code>110111 0000000000</code>，加上剛剛切割出來的低位十碼 &#x3D; <code>110111 1110000000</code> &#x3D; <code>0xDF80</code></p>\n<p>為了要表示這一個字將其轉為二進位後，總共使用了 4 個 byte，也就是 16 個位元組 <code>11011000 01000000 11011111 10000000</code><br>所以 <code>𠎀</code> 的編碼為 <code>0xD840 0xDF80</code></p>\n<p>一般來說瞭解這種東西也沒有甚麼用，但如果有機會接觸到編碼問題，多知道一些細節對於偵錯會有幫助</p>\n<h2 id=\"ReCap\"><a href=\"#ReCap\" class=\"headerlink\" title=\"ReCap\"></a>ReCap</h2><ol>\n<li>Unicode 是把所有的字元都統一編碼，目的是為了解決不同語言之間的文字互通</li>\n<li>在電腦上要處理文字，通常都採用 UTF8，因為更省空間</li>\n<li>UTF16 並沒有比 UTF8 更好，兩者差異只在於如何編碼 BMP 平面的字元，對輔助平面的字元，兩者都需要使用 4 bytes 來表示</li>\n<li>中文難字、EMOJI 等字元，通常都是在輔助平面，所以需要使用 4 bytes 來表示，計算過程可參考上述的範例</li>\n</ol>\n<h2 id=\"延伸-字元計算\"><a href=\"#延伸-字元計算\" class=\"headerlink\" title=\"延伸:字元計算\"></a>延伸:字元計算</h2><p>有的時候會需要限制使用者的輸入字元數，可能是因為 SMS 的字元限制，也可能是因為要開資料庫欄位長度的限制，都會需要計算字元數、或者是 byte 數，這時候就可以使用 JavaScript 的 TextEncoder 來計算字元所佔用的 byte 數</p>\n<p>下列範例，取自<a href=\"https://github.com/CorentinTh/it-tools/blob/main/src/tools/text-statistics/text-statistics.vue\">IT Tools</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">c-card</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">c-input-text</span> <span class=\"attr\">v-model:value</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">multiline</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Your text...&quot;</span> <span class=\"attr\">rows</span>=<span class=\"string\">&quot;5&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">mt-5</span> <span class=\"attr\">flex</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">n-statistic</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;Character count&quot;</span> <span class=\"attr\">:value</span>=<span class=\"string\">&quot;text.length&quot;</span> <span class=\"attr\">flex-1</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">n-statistic</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;Word count&quot;</span> <span class=\"attr\">:value</span>=<span class=\"string\">&quot;text === &#x27;&#x27; ? 0 : text.split(/\\s+/).length&quot;</span> <span class=\"attr\">flex-1</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">n-statistic</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;Line count&quot;</span> <span class=\"attr\">:value</span>=<span class=\"string\">&quot;text === &#x27;&#x27; ? 0 : text.split(/\\r\\n|\\r|\\n/).length&quot;</span> <span class=\"attr\">flex-1</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">n-statistic</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;Byte size&quot;</span> <span class=\"attr\">:value</span>=<span class=\"string\">&quot;formatBytes(getStringSizeInBytes(text))&quot;</span> <span class=\"attr\">flex-1</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">c-card</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<p>當中的 Character count 就是使用者輸入的字元長度，直接使用 text.length 即可；Byte size 經由<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder\">TextEncoder</a>計算，就算使用者輸入了 emoji 也可以正確的計算使用的 byte 數</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getStringSizeInBytes</span>(<span class=\"params\">text: string</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TextEncoder</span>().<span class=\"title function_\">encode</span>(text).<span class=\"property\">buffer</span>.<span class=\"property\">byteLength</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">formatBytes</span>(<span class=\"params\">bytes: number, decimals = <span class=\"number\">2</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (bytes === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;0 Bytes&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> k = <span class=\"number\">1024</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> sizes = [<span class=\"string\">&quot;Bytes&quot;</span>, <span class=\"string\">&quot;KB&quot;</span>, <span class=\"string\">&quot;MB&quot;</span>, <span class=\"string\">&quot;GB&quot;</span>, <span class=\"string\">&quot;TB&quot;</span>, <span class=\"string\">&quot;PB&quot;</span>, <span class=\"string\">&quot;EB&quot;</span>, <span class=\"string\">&quot;ZB&quot;</span>, <span class=\"string\">&quot;YB&quot;</span>];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> i = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">log</span>(bytes) / <span class=\"title class_\">Math</span>.<span class=\"title function_\">log</span>(k));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">Number</span>.<span class=\"built_in\">parseFloat</span>((bytes / k ** i).toFixed(decimals))&#125;</span> <span class=\"subst\">$&#123;sizes[i]&#125;</span>`</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"sonarqube分析azure專案","url":"/artblog//sonarqube-analyze-azure-project/","content":"<p>在使用地端 SonarQube 分析 Azure 專案時，遇到了一些問題，紀錄一下處理的方式備忘</p>\n<span id=\"more\"></span>\n\n<h3 id=\"開放主機連線\"><a href=\"#開放主機連線\" class=\"headerlink\" title=\"開放主機連線\"></a>開放主機連線</h3><p>地端 SonarQube 需要能夠連線到 Azure DevOps，因此需要請網管設定開放連線</p>\n<h2 id=\"Azure-DevOps\"><a href=\"#Azure-DevOps\" class=\"headerlink\" title=\"Azure DevOps\"></a>Azure DevOps</h2><h3 id=\"建立-Personal-Access-Token\"><a href=\"#建立-Personal-Access-Token\" class=\"headerlink\" title=\"建立 Personal Access Token\"></a>建立 Personal Access Token</h3><p>Azure DevOps 需要建立一個 PAT (Personal Access Token) 並且設定正確的權限<br>Ref:<a href=\"https://docs.sonarsource.com/sonarqube/latest/devops-platform-integration/azure-devops-integration/\">Azure DevOps integration</a></p>\n<p><img src=\"/artblog/sonarqube-analyze-azure-project/azure-pat.png\"></p>\n<p>權限的部分只需要 Code 區塊的 Read &#x2F; Write，至於為甚麼需要 Write，嗯，官網說的。有人知道可以告訴我<br><img src=\"/artblog/sonarqube-analyze-azure-project/azure-pat2.png\"></p>\n<h2 id=\"SonarQube\"><a href=\"#SonarQube\" class=\"headerlink\" title=\"SonarQube\"></a>SonarQube</h2><h3 id=\"遠端主機設定-Git-代理\"><a href=\"#遠端主機設定-Git-代理\" class=\"headerlink\" title=\"遠端主機設定 Git 代理\"></a>遠端主機設定 Git 代理</h3><p>因為遠端主機並不能直接連外網，所以需要透過 proxy，這邊是直接設定 git 的 proxy</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#設置代理</span></span><br><span class=\"line\">git config --global http.proxy http://myproxy:8080</span><br><span class=\"line\">git config --global https.proxy http://myproxy:8080</span><br><span class=\"line\"><span class=\"comment\"># 查看代理</span></span><br><span class=\"line\">git config --global --get http.proxy</span><br><span class=\"line\">git config --global --get https.proxy</span><br><span class=\"line\"><span class=\"comment\"># 移除代理</span></span><br><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> https.proxy</span><br></pre></td></tr></table></figure>\n\n<p>在這個部分會先透過 git clone 測試一下，網址採用的是 PAT 的方式，這樣是為了可以在 jenkins 去抓 repo</p>\n<h3 id=\"SonarQube-主機需支援專案的-Framework\"><a href=\"#SonarQube-主機需支援專案的-Framework\" class=\"headerlink\" title=\"SonarQube 主機需支援專案的 Framework\"></a>SonarQube 主機需支援專案的 Framework</h3><p>就是專案用到 .net8，所以需要裝一下，這個看狀況而定<br>Ref:<a href=\"https://dotnet.microsoft.com/zh-tw/download/dotnet/8.0\">Download .NET8</a></p>\n<h3 id=\"SonarQube-主機下載-JDK-17-給分析工具使用\"><a href=\"#SonarQube-主機下載-JDK-17-給分析工具使用\" class=\"headerlink\" title=\"SonarQube 主機下載 JDK 17 給分析工具使用\"></a>SonarQube 主機下載 JDK 17 給分析工具使用</h3><p>我試過了 sonarscanner.zip 下載執行，但他根本不掃 C# 的檔案；因此分析專案用的是 <code>SonarScanner for .NET</code></p>\n<p>我在這邊選擇的是 <code>dotnet tool install --global dotnet-sonarscanner</code> 這個方式去使用，而該工具目前最新版本需要 JDK 17<br>到<a href=\"https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html\">Java SE 17 Archive Downloads</a>下載<a href=\"https://download.oracle.com/java/17/archive/jdk-17.0.11_windows-x64_bin.zip\">Windows x64 Compressed Archive</a>後，解壓縮到指定目錄，我是解壓縮到<code>D:\\java\\jdk-17.0.11</code></p>\n<p>Ref:</p>\n<ol>\n<li><a href=\"https://docs.sonarsource.com/sonarqube/latest/analyzing-source-code/scanners/dotnet/introduction/\">Introduction to the SonarScanner for .NET</a></li>\n<li><a href=\"https://docs.sonarsource.com/sonarqube/latest/analyzing-source-code/scanners/dotnet/installing/\">Installing the SonarScanner for .NET</a></li>\n</ol>\n<h3 id=\"SonarQube-設置-Azure-DevOps-資訊\"><a href=\"#SonarQube-設置-Azure-DevOps-資訊\" class=\"headerlink\" title=\"SonarQube 設置 Azure DevOps 資訊\"></a>SonarQube 設置 Azure DevOps 資訊</h3><p>假設你的 azure 組織叫做 <code>MYORG</code>，網址是 <code>https://dev.azure.com/MYORG</code>，就像這樣填寫即可，而剛剛產生的<code>PAT</code>也在這邊填入<br><img src=\"/artblog/sonarqube-analyze-azure-project/sonarqube-azure2.png\"></p>\n<p>設定完成後，可以看到下方按鈕檢查結果是綠色可用的<br><img src=\"/artblog/sonarqube-analyze-azure-project/sonarqube-azure.png\"></p>\n<h2 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a>Jenkins</h2><h3 id=\"新增-credentials\"><a href=\"#新增-credentials\" class=\"headerlink\" title=\"新增 credentials\"></a>新增 credentials</h3><p>密碼填入 PAT，帳號隨意，ID 取名好記的，例如 <code>my-azure-project</code><br><img src=\"/artblog/sonarqube-analyze-azure-project/jenkins-credentials.png\"></p>\n<h3 id=\"建立-Jenkins-專案\"><a href=\"#建立-Jenkins-專案\" class=\"headerlink\" title=\"建立 Jenkins 專案\"></a>建立 Jenkins 專案</h3><p>參數都是假的，主要就是 azure repo 的網址， credentialsId 用剛剛新增的<br>Branch 可以用參數化的方式，這樣就可以在 jenkins 上選擇要分析的分支<br>sonarqube.bat 是分析專案的 bat 檔，後面會提到</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">node(<span class=\"string\">&#x27;windows-node-sonarqube&#x27;</span>) &#123;</span><br><span class=\"line\">    ws(<span class=\"string\">&#x27;D:\\\\MyAzureProject&#x27;</span>) &#123;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;git&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//deleteDir()</span></span><br><span class=\"line\">            checkout([<span class=\"attr\">$class:</span> <span class=\"string\">&#x27;GitSCM&#x27;</span>, <span class=\"attr\">branches:</span> [[<span class=\"attr\">name:</span> <span class=\"string\">&#x27;$Branch&#x27;</span>]], <span class=\"attr\">doGenerateSubmoduleConfigurations:</span> <span class=\"literal\">false</span>, <span class=\"attr\">extensions:</span> [], <span class=\"attr\">submoduleCfg:</span> [], <span class=\"attr\">userRemoteConfigs:</span> [[<span class=\"attr\">credentialsId:</span> <span class=\"string\">&#x27;my-azure-project&#x27;</span>, <span class=\"attr\">url:</span> <span class=\"string\">&#x27;https://dev.azure.com/&lt;MYORG&gt;/&lt;MYPROJECT&gt;/_git/&lt;MyPROJECT&gt;&#x27;</span>]]])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stage(<span class=\"string\">&#x27;analyze macro&#x27;</span>) &#123;</span><br><span class=\"line\">            bat <span class=\"string\">&#x27;D:\\\\Tool\\\\art\\\\sonarqube.bat&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分析專案\"><a href=\"#分析專案\" class=\"headerlink\" title=\"分析專案\"></a>分析專案</h2><h3 id=\"建立-SonarQube-分析專案\"><a href=\"#建立-SonarQube-分析專案\" class=\"headerlink\" title=\"建立 SonarQube 分析專案\"></a>建立 SonarQube 分析專案</h3><p>選擇 <code>From Azure DevOps</code><br><img src=\"/artblog/sonarqube-analyze-azure-project/sonarqube-create.png\"></p>\n<p>然後就挑你的目標專案，很抱歉這邊我碼的亂七八糟，因為是公司專案，但大概意思就是這樣，選擇完畢後右上角會有個 <code>Set up selected repository</code>，點下去到下一步驟<br><img src=\"/artblog/sonarqube-analyze-azure-project/sonarqube-create2.png\"></p>\n<p>接著就是問怎麼分析，選擇本地<br><img src=\"/artblog/sonarqube-analyze-azure-project/sonarqube-create3.png\"></p>\n<p>接下的步驟就跟本地專案差不多，就不再贅述<br><img src=\"/artblog/sonarqube-analyze-azure-project/sonarqube-create4.png\"></p>\n<h3 id=\"分析指令\"><a href=\"#分析指令\" class=\"headerlink\" title=\"分析指令\"></a>分析指令</h3><p>這個是分析的指令，為了方便測試寫成 bat，之後可以改成 jenkins groovy script 就把他拆開即可，主要是為了主機上的切換 java 版本而採用這樣的方式，專案的 key 還有參數都是假的，請自行替換，專案 key 可以在 SonarQube 專案頁面看到<br><img src=\"/artblog/sonarqube-analyze-azure-project/sonarqube-create5.png\"></p>\n<figure class=\"highlight bat\"><table><tr><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\"><span class=\"comment\">REM 保存现有 PATH</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> &quot;ORIGINAL_PATH=<span class=\"variable\">%PATH%</span>&quot;</span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">REM 设置新的 Java 路径</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> &quot;JAVA_HOME=D:\\java\\jdk-<span class=\"number\">17</span>.<span class=\"number\">0</span>.<span class=\"number\">11</span>&quot;</span><br><span class=\"line\"><span class=\"built_in\">set</span> &quot;<span class=\"built_in\">PATH</span>=<span class=\"variable\">%JAVA_HOME%</span>\\bin;<span class=\"variable\">%PATH%</span>&quot;</span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">REM 验证新的 java 版本</span></span><br><span class=\"line\">java -version</span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">REM 初始化 SonarQube 分析</span></span><br><span class=\"line\">dotnet sonarscanner begin /k:&quot;myproject-key&quot; /d:sonar.host.url=&quot;http://sonarqube.my.<span class=\"built_in\">net</span>&quot; /d:sonar.login=&quot;sqp_xxxxxxxx&quot; /d:sonar.exclusions=&quot;**/*.xml,**/node_modules/**,.sonarqube/**&quot; /d:sonar.inclusions=&quot;**/*.cs&quot;</span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">REM 构建项目</span></span><br><span class=\"line\">dotnet build</span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">REM 结束 SonarQube 分析</span></span><br><span class=\"line\">dotnet sonarscanner end /d:sonar.login=&quot;sqp_xxxxxxxx&quot;</span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">REM 恢复原始 PATH</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> &quot;<span class=\"built_in\">PATH</span>=<span class=\"variable\">%ORIGINAL_PATH%</span>&quot;</span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">REM 验证恢复后的 java 版本</span></span><br><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"遠端主機複製-submodule\"><a href=\"#遠端主機複製-submodule\" class=\"headerlink\" title=\"遠端主機複製 submodule\"></a>遠端主機複製 submodule</h3><p>因為專案有 submodule，又因為不能直接連線，我這邊是直接把本地專案的 submodule 複製到遠端主機，雖然不是正確的方式，但是能用</p>\n","tags":["sonarqube"]},{"title":"wsl 安裝使用 oh-my-posh","url":"/artblog//on-my-posh-in-wsl/","content":"<p>在 wsl 使用 oh-my-posh 的 step by step</p>\n<span id=\"more\"></span>\n<h2 id=\"安裝-oh-my-posh\"><a href=\"#安裝-oh-my-posh\" class=\"headerlink\" title=\"安裝 oh-my-posh\"></a>安裝 oh-my-posh</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -s https://ohmyposh.dev/install.sh | bash -s</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/on-my-posh-in-wsl/wsl.jpg\"></p>\n<p>貼上指令後如果跟我一樣 wsl 環境還沒裝 unzip 的，可以依照下列指令安裝</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo su</span><br><span class=\"line\">apt update</span><br><span class=\"line\">apt install unzip</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/on-my-posh-in-wsl/wsl-unzip.jpg\"><br>接著再重新透過 <code>curl</code> 執行遠端的安裝指令，要等一會兒</p>\n<p><img src=\"/artblog/on-my-posh-in-wsl/wsl-install.jpg\"></p>\n<h2 id=\"安裝字體\"><a href=\"#安裝字體\" class=\"headerlink\" title=\"安裝字體\"></a>安裝字體</h2><p>官網建議安裝的字體是 <code>meslo</code>，當然是從善如流，用管理員權限執行安裝指令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">oh-my-posh font install</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/on-my-posh-in-wsl/wsl-font.jpg\"></p>\n<p>選取 Meslo 安裝，不知道是我電腦比較慢，還是在 wsl 環境安裝就是會比較慢，等待實在是有點久，於是我就CTRL+C中斷它了，依據以前的經驗，字型會影響THEME是否可以正確顯示，於是我打算先測試看看是否能執行 oh-my-posh 的功能</p>\n<h2 id=\"測試-oh-my-posh\"><a href=\"#測試-oh-my-posh\" class=\"headerlink\" title=\"測試 oh-my-posh\"></a>測試 oh-my-posh</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">&quot;<span class=\"subst\">$(oh-my-posh init bash)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 wsl 指令環境下執行後，就會發現成功改變了指令列顯示<br><img src=\"/artblog/on-my-posh-in-wsl/wsl-init.jpg\"></p>\n<p>很好，看來說不定是因為我 windows 已經安裝過好幾種字體的關係??所以現在不用裝字體了~</p>\n<h2 id=\"將-oh-my-posh-寫入-profile\"><a href=\"#將-oh-my-posh-寫入-profile\" class=\"headerlink\" title=\"將 oh-my-posh 寫入 profile\"></a>將 oh-my-posh 寫入 profile</h2><p>剛剛的方法在退出之後，重新進入 wsl 就失效，所以我們必須將指令寫在每次進去都會執行的設定內</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi ~/.profile</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/on-my-posh-in-wsl/wsl-profile.jpg\"></p>\n<p>將指令列在下面<br><img src=\"/artblog/on-my-posh-in-wsl/wsl-profile2.jpg\"></p>\n<p>然後<code>exit</code>離開 <code>wsl</code> 系統，接著再重新進入一次<br><img src=\"/artblog/on-my-posh-in-wsl/wsl-ok.jpg\"></p>\n<blockquote>\n<p>如果想要看 cmd 怎麼安裝，可以參考先前的文章 <code>使用oh-my-posh美化指令列工具-powershell, windows terminal</code>，裡面有提到須透過 <code>clink</code> 來做</p>\n</blockquote>\n<h2 id=\"選擇自己喜歡的THEME\"><a href=\"#選擇自己喜歡的THEME\" class=\"headerlink\" title=\"選擇自己喜歡的THEME\"></a>選擇自己喜歡的THEME</h2><p>還記得剛剛安裝完畢的時候，有提示將 theme 安裝在 root 底下 <code>/root/.cache/oh-my-posh/themes</code>，<br>所以我們切到那邊去看看</p>\n<p><img src=\"/artblog/on-my-posh-in-wsl/wsl-theme.jpg\"></p>\n<p>不過我還是比較喜歡看<a href=\"https://ohmyposh.dev/docs/themes\">官網</a></p>\n<p>從官網中我覺得 <code>gmay</code> 還不錯，於是我將剛剛暫存路徑的 gmay.omp.json 複製到我自己的目錄下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo su</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /root/.cache/oh-my-posh/themes</span><br><span class=\"line\"><span class=\"built_in\">cp</span> gmay.omp.json /home/art</span><br><span class=\"line\"><span class=\"built_in\">exit</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/artblog/on-my-posh-in-wsl/wsl-copy.jpg\"></p>\n<p>然後測試一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">eval &quot;$(oh-my-posh init bash --config ~/gmay.omp.json)&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/artblog/on-my-posh-in-wsl/wsl-test.jpg\"></p>\n<p>看樣子還行，將他替換掉設定內的指令就行了 (這邊就不截圖了，請參考上面 <code>vi .profile</code>)</p>\n<h2 id=\"其他注意事項\"><a href=\"#其他注意事項\" class=\"headerlink\" title=\"其他注意事項\"></a>其他注意事項</h2><p>寫完之後才發現微軟有文件，照著做就行了<a href=\"https://learn.microsoft.com/zh-tw/windows/terminal/tutorials/custom-prompt-setup#customize-your-wsl-prompt-with-oh-my-posh\">使用 Oh My Posh 自訂 WSL 提示</a></p>\n<p>如果已經有安裝在WINDOWS底下，WSL也可以共用同一份檔案</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">或者，如果您在有 PowerShell 和 WSL 的 Windows 中使用 oh-my-posh，可以指向 Windows 使用者主資料夾中的主題，以與 WSL 共用 PowerShell 主題。 在您的 WSL 發行版本 .profile 路徑，將 ~ 取代為路徑：/mnt/c/Users/&lt;WINDOWSUSERNAME&gt;。 將 &lt;WINDOWSUSERNAME&gt; 取代為您自己的 Windows 使用者名稱。</span><br></pre></td></tr></table></figure>\n\n<p>有興趣的人可以根據文件重新配置一下，我是懶了~</p>\n","tags":["oh-my-posh"]},{"title":"使用 docker-compose 建立本地測試環境","url":"/artblog//create-local-test-environment-with-docker-compose/","content":"<p>最主要是想要解決開發過程中，非常依賴 LAB 環境所提供的資料庫，一旦 LAB 環境無法使用，就無法進行開發，因此透過 docker-compose 建立本地測試環境，來解決這個問題<br>當然後續因為懶惰我也沒有完全做完(因為依賴的不只是資料庫，還有其他服務)，但是這個方法是可行的，提供參考</p>\n<span id=\"more\"></span>\n\n<h2 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h2><ol>\n<li>網站本體，需要先將網站自己本身的 dockerfile 準備好</li>\n<li>資料庫，這邊使用 mysql 並且假設只有一個資料庫的依賴用做示範</li>\n<li>adminer，這是一個簡單的資料庫管理工具，用來管理 mysql 的資料庫</li>\n</ol>\n<h2 id=\"網站本體-dockerfile\"><a href=\"#網站本體-dockerfile\" class=\"headerlink\" title=\"網站本體 dockerfile\"></a>網站本體 dockerfile</h2><p>實際發布文章的話需要改寫成簡單的範本，應該用預設的 asp.net mvc 範本就可以了<br>大概長這樣</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用官方 ASP.NET Core Runtime 作為基礎映像</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> mcr.microsoft.com/dotnet/aspnet:<span class=\"number\">5.0</span> AS base</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">443</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用官方 ASP.NET Core SDK 作為建置映像的基礎</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> mcr.microsoft.com/dotnet/sdk:<span class=\"number\">5.0</span> AS build</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /src</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> [<span class=\"string\">&quot;YourAspNetMvcProject.csproj&quot;</span>, <span class=\"string\">&quot;YourAspNetMvcProject/&quot;</span>]</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> dotnet restore <span class=\"string\">&quot;YourAspNetMvcProject/YourAspNetMvcProject.csproj&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> . .</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> <span class=\"string\">&quot;/src/YourAspNetMvcProject&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> dotnet build <span class=\"string\">&quot;YourAspNetMvcProject.csproj&quot;</span> -c Release -o /app/build</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 進行發行</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> build AS publish</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> dotnet publish <span class=\"string\">&quot;YourAspNetMvcProject.csproj&quot;</span> -c Release -o /app/publish</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 開始建立最終映像，將發行版拷貝到官方 ASP.NET Core Runtime 映像中</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> base AS final</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=publish /app/publish .</span></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;dotnet&quot;</span>, <span class=\"string\">&quot;YourAspNetMvcProject.dll&quot;</span>]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"資料庫-docker-compose\"><a href=\"#資料庫-docker-compose\" class=\"headerlink\" title=\"資料庫 docker-compose\"></a>資料庫 docker-compose</h2><p>直接透過 docker-compose 建立，並給予設定好預設的 root 密碼就可以了，當然也要包含初始化資料庫的 sql 檔案<br>將其放置於特定目錄，例如專案下的 sql-init 目錄，並且再透過 docker-compose 的設定 volume 來將其掛載到 mysql 的初始化目錄<br>例如</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- sql-init/init-db.sql</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> mydb <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8mb4 <span class=\"keyword\">COLLATE</span><span class=\"operator\">=</span>utf8mb4_general_ci;</span><br><span class=\"line\">USE mydb;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> mydb.main_info (</span><br><span class=\"line\">  id <span class=\"type\">INT</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"string\">&#x27;Id&#x27;</span>,</span><br><span class=\"line\">  name <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;名稱&#x27;</span>,</span><br><span class=\"line\">  is_del <span class=\"type\">SMALLINT</span>(<span class=\"number\">1</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">0</span> COMMENT <span class=\"string\">&#x27;是否虛擬刪除&#x27;</span>,</span><br><span class=\"line\">  created_at DATETIME <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"built_in\">CURRENT_TIMESTAMP</span> COMMENT <span class=\"string\">&#x27;建立時間&#x27;</span>,</span><br><span class=\"line\">  created_by <span class=\"type\">INT</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">0</span> COMMENT <span class=\"string\">&#x27;建立人員&#x27;</span>,</span><br><span class=\"line\">  updated_at DATETIME <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"built_in\">CURRENT_TIMESTAMP</span> COMMENT <span class=\"string\">&#x27;更新時間&#x27;</span>,</span><br><span class=\"line\">  updated_by <span class=\"type\">INT</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"number\">0</span> COMMENT <span class=\"string\">&#x27;更新人員&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (id)</span><br><span class=\"line\">)</span><br><span class=\"line\">ENGINE <span class=\"operator\">=</span> INNODB,</span><br><span class=\"line\"><span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4,</span><br><span class=\"line\"><span class=\"keyword\">COLLATE</span> utf8mb4_unicode_ci;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SET</span> NAMES <span class=\"string\">&#x27;utf8&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> mydb.main_info(id, name, is_del, created_at, created_by, updated_at, updated_by)</span><br><span class=\"line\"><span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>, <span class=\"string\">&#x27;測試&#x27;</span>, <span class=\"number\">0</span>, <span class=\"string\">&#x27;2024-01-18 11:54:57&#x27;</span>, <span class=\"number\">31</span>, <span class=\"string\">&#x27;2024-01-18 18:26:02&#x27;</span>, <span class=\"number\">31</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>底下是預儲程序的範例</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- sql-init/init-usp.sql</span></span><br><span class=\"line\">USE mydb;</span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER $$</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> `usp_main_info_get`(<span class=\"keyword\">IN</span> `<span class=\"variable\">@id</span>` <span class=\"type\">int</span>)</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> p.name <span class=\"keyword\">from</span> main_info p <span class=\"keyword\">where</span> p.id <span class=\"operator\">=</span> `<span class=\"variable\">@id</span>`;</span><br><span class=\"line\"><span class=\"keyword\">END</span> $$</span><br><span class=\"line\"></span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n\n<p>指定 mysql_native_password 是因為新版的 mysql 預設的驗證方式是 caching_sha2_password，這樣會導致一些舊的程式無法連線到 mysql</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">db:</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">mysql:5.7.19</span></span><br><span class=\"line\">  <span class=\"attr\">command:</span> <span class=\"string\">--default-authentication-plugin=mysql_native_password</span></span><br><span class=\"line\">  <span class=\"attr\">environment:</span></span><br><span class=\"line\">    <span class=\"attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"string\">example</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&quot;3306:3306&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">./sql-init/:/docker-entrypoint-initdb.d/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"adminer\"><a href=\"#adminer\" class=\"headerlink\" title=\"adminer\"></a>adminer</h2><p>透過 adminer 來管理 mysql 的資料庫，這邊直接使用官方的 image 就可以了</p>\n<h1 id=\"建立-docker-compose-測試環境\"><a href=\"#建立-docker-compose-測試環境\" class=\"headerlink\" title=\"建立 docker-compose 測試環境\"></a>建立 docker-compose 測試環境</h1><p>這裡的 environment 是因為 LAB 環境不能直接連外面所以要透過 proxy，如果只是模擬需求中的BLOG 文章發布，應該不需要這個設定；如果真的需要，就把 proxy的值改成自己環境用的</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># docker-compose.yml</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;3.7&quot;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">web:</span></span><br><span class=\"line\">    <span class=\"attr\">build:</span></span><br><span class=\"line\">      <span class=\"attr\">context:</span> <span class=\"string\">.</span></span><br><span class=\"line\">      <span class=\"attr\">dockerfile:</span> <span class=\"string\">Dockerfile</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;80:80&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;443:443&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">http_proxy:</span> <span class=\"string\">$&#123;HTTP_PROXY&#125;</span></span><br><span class=\"line\">      <span class=\"attr\">https_proxy:</span> <span class=\"string\">$&#123;HTTP_PROXY&#125;</span></span><br><span class=\"line\">      <span class=\"attr\">ftp_proxy:</span> <span class=\"string\">$&#123;HTTP_PROXY&#125;</span></span><br><span class=\"line\">      <span class=\"attr\">no_proxy:</span> <span class=\"string\">.company.net</span></span><br><span class=\"line\">      <span class=\"attr\">ASPNETCORE_ENVIRONMENT:</span> <span class=\"string\">Notebook</span></span><br><span class=\"line\">  <span class=\"attr\">db:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mysql:5.7.19</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">--default-authentication-plugin=mysql_native_password</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MYSQL_ROOT_PASSWORD:</span> <span class=\"string\">example</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;3306:3306&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./sql-init/:/docker-entrypoint-initdb.d/</span></span><br><span class=\"line\">  <span class=\"attr\">adminer:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">adminer:4.8.1</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">8080</span><span class=\"string\">:8080</span></span><br></pre></td></tr></table></figure>\n\n<p>搭配 ASPNETCORE_ENVIRONMENT 來設定環境變數 Notebook，這樣就可以在這個設定檔下將資料庫指向到測試資料庫</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// appsettings.Notebook.json</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ConnectionStrings&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;DB_connection&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;server=db;port=3306;user id=root;password=example;database=mydb;sslmode=none;charset=utf8mb4;ConnectionTimeout=30;&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>為了手動方便起見，也在 launchSettings.json 中設定 ASPNETCORE_ENVIRONMENT，這樣就可以直接透過 IDE 使用這份 Notebook 的設定來啟動或偵錯網站</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;Notebook&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;commandName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Project&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;launchBrowser&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;environmentVariables&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;ASPNETCORE_ENVIRONMENT&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Notebook&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;dotnetRunMessages&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;applicationUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://localhost:7134;http://localhost:5020&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n"},{"title":"使用 docker container 測試實際寫入資料庫","url":"/artblog//use-docker-container-test-actual-write-to-database/","content":"<p>寫入資料庫中文的時候，會因為採用了 Unicode 導致寫入 DB 錯誤，因此需要測試實際 adapter 可否寫入 docker 的 mysql</p>\n<span id=\"more\"></span>\n\n<p>基本上只指定採用的 charset 為 utf8mb4 即可，在建立資料表、預存程序的時候，也要指定相同的字元集；不特別指定定序，則採用預設的定序即可</p>\n<h2 id=\"連線字串\"><a href=\"#連線字串\" class=\"headerlink\" title=\"連線字串\"></a>連線字串</h2><p>確保有宣告 <code>charset=utf8mb4</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;ConnectionStrings&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;DB_connection&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;server=localhost;port=3306;user id=root;password=example;sslmode=none;charset=utf8mb4;ConnectionTimeout=30;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"建立預存程序\"><a href=\"#建立預存程序\" class=\"headerlink\" title=\"建立預存程序\"></a>建立預存程序</h2><p>中文接收參數需指定字元集: <code>CHARACTER SET utf8mb4</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> `usp_customers_update_v2` (<span class=\"keyword\">IN</span> customerName <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4)</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">    <span class=\"keyword\">UPDATE</span> Customers <span class=\"keyword\">SET</span> Name <span class=\"operator\">=</span> customerName <span class=\"keyword\">WHERE</span> Id <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"建立測試資料表\"><a href=\"#建立測試資料表\" class=\"headerlink\" title=\"建立測試資料表\"></a>建立測試資料表</h2><p>中文欄位需指定字元集: <code>CHARACTER SET utf8mb4</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> Customers( Id <span class=\"type\">INT</span> AUTO_INCREMENT <span class=\"keyword\">PRIMARY</span> KEY, Name <span class=\"type\">VARCHAR</span>(<span class=\"number\">255</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"建立測試資料庫\"><a href=\"#建立測試資料庫\" class=\"headerlink\" title=\"建立測試資料庫\"></a>建立測試資料庫</h2><p>帳號:root<br>密碼:example</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=example -p 3306:3306 mysql:5.7.19 --default-authentication-plugin=mysql_native_password</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意事項\"><a href=\"#注意事項\" class=\"headerlink\" title=\"注意事項\"></a>注意事項</h2><ol>\n<li>SP 接收參數的部分宣告 charset&#x3D;utf8mb4 , 對應的資料表欄位也要宣告字元集，這種方式已測試過支援難字、emoji 等特殊字元</li>\n<li>SP 接收參數的部分宣告 nvarchar(255)，對應的資料表欄位宣告 varchar(255) 的情況也可以支援中文，但不清楚是否支援難字、emoji 等特殊字元</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查看資料庫的一些設定</span></span><br><span class=\"line\"><span class=\"keyword\">SHOW</span> VARIABLES <span class=\"keyword\">WHERE</span> Variable_name <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;character_set\\_%&#x27;</span> <span class=\"keyword\">OR</span> Variable_name <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;collation%&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">&gt;</span> MySQL字元編碼集中有兩套UTF<span class=\"number\">-8</span>編碼實現：「utf8」和「utf8mb4」，其中「utf8」是一個字最多占據<span class=\"number\">3</span>位元組空間的編碼實現；而「utf8mb4」則是一個字最多占據<span class=\"number\">4</span>位元組空間的編碼實現，也就是UTF<span class=\"number\">-8</span>的完整實現。這是由於MySQL在<span class=\"number\">4.1</span>版本開始支援UTF<span class=\"number\">-8</span>編碼（當時參考UTF<span class=\"number\">-8</span>草案版本為RFC <span class=\"number\">2279</span>）時，為<span class=\"number\">2003</span>年，並且在同年<span class=\"number\">9</span>月限制了其實現的UTF<span class=\"number\">-8</span>編碼的空間占用最多為<span class=\"number\">3</span>位元組，而UTF<span class=\"number\">-8</span>正式形成標準化文件（RFC <span class=\"number\">3629</span>）是其之後。限制UTF<span class=\"number\">-8</span>編碼實現的編碼空間占用一般被認為是考慮到資料庫檔案設計的相容性和讀取最佳化，但實際上並沒有達到目的，而且在UTF<span class=\"number\">-8</span>編碼開始出現需要存入非基本多文種平面的Unicode字元（例如emoji字元）時導致無法存入（由於<span class=\"number\">3</span>位元組的實現只能存入基本多文種平面內的字元）。直到<span class=\"number\">2010</span>年在<span class=\"number\">5.5</span>版本推出「utf8mb4」來代替、「utf8」重新命名為「utf8mb3」並調整「utf8」為「utf8mb3」的別名，並不建議使用舊「utf8」編碼，以此修正遺留問題</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">&gt;</span> 來源: [維基百科](https:<span class=\"operator\">/</span><span class=\"operator\">/</span>zh.wikipedia.org<span class=\"operator\">/</span>wiki<span class=\"operator\">/</span>UTF<span class=\"number\">-8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">這也是為甚麼現在用 mysql 記得要用 utf8mb4 的原因，因為 utf8mb4 是完整的 utf8 編碼，可以支援 emoji 等特殊字元</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h2><p>測試過程當中所需要用到的資料庫、資料表、預存程序等等，則是透過 <code>TestDatabaseManager</code>在單元測試啟動的時候做初始化，當然也會在測試結束後清理資料庫</p>\n<h3 id=\"CustomerAdapterTests-cs\"><a href=\"#CustomerAdapterTests-cs\" class=\"headerlink\" title=\"CustomerAdapterTests.cs\"></a>CustomerAdapterTests.cs</h3><figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// CustomerAdapterTests.cs</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> MyProject.Adapter.Base;</span><br><span class=\"line\"><span class=\"keyword\">using</span> MyProject.Adapter.Common;</span><br><span class=\"line\"><span class=\"keyword\">using</span> MyProject.Adapter.MySql;</span><br><span class=\"line\"><span class=\"keyword\">using</span> MyProject.DataClass.DTO.MySql;</span><br><span class=\"line\"><span class=\"keyword\">using</span> MyProject.DataClass.Logger;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.Logging;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">MyProject.Tests.InfrastructureTest</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CustomerAdapterTests</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestDatabaseManager _testDatabaseManager;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> _connectionString = <span class=\"built_in\">string</span>.Empty;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">SetUp</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Setup</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> builder = <span class=\"keyword\">new</span> ConfigurationBuilder()</span><br><span class=\"line\">            .SetBasePath(AppContext.BaseDirectory)</span><br><span class=\"line\">            .AddJsonFile(<span class=\"string\">&quot;appsettings.json&quot;</span>, optional: <span class=\"literal\">true</span>, reloadOnChange: <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> configuration = builder.Build();</span><br><span class=\"line\">        _connectionString = configuration.GetConnectionString(<span class=\"string\">&quot;DB_connection&quot;</span>) ?? <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidOperationException(<span class=\"string\">&quot;Missing connection string in configuration&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        _testDatabaseManager = <span class=\"keyword\">new</span> TestDatabaseManager(_connectionString);</span><br><span class=\"line\">        _testDatabaseManager.InitializeDatabase();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> serviceProvider = Substitute.For&lt;IServiceProvider&gt;();</span><br><span class=\"line\">        serviceProvider.GetService(<span class=\"keyword\">typeof</span>(IConfiguration)).Returns(configuration);</span><br><span class=\"line\">        DBConfig.Configure(serviceProvider);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> extendLogger = <span class=\"keyword\">new</span> ExtendLogger(Substitute.For&lt;ILogger&lt;ExtendLogger&gt;&gt;());</span><br><span class=\"line\">        serviceProvider.GetService(<span class=\"keyword\">typeof</span>(ExtendLogger)).Returns(extendLogger);</span><br><span class=\"line\">        PerformanceLogger.Configure(serviceProvider);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">TearDown</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DestroyTestDatabase</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _testDatabaseManager.CleanUpDatabase();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">UpdateCustomerNameShouldSuccess</span>(<span class=\"params\"><span class=\"built_in\">string</span> customerName</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> customer = <span class=\"keyword\">new</span> Customer &#123; customer_name = customerName, &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 此處使用 CustomerAdapter 處理資料庫的更新寫入</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> actual = CustomerAdapter.Update(customer);</span><br><span class=\"line\">        Assert.That(actual, Is.True);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">Test</span>]</span><br><span class=\"line\">    [<span class=\"meta\">Category(<span class=\"string\">&quot;RequiresDocker&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update_customer_name_contain_utf8mb4</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        UpdateCustomerNameShouldSuccess(<span class=\"string\">&quot;陳玉\\ud855\\udd65&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"TestDatabaseManager-cs\"><a href=\"#TestDatabaseManager-cs\" class=\"headerlink\" title=\"TestDatabaseManager.cs\"></a>TestDatabaseManager.cs</h3><figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TestDatabaseManager.cs</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Data;</span><br><span class=\"line\"><span class=\"keyword\">using</span> MySql.Data.MySqlClient;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">MyProject.Tests.InfrastructureTest</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TestDatabaseManager</span> : <span class=\"title\">IDisposable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> TestDbName = <span class=\"string\">&quot;TestDB&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> MySqlConnection _connection;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 資料庫管理員</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;remarks&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 使用 docker 建立資料庫</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=example -p 3306:3306 mysql:5.7.19 --default-authentication-plugin=mysql_native_password</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/remarks&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;connectionString&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestDatabaseManager</span>(<span class=\"params\"><span class=\"built_in\">string</span>? connectionString</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">string</span>.IsNullOrEmpty(connectionString))</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(connectionString));</span><br><span class=\"line\"></span><br><span class=\"line\">        _connection = <span class=\"keyword\">new</span> MySqlConnection(connectionString);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">InitializeDatabase</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        CreateDatabase(TestDbName);</span><br><span class=\"line\">        UseDatabase(TestDbName);</span><br><span class=\"line\"></span><br><span class=\"line\">        CreateTableCustomer();</span><br><span class=\"line\">        CreateProcedureCustomerUpdate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateProcedureCustomerUpdate</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ExecuteNonQuery(_connection,</span><br><span class=\"line\">            <span class=\"string\">@&quot;CREATE PROCEDURE `usp_customers_update` (IN customerName VARCHAR(255) CHARACTER SET utf8mb4)</span></span><br><span class=\"line\"><span class=\"string\">                BEGIN</span></span><br><span class=\"line\"><span class=\"string\">                    UPDATE Customers SET Name = customerName WHERE Id = 1;</span></span><br><span class=\"line\"><span class=\"string\">                END&quot;</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateTableCustomer</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ExecuteNonQuery(_connection, <span class=\"string\">&quot;CREATE TABLE IF NOT EXISTS Customers( Id INT AUTO_INCREMENT PRIMARY KEY, Name VARCHAR(255) CHARACTER SET utf8mb4);&quot;</span>);</span><br><span class=\"line\">        ExecuteNonQuery(_connection, <span class=\"string\">&quot;INSERT INTO Customers (Name) VALUES (&#x27;Art Huang&#x27;);&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">UseDatabase</span>(<span class=\"params\"><span class=\"built_in\">string</span> database</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ExecuteNonQuery(_connection, <span class=\"string\">$&quot;USE <span class=\"subst\">&#123;database&#125;</span>;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateDatabase</span>(<span class=\"params\"><span class=\"built_in\">string</span> database</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ExecuteNonQuery(_connection, <span class=\"string\">$&quot;CREATE DATABASE IF NOT EXISTS <span class=\"subst\">&#123;database&#125;</span>;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ExecuteNonQuery</span>(<span class=\"params\">MySqlConnection con, <span class=\"built_in\">string</span> sqlCommand</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> cmd = <span class=\"keyword\">new</span> MySqlCommand(sqlCommand, con);</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cmd.Connection.Open();</span><br><span class=\"line\">            cmd.ExecuteNonQuery();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception ex) <span class=\"keyword\">when</span> (ex <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> MySqlException)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">&quot;An unexpected error occurred while trying to execute the database command.&quot;</span>);</span><br><span class=\"line\">            Console.WriteLine(ex.Message);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span>;  <span class=\"comment\">// Rethrow the exception to indicate that this method failed</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cmd.Connection.State == ConnectionState.Open)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cmd.Connection.Close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CleanUpDatabase</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ExecuteNonQuery(_connection, <span class=\"string\">&quot;DROP DATABASE IF EXISTS TestDB;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _connection?.Dispose();</span><br><span class=\"line\">        GC.SuppressFinalize(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"使用 github copilot 心得","url":"/artblog//experience-with-github-copilot/","content":"<p>最近看了很糟糕的 github copilot 分享，所以我也來分享一下</p>\n<span id=\"more\"></span>\n\n<p>內文中的 <code>github copilot</code> 只是一個代稱，相似的工具有 OPEN AI 的 <code>chatGPT</code>，或是 jetbrains 的 <code>AI Assistiant</code>，我都是指它們的聊天功能，但如果文中明顯指的是程式碼自動建議功能，那當然就是 <code>copilot</code> 了。</p>\n<h2 id=\"第一個部分：協助討論釐清想法、調整方向\"><a href=\"#第一個部分：協助討論釐清想法、調整方向\" class=\"headerlink\" title=\"第一個部分：協助討論釐清想法、調整方向\"></a>第一個部分：協助討論釐清想法、調整方向</h2><p>其實最主要的就是為了想要分享一下這些生產力工具的使用方法，或者說心得，但又不是很想講別人講過的東西，那些怎麼安裝，給予提示詞的技巧等等，我覺得應用起來就是那樣而已，沒甚麼特別好提的，於是寫著寫著，我發現好像把重點放在別的地方會更有趣一點，比如互動討論，從而提升自己的部分反而我比較有共鳴</p>\n<p>所以我就模擬一下，我想要寫一份關於 Github Copilot 如何幫助我們的日常工作這個情境<br>我一開始沒有想太多，就是覺得日常工作有 Github Copilot 的協助可以幫助我提高工作效率，所以我打算從這邊開始著手，然後詢問意見，我列出了下面的表格，然後從這邊當出發點開始討論</p>\n<hr>\n<table>\n<thead>\n<tr>\n<th>工作類型</th>\n<th>描述</th>\n<th>時間比例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>重要且緊急</td>\n<td>正式環境的異常狀況處理，如訂單、信用卡等等之類；又或與公司商譽相關的任務處理</td>\n<td>約 10-15%</td>\n</tr>\n<tr>\n<td>重要且不緊急</td>\n<td>日常的例行任務，如上版需求開發測試</td>\n<td>超過 50-60%</td>\n</tr>\n<tr>\n<td>不重要但緊急</td>\n<td>需要即時回應的事情，如長官或客戶對某些問題的詢問</td>\n<td>約 10-15%</td>\n</tr>\n<tr>\n<td>不重要也不緊急</td>\n<td>研究新技術或重構優化任務</td>\n<td>約 10-15%</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>這四種任務的大致參考時間，前提是在健康的工作環境下</p>\n</blockquote>\n<p>想法不錯，但感覺好像沒有那麼好寫，畢竟感覺範圍有點大了，我就去問了 AI，請他給我一些寫作上的建議，於是它回復了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">您的草稿已經有了很好的結構和規劃，很明顯地將資訊人員的工作分成了四個主要部分，並准備針對每個部分詳細描述 AI 如何提升效率和生產力，我認為這個框架極好。這種針對性的方式可以讓讀者更具體地理解 AI 如何在日常工作中幫助他們。</span><br><span class=\"line\">以下是我對逐一討論的一些建議：</span><br><span class=\"line\">&quot;重要且緊急&quot;：您可以討論AI如何快速識別和解決這種任務的問題。例如，AI可以識別出模式，預測可能的問題，並在問題發生前給出警告。也可以使用機器學習來優化問題的解決方法，從而縮短解決問題的時間。</span><br><span class=\"line\">&quot;重要且不緊急&quot;：AI可以自動化許多日常任務，從而節省時間。例如，AI可以協助进行代码审核，找到可能的錯誤和改進點；或自動完成某些測試和驗證工作。</span><br><span class=\"line\">&quot;不重要但緊急&quot;：AI可以協助排序這些任務的優先級，確保能夠有效地回應。此外，一些 AI 工具可以自動回复一些常見問題，減少了人工回答的需要。</span><br><span class=\"line\">&quot;不重要也不緊急&quot;：透過AI進行資料分析和預測，可以提前找出可能的問題，提早開始對策，直接降低問題嚴重性，給予預警。</span><br></pre></td></tr></table></figure>\n\n<p>但這跟我希望強調 <code>Github Copilot</code> 工具的目標是不符合的，所以我又問它了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">我希望能夠聚焦在 Github Copilot 或者是 JetBrains AI Assistant 這類的工具上，而不是更大範圍的AI，所以你給的建議對我這份文件的目標，並不符合</span><br></pre></td></tr></table></figure>\n\n<p>緊接著它又回復了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;重要且緊急&quot;：這些工具可以幫助寫更高效的代碼。例如，它們可以提供實時的代碼建議來解決編程問題，從而減少解決代碼問題的時間。</span><br><span class=\"line\">&quot;重要且不緊急&quot;：Github Copilot和JetBrains AI Assistant可以進行代碼審核，提供清晰正確的代碼建議來改進和優化現有的代碼，這對於項目維護和重構工作非常有幫助。</span><br><span class=\"line\">&quot;不重要但緊急&quot;：這些工具能夠快速回覆常見的代碼問題，例如語法錯誤、未定義的變量等，從而提高開發者的解抖速度。</span><br><span class=\"line\">&quot;不重要也不緊急&quot;: 工具如Github Copilot和JetBrains AI Assistant能協助初步的開發和研究新技術，提供編程語言或框架的使用建議，使得學習和適應新的技術變得更為輕鬆。</span><br></pre></td></tr></table></figure>\n\n<p>然後我越看越奇怪，怎麼這幾件事情講的都是在寫程式碼，我好像一開始想法就有點大了，畢竟 AI 能做很多事情，但是 <code>Github Copilot</code> 主要針對的還是程式碼寫作這一塊，所以我好像應該要改變一下我的文件結構，為此，我又再次請 AI 給我點意見</p>\n<p><img src=\"/artblog/experience-with-github-copilot/20240703183037.png\"></p>\n<p>那麼我換一個思維，我想著重強調在軟體開發過程當中，該如何有效地去運用 <code>Github Copilot</code> 這類的工具，目前主要的使用方式不外乎就是直接編寫的過程中透過一些技巧讓工具自動產生程式碼，又或者是直接透過聊天的方式讓工具提供資訊或程式碼，當然，我還是請 AI 針對我的大綱給出建議</p>\n<p><img src=\"/artblog/experience-with-github-copilot/20240705103223.png\"><br><img src=\"/artblog/experience-with-github-copilot/20240705103241.png\"></p>\n<p>於是我又很偷懶的把題目丟給它，請它發揮給我瞧瞧，這個時候就感覺自己是甲方，然後跟乙方提：你先做一版出來看看感覺如何，大概就是這樣的概念</p>\n<p><img src=\"/artblog/experience-with-github-copilot/20240705101738.png\"><br><img src=\"/artblog/experience-with-github-copilot/20240705102029.png\"><br><img src=\"/artblog/experience-with-github-copilot/20240705102126.png\"><br><img src=\"/artblog/experience-with-github-copilot/20240705102217.png\"></p>\n<p>一般情況下，到這邊為止就是一個不錯的 ending 了，我只要照著他的框架，填充一下細節就能夠完成這份簡報、或者是文件了</p>\n<p>在剛剛這一連串的過程當中，我主要透過聊天的方式，將我的需求丟給 AI，並請它給我回饋，而我與 AI 來來回回的溝通，正是為了要完成某一個目標而逐漸修正結果的一個過程<br>當然這只是為了示範，我是怎麼將一個很模糊的想法，逐步透過 AI 討論將它轉變為一個較有條理的內容，可以看到我最初的想法其實是不 OK 的，在討論的過程當中再逐漸修正想法，等到比較確實可行的概念出現後，開始填充並完善細節</p>\n<p>我之所以示範這個過程，目的是為了要著重呈現這樣的模式</p>\n<p>表面上看到的：<code>提出想法，討論並修正這樣的概念</code><br>但我想強調的是：<code>解釋你的目標跟概念，溝通取得回饋，並隨時調整</code></p>\n<h2 id=\"第二個部分：自我提升\"><a href=\"#第二個部分：自我提升\" class=\"headerlink\" title=\"第二個部分：自我提升\"></a>第二個部分：自我提升</h2><p>在大部分的情況下，你都可以初步相信 AI 給你的建議，就把 AI 當成一個書看很多，甚麼都懂一些的新進員工，只是剛到公司缺少一些經驗，然後讓自己跟他 pair programming</p>\n<ol>\n<li>請對答案持有基本的懷疑</li>\n<li>要能夠驗證回饋的資訊是否正確、是否可行</li>\n</ol>\n<p>如果可以的話，問問它給出解決方案的理由是什麼，也順便告知它你否決掉某些設計的理由是什麼，在這個過程當中也可以增強自己的專業知識，是很好的方式</p>\n<p>通常針對程式碼細節的部分，參考資料來自於網路公開資訊，時常會有神來一筆的狀況，但不可否認也會有給出錯誤解答的時候，因此在得到 AI 給予的回饋時，必須具備驗證答案的能力。因為種種原因，AI 給出的建議大多數時候不會完全滿足使用者的需求，這就是為甚麼需要給 AI 足夠的上下文判斷，在自動完成程式碼編寫的時候，這些上下文會透過工具本身去從你的專案裡面尋找，透過各種小技巧來提供更多的上下文，例如畫面上顯示的文字，同時開啟的分頁，專案類型中某些關鍵的設定檔等等，但是光是這樣還不能夠滿足我們實際使用上的需求，所以還有第二種方式，也就是透過互動的方式提供足夠的上下文，並以聊天的方式回饋，而這就不僅僅是侷限在程式碼的撰寫了，應該說，用聊天的方式來討論需求，這才是 AI 真正強大的部分</p>\n<p>因為只要你提供了足夠多的上下文，他就能夠針對問題給出較細緻的回答，而過程中回饋的資訊有誤，或是有新的調整因子，也可以透過聊天來逐步優化設計，聊天的方式除了回饋， AI 也能夠透過這樣的方式，適當的引導使用者該如何給予資訊，所以該如何有效率的使用這個工具，則是取決於良好的溝通能力與抽象化問題的能力</p>\n<p>有些人總是會詢問 copilot 關於實作的細節，但是我認為比較好的方式，是再更進一步去問問為甚麼採用這樣的方式來實作？跟原先的方法來比較差別在哪裡？有沒有其他辦法可以做到一樣的事情？每一種解決方案的優缺點在哪裡？我很難舉出一個具體的例子，所以只能拋出這些範例式的問題，我看過一些例子有一些人在建議大家學習這個 copilot 之類的生產力工具時，都著重在說他怎麼利用他解決了甚麼問題，節省了他多少查閱文件資料的時間，這當然很棒，我也常常用，但我更想幫他們補充的是，你要把這部分節省下來的時間，拿去多問一些類似上面這些問題，問自己或者問 copilot 都好，去多思考一下影響你做這些決定的原因，這樣才能讓 AI 去做低階工程師的事情，節省了你的時間，則拿去做更有意義跟生產力的事情</p>\n<p>畢竟程式碼細節的部份可以請 AI 協助提供，我們需要做的事情是驗證並確認其可行性<br>將低階的工作交由 AI 輔助，我們才能夠將注意力移到高階設計這個範疇</p>\n<p>所以長久下來，關於程式碼的實作細節可能會逐漸淡忘，但取而代之的是培養自己的高階設計能力，這對於軟體設計是很重要的。</p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><ol>\n<li>把 AI 當成 pair programming 的隊友</li>\n<li>這個隊友有時候腦子怪怪的，你要有能力驗證他的回答</li>\n<li>如果他給予的建議不夠好，想想看是什麼原因讓它忽略了你認為理所當然的事情</li>\n<li>試著把自己的角色提升到更高的維度，去看原先困擾你的問題，你會在意的是實作細節嗎？還是這樣做帶來的影響？以及為甚麼這樣做？</li>\n</ol>\n"},{"title":"使用 xUnit 測試","url":"/artblog//use-xunit-for-dotnet/","content":"<p>紀錄使用 xUnit 測試的一些筆記</p>\n<span id=\"more\"></span>\n\n<h2 id=\"準備單元測試環境\"><a href=\"#準備單元測試環境\" class=\"headerlink\" title=\"準備單元測試環境\"></a>準備單元測試環境</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看專案安裝的 nuget 套件</span></span><br><span class=\"line\">dotnet list package</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安裝 xunit 核心套件</span></span><br><span class=\"line\">dotnet add package xunit</span><br><span class=\"line\"><span class=\"comment\"># Visual Studio 及 dotnet 需要安裝下面兩個套件才能執行測試</span></span><br><span class=\"line\">dotnet add package Microsoft.NET.Test.Sdk</span><br><span class=\"line\">dotnet add package xunit.runner.visualstudio</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"單元測試範例、測試框架是否正確工作\"><a href=\"#單元測試範例、測試框架是否正確工作\" class=\"headerlink\" title=\"單元測試範例、測試框架是否正確工作\"></a>單元測試範例、測試框架是否正確工作</h2><figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Xunit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UnitTestDemo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">Fact</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestSuccess</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Assert.True(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">Fact</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestFail</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Assert.True(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"執行測試\"><a href=\"#執行測試\" class=\"headerlink\" title=\"執行測試\"></a>執行測試</h2><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 執行測試</span></span><br><span class=\"line\">dotnet <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"理論-throey-與事實-fact-的比較與介紹\"><a href=\"#理論-throey-與事實-fact-的比較與介紹\" class=\"headerlink\" title=\"理論 throey 與事實 fact 的比較與介紹\"></a>理論 throey 與事實 fact 的比較與介紹</h2><p>實際上 fact 就等同於其他測試框架的測試，沒有甚麼不同，但是如果是需要測試多個不同的輸入，卻也要有相同的結果，則可以利用 throey 來做測試，他實際上是為了在以前的單元測試框架下，因為要測試多組參數呼叫同一個方法的情況，可能會寫出多個不同名稱的測試，內容都是呼叫相同方法，只是在測試不同的傳入參數。就可以採用 throey 的方式來做測試。</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Theory</span>]</span><br><span class=\"line\">[<span class=\"meta\">InlineData(3)</span>]</span><br><span class=\"line\">[<span class=\"meta\">InlineData(5)</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">MyFirst_Theory_IsOdd</span>(<span class=\"params\"><span class=\"built_in\">int</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Assert.True(IsOdd(<span class=\"keyword\">value</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"meta\">Theory</span>]</span><br><span class=\"line\">[<span class=\"meta\">InlineData(6)</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">MyFirst_Theory_IsNotOdd</span>(<span class=\"params\"><span class=\"built_in\">int</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Assert.False(IsOdd(<span class=\"keyword\">value</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果不用 throey 要驗證這三個情況，就可能需要寫成三個 fact</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Fact</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">MyFirstFactWithOddValue3</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Assert.True(IsOdd(<span class=\"number\">3</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"meta\">Fact</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">MyFirstFactWithOddValue5</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Assert.True(IsOdd(<span class=\"number\">5</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"meta\">Fact</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">MyFirstFactWithEvenValue6</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Assert.False(IsOdd(<span class=\"number\">6</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這兩種寫法都是可以的，因為它們也都各有優缺點，關注的點也不太一樣，所以要看自己的需求來決定要用哪一種。</p>\n<p>一般來說 fact 可以很明確的驗證一件事情，並且在發生錯誤的時候可以直接根據測試的名稱識別出錯誤的測試。<br>而 throey 比較適用於需要測試相同功能在不同輸入的情況下是否正常運作，並且避免撰寫過多的測試方法。</p>\n<p>也可以理解為</p>\n<ol>\n<li>當測試不會根據不同的輸入參數而改變行為，並且只需要驗證一個確定的行為時，可以採用 fact 較為合適</li>\n<li>當需要驗證多種輸入參數的情況下，並且需要驗證的行為是相同的，可以採用 throey 較為合適</li>\n</ol>\n<blockquote>\n<p>驗證多種輸入參數的時候不建議把多種行為也寫在同一個 throey</p>\n</blockquote>\n<h2 id=\"加入配置文件設定\"><a href=\"#加入配置文件設定\" class=\"headerlink\" title=\"加入配置文件設定\"></a>加入配置文件設定</h2><p>官方配置設定說明的蠻清楚的，有需要可以參考<a href=\"https://xunit.net/docs/configuration-files#longRunningTestSeconds\">官方文件</a>進行設定，這邊用一個簡單的設定來示範</p>\n<p>測試專案目錄下新增 <code>xunit.runner.json</code> 檔案</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;$schema&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://xunit.net/schema/current/xunit.runner.schema.json&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;methodDisplayOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;replaceUnderscoreWithSpace,useOperatorMonikers &quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>選擇該檔案在建置動作時複製到輸出目錄 (修改專案 csproj 檔)</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ItemGroup</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Content</span> <span class=\"attr\">Include</span>=<span class=\"string\">&quot;xunit.runner.json&quot;</span> <span class=\"attr\">CopyToOutputDirectory</span>=<span class=\"string\">&quot;PreserveNewest&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ItemGroup</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"並行測試，並透過顯示驗證\"><a href=\"#並行測試，並透過顯示驗證\" class=\"headerlink\" title=\"並行測試，並透過顯示驗證\"></a>並行測試，並透過顯示驗證</h2><p>首先先在測試中透過建構式注入 <code>ITestOutputHelper</code> 來輸出測試的訊息，預設的情況下， TestClass1 底下的兩個測試會一個接著一個的執行，用來驗證的單元測試執行的開始跟結束，都有紀錄時間，透過指定 logger 參數可以在 CLI 看到測試的進度及結果</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">dotnet <span class=\"built_in\">test</span> --logger <span class=\"string\">&quot;console;verbosity=detailed&quot;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TestClass1</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ITestOutputHelper _output;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestClass1</span>(<span class=\"params\">ITestOutputHelper output</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _output = output;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    [<span class=\"meta\">Fact</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Test1</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _output.WriteLine(<span class=\"string\">&quot;Test 1 begin at &#123;0:HH:mm:ss&#125;&quot;</span>, DateTime.Now);</span><br><span class=\"line\">        Thread.Sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">        _output.WriteLine(<span class=\"string\">&quot;Test 1 end at &#123;0:HH:mm:ss&#125;&quot;</span>, DateTime.Now);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">Fact</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Test2</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _output.WriteLine(<span class=\"string\">&quot;Test 2 begin at &#123;0:HH:mm:ss&#125;&quot;</span>, DateTime.Now);</span><br><span class=\"line\">        Thread.Sleep(<span class=\"number\">5000</span>);</span><br><span class=\"line\">        _output.WriteLine(<span class=\"string\">&quot;Test 2 end at &#123;0:HH:mm:ss&#125;&quot;</span>, DateTime.Now);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>預設情況下，每一個測試類別都是一個唯一的測試集合，這些測試之間並不會同時執行，但如果將它們放在不同的測試類別當中，就能夠同時進行測試</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TestClass2A</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ITestOutputHelper _output;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestClass2A</span>(<span class=\"params\">ITestOutputHelper output</span>)</span></span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           _output = output;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       [<span class=\"meta\">Fact</span>]</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Test1</span>()</span></span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           _output.WriteLine(<span class=\"string\">&quot;Test 2A begin at &#123;0:HH:mm:ss&#125;&quot;</span>, DateTime.Now);</span><br><span class=\"line\">           Thread.Sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">           _output.WriteLine(<span class=\"string\">&quot;Test 2A end at &#123;0:HH:mm:ss&#125;&quot;</span>, DateTime.Now);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TestClass2B</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ITestOutputHelper _output;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestClass2B</span>(<span class=\"params\">ITestOutputHelper output</span>)</span></span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           _output = output;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       [<span class=\"meta\">Fact</span>]</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Test1</span>()</span></span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">           _output.WriteLine(<span class=\"string\">&quot;Test 2B begin at &#123;0:HH:mm:ss&#125;&quot;</span>, DateTime.Now);</span><br><span class=\"line\">           Thread.Sleep(<span class=\"number\">5000</span>);</span><br><span class=\"line\">           _output.WriteLine(<span class=\"string\">&quot;Test 2B end at &#123;0:HH:mm:ss&#125;&quot;</span>, DateTime.Now);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<pre>\n❯ dotnet test --logger \"console;verbosity=detailed\"\n  正在判斷要還原的專案...\n  所有專案都在最新狀態，可進行還原。\nC:\\Program Files\\dotnet\\sdk\\8.0.100-preview.7.23376.3\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInference.targets(314,5): message NETSDK1057: 您目前使用的是 .NET 預覽版。請參閱: https://aka.ms/dotnet-support-policy [D:\\Code\\GitLabCE\\MyProject\\MyProject.csproj]\n  MyProject -> D:\\Code\\GitLabCE\\MyProject\\bin\\Debug\\net7.0\\MyProject.dll\nD:\\Code\\GitLabCE\\MyProject\\bin\\Debug\\net7.0\\MyProject.dll 的測試回合 (.NETCoreApp,Version=v7.0)\nMicrosoft (R) Test Execution Command Line Tool 17.7.0-preview-23317-01+919ec8358820228cc5fa77ef000051c1d6875399 (x64) 版Copyright (C) Microsoft Corporation. 著作權所有，並保留一切權利。\n\n正在啟動測試執行，請稍候...\n總共有 1 個測試檔案與指定的模式相符。\nD:\\Code\\GitLabCE\\MyProject\\bin\\Debug\\net7.0\\MyProject.dll\n[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v2.5.0.1+5ebf84cd75 (64-bit .NET 7.0.5)\n[xUnit.net 00:00:00.06]   Discovering: MyProject\n[xUnit.net 00:00:00.08]   Discovered:  MyProject\n[xUnit.net 00:00:00.08]   Starting:    MyProject\n  已通過 MyProject.TestClass2A.Test1 [3 s]\n  標準輸出訊息:\n Test 2A begin at 15:44:50\n Test 2A end at 15:44:53\n\n\n  已通過 MyProject.TestClass2B.Test1 [5 s]\n  標準輸出訊息:\n Test 2B begin at 15:44:50\n Test 2B end at 15:44:55\n\n\n  已通過 MyProject.TestClass1.Test2 [5 s]\n  標準輸出訊息:\n Test 2 begin at 15:44:50\n Test 2 end at 15:44:55\n\n\n[xUnit.net 00:00:08.15]   Finished:    MyProject\n  已通過 MyProject.TestClass1.Test1 [3 s]\n  標準輸出訊息:\n Test 1 begin at 15:44:55\n Test 1 end at 15:44:58\n\n\n\n測試回合成功。\n測試數總計: 4\n     通過: 4\n 時間總計: 8.5914 秒\n</pre>\n\n<blockquote>\n<p>在 Visual Studio 2022, Rider, CLI 環境都是相同的</p>\n</blockquote>\n<h2 id=\"從-MSTest-到-xUnit\"><a href=\"#從-MSTest-到-xUnit\" class=\"headerlink\" title=\"從 MSTest 到 xUnit\"></a>從 MSTest 到 xUnit</h2><p>請參閱<a href=\"https://xunit.net/docs/ms-test-migration\">官方文件</a><br>基本上就是</p>\n<ol>\n<li>替換 nuget package</li>\n<li>修正一些 mstest 的標籤，改成用 xunit 的語法</li>\n<li>可以依照警告來逐步修正，修正完畢後可以移除掉向後兼容的暫時用的套件<code>xunit.MSTest</code></li>\n</ol>\n"},{"title":"使用google gemma建立自己的聊天機器人","url":"/artblog//create-chat-ai-by-google-gemma-with-ollama/","content":"<p>今天來嘗試一下在本地端建立自己的聊天機器人(?!)，前陣子有嘗試過想要在本地建立，但因為在WINDOWS環境當時還是無法順利建置，最近剛好看到有成功案例，所以又想要來嘗試看看</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h2><p>基本上就是利用 <a href=\"https://ollama.com/\">ollama</a>搭配 google 推出的 <a href=\"https://ai.google.dev/gemma?hl=zh-tw\">gemma</a>，在搭配上<a href=\"https://github.com/open-webui/open-webui\">open webui</a>，就能夠在本地環境透過瀏覽器訪問自己的聊天機器人</p>\n<h2 id=\"wsl\"><a href=\"#wsl\" class=\"headerlink\" title=\"wsl\"></a>wsl</h2><p>因為這些東西都是在 linux 會比較好做，且我也沒有 linux，因此就打算使用 wsl 來安裝，所以一開始需要先安裝 wsl，我選擇的是安裝ubuntu-22.04，在指令列環境下輸入的安裝命令如下</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">wsl <span class=\"literal\">--install</span> ubuntu<span class=\"literal\">-22</span>.<span class=\"number\">04</span></span><br></pre></td></tr></table></figure>\n\n<p>安裝完畢之後依照指示，建立好 wsl 系統的預設登入帳號，並且設定好密碼，未來在使用的時候就可以透過 <code>wsl</code>進入windows底下的 linux系統了</p>\n<h2 id=\"ollama\"><a href=\"#ollama\" class=\"headerlink\" title=\"ollama\"></a>ollama</h2><p>在 linux 環境下安裝 ollama 非常簡單，只要依照官網的指令，透過 <code>curl</code> 下載安裝的指令檔並執行，就可以順利完成安裝</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://ollama.com/install.sh | sh</span><br></pre></td></tr></table></figure>\n\n<p>安裝完畢之後，畫面上會提示已經啟動服務在 <code>127.0.0.1:11434</code></p>\n<h2 id=\"gemma\"><a href=\"#gemma\" class=\"headerlink\" title=\"gemma\"></a>gemma</h2><p>因為我的電腦顯卡是很久以前的 GTX 970，我應該只能使用比較陽春的模型（其實也有想說要試試看能不能順順跑的意思），所以這邊我挑選的模型就是 2b，這裡就是透過 ollama 去執行模型，他就會幫你安裝</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ollama run gemma:2b</span><br></pre></td></tr></table></figure>\n\n<p>執行指令的過程中有發生錯誤，這邊我是去下載<a href=\"https://developer.nvidia.com/cuda-downloads\">CUDA Toolkit 12.4 Downloads</a>，安裝後再次執行就沒有出現錯誤訊息，不知道是不是因為我的顯示卡ＧＴＸ 970太舊的關係</p>\n<h2 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h2><p>因為嘗試的當下並沒有截圖，所以只能用敘述說明了， wsl 剛安裝，我沒有 docker 可以用，所以憑著印象，先用 <code>apt update</code> 更新檔案後，記得好像要安裝docker就是 <code>apt install docker</code>，輸入完畢後畫面上給我三種選擇，我最終用的是 <code>apt install docker.io</code>，安裝完畢後執行 docker 就可以看到熟悉的指令說明，應該是可以用了</p>\n<h2 id=\"open-webui\"><a href=\"#open-webui\" class=\"headerlink\" title=\"open webui\"></a>open webui</h2><p>接著會需要從網頁當作介面來跟 ollama 的 gemme:2b 聊天對話，所以用 docker container 則是比較方便的做法，透過官方 github 的說明文件，我最終用的指令也是官方提供的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --network=host -v open-webui:/app/backend/data -e OLLAMA_BASE_URL=http://127.0.0.1:11434 --name open-webui --restart always ghcr.io/open-webui/open-webui:main</span><br></pre></td></tr></table></figure>\n\n<p>上述指令，透過指定network讓 open webui 與 ollama 可以互相溝通；指定 -v 讓資料不會被洗掉；指定環境變數填入 ollama 服務網址，如果沒有正確與 ollama 溝通，屆時在網頁上會無法選擇聊天的模型，如果有正確設定就會自動抓到可用的模型，下拉選單就可以選擇</p>\n<h1 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h1><p>本次練習都是依照<a href=\"https://medium.com/ricos-note/%E8%BC%95%E9%AC%86%E6%9C%AC%E5%9C%B0%E4%BD%88%E7%BD%B2google-gemma-577d002c08c0\">輕鬆本地佈署Google Gemma</a>一文介紹，作者也有提供影片介紹<a href=\"https://www.youtube.com/watch?v=4tclTTnp4ag\">AI -輕鬆本地佈署Google Gemma</a>，有興趣的人可以前往觀看</p>\n"},{"title":"記事本的ANSI另存新檔是什麼？","url":"/artblog//what-is-ansi-save-as-in-notepad/","content":"<p>我們在記事本上面另存新檔所看到的編碼選項:ANSI，他其實並不是一種編碼，那它到底是什麼呢？</p>\n<span id=\"more\"></span>\n<h2 id=\"ASCII\"><a href=\"#ASCII\" class=\"headerlink\" title=\"ASCII\"></a>ASCII</h2><p>你可以在<a href=\"https://zh.wikipedia.org/zh-tw/ASCII\">ASCII的維基頁面</a>獲得更多相關資訊。簡單來說，ASCII包含128個字符，分為控制字元和顯示字元。它主要用於顯示英文26個字母，並不包含其他語言，如中文、日文等。<br>根據我查找的資訊，這裡的ANSI通常指的是Windows系統上的標準代碼頁，即微軟的<a href=\"https://en.wikipedia.org/wiki/Windows-1252\">Windows-1252</a>。</p>\n<p>Windows-1252，又稱CP-1252，是拉丁字母的單字元編碼，通常在Microsoft Windows中用於英語和一些羅曼語言(西班牙語、葡萄牙語、法語和德語)。然而，這個編碼並不包含中文。對於中文，Windows系統有不同的代碼頁，如繁體中文使用的是codepage 950，而簡體中文則使用codepage 936，分別對應著BIG5和GB2312、GBK字元集。</p>\n<h2 id=\"UTF8\"><a href=\"#UTF8\" class=\"headerlink\" title=\"UTF8\"></a>UTF8</h2><p>這種情況帶來了一些問題，因此後來出現了 Unicode，其目標是讓所有文字都能使用同一種編碼，從而解決編碼問題。UTF8則是它的一種編碼方式。對於Unicode的詳細資訊，可參考這篇文章:<a href=\"https://blog.csdn.net/Muzi_Water/article/details/85098839\">聊聊編碼那些事——Unicode,gb2312,cp936,GBK,GB18030</a>。</p>\n<h2 id=\"ANSI\"><a href=\"#ANSI\" class=\"headerlink\" title=\"ANSI\"></a>ANSI</h2><p>總之，當你在記事本中選擇ANSI另存新檔時，實際上是使用你目前作業系統的預設編碼來保存檔案。例如，如果你使用繁體中文，則編碼可能是BIG5；如果使用簡體中文，則可能是GBK編碼。要避免出現亂碼，建議使用UTF-8編碼。</p>\n<h2 id=\"後記\"><a href=\"#後記\" class=\"headerlink\" title=\"後記\"></a>後記</h2><p>我將原本的草稿丟給ChatGPT潤飾，捨棄了很多贅詞、口語化的語句，最終採用的是很精簡的重點，而想深究的人也可以查看參考連結獲取更多細節；其他的人也能粗略的瞭解這段緣由，挺好</p>\n"},{"title":"讓 KIBANA 使用者可以匯出 CSV 並下載","url":"/artblog//kibana-reporting-export-csv/","content":"<p>Kibana 匯出報表功能預設使用舊版角色 reporting_user 控管，權限較粗略。<br>本文介紹如何啟用新版權限 feature_reporting.generate，讓報表匯出權限更細緻可控。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"建立測試資料\"><a href=\"#建立測試資料\" class=\"headerlink\" title=\"建立測試資料\"></a>建立測試資料</h2><p>首先，我們先在 Elasticsearch 匯入一筆測試資料，這個步驟只是為了有資料可以測試下載，隨便寫些甚麼都好：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">POST /test-export-csv/_doc</span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;@timestamp&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2025-04-16T06:42:00.220Z&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;AgentName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;art&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;Speaker&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;john&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;MessageText.Text&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;恭喜報名成功🎉，請留意通知！&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">132187942</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;@version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"關閉舊版-Reporting-權限機制\"><a href=\"#關閉舊版-Reporting-權限機制\" class=\"headerlink\" title=\"關閉舊版 Reporting 權限機制\"></a>關閉舊版 Reporting 權限機制</h2><p>在 <code>kibana.yml</code> 中新增以下設定：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">xpack.reporting.roles.enabled:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<p>若使用 Docker Compose，可以在 <code>docker-compose.yml</code> 中加入環境變數：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">kibana:</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">docker.elastic.co/kibana/kibana:8.6.1</span></span><br><span class=\"line\">  <span class=\"attr\">environment:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">SERVERNAME=kibana</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ELASTICSEARCH_HOSTS=https://es01:9200</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ELASTICSEARCH_USERNAME=kibana_system</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ELASTICSEARCH_PASSWORD=changeme</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">XPACK_REPORTING_ROLES_ENABLED=false</span></span><br></pre></td></tr></table></figure>\n\n<p>這樣設定之後，便可以使用 自訂角色與功能權限（如 <code>feature_reporting.generate</code>） 來細節控管使用者是否能夠產生報表。</p>\n<h2 id=\"測試流程與結果\"><a href=\"#測試流程與結果\" class=\"headerlink\" title=\"測試流程與結果\"></a>測試流程與結果</h2><p>本地 POC 測試流程如下：</p>\n<p>新增一個角色，並給予以下權限：</p>\n<ul>\n<li>Discover：all</li>\n<li>Dashboard：all</li>\n<li>Canvas：all</li>\n<li>Visualize：all</li>\n</ul>\n<p><img src=\"/artblog/kibana-reporting-export-csv/2025-05-14-232711.jpg\"></p>\n<p>新增使用者並套用該角色，登入後可以看到 Stack Management 出現。</p>\n<p><img src=\"/artblog/kibana-reporting-export-csv/2025-05-14-232919.jpg\"></p>\n<p>在 Discover 頁面，可以使用「Generate CSV」產生報表：</p>\n<p><img src=\"/artblog/kibana-reporting-export-csv/2025-05-14-233015.jpg\"></p>\n<p>進入 Stack Management &gt; Reporting，可看到剛剛產生的 CSV 報表，點右側 Icon 可下載：</p>\n<p><img src=\"/artblog/kibana-reporting-export-csv/2025-05-14-233114.jpg\"></p>\n"}]